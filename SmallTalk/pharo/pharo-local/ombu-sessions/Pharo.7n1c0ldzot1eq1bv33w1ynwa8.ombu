OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T07:58:39.567992+08:00' ],		#prior : OmReference [ 'Pharo.41b8c4ltfnjpaxmqkgsy9y2tn', '361' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'BaselineOfPetitParser2-JanKurs.13'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2017-12-12T07:58:39.712992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #BaselineOfPetitParser2,		#affectedPackageName : #BaselineOfPetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2017-12-12T07:58:39.715992+08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BaselineOf',				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfPetitParser2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'BaselineOfPetitParser2\''			},			#name : #BaselineOfPetitParser2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfPetitParser2 class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfPetitParser2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfPetitParser2,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfPetitParser2,			#package : #BaselineOfPetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2017-12-12T07:58:40.398992+08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfPetitParser2,				#isMetaSide : false			},			#name : #'baseline:',			#protocol : #baselines,			#sourceCode : 'baseline: spec\r\t<baseline>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec description: \'PetitParser2\'.\r\t\tspec repository: \'github://kursjan/petitparser2:master\'.\r\t\tspec \r\t\t\tpackage: \'PetitParser2\';\r\t\t\tpackage: \'PetitParser2-Tests\' with: [ spec requires: #(\'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-Backtracking\' with: [ spec requires: #(\'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-Backtracking-Tests\' with: [ spec requires: #(\'PetitParser2-Validation\' \'PetitParser2-Tests\') ];\r\t\t\tpackage: \'PetitParser2-Validation\' with: [ spec requires: #(\'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-Validation-Tests\' with: [ spec requires: #(\'PetitParser2-Validation\' \'PetitParser2-Tests\') ];\r\t\t\tpackage: \'PetitParser2-Tutorial\' with: [ spec requires: #(\'PetitParser2\' \'PetitParser2-Validation\') ];\r\t\t\tpackage: \'PetitParser2-Benchmarks\' with: [ spec requires: #(\'PetitParser2\' \'PetitParser2-Validation\') ];\r\t\t\tpackage: \'PetitParser2-Smalltalk\' with: [ spec requires: #(\'PetitParser2\' \'PetitParser2-Benchmarks\') ];\r\t\t\tpackage: \'PetitParser2-Smalltalk-Tests\' with: [ spec requires: #(\'PetitParser2-Smalltalk\' \'PetitParser2-Tests\') ];\r\t\t\tpackage: \'PetitParser2-Html\' with: [ spec requires: #(\'PetitParser2\' \'PetitParser2-Benchmarks\') ];\r\t\t\tpackage: \'PetitParser2-Html-Tests\' with: [ spec requires: #(\'PetitParser2-Html\' \'PetitParser2-Tests\') ];\r\t\t\tpackage: \'PetitParser2-CSV\' with: [ spec requires: #(\'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-JSON\' with: [ spec requires: #(\'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-MSE\' with: [ spec requires: #(\'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-ManifestMf\' with: [spec requires: #(\'PetitParser2\') ].\r\r\t\tspec baseline: \'SmaCC\' with: [ \r\t\t\tspec\r\t\t\t\trepository: \'github://ThierryGoubier/SmaCC\';\r\t\t\t\tloads: \'Rewrite\' ].\r\r\t\tspec project: \'Glamour\' with: [\r\t\t\tspec\r\t\t\t\tversionString: #\'development\';\r\t\t\t\tclassName: \'ConfigurationOfGlamour\';\r\t\t\t\trepository: \'http://www.smalltalkhub.com/mc/Moose/Glamour/main\' ].\r\t\t\t\r\t\tspec project: \'Roassal2\' with: [\r\t\t\t\tspec\r\t\t\t\t\tversionString: #\'development\';\r\t\t\t\t\tclassName: #ConfigurationOfRoassal2;\r\t\t\t\t\trepository: \'http://www.smalltalkhub.com/mc/ObjectProfile/Roassal2/main\' ].\r\t\t\t\t\r\t\tspec project: \'GToolkit\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfGToolkit;\r\t\t\t\t\tversionString: #\'development\';\r\t\t\t\t\trepository: \'http://www.smalltalkhub.com/mc/Moose/GToolkit/main\' ].\r\r\t\tspec \r\t\t\tpackage: \'PetitParser2-GUI\' with: [ spec requires: #(\'Glamour\' \'Roassal2\' \'PetitParser2\') ];\r\t\t\tpackage: \'PetitParser2-GUI-Tests\' with: [ spec requires: #(\'PetitParser2-GUI\') ];\r\t\t\tpackage: \'PetitParser2-Benchmarks-GUI\' with: [ spec requires: #(\'PetitParser2-Benchmarks\') ].\r\t\t\t\r\t\tspec\r\t\t\tpackage: \'PetitParser2-RewriteEngine\' with: [ spec requires: #(\'PetitParser2\' \'SmaCC\') ];\r\t\t\tpackage: \'PetitParser2-RewriteEngine-Tests\' with: [ spec requires: #(\'PetitParser2-RewriteEngine\' \'PetitParser2-Tests\') ].\r\t\t\t\r\t\tspec group: \'default\' with: #(\'UI\').\r\t\tspec group: \'Headless\' with: #(\t\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Tests\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Smalltalk\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Smalltalk-Tests\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Html\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Html-Tests\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Tutorial\'\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Validation\'\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Validation-Tests\'\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Benchmarks\'\r\t\t\t\t\t\t\t\t\t\t\t).\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\tspec group: \'UI\' with: #( \r\t\t\t\t\t\t\t\t\t\t\t\'Headless\'\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-GUI\').\r\t\r\t\tspec group: \'Tests\' with: #(\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Tests\'\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Smalltalk-Tests\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Html-Tests\' \r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-Validation-Tests\').\r\t\t\r\t\tspec group: \'RewriteEngine\' with: #(\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-RewriteEngine\'\r\t\t\t\t\t\t\t\t\t\t\t\'PetitParser2-RewriteEngine-Tests\').\r\t]',			#stamp : 'JanKurs 9/10/2017 20:44',			#package : #BaselineOfPetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T07:58:42.440992+08:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-JanKurs.14'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2017-12-12T07:58:42.650992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Optimizations,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2017-12-12T07:58:42.653992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AnalysisCache\r\tuses: {}\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #TPP2AnalysisCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AnalysisCache classTrait\r\tuses: {}'				},				#name : #'TPP2AnalysisCache classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AnalysisCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Optimizations,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2017-12-12T07:58:42.664992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Core,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2017-12-12T07:58:42.666992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Context\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Context,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Context classTrait\r\tuses: {}'				},				#name : #'TPP2Context classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Context,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2017-12-12T07:58:42.674992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Debuggable\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Debuggable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Debuggable classTrait\r\tuses: {}'				},				#name : #'TPP2Debuggable classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Debuggable,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2017-12-12T07:58:42.681992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Globals\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Globals,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Globals classTrait\r\tuses: {}'				},				#name : #'TPP2Globals classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Globals,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2017-12-12T07:58:42.688992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Strategies,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2017-12-12T07:58:42.689992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2NullProfiling\r\tuses: {}\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #TPP2NullProfiling,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2NullProfiling classTrait\r\tuses: {}'				},				#name : #'TPP2NullProfiling classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2NullProfiling,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Strategies,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2017-12-12T07:58:42.696992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Properties\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Properties,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Properties classTrait\r\tuses: {}'				},				#name : #'TPP2Properties classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Properties,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2017-12-12T07:58:42.703992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Recording,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2017-12-12T07:58:42.704992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2RecordingCache\r\tuses: {}\r\tcategory: \'PetitParser2-Recording\''			},			#name : #TPP2RecordingCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2RecordingCache classTrait\r\tuses: {}'				},				#name : #'TPP2RecordingCache classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2RecordingCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Recording,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2017-12-12T07:58:42.740992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'StandardWindow',				#traitCompositionSource : '{}',				#definitionSource : 'StandardWindow subclass: #PP2ReadKeysExample\r\tinstanceVariableNames: \'textArea keyMorph stream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2ReadKeysExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysExample,						#isMetaSide : false					},					#name : #textArea,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysExample,						#isMetaSide : false					},					#name : #keyMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysExample,						#isMetaSide : false					},					#name : #stream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReadKeysExample class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReadKeysExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReadKeysExample,					#isMetaSide : false				},				#parent : @8,				#content : 'Parses a keyboard input stream. The parser is very simple: it detect occurences of \'petit\' in the input stream and shows a notifiaction. Start with:\r\rPP2ReadKeysExample example\r\rNote that we do not store stream of keyboard characters and do not re-parser on every keystroke. We just read stream and proceed as the characters come.',				#stamp : 'JanKurs 7/2/2017 20:57'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Parses a keyboard input stream. The parser is very simple: it detect occurences of \'petit\' in the input stream and shows a notifiaction. Start with:\r\rPP2ReadKeysExample example\r\rNote that we do not store stream of keyboard characters and do not re-parser on every keystroke. We just read stream and proceed as the characters come.',		#newStamp : 'JanKurs 7/2/2017 20:57'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2017-12-12T07:58:42.742992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Examples,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2017-12-12T07:58:42.744992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'StandardWindow',				#traitCompositionSource : '{}',				#definitionSource : 'StandardWindow subclass: #PP2ReadKeysExample\r\tinstanceVariableNames: \'textArea keyMorph stream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Examples\''			},			#name : #PP2ReadKeysExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysExample,						#isMetaSide : false					},					#name : #textArea,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysExample,						#isMetaSide : false					},					#name : #keyMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysExample,						#isMetaSide : false					},					#name : #stream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReadKeysExample class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReadKeysExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReadKeysExample,					#isMetaSide : false				},				#parent : @8,				#content : 'Parses a keyboard input stream. The parser is very simple: it detect occurences of \'petit\' in the input stream and shows a notifiaction. Start with:\r\rPP2ReadKeysExample example\r\rNote that we do not store stream of keyboard characters and do not re-parser on every keystroke. We just read stream and proceed as the characters come.',				#stamp : 'JanKurs 7/2/2017 20:57'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Examples,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2017-12-12T07:58:42.770992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ManifestPetitParser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParser class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParser,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2017-12-12T07:58:42.771992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2017-12-12T07:58:42.772992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2\''			},			#name : #ManifestPetitParser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParser class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParser,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2017-12-12T07:58:42.798992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #PP2ReadKeysMorph\r\tinstanceVariableNames: \'keyStream parser outputStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2ReadKeysMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysMorph,						#isMetaSide : false					},					#name : #keyStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysMorph,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysMorph,						#isMetaSide : false					},					#name : #outputStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReadKeysMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReadKeysMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReadKeysMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'Open me, try typing and check the transcript. I will be happy when you enter \'petit\'.\r\rThis is a demonstration of PP2AsyncStream and capabilities of PP2 to work on streams that are not completely in memory.',				#stamp : 'JanKurs 10/11/2016 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Open me, try typing and check the transcript. I will be happy when you enter \'petit\'.\r\rThis is a demonstration of PP2AsyncStream and capabilities of PP2 to work on streams that are not completely in memory.',		#newStamp : 'JanKurs 10/11/2016 11:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2017-12-12T07:58:42.800992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #PP2ReadKeysMorph\r\tinstanceVariableNames: \'keyStream parser outputStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Examples\''			},			#name : #PP2ReadKeysMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysMorph,						#isMetaSide : false					},					#name : #keyStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysMorph,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReadKeysMorph,						#isMetaSide : false					},					#name : #outputStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReadKeysMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReadKeysMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReadKeysMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'Open me, try typing and check the transcript. I will be happy when you enter \'petit\'.\r\rThis is a demonstration of PP2AsyncStream and capabilities of PP2 to work on streams that are not completely in memory.',				#stamp : 'JanKurs 10/11/2016 11:29'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Examples,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2017-12-12T07:58:42.828992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ReadStream',				#traitCompositionSource : '{}',				#definitionSource : 'ReadStream subclass: #PP2InMemoryContext\r\tinstanceVariableNames: \'parser properties globals returnValue startMemento\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2InMemoryContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #globals,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #returnValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #startMemento,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InMemoryContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InMemoryContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InMemoryContext,					#isMetaSide : false				},				#parent : @8,				#content : 'Optimized version of PP2Context. When input fits into the memory, PP2InMemoryContext can be used, providing slightly better perfomance.',				#stamp : 'JanKurs 10/9/2016 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Optimized version of PP2Context. When input fits into the memory, PP2InMemoryContext can be used, providing slightly better perfomance.',		#newStamp : 'JanKurs 10/9/2016 12:39'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2017-12-12T07:58:42.830992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ReadStream',				#traitCompositionSource : '{}',				#definitionSource : 'ReadStream subclass: #PP2InMemoryContext\r\tinstanceVariableNames: \'parser properties globals returnValue startMemento\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2InMemoryContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #globals,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #returnValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InMemoryContext,						#isMetaSide : false					},					#name : #startMemento,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InMemoryContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InMemoryContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InMemoryContext,					#isMetaSide : false				},				#parent : @8,				#content : 'Optimized version of PP2Context. When input fits into the memory, PP2InMemoryContext can be used, providing slightly better perfomance.',				#stamp : 'JanKurs 10/9/2016 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2017-12-12T07:58:42.837992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2InMemoryContext',				#traitCompositionSource : '{}',				#definitionSource : 'PP2InMemoryContext subclass: #PP2RecordingContext\r\tinstanceVariableNames: \'totalSize eventsTrace furthestPosition\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingContext,						#isMetaSide : false					},					#name : #totalSize,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingContext,						#isMetaSide : false					},					#name : #eventsTrace,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingContext,						#isMetaSide : false					},					#name : #furthestPosition,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingContext,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2017-12-12T07:58:42.842992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Reparsing,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2017-12-12T07:58:42.845992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2InMemoryContext',				#traitCompositionSource : '{}',				#definitionSource : 'PP2InMemoryContext subclass: #PP2ReparsableContext\r\tinstanceVariableNames: \'furthestPosition\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Reparsing\''			},			#name : #PP2ReparsableContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableContext,						#isMetaSide : false					},					#name : #furthestPosition,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparsableContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparsableContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparsableContext,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Reparsing,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2017-12-12T07:58:42.865992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #PP2ReparseException\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2ReparseException,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparseException class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparseException class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparseException,					#isMetaSide : false				},				#parent : @8,				#content : 'Raised when reparse fails, for some reason',				#stamp : 'JanKurs 10/9/2016 12:36'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Raised when reparse fails, for some reason',		#newStamp : 'JanKurs 10/9/2016 12:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2017-12-12T07:58:42.867992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #PP2ReparseException\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2ReparseException,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparseException class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparseException class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparseException,					#isMetaSide : false				},				#parent : @8,				#content : 'Raised when reparse fails, for some reason',				#stamp : 'JanKurs 10/9/2016 12:36'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2017-12-12T07:58:42.887992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #PP2CharacterStream\r\tinstanceVariableNames: \'stream encoder\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2CharacterStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CharacterStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CharacterStream,						#isMetaSide : false					},					#name : #encoder,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CharacterStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CharacterStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CharacterStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an adapter from stream of bytes (stream instance varaible) to stream of characters. I use encoder (instance variable) to translate these bytes into characters.',				#stamp : 'JanKurs 11/27/2016 17:36'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am an adapter from stream of bytes (stream instance varaible) to stream of characters. I use encoder (instance variable) to translate these bytes into characters.',		#newStamp : 'JanKurs 11/27/2016 17:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2017-12-12T07:58:42.888992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Streams,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2017-12-12T07:58:42.889992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #PP2CharacterStream\r\tinstanceVariableNames: \'stream encoder\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Streams\''			},			#name : #PP2CharacterStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CharacterStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CharacterStream,						#isMetaSide : false					},					#name : #encoder,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CharacterStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CharacterStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CharacterStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an adapter from stream of bytes (stream instance varaible) to stream of characters. I use encoder (instance variable) to translate these bytes into characters.',				#stamp : 'JanKurs 11/27/2016 17:36'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Streams,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2017-12-12T07:58:42.893992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2AbstractStrategy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2AbstractStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AbstractStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AbstractStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AbstractStrategy,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2017-12-12T07:58:42.915992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractStrategy subclass: #PP2NilStrategy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2NilStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NilStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NilStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NilStrategy,					#isMetaSide : false				},				#parent : @8,				#content : 'Null-object pattern for the PP2Strategy',				#stamp : 'JanKurs 9/3/2017 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Null-object pattern for the PP2Strategy',		#newStamp : 'JanKurs 9/3/2017 16:34'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2017-12-12T07:58:42.917992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractStrategy subclass: #PP2NilStrategy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2NilStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NilStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NilStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NilStrategy,					#isMetaSide : false				},				#parent : @8,				#content : 'Null-object pattern for the PP2Strategy',				#stamp : 'JanKurs 9/3/2017 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2017-12-12T07:58:42.928992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractStrategy subclass: #PP2Strategy\r\tinstanceVariableNames: \'node\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Strategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Strategy,						#isMetaSide : false					},					#name : #node,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Strategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Strategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Strategy,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2017-12-12T07:58:42.932992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Action\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Action,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Action class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Action class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Action,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2017-12-12T07:58:42.938992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Adaptable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Adaptable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Adaptable class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Adaptable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Adaptable,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2017-12-12T07:58:42.941992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2And\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2And,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2And class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2And class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2And,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2017-12-12T07:58:42.947992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2And',				#traitCompositionSource : '{}',				#definitionSource : 'PP2And subclass: #PP2AndLiteralObject\r\tinstanceVariableNames: \'literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2AndLiteralObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AndLiteralObject,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AndLiteralObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AndLiteralObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AndLiteralObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2017-12-12T07:58:42.952992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2And',				#traitCompositionSource : '{}',				#definitionSource : 'PP2And subclass: #PP2AndPredicateObject\r\tinstanceVariableNames: \'predicate literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2AndPredicateObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AndPredicateObject,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AndPredicateObject,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AndPredicateObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AndPredicateObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AndPredicateObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2017-12-12T07:58:42.955992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Choice\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Choice,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Choice class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Choice class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Choice,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2017-12-12T07:58:42.960992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2CreateToken\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2CreateToken,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CreateToken class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CreateToken class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CreateToken,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2017-12-12T07:58:42.964992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Delegate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Delegate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Delegate class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Delegate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Delegate,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2017-12-12T07:58:42.967992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2End\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2End,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2End class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2End class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2End,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2017-12-12T07:58:42.973992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2EndOfInput\r\tinstanceVariableNames: \'failure\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2EndOfInput,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EndOfInput,						#isMetaSide : false					},					#name : #failure,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EndOfInput class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2EndOfInput class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EndOfInput,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2017-12-12T07:58:42.977992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Epsilon\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Epsilon,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Epsilon class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Epsilon class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Epsilon,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2017-12-12T07:58:42.981992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Failing\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Failing,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Failing class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Failing class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Failing,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2017-12-12T07:58:42.985992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Flatten\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Flatten,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Flatten class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Flatten class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Flatten,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2017-12-12T07:58:42.989992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Fragment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Fragment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Fragment class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Fragment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Fragment,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2017-12-12T07:58:42.994992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2LiteralObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2LiteralObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2LiteralObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2LiteralObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2LiteralObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2017-12-12T07:58:43.000992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2LiteralSequence\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2LiteralSequence,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2LiteralSequence class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2LiteralSequence class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2LiteralSequence,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2017-12-12T07:58:43.004992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Mapping\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Mapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Mapping class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Mapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Mapping,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2017-12-12T07:58:43.009992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Mapping',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Mapping subclass: #PP2MappingOfThree\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2MappingOfThree,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MappingOfThree class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MappingOfThree class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MappingOfThree,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2017-12-12T07:58:43.012992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Mapping',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Mapping subclass: #PP2MappingOfTwo\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2MappingOfTwo,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MappingOfTwo class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MappingOfTwo class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MappingOfTwo,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2017-12-12T07:58:43.016992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Context,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2017-12-12T07:58:43.018992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Match\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2Match,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Match class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Match class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Match,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2017-12-12T07:58:43.021992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2NewLine\r\tinstanceVariableNames: \'failure\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2NewLine,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NewLine,						#isMetaSide : false					},					#name : #failure,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NewLine class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NewLine class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NewLine,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2017-12-12T07:58:43.026992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2NonEpsilon\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2NonEpsilon,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NonEpsilon class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NonEpsilon class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NonEpsilon,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2017-12-12T07:58:43.030992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Not\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Not,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Not class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Not class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Not,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2017-12-12T07:58:43.034992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Not',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Not subclass: #PP2NotLiteralObject\r\tinstanceVariableNames: \'literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2NotLiteralObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NotLiteralObject,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NotLiteralObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NotLiteralObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NotLiteralObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2017-12-12T07:58:43.038992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Not',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Not subclass: #PP2NotPredicateObject\r\tinstanceVariableNames: \'predicate literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2NotPredicateObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NotPredicateObject,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NotPredicateObject,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NotPredicateObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NotPredicateObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NotPredicateObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2017-12-12T07:58:43.042992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Optional\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Optional,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Optional class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Optional class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Optional,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2017-12-12T07:58:43.046992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Optional',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Optional subclass: #PP2OptionalLiteralObject\r\tinstanceVariableNames: \'character\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2OptionalLiteralObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2OptionalLiteralObject,						#isMetaSide : false					},					#name : #character,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2OptionalLiteralObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2OptionalLiteralObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2OptionalLiteralObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2017-12-12T07:58:43.050992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Pluggable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Pluggable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Pluggable class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Pluggable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Pluggable,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2017-12-12T07:58:43.055992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Pop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2Pop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Pop class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Pop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Pop,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2017-12-12T07:58:43.060992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2PossesiveRepeating\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2PossesiveRepeating,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PossesiveRepeating class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PossesiveRepeating class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PossesiveRepeating,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2017-12-12T07:58:43.064992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PossesiveRepeating',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PossesiveRepeating subclass: #PP2Plus\r\tinstanceVariableNames: \'child\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Plus,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Plus,						#isMetaSide : false					},					#name : #child,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Plus class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Plus class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Plus,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2017-12-12T07:58:43.067992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PossesiveRepeating',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PossesiveRepeating subclass: #PP2PlusPredicateObject\r\tinstanceVariableNames: \'predicate failure\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2PlusPredicateObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PlusPredicateObject,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PlusPredicateObject,						#isMetaSide : false					},					#name : #failure,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PlusPredicateObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PlusPredicateObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PlusPredicateObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2017-12-12T07:58:43.071992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PossesiveRepeating',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PossesiveRepeating subclass: #PP2PlusRecognizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2PlusRecognizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PlusRecognizer class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PlusRecognizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PlusRecognizer,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2017-12-12T07:58:43.075992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PossesiveRepeating',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PossesiveRepeating subclass: #PP2Star\r\tinstanceVariableNames: \'child\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Star,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Star,						#isMetaSide : false					},					#name : #child,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Star class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Star class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Star,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2017-12-12T07:58:43.081992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PossesiveRepeating',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PossesiveRepeating subclass: #PP2StarPredicateObject\r\tinstanceVariableNames: \'predicate\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2StarPredicateObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2StarPredicateObject,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StarPredicateObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StarPredicateObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StarPredicateObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2017-12-12T07:58:43.085992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PossesiveRepeating',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PossesiveRepeating subclass: #PP2StarPredicateObjectRecognizer\r\tinstanceVariableNames: \'predicate\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2StarPredicateObjectRecognizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2StarPredicateObjectRecognizer,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StarPredicateObjectRecognizer class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StarPredicateObjectRecognizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StarPredicateObjectRecognizer,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2017-12-12T07:58:43.089992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2PredicateObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2PredicateObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2017-12-12T07:58:43.092992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2PredicateObjectRecognizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2PredicateObjectRecognizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateObjectRecognizer class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateObjectRecognizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateObjectRecognizer,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2017-12-12T07:58:43.096992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2PredicateSequence\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2PredicateSequence,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateSequence class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateSequence class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateSequence,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2017-12-12T07:58:43.100992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Push\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2Push,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Push class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Push class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Push,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2017-12-12T07:58:43.105992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Sea\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Sea,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Sea class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Sea class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Sea,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2017-12-12T07:58:43.110992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Sequence\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Sequence,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Sequence class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Sequence class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Sequence,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2017-12-12T07:58:43.113992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Sequence',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Sequence subclass: #PP2SequenceOfThree\r\tinstanceVariableNames: \'firstChild secondChild thirdChild\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2SequenceOfThree,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfThree,						#isMetaSide : false					},					#name : #firstChild,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfThree,						#isMetaSide : false					},					#name : #secondChild,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfThree,						#isMetaSide : false					},					#name : #thirdChild,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SequenceOfThree class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SequenceOfThree class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SequenceOfThree,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2017-12-12T07:58:43.118992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Sequence',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Sequence subclass: #PP2SequenceOfTwo\r\tinstanceVariableNames: \'firstChild secondChild\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2SequenceOfTwo,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfTwo,						#isMetaSide : false					},					#name : #firstChild,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfTwo,						#isMetaSide : false					},					#name : #secondChild,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SequenceOfTwo class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SequenceOfTwo class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SequenceOfTwo,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2017-12-12T07:58:43.121992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Sequence',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Sequence subclass: #PP2SequenceOfTwoRecognizer\r\tinstanceVariableNames: \'firstChild secondChild\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2SequenceOfTwoRecognizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfTwoRecognizer,						#isMetaSide : false					},					#name : #firstChild,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SequenceOfTwoRecognizer,						#isMetaSide : false					},					#name : #secondChild,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SequenceOfTwoRecognizer class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SequenceOfTwoRecognizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SequenceOfTwoRecognizer,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2017-12-12T07:58:43.126992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2StarLazy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2StarLazy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StarLazy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StarLazy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StarLazy,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2017-12-12T07:58:43.132992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2StarLazy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2StarLazy subclass: #PP2AnyStarLazyLiteralObject\r\tinstanceVariableNames: \'literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2AnyStarLazyLiteralObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AnyStarLazyLiteralObject,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AnyStarLazyLiteralObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AnyStarLazyLiteralObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AnyStarLazyLiteralObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2017-12-12T07:58:43.136992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2StarLazy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2StarLazy subclass: #PP2AnyStarLazyPredicateObject\r\tinstanceVariableNames: \'predicate\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2AnyStarLazyPredicateObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AnyStarLazyPredicateObject,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AnyStarLazyPredicateObject class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AnyStarLazyPredicateObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AnyStarLazyPredicateObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2017-12-12T07:58:43.140992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2StartOfLine\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2StartOfLine,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StartOfLine class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StartOfLine class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StartOfLine,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2017-12-12T07:58:43.144992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Trimming\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Trimming,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Trimming class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Trimming class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Trimming,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2017-12-12T07:58:43.148992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2TrimmingToken\r\tinstanceVariableNames: \'tokenClass trimmer tokenChild\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2TrimmingToken,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingToken,						#isMetaSide : false					},					#name : #tokenClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingToken,						#isMetaSide : false					},					#name : #trimmer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingToken,						#isMetaSide : false					},					#name : #tokenChild,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TrimmingToken class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TrimmingToken class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TrimmingToken,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2017-12-12T07:58:43.153992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2TrimmingToken',				#traitCompositionSource : '{}',				#definitionSource : 'PP2TrimmingToken subclass: #PP2TrimmingLiteralObjectToken\r\tinstanceVariableNames: \'literal failure\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2TrimmingLiteralObjectToken,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingLiteralObjectToken,						#isMetaSide : false					},					#name : #literal,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingLiteralObjectToken,						#isMetaSide : false					},					#name : #failure,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TrimmingLiteralObjectToken class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TrimmingLiteralObjectToken class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TrimmingLiteralObjectToken,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2017-12-12T07:58:43.157992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Water\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Water,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Water class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Water class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Water,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2017-12-12T07:58:43.161992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2Wrapping\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Wrapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Wrapping class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Wrapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Wrapping,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2017-12-12T07:58:43.249992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractStrategy subclass: #PP2WrappingStrategy\r\tinstanceVariableNames: \'strategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2WrappingStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WrappingStrategy,						#isMetaSide : false					},					#name : #strategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WrappingStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WrappingStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WrappingStrategy,					#isMetaSide : false				},				#parent : @8,				#content : 'Strategy that can be used as a decorator around another strategy.',				#stamp : 'JanKurs 8/20/2017 17:31'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Strategy that can be used as a decorator around another strategy.',		#newStamp : 'JanKurs 8/20/2017 17:31'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2017-12-12T07:58:43.250992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractStrategy subclass: #PP2WrappingStrategy\r\tinstanceVariableNames: \'strategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2WrappingStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WrappingStrategy,						#isMetaSide : false					},					#name : #strategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WrappingStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WrappingStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WrappingStrategy,					#isMetaSide : false				},				#parent : @8,				#content : 'Strategy that can be used as a decorator around another strategy.',				#stamp : 'JanKurs 8/20/2017 17:31'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2017-12-12T07:58:43.256992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2Cache\r\tinstanceVariableNames: \'position retval endPosition\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Cache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Cache,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Cache,						#isMetaSide : false					},					#name : #retval,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Cache,						#isMetaSide : false					},					#name : #endPosition,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Cache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Cache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Cache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2017-12-12T07:58:43.261992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Cache',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Cache subclass: #PP2RecordingCache\r\tinstanceVariableNames: \'invocations hits\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingCache,						#isMetaSide : false					},					#name : #invocations,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingCache,						#isMetaSide : false					},					#name : #hits,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2017-12-12T07:58:43.264992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Debug,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2017-12-12T07:58:43.265992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2DebuggingStrategy\r\tinstanceVariableNames: \'resultCache\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Debug\''			},			#name : #PP2DebuggingStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebuggingStrategy,						#isMetaSide : false					},					#name : #resultCache,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DebuggingStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DebuggingStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DebuggingStrategy,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Debug,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2017-12-12T07:58:43.308992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DebuggingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DebuggingStrategy subclass: #PP2RecordingDebuggingStrategy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2RecordingDebuggingStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingDebuggingStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingDebuggingStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingDebuggingStrategy,					#isMetaSide : false				},				#parent : @8,				#content : 'todo: Refactor to two strategies:\r- profiling\r- debugging',				#stamp : 'JanKurs 11/19/2016 16:53'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'todo: Refactor to two strategies:\r- profiling\r- debugging',		#newStamp : 'JanKurs 11/19/2016 16:53'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2017-12-12T07:58:43.309992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DebuggingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DebuggingStrategy subclass: #PP2RecordingDebuggingStrategy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingDebuggingStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingDebuggingStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingDebuggingStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingDebuggingStrategy,					#isMetaSide : false				},				#parent : @8,				#content : 'todo: Refactor to two strategies:\r- profiling\r- debugging',				#stamp : 'JanKurs 11/19/2016 16:53'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2017-12-12T07:58:43.314992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2MemoizedSea\r\tinstanceVariableNames: \'buffer memoizationStrategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2MemoizedSea,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MemoizedSea,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MemoizedSea,						#isMetaSide : false					},					#name : #memoizationStrategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MemoizedSea class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MemoizedSea class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MemoizedSea,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2017-12-12T07:58:43.319992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2MemoizedSea',				#traitCompositionSource : '{}',				#definitionSource : 'PP2MemoizedSea subclass: #PP2RecordingMemoizedSea\r\tinstanceVariableNames: \'invocations hits\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingMemoizedSea,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingMemoizedSea,						#isMetaSide : false					},					#name : #invocations,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingMemoizedSea,						#isMetaSide : false					},					#name : #hits,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingMemoizedSea class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingMemoizedSea class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingMemoizedSea,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2017-12-12T07:58:43.325992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2Packrat\r\tinstanceVariableNames: \'buffer memoizationStrategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2Packrat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Packrat,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Packrat,						#isMetaSide : false					},					#name : #memoizationStrategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Packrat class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Packrat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Packrat,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2017-12-12T07:58:43.330992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Packrat',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Packrat subclass: #PP2RecordingPackrat\r\tinstanceVariableNames: \'invocations hits\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingPackrat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingPackrat,						#isMetaSide : false					},					#name : #invocations,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingPackrat,						#isMetaSide : false					},					#name : #hits,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingPackrat class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingPackrat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingPackrat,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2017-12-12T07:58:43.335992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2ParsingGuard\r\tinstanceVariableNames: \'classification retval\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2ParsingGuard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParsingGuard,						#isMetaSide : false					},					#name : #classification,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParsingGuard,						#isMetaSide : false					},					#name : #retval,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ParsingGuard class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ParsingGuard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ParsingGuard,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2017-12-12T07:58:43.341992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2RecordingStrategy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingStrategy,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2017-12-12T07:58:43.345992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2Reparsable\r\tinstanceVariableNames: \'buffer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Reparsing\''			},			#name : #PP2Reparsable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Reparsable,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Reparsable class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Reparsable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Reparsable,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Reparsing,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2017-12-12T07:58:43.349992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WrappingStrategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WrappingStrategy subclass: #PP2TrimmingCache\r\tinstanceVariableNames: \'failure lastTrimming\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #PP2TrimmingCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingCache,						#isMetaSide : false					},					#name : #failure,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingCache,						#isMetaSide : false					},					#name : #lastTrimming,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TrimmingCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TrimmingCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TrimmingCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Strategies,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2017-12-12T07:58:43.353992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2TrimmingCache',				#traitCompositionSource : '{}',				#definitionSource : 'PP2TrimmingCache subclass: #PP2RecordingTrimmingCache\r\tinstanceVariableNames: \'invocations hits\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2RecordingTrimmingCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingTrimmingCache,						#isMetaSide : false					},					#name : #invocations,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecordingTrimmingCache,						#isMetaSide : false					},					#name : #hits,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingTrimmingCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingTrimmingCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingTrimmingCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2017-12-12T07:58:43.440992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2AsyncStream\r\tinstanceVariableNames: \'queue closed\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2AsyncStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AsyncStream,						#isMetaSide : false					},					#name : #queue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AsyncStream,						#isMetaSide : false					},					#name : #closed,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AsyncStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AsyncStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AsyncStream,					#isMetaSide : false				},				#parent : @8,				#content : 'TODO: Find a better name for this.\r\rI represent a stream which is filled by some other input that comes  asynchronously.\r\rE.g. keyboard  keyboard source can queue the characters that can be read by parser.',				#stamp : 'JanKurs 11/27/2016 17:17'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'TODO: Find a better name for this.\r\rI represent a stream which is filled by some other input that comes  asynchronously.\r\rE.g. keyboard  keyboard source can queue the characters that can be read by parser.',		#newStamp : 'JanKurs 11/27/2016 17:17'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2017-12-12T07:58:43.442992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2AsyncStream\r\tinstanceVariableNames: \'queue closed\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Streams\''			},			#name : #PP2AsyncStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AsyncStream,						#isMetaSide : false					},					#name : #queue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AsyncStream,						#isMetaSide : false					},					#name : #closed,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AsyncStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AsyncStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AsyncStream,					#isMetaSide : false				},				#parent : @8,				#content : 'TODO: Find a better name for this.\r\rI represent a stream which is filled by some other input that comes  asynchronously.\r\rE.g. keyboard  keyboard source can queue the characters that can be read by parser.',				#stamp : 'JanKurs 11/27/2016 17:17'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Streams,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2017-12-12T07:58:43.471992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2BufferStream\r\tinstanceVariableNames: \'stream buffer bufferSize position\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2BufferStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #bufferSize,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #position,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BufferStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BufferStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BufferStream,					#isMetaSide : false				},				#parent : @8,				#content : 'Suppose very minimal stream with the following interface:\r- atEnd\r- next\r\rI can adapt this stream and provide the PP2SStream interface thanks to the buffer.\r\rNote: I index everything from 0 and not from 1. The reason being the modulo arithmetics that works better when indexed from 0.',				#stamp : 'JanKurs 9/3/2016 12:08'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Suppose very minimal stream with the following interface:\r- atEnd\r- next\r\rI can adapt this stream and provide the PP2SStream interface thanks to the buffer.\r\rNote: I index everything from 0 and not from 1. The reason being the modulo arithmetics that works better when indexed from 0.',		#newStamp : 'JanKurs 9/3/2016 12:08'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2017-12-12T07:58:43.473992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2BufferStream\r\tinstanceVariableNames: \'stream buffer bufferSize position\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Streams\''			},			#name : #PP2BufferStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #bufferSize,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStream,						#isMetaSide : false					},					#name : #position,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BufferStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BufferStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BufferStream,					#isMetaSide : false				},				#parent : @8,				#content : 'Suppose very minimal stream with the following interface:\r- atEnd\r- next\r\rI can adapt this stream and provide the PP2SStream interface thanks to the buffer.\r\rNote: I index everything from 0 and not from 1. The reason being the modulo arithmetics that works better when indexed from 0.',				#stamp : 'JanKurs 9/3/2016 12:08'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Streams,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2017-12-12T07:58:43.477992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Analysis,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2017-12-12T07:58:43.479992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2CcResult\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2CcResult,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CcResult class\r\tinstanceVariableNames: \'Instance\''				},				#name : #'PP2CcResult class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2CcResult class',							#isMetaSide : true						},						#name : #Instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CcResult,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2017-12-12T07:58:43.482992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CcResult',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CcResult subclass: #PP2CcChange\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2CcChange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CcChange class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CcChange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CcChange,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2017-12-12T07:58:43.486992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CcResult',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CcResult subclass: #PP2CcDoesNotChange\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2CcDoesNotChange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CcDoesNotChange class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CcDoesNotChange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CcDoesNotChange,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2017-12-12T07:58:43.490992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CcResult',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CcResult subclass: #PP2CcPop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2CcPop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CcPop class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CcPop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CcPop,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2017-12-12T07:58:43.493992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CcResult',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CcResult subclass: #PP2CcPush\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2CcPush,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CcPush class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CcPush class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CcPush,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2017-12-12T07:58:43.498992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tools,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2017-12-12T07:58:43.500992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2CharSetPredicate\r\tinstanceVariableNames: \'block classification\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tools\''			},			#name : #PP2CharSetPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CharSetPredicate,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CharSetPredicate,						#isMetaSide : false					},					#name : #classification,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CharSetPredicate class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CharSetPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CharSetPredicate,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tools,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2017-12-12T07:58:43.523992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Context\r\tinstanceVariableNames: \'stream position parser globals returnValue startMemento properties\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2Context,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #globals,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #returnValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #startMemento,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #properties,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Context class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Context class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Context,					#isMetaSide : false				},				#parent : @8,				#content : 'Expects a PP2Stream interface',				#stamp : 'JanKurs 9/3/2016 11:50'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Expects a PP2Stream interface',		#newStamp : 'JanKurs 9/3/2016 11:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2017-12-12T07:58:43.525992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Context\r\tinstanceVariableNames: \'stream position parser globals returnValue startMemento properties\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2Context,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #globals,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #returnValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #startMemento,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Context,						#isMetaSide : false					},					#name : #properties,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Context class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Context class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Context,					#isMetaSide : false				},				#parent : @8,				#content : 'Expects a PP2Stream interface',				#stamp : 'JanKurs 9/3/2016 11:50'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2017-12-12T07:58:43.531992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2ContextMemento\r\tinstanceVariableNames: \'stream position properties\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2ContextMemento,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextMemento,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextMemento,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextMemento,						#isMetaSide : false					},					#name : #properties,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextMemento class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextMemento class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextMemento,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2017-12-12T07:58:43.535992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2DebugResult\r\tinstanceVariableNames: \'parser result children parent start stop context allChildren furthestPosition invocationEntry\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Debug\''			},			#name : #PP2DebugResult,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #result,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #children,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #parent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #start,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #stop,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #allChildren,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #furthestPosition,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResult,						#isMetaSide : false					},					#name : #invocationEntry,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DebugResult class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DebugResult class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DebugResult,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Debug,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2017-12-12T07:58:43.540992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2DebugResultLink\r\tinstanceVariableNames: \'reference\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Debug\''			},			#name : #PP2DebugResultLink,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebugResultLink,						#isMetaSide : false					},					#name : #reference,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DebugResultLink class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DebugResultLink class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DebugResultLink,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Debug,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2017-12-12T07:58:43.544992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2EventRecord\r\tinstanceVariableNames: \'event position strategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2EventRecord,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventRecord,						#isMetaSide : false					},					#name : #event,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventRecord,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventRecord,						#isMetaSide : false					},					#name : #strategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EventRecord class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2EventRecord class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EventRecord,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2017-12-12T07:58:43.548992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2EventRecord',				#traitCompositionSource : '{}',				#definitionSource : 'PP2EventRecord subclass: #PP2InvocationRecord\r\tinstanceVariableNames: \'start stop debugResult\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2InvocationRecord,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InvocationRecord,						#isMetaSide : false					},					#name : #start,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InvocationRecord,						#isMetaSide : false					},					#name : #stop,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InvocationRecord,						#isMetaSide : false					},					#name : #debugResult,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InvocationRecord class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InvocationRecord class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InvocationRecord,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2017-12-12T07:58:43.553992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2EventsTrace\r\tinstanceVariableNames: \'entries fEntries colors selection\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Recording\''			},			#name : #PP2EventsTrace,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventsTrace,						#isMetaSide : false					},					#name : #entries,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventsTrace,						#isMetaSide : false					},					#name : #fEntries,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventsTrace,						#isMetaSide : false					},					#name : #colors,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2EventsTrace,						#isMetaSide : false					},					#name : #selection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EventsTrace class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2EventsTrace class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EventsTrace,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Recording,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2017-12-12T07:58:43.557992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Failure\r\tinstanceVariableNames: \'position message context debugResult parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2Failure,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Failure,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Failure,						#isMetaSide : false					},					#name : #message,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Failure,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Failure,						#isMetaSide : false					},					#name : #debugResult,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Failure,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Failure class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Failure class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Failure,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2017-12-12T07:58:43.560992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2InputChange\r\tinstanceVariableNames: \'position input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Reparsing\''			},			#name : #PP2InputChange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InputChange,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InputChange,						#isMetaSide : false					},					#name : #input,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InputChange class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InputChange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InputChange,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Reparsing,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2017-12-12T07:58:43.564992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2InputChange',				#traitCompositionSource : '{}',				#definitionSource : 'PP2InputChange subclass: #PP2DeleteCharacter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Reparsing\''			},			#name : #PP2DeleteCharacter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DeleteCharacter class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DeleteCharacter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DeleteCharacter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Reparsing,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2017-12-12T07:58:43.569992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2InputChange',				#traitCompositionSource : '{}',				#definitionSource : 'PP2InputChange subclass: #PP2InsertCharacter\r\tinstanceVariableNames: \'character\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Reparsing\''			},			#name : #PP2InsertCharacter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacter,						#isMetaSide : false					},					#name : #character,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InsertCharacter class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InsertCharacter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InsertCharacter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Reparsing,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2017-12-12T07:58:43.574992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Memento\r\tinstanceVariableNames: \'returnValue contextMemento furthestPosition\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2Memento,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Memento,						#isMetaSide : false					},					#name : #returnValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Memento,						#isMetaSide : false					},					#name : #contextMemento,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Memento,						#isMetaSide : false					},					#name : #furthestPosition,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Memento class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Memento class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Memento,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2017-12-12T07:58:43.578992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2MementoPromise\r\tinstanceVariableNames: \'buffer position contextMemento furthestPosition\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Reparsing\''			},			#name : #PP2MementoPromise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MementoPromise,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MementoPromise,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MementoPromise,						#isMetaSide : false					},					#name : #contextMemento,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MementoPromise,						#isMetaSide : false					},					#name : #furthestPosition,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MementoPromise class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MementoPromise class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MementoPromise,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Reparsing,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2017-12-12T07:58:43.582992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Memoization\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2Memoization,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Memoization class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Memoization class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Memoization,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2017-12-12T07:58:43.586992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Memoization',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Memoization subclass: #PP2CFMemoization\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2CFMemoization,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CFMemoization class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CFMemoization class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CFMemoization,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2017-12-12T07:58:43.589992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Memoization',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Memoization subclass: #PP2CSMemoization\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2CSMemoization,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CSMemoization class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CSMemoization class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CSMemoization,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2017-12-12T07:58:43.594992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Memoization',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Memoization subclass: #PP2PopMemoization\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2PopMemoization,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PopMemoization class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PopMemoization class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PopMemoization,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2017-12-12T07:58:43.600992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Memoization',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Memoization subclass: #PP2PushMemoization\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2PushMemoization,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PushMemoization class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PushMemoization class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PushMemoization,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2017-12-12T07:58:43.620992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Node\r\tinstanceVariableNames: \'properties strategy memoizationStrategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2Node,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Node,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Node,						#isMetaSide : false					},					#name : #strategy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Node,						#isMetaSide : false					},					#name : #memoizationStrategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Node class\r\tinstanceVariableNames: \'spaceTrimmer\''				},				#name : #'PP2Node class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2Node class',							#isMetaSide : true						},						#name : #spaceTrimmer,						#parent : @19					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Node,					#isMetaSide : false				},				#parent : @8,				#content : 'Base class for all the nodes of PP2',				#stamp : 'JanKurs 9/6/2016 13:58'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Base class for all the nodes of PP2',		#newStamp : 'JanKurs 9/6/2016 13:58'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2017-12-12T07:58:43.621992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Nodes,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2017-12-12T07:58:43.623992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Node\r\tinstanceVariableNames: \'properties strategy memoizationStrategy\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2Node,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Node,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Node,						#isMetaSide : false					},					#name : #strategy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Node,						#isMetaSide : false					},					#name : #memoizationStrategy,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Node class\r\tinstanceVariableNames: \'spaceTrimmer\''				},				#name : #'PP2Node class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2Node class',							#isMetaSide : true						},						#name : #spaceTrimmer,						#parent : @19					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Node,					#isMetaSide : false				},				#parent : @8,				#content : 'Base class for all the nodes of PP2',				#stamp : 'JanKurs 9/6/2016 13:58'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2017-12-12T07:58:43.648992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2AdaptableNode\r\tinstanceVariableNames: \'child\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2AdaptableNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableNode,						#isMetaSide : false					},					#name : #child,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Purpose of this node is to refer to a piece of grammar, that changes dynamically, during parsing. \r\rThe node is essential to run optimization analyses properly. If no optimizations are done, this node is completely useless.',				#stamp : 'JanKurs 9/6/2016 13:58'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Purpose of this node is to refer to a piece of grammar, that changes dynamically, during parsing. \r\rThe node is essential to run optimization analyses properly. If no optimizations are done, this node is completely useless.',		#newStamp : 'JanKurs 9/6/2016 13:58'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2017-12-12T07:58:43.650992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2AdaptableNode\r\tinstanceVariableNames: \'child\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2AdaptableNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableNode,						#isMetaSide : false					},					#name : #child,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Purpose of this node is to refer to a piece of grammar, that changes dynamically, during parsing. \r\rThe node is essential to run optimization analyses properly. If no optimizations are done, this node is completely useless.',				#stamp : 'JanKurs 9/6/2016 13:58'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2017-12-12T07:58:43.654992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2DelegateNode\r\tinstanceVariableNames: \'child\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2DelegateNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DelegateNode,						#isMetaSide : false					},					#name : #child,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DelegateNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DelegateNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DelegateNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2017-12-12T07:58:43.660992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2AbstractActionNode\r\tinstanceVariableNames: \'block\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2AbstractActionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AbstractActionNode,						#isMetaSide : false					},					#name : #block,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AbstractActionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AbstractActionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AbstractActionNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2017-12-12T07:58:43.664992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractActionNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractActionNode subclass: #PP2ActionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2ActionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ActionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ActionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ActionNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2017-12-12T07:58:43.667992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractActionNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractActionNode subclass: #PP2MappingNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2MappingNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MappingNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MappingNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MappingNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2017-12-12T07:58:43.671992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractActionNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractActionNode subclass: #PP2WrappingNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2WrappingNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WrappingNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WrappingNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WrappingNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2017-12-12T07:58:43.678992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2AndNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2AndNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AndNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AndNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AndNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2017-12-12T07:58:43.684992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2CompositeNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tools\''			},			#name : #PP2CompositeNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CompositeNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CompositeNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CompositeNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tools,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2017-12-12T07:58:43.704992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2AdaptableGrammar\r\tinstanceVariableNames: \'body content head element\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2AdaptableGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #body,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #content,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #head,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #element,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableGrammar,					#isMetaSide : false				},				#parent : @8,				#content : 'Example of a grammar that differs depending on the input. Based on the value read in the `head` rule, the rule of `body` is created.',				#stamp : 'JanKurs 7/2/2017 20:53'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Example of a grammar that differs depending on the input. Based on the value read in the `head` rule, the rule of `body` is created.',		#newStamp : 'JanKurs 7/2/2017 20:53'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2017-12-12T07:58:43.705992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2AdaptableGrammar\r\tinstanceVariableNames: \'body content head element\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Examples\''			},			#name : #PP2AdaptableGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #body,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #content,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #head,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableGrammar,						#isMetaSide : false					},					#name : #element,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableGrammar,					#isMetaSide : false				},				#parent : @8,				#content : 'Example of a grammar that differs depending on the input. Based on the value read in the `head` rule, the rule of `body` is created.',				#stamp : 'JanKurs 7/2/2017 20:53'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Examples,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2017-12-12T07:58:43.709992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2ExpressionGrammar\r\tinstanceVariableNames: \'terms addition number parentheses multiplication primary openBracket closeBracket plus star\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Examples\''			},			#name : #PP2ExpressionGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #terms,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #addition,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #number,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #parentheses,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #multiplication,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #primary,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #openBracket,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #closeBracket,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #plus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammar,						#isMetaSide : false					},					#name : #star,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionGrammar,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Examples,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2017-12-12T07:58:43.713992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2ExpressionGrammar',				#traitCompositionSource : '{}',				#definitionSource : 'PP2ExpressionGrammar subclass: #PP2ExpressionParser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Examples\''			},			#name : #PP2ExpressionParser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionParser class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionParser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionParser,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Examples,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2017-12-12T07:58:43.732992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2HtmlHeaderGrammar\r\tinstanceVariableNames: \'headerStart bodyStart header htmlFragment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2HtmlHeaderGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #headerStart,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #bodyStart,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #header,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #htmlFragment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2HtmlHeaderGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2HtmlHeaderGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2HtmlHeaderGrammar,					#isMetaSide : false				},				#parent : @8,				#content : 'Parser that can extract an HTML headers from an html file without downloading the whole file. Try with:\r\rPP2HtmlHeaderGrammar example\r\rThe example starts a  ZincClient in streaming mode and utilizes PP2 capabilities to work on streams. It reads the stream up until the end of a header or until start of a body.',				#stamp : 'JanKurs 7/2/2017 20:52'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Parser that can extract an HTML headers from an html file without downloading the whole file. Try with:\r\rPP2HtmlHeaderGrammar example\r\rThe example starts a  ZincClient in streaming mode and utilizes PP2 capabilities to work on streams. It reads the stream up until the end of a header or until start of a body.',		#newStamp : 'JanKurs 7/2/2017 20:52'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2017-12-12T07:58:43.733992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2HtmlHeaderGrammar\r\tinstanceVariableNames: \'headerStart bodyStart header htmlFragment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Examples\''			},			#name : #PP2HtmlHeaderGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #headerStart,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #bodyStart,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #header,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlHeaderGrammar,						#isMetaSide : false					},					#name : #htmlFragment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2HtmlHeaderGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2HtmlHeaderGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2HtmlHeaderGrammar,					#isMetaSide : false				},				#parent : @8,				#content : 'Parser that can extract an HTML headers from an html file without downloading the whole file. Try with:\r\rPP2HtmlHeaderGrammar example\r\rThe example starts a  ZincClient in streaming mode and utilizes PP2 capabilities to work on streams. It reads the stream up until the end of a header or until start of a body.',				#stamp : 'JanKurs 7/2/2017 20:52'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Examples,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2017-12-12T07:58:43.741992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2CreateTokenNode\r\tinstanceVariableNames: \'tokenClass\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2CreateTokenNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CreateTokenNode,						#isMetaSide : false					},					#name : #tokenClass,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CreateTokenNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CreateTokenNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CreateTokenNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2017-12-12T07:58:43.745992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2CsNode\r\tinstanceVariableNames: \'stackId\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2CsNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CsNode,						#isMetaSide : false					},					#name : #stackId,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CsNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CsNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CsNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2017-12-12T07:58:43.749992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CsNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CsNode subclass: #PP2MatchNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2MatchNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MatchNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MatchNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MatchNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2017-12-12T07:58:43.752992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CsNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CsNode subclass: #PP2PopNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2PopNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PopNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PopNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PopNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2017-12-12T07:58:43.756992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CsNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CsNode subclass: #PP2PushNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2PushNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PushNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PushNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PushNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2017-12-12T07:58:43.760992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2EndNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2EndNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EndNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2EndNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EndNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2017-12-12T07:58:43.764992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2FlattenNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2FlattenNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FlattenNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FlattenNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FlattenNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2017-12-12T07:58:43.770992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2FragmentNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2FragmentNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FragmentNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FragmentNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FragmentNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2017-12-12T07:58:43.773992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2NonEpsilonNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2NonEpsilonNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NonEpsilonNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NonEpsilonNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NonEpsilonNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2017-12-12T07:58:43.777992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2NotNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2NotNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NotNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NotNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NotNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2017-12-12T07:58:43.781992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2OptionalNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2OptionalNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2OptionalNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2OptionalNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2OptionalNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2017-12-12T07:58:43.785992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2RepeatingNode\r\tinstanceVariableNames: \'min max\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2RepeatingNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RepeatingNode,						#isMetaSide : false					},					#name : #min,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RepeatingNode,						#isMetaSide : false					},					#name : #max,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RepeatingNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RepeatingNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RepeatingNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2017-12-12T07:58:43.789992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2RepeatingNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2RepeatingNode subclass: #PP2PossesiveRepeatingNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2PossesiveRepeatingNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PossesiveRepeatingNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PossesiveRepeatingNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PossesiveRepeatingNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2017-12-12T07:58:43.794992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2DelegateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2DelegateNode subclass: #PP2TrimmingNode\r\tinstanceVariableNames: \'trimmer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2TrimmingNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingNode,						#isMetaSide : false					},					#name : #trimmer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TrimmingNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TrimmingNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TrimmingNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2017-12-12T07:58:43.798992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2EndOfInputNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2EndOfInputNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EndOfInputNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2EndOfInputNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EndOfInputNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2017-12-12T07:58:43.803992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2EndOfLineNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2EndOfLineNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EndOfLineNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2EndOfLineNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EndOfLineNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2017-12-12T07:58:43.807992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2EpsilonNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2EpsilonNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2EpsilonNode class\r\tinstanceVariableNames: \'instance\''				},				#name : #'PP2EpsilonNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2EpsilonNode class',							#isMetaSide : true						},						#name : #instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2EpsilonNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2017-12-12T07:58:43.811992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2FailingNode\r\tinstanceVariableNames: \'message\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2FailingNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FailingNode,						#isMetaSide : false					},					#name : #message,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FailingNode class\r\tinstanceVariableNames: \'instance\''				},				#name : #'PP2FailingNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2FailingNode class',							#isMetaSide : true						},						#name : #instance,						#parent : @15					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FailingNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2017-12-12T07:58:43.816992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2ListNode\r\tinstanceVariableNames: \'children\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2ListNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ListNode,						#isMetaSide : false					},					#name : #children,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ListNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ListNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ListNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2017-12-12T07:58:43.821992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2ListNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2ListNode subclass: #PP2ChoiceNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2ChoiceNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ChoiceNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ChoiceNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ChoiceNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2017-12-12T07:58:43.825992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2ListNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2ListNode subclass: #PP2SequenceNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2SequenceNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SequenceNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SequenceNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SequenceNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2017-12-12T07:58:43.829992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2LiteralNode\r\tinstanceVariableNames: \'literal message\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2LiteralNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2LiteralNode,						#isMetaSide : false					},					#name : #literal,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2LiteralNode,						#isMetaSide : false					},					#name : #message,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2LiteralNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2LiteralNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2LiteralNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2017-12-12T07:58:43.833992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2LiteralNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2LiteralNode subclass: #PP2LiteralObjectNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2LiteralObjectNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2LiteralObjectNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2LiteralObjectNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2LiteralObjectNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2017-12-12T07:58:43.837992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2LiteralNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2LiteralNode subclass: #PP2LiteralSequenceNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2LiteralSequenceNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2LiteralSequenceNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2LiteralSequenceNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2LiteralSequenceNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2017-12-12T07:58:43.841992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2NewLineNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2NewLineNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NewLineNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NewLineNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NewLineNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2017-12-12T07:58:43.846992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2PluggableNode\r\tinstanceVariableNames: \'block\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2PluggableNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PluggableNode,						#isMetaSide : false					},					#name : #block,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PluggableNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PluggableNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PluggableNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2017-12-12T07:58:43.850992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2PredicateNode\r\tinstanceVariableNames: \'predicate predicateMessage negated negatedMessage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2PredicateNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PredicateNode,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PredicateNode,						#isMetaSide : false					},					#name : #predicateMessage,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PredicateNode,						#isMetaSide : false					},					#name : #negated,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PredicateNode,						#isMetaSide : false					},					#name : #negatedMessage,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2017-12-12T07:58:43.854992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PredicateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PredicateNode subclass: #PP2PredicateObjectNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2PredicateObjectNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateObjectNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateObjectNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateObjectNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2017-12-12T07:58:43.858992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2PredicateNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2PredicateNode subclass: #PP2PredicateSequenceNode\r\tinstanceVariableNames: \'size\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2PredicateSequenceNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PredicateSequenceNode,						#isMetaSide : false					},					#name : #size,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateSequenceNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateSequenceNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateSequenceNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2017-12-12T07:58:43.862992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2SeaNode\r\tinstanceVariableNames: \'island beforeWater afterWater root\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2SeaNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaNode,						#isMetaSide : false					},					#name : #island,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaNode,						#isMetaSide : false					},					#name : #beforeWater,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaNode,						#isMetaSide : false					},					#name : #afterWater,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaNode,						#isMetaSide : false					},					#name : #root,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SeaNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SeaNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SeaNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2017-12-12T07:58:43.867992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2StartOfLineNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2StartOfLineNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StartOfLineNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StartOfLineNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StartOfLineNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2017-12-12T07:58:43.871992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2StartOfWordNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2StartOfWordNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StartOfWordNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StartOfWordNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StartOfWordNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2017-12-12T07:58:43.877992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2UnresolvedNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2UnresolvedNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2UnresolvedNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2UnresolvedNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2UnresolvedNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2017-12-12T07:58:43.880992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2WaterNode\r\tinstanceVariableNames: \'boundary waterToken\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Nodes\''			},			#name : #PP2WaterNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WaterNode,						#isMetaSide : false					},					#name : #boundary,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WaterNode,						#isMetaSide : false					},					#name : #waterToken,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WaterNode class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WaterNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WaterNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Nodes,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2017-12-12T07:58:43.884992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2NodeFactory\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2NodeFactory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeFactory class\r\tinstanceVariableNames: \'Instance\''				},				#name : #'PP2NodeFactory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2NodeFactory class',							#isMetaSide : true						},						#name : #Instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeFactory,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ],		#time : DateAndTime [ '2017-12-12T07:58:43.912992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2NodeVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2NodeVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NodeVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'Defines base interface for PP2Node visitors.',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Defines base interface for PP2Node visitors.',		#newStamp : 'JanKurs 9/6/2016 14:04'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2017-12-12T07:58:43.913992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2NodeVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2NodeVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NodeVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'Defines base interface for PP2Node visitors.',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2017-12-12T07:58:43.917992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Interpretation,		#affectedPackageName : #PetitParser2	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2017-12-12T07:58:43.919992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NodeVisitor subclass: #PP2Interpret\r\tinstanceVariableNames: \'currentContext rootParser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Interpretation\''			},			#name : #PP2Interpret,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Interpret,						#isMetaSide : false					},					#name : #currentContext,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Interpret,						#isMetaSide : false					},					#name : #rootParser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Interpret class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Interpret class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Interpret,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Interpretation,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ],		#time : DateAndTime [ '2017-12-12T07:58:43.942992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NodeVisitor subclass: #PP2NoopVisitor\r\tinstanceVariableNames: \'closeSet cache openSet openStack\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2NoopVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #closeSet,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #cache,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #openSet,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #openStack,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NoopVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NoopVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NoopVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'Traverses all PP2Nodes, takes care about recursive sub-structures.',				#stamp : 'JanKurs 9/6/2016 14:06'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Traverses all PP2Nodes, takes care about recursive sub-structures.',		#newStamp : 'JanKurs 9/6/2016 14:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2017-12-12T07:58:43.944992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NodeVisitor subclass: #PP2NoopVisitor\r\tinstanceVariableNames: \'closeSet cache openSet openStack\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2NoopVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #closeSet,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #cache,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #openSet,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitor,						#isMetaSide : false					},					#name : #openStack,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NoopVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NoopVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NoopVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'Traverses all PP2Nodes, takes care about recursive sub-structures.',				#stamp : 'JanKurs 9/6/2016 14:06'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2017-12-12T07:58:43.950992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2AllNodesVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2AllNodesVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AllNodesVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AllNodesVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AllNodesVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2017-12-12T07:58:43.953992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AllNodesVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AllNodesVisitor subclass: #PP2AllNodesCache\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2AllNodesCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AllNodesCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AllNodesCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AllNodesCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2017-12-12T07:58:43.957992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2BypassVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2BypassVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BypassVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BypassVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BypassVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2017-12-12T07:58:43.961992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2CommonPrefixVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2CommonPrefixVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CommonPrefixVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CommonPrefixVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CommonPrefixVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2017-12-12T07:58:43.987992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2ContextChangesVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2ContextChangesVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextChangesVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextChangesVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextChangesVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'return if a given node does not change a context, pushes, pops, or does some other changes (e.g. push in a loop).',				#stamp : 'JanKurs 11/5/2016 19:41'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'return if a given node does not change a context, pushes, pops, or does some other changes (e.g. push in a loop).',		#newStamp : 'JanKurs 11/5/2016 19:41'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2017-12-12T07:58:43.989992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2ContextChangesVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2ContextChangesVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextChangesVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextChangesVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextChangesVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'return if a given node does not change a context, pushes, pops, or does some other changes (e.g. push in a loop).',				#stamp : 'JanKurs 11/5/2016 19:41'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2017-12-12T07:58:43.994992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2ContextChangesVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2ContextChangesVisitor subclass: #PP2ContextChangesCache\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2ContextChangesCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextChangesCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextChangesCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextChangesCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2017-12-12T07:58:43.998992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2ContextMemoizationVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2ContextMemoizationVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextMemoizationVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextMemoizationVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextMemoizationVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2017-12-12T07:58:44.002992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2ContextSensitivityVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2ContextSensitivityVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextSensitivityVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextSensitivityVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextSensitivityVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2017-12-12T07:58:44.006992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2ContextSensitivityVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2ContextSensitivityVisitor subclass: #PP2ContextSensitivityCache\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2ContextSensitivityCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextSensitivityCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextSensitivityCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextSensitivityCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2017-12-12T07:58:44.010992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2FirstSetVisitor\r\tinstanceVariableNames: \'terminalBlock predicateBlock leftRecursionAllowed\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2FirstSetVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstSetVisitor,						#isMetaSide : false					},					#name : #terminalBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstSetVisitor,						#isMetaSide : false					},					#name : #predicateBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstSetVisitor,						#isMetaSide : false					},					#name : #leftRecursionAllowed,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstSetVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstSetVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstSetVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2017-12-12T07:58:44.015992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2FirstSetVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2FirstSetVisitor subclass: #PP2FirstProductionSetCache\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2FirstProductionSetCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstProductionSetCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstProductionSetCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstProductionSetCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2017-12-12T07:58:44.020992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2FirstSetVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2FirstSetVisitor subclass: #PP2FirstSetCache\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2FirstSetCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstSetCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstSetCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstSetCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2017-12-12T07:58:44.024992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2GuardVisitor\r\tinstanceVariableNames: \'guarded anythingClassification\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2GuardVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2GuardVisitor,						#isMetaSide : false					},					#name : #guarded,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2GuardVisitor,						#isMetaSide : false					},					#name : #anythingClassification,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2GuardVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2GuardVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2GuardVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2017-12-12T07:58:44.048992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2IsNullableVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2IsNullableVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2IsNullableVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2IsNullableVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2IsNullableVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'I return true, if parser ALWAYS accepts epsilon without a failure, i.e it cannot fail.\r\t\t\r- I do not chache the result\r- I do allow to everride the behaviour by setting the #isNullable  property',				#stamp : 'JanKurs 9/30/2016 19:04'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I return true, if parser ALWAYS accepts epsilon without a failure, i.e it cannot fail.\r\t\t\r- I do not chache the result\r- I do allow to everride the behaviour by setting the #isNullable  property',		#newStamp : 'JanKurs 9/30/2016 19:04'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2017-12-12T07:58:44.050992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2IsNullableVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2IsNullableVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2IsNullableVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2IsNullableVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2IsNullableVisitor,					#isMetaSide : false				},				#parent : @8,				#content : 'I return true, if parser ALWAYS accepts epsilon without a failure, i.e it cannot fail.\r\t\t\r- I do not chache the result\r- I do allow to everride the behaviour by setting the #isNullable  property',				#stamp : 'JanKurs 9/30/2016 19:04'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2017-12-12T07:58:44.054992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2IsNullableVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2IsNullableVisitor subclass: #PP2IsNullableCache\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2IsNullableCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2IsNullableCache class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2IsNullableCache class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2IsNullableCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2017-12-12T07:58:44.058992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2NextSetsVisitor\r\tinstanceVariableNames: \'eoi nextSets currentNext\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2NextSetsVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitor,						#isMetaSide : false					},					#name : #eoi,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitor,						#isMetaSide : false					},					#name : #nextSets,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitor,						#isMetaSide : false					},					#name : #currentNext,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NextSetsVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NextSetsVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NextSetsVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2017-12-12T07:58:44.063992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2PackratVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2PackratVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PackratVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PackratVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PackratVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2017-12-12T07:58:44.067992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2ParentAnalysisVisitor\r\tinstanceVariableNames: \'parent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2ParentAnalysisVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParentAnalysisVisitor,						#isMetaSide : false					},					#name : #parent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ParentAnalysisVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ParentAnalysisVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ParentAnalysisVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2017-12-12T07:58:44.072992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2RecognizerVisitor\r\tinstanceVariableNames: \'inToken parents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2RecognizerVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerVisitor,						#isMetaSide : false					},					#name : #inToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerVisitor,						#isMetaSide : false					},					#name : #parents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecognizerVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecognizerVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecognizerVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ],		#time : DateAndTime [ '2017-12-12T07:58:44.077992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2ReparsableVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2ReparsableVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparsableVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparsableVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparsableVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ],		#time : DateAndTime [ '2017-12-12T07:58:44.081992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2SeaOptimizationVisitor\r\tinstanceVariableNames: \'rootNode\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2SeaOptimizationVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaOptimizationVisitor,						#isMetaSide : false					},					#name : #rootNode,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SeaOptimizationVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SeaOptimizationVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SeaOptimizationVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ],		#time : DateAndTime [ '2017-12-12T07:58:44.085992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2SpecializingVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2SpecializingVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SpecializingVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SpecializingVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SpecializingVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ],		#time : DateAndTime [ '2017-12-12T07:58:44.089992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2TransformVisitor\r\tinstanceVariableNames: \'predicate block mapping\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2TransformVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TransformVisitor,						#isMetaSide : false					},					#name : #predicate,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TransformVisitor,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TransformVisitor,						#isMetaSide : false					},					#name : #mapping,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TransformVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TransformVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TransformVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ],		#time : DateAndTime [ '2017-12-12T07:58:44.095992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2TrimmingCacheVisitor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2TrimmingCacheVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TrimmingCacheVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TrimmingCacheVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TrimmingCacheVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ],		#time : DateAndTime [ '2017-12-12T07:58:44.099992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2NoopContext\r\tinstanceVariableNames: \'node properties\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2NoopContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopContext,						#isMetaSide : false					},					#name : #node,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopContext,						#isMetaSide : false					},					#name : #properties,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NoopContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NoopContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NoopContext,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ],		#time : DateAndTime [ '2017-12-12T07:58:44.103992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopContext',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopContext subclass: #PP2NextSetsContext\r\tinstanceVariableNames: \'currentNext\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Analysis\''			},			#name : #PP2NextSetsContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsContext,						#isMetaSide : false					},					#name : #currentNext,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NextSetsContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NextSetsContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NextSetsContext,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Analysis,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ],		#time : DateAndTime [ '2017-12-12T07:58:44.107992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopContext',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopContext subclass: #PP2RecognizerContext\r\tinstanceVariableNames: \'inToken parent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #PP2RecognizerContext,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerContext,						#isMetaSide : false					},					#name : #inToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerContext,						#isMetaSide : false					},					#name : #parent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecognizerContext class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecognizerContext class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecognizerContext,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Optimizations,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ],		#time : DateAndTime [ '2017-12-12T07:58:44.110992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2PopMemento\r\tinstanceVariableNames: \'top position stackSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2PopMemento,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PopMemento,						#isMetaSide : false					},					#name : #top,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PopMemento,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PopMemento,						#isMetaSide : false					},					#name : #stackSize,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PopMemento class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PopMemento class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PopMemento,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ],		#time : DateAndTime [ '2017-12-12T07:58:44.116992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2PushMemento\r\tinstanceVariableNames: \'position stackSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2PushMemento,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PushMemento,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PushMemento,						#isMetaSide : false					},					#name : #stackSize,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PushMemento class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PushMemento class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PushMemento,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ],		#time : DateAndTime [ '2017-12-12T07:58:44.121992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Stream\r\tinstanceVariableNames: \'collection\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Streams\''			},			#name : #PP2Stream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Stream,						#isMetaSide : false					},					#name : #collection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Stream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Stream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Stream,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Streams,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ],		#time : DateAndTime [ '2017-12-12T07:58:44.124992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Token\r\tinstanceVariableNames: \'collection start stop properties\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Core\''			},			#name : #PP2Token,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Token,						#isMetaSide : false					},					#name : #collection,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Token,						#isMetaSide : false					},					#name : #start,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Token,						#isMetaSide : false					},					#name : #stop,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Token,						#isMetaSide : false					},					#name : #properties,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Token class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Token class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Token,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Core,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ],		#time : DateAndTime [ '2017-12-12T07:58:44.128992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2UnknownCharSetPredicate\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tools\''			},			#name : #PP2UnknownCharSetPredicate,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2UnknownCharSetPredicate class\r\tinstanceVariableNames: \'instance\''				},				#name : #'PP2UnknownCharSetPredicate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2UnknownCharSetPredicate class',							#isMetaSide : true						},						#name : #instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2UnknownCharSetPredicate,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tools,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ],		#time : DateAndTime [ '2017-12-12T07:58:44.132992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stack',				#traitCompositionSource : '{}',				#definitionSource : 'Stack subclass: #PP2Stack\r\tinstanceVariableNames: \'size\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Context\''			},			#name : #PP2Stack,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Stack,						#isMetaSide : false					},					#name : #size,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Stack class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Stack class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Stack,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Context,			#package : #PetitParser2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ],		#time : DateAndTime [ '2017-12-12T07:58:44.145992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AnalysisCache\r\tuses: {}\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #TPP2AnalysisCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AnalysisCache classTrait\r\tuses: {}'				},				#name : #'TPP2AnalysisCache classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AnalysisCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Optimizations,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AnalysisCache\r\tuses: {}\r\tcategory: \'PetitParser2-Optimizations\''			},			#name : #TPP2AnalysisCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AnalysisCache classTrait\r\tuses: {}'				},				#name : #'TPP2AnalysisCache classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AnalysisCache,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Optimizations,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ],		#time : DateAndTime [ '2017-12-12T07:58:44.274992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Context\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Context,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Context classTrait\r\tuses: {}'				},				#name : #'TPP2Context classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Context,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Context\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Context,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Context classTrait\r\tuses: {}'				},				#name : #'TPP2Context classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Context,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ],		#time : DateAndTime [ '2017-12-12T07:58:45.023992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Debuggable\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Debuggable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Debuggable classTrait\r\tuses: {}'				},				#name : #'TPP2Debuggable classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Debuggable,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Debuggable\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Debuggable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Debuggable classTrait\r\tuses: {}'				},				#name : #'TPP2Debuggable classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Debuggable,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ],		#time : DateAndTime [ '2017-12-12T07:58:45.232992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Globals\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Globals,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Globals classTrait\r\tuses: {}'				},				#name : #'TPP2Globals classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Globals,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Globals\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Globals,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Globals classTrait\r\tuses: {}'				},				#name : #'TPP2Globals classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Globals,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ],		#time : DateAndTime [ '2017-12-12T07:58:45.894992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2NullProfiling\r\tuses: {}\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #TPP2NullProfiling,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2NullProfiling classTrait\r\tuses: {}'				},				#name : #'TPP2NullProfiling classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2NullProfiling,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Strategies,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2NullProfiling\r\tuses: {}\r\tcategory: \'PetitParser2-Strategies\''			},			#name : #TPP2NullProfiling,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2NullProfiling classTrait\r\tuses: {}'				},				#name : #'TPP2NullProfiling classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2NullProfiling,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Strategies,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ],		#time : DateAndTime [ '2017-12-12T07:58:45.995992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Properties\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Properties,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Properties classTrait\r\tuses: {}'				},				#name : #'TPP2Properties classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Properties,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2Properties\r\tuses: {}\r\tcategory: \'PetitParser2-Core\''			},			#name : #TPP2Properties,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2Properties classTrait\r\tuses: {}'				},				#name : #'TPP2Properties classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2Properties,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Core,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ],		#time : DateAndTime [ '2017-12-12T07:58:46.446992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2RecordingCache\r\tuses: {}\r\tcategory: \'PetitParser2-Recording\''			},			#name : #TPP2RecordingCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2RecordingCache classTrait\r\tuses: {}'				},				#name : #'TPP2RecordingCache classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2RecordingCache,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Recording,			#package : #PetitParser2		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2RecordingCache\r\tuses: {}\r\tcategory: \'PetitParser2-Recording\''			},			#name : #TPP2RecordingCache,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2RecordingCache classTrait\r\tuses: {}'				},				#name : #'TPP2RecordingCache classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2RecordingCache,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Recording,			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ],		#time : DateAndTime [ '2017-12-12T08:00:08.896992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AnalysisCache,				#isMetaSide : false			},			#name : #'afterAccept:result:',			#protocol : #hooks,			#sourceCode : 'afterAccept: ctx result: result\r\tctx node propertyAt: self propertySymbol ifAbsentPut: result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ],		#time : DateAndTime [ '2017-12-12T08:00:08.898992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AnalysisCache,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t| children child |\r\tself visit: node.\r\tchildren := node allNodes.\r\t\r\t[child := children detect: [ :e | (e hasProperty: self propertySymbol) not ] \r\t\t\t\t\t\t\tifNone: [ nil ] ] whileNotNil: [ \t\t\r\t\tself visit: child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ],		#time : DateAndTime [ '2017-12-12T08:00:08.899992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AnalysisCache,				#isMetaSide : false			},			#name : #propertySymbol,			#protocol : #accessing,			#sourceCode : 'propertySymbol\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ],		#time : DateAndTime [ '2017-12-12T08:00:08.901992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #'applyChange:',			#protocol : #reparsing,			#sourceCode : 'applyChange: change\r\tchange updateContext: self.\r\tchange updateTokens: self returnValue.\r\tchange updateParser: self parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ],		#time : DateAndTime [ '2017-12-12T08:00:08.903992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #currentDebugResult,			#protocol : #debugging,			#sourceCode : 'currentDebugResult\r\t^ self globalAt: #debugResult ifAbsentPut: [ PP2DebugResult new context: self; yourself ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ],		#time : DateAndTime [ '2017-12-12T08:00:08.905992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #'currentDebugResult:',			#protocol : #debugging,			#sourceCode : 'currentDebugResult: anObject\r\tself globalAt: #debugResult put: anObject ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ],		#time : DateAndTime [ '2017-12-12T08:00:08.906992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #debugging,			#sourceCode : 'debugResult\r\t^ self globalAt: #debugResult ifAbsentPut: [ \r\t\tself restore: self startMemento.\r\t\tself parser enableDebug parseWithContext: self.\r\t\tself currentDebugResult\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ],		#time : DateAndTime [ '2017-12-12T08:00:08.907992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #defaultStack,			#protocol : #context,			#sourceCode : 'defaultStack\r\t^ self stackNamed: #defaultStack',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ],		#time : DateAndTime [ '2017-12-12T08:00:08.909992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #isRecording,			#protocol : #testing,			#sourceCode : 'isRecording\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ],		#time : DateAndTime [ '2017-12-12T08:00:08.910992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #parsedValue,			#protocol : #accessing,			#sourceCode : 'parsedValue\r\t"to provide some compatibility with PPToken"\r\t^ self returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ],		#time : DateAndTime [ '2017-12-12T08:00:08.912992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #position,			#protocol : #requirements,			#sourceCode : 'position\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ],		#time : DateAndTime [ '2017-12-12T08:00:08.914992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #returnValue,			#protocol : #requirements,			#sourceCode : 'returnValue\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ],		#time : DateAndTime [ '2017-12-12T08:00:08.915992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #'returnValue:',			#protocol : #requirements,			#sourceCode : 'returnValue: anObject\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ],		#time : DateAndTime [ '2017-12-12T08:00:08.916992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #setAsStartState,			#protocol : #requirements,			#sourceCode : 'setAsStartState\r\tself startMemento: self remember',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ],		#time : DateAndTime [ '2017-12-12T08:00:08.918992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #'stackNamed:',			#protocol : #context,			#sourceCode : 'stackNamed: identifier\r\t^ self propertyAt: identifier ifAbsentPut: [ PP2Stack new ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ],		#time : DateAndTime [ '2017-12-12T08:00:08.919992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ self startMemento position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ],		#time : DateAndTime [ '2017-12-12T08:00:08.921992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #startMemento,			#protocol : #requirements,			#sourceCode : 'startMemento\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ],		#time : DateAndTime [ '2017-12-12T08:00:08.922992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #'startMemento:',			#protocol : #requirements,			#sourceCode : 'startMemento: contextMemento\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ],		#time : DateAndTime [ '2017-12-12T08:00:08.924992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #stop,			#protocol : #accessing,			#sourceCode : 'stop\r\t^ self position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ],		#time : DateAndTime [ '2017-12-12T08:00:08.926992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #waterPosition,			#protocol : #seas,			#sourceCode : 'waterPosition\r\t^ self globalAt: #waterPosition ifAbsent: -1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ],		#time : DateAndTime [ '2017-12-12T08:00:08.927992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Context,				#isMetaSide : false			},			#name : #'waterPosition:',			#protocol : #seas,			#sourceCode : 'waterPosition: anInteger\r\tself globalAt: #waterPosition put: anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ],		#time : DateAndTime [ '2017-12-12T08:00:08.928992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Debuggable,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #debugging,			#sourceCode : 'debugResult\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ],		#time : DateAndTime [ '2017-12-12T08:00:08.929992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'globalAt:',			#protocol : #'accessing - globals',			#sourceCode : 'globalAt: aKey\r\t"Answer the global property value associated with aKey."\r\t\r\t^ self globalAt: aKey ifAbsent: [ self error: \'Property not found\' ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ],		#time : DateAndTime [ '2017-12-12T08:00:08.931992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'globalAt:ifAbsent:',			#protocol : #'accessing - globals',			#sourceCode : 'globalAt: aKey ifAbsent: aBlock\r\t"Answer the global property value associated with aKey or, if aKey isn\'t found, answer the result of evaluating aBlock."\r\t\r\t^ self globals isNil\r\t\tifTrue: [ aBlock value ]\r\t\tifFalse: [ self globals at: aKey ifAbsent: aBlock ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ],		#time : DateAndTime [ '2017-12-12T08:00:08.932992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'globalAt:ifAbsentPut:',			#protocol : #'accessing - globals',			#sourceCode : 'globalAt: aKey ifAbsentPut: aBlock\r\t"Answer the global property associated with aKey or, if aKey isn\'t found store the result of evaluating aBlock as new value."\r\t\r\t^ self globalAt: aKey ifAbsent: [ self globalAt: aKey put: aBlock value ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ],		#time : DateAndTime [ '2017-12-12T08:00:08.934992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'globalAt:put:',			#protocol : #'accessing - globals',			#sourceCode : 'globalAt: aKey put: anObject\r\t"Set the global property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."\r\r\t^ (self globals ifNil: [ self globals: (IdentityDictionary new: 1) ])\r\t\tat: aKey put: anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ],		#time : DateAndTime [ '2017-12-12T08:00:08.935992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #globals,			#protocol : #'accessing - globals',			#sourceCode : 'globals\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ],		#time : DateAndTime [ '2017-12-12T08:00:08.936992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'hasGlobal:',			#protocol : #'accessing - globals',			#sourceCode : 'hasGlobal: aKey\r\t"Test if the global property aKey is present."\r\t\r\t^ self globals notNil and: [ self globals includesKey: aKey ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ],		#time : DateAndTime [ '2017-12-12T08:00:08.937992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'removeGlobal:',			#protocol : #'accessing - globals',			#sourceCode : 'removeGlobal: aKey\r\t"Remove the property with aKey. Answer the property or raise an error if aKey isn\'t found."\r\t\r\t^ self removeGlobal: aKey ifAbsent: [ self error: \'Property not found\' ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ],		#time : DateAndTime [ '2017-12-12T08:00:08.939992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Globals,				#isMetaSide : false			},			#name : #'removeGlobal:ifAbsent:',			#protocol : #'accessing - globals',			#sourceCode : 'removeGlobal: aKey ifAbsent: aBlock\r\t"Remove the global property with aKey. Answer the value or, if aKey isn\'t found, answer the result of evaluating aBlock."\r\t\r\t| answer |\r\tself globals isNil ifTrue: [ ^ aBlock value ].\r\tanswer := self globals removeKey: aKey ifAbsent: aBlock.\r\tself globals isEmpty ifTrue: [ self globals: nil ].\r\t^ answer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ],		#time : DateAndTime [ '2017-12-12T08:00:08.940992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2NullProfiling,				#isMetaSide : false			},			#name : #'cacheHit:',			#protocol : #profiling,			#sourceCode : 'cacheHit: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ],		#time : DateAndTime [ '2017-12-12T08:00:08.940992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2NullProfiling,				#isMetaSide : false			},			#name : #invocation,			#protocol : #profiling,			#sourceCode : 'invocation',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ],		#time : DateAndTime [ '2017-12-12T08:00:08.942992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'hasProperty:',			#protocol : #'accessing - properties',			#sourceCode : 'hasProperty: aKey\r\t"Test if the property aKey is present."\r\t\r\t^ self properties notNil and: [ self properties includesKey: aKey ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ],		#time : DateAndTime [ '2017-12-12T08:00:08.943992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ],		#time : DateAndTime [ '2017-12-12T08:00:08.944992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: newProperties\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ],		#time : DateAndTime [ '2017-12-12T08:00:08.945992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #propertiesCopy,			#protocol : #'accessing - properties',			#sourceCode : 'propertiesCopy\r\tself properties isNil ifTrue: [ ^ nil ].\r\t^ self properties collect: #copy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ],		#time : DateAndTime [ '2017-12-12T08:00:08.946992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'propertyAt:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey\r\t"Answer the property value associated with aKey."\r\t\r\t^ self propertyAt: aKey ifAbsent: [ self error: \'Property not found\' ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ],		#time : DateAndTime [ '2017-12-12T08:00:08.947992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'propertyAt:ifAbsent:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey ifAbsent: aBlock\r\t"Answer the property value associated with aKey or, if aKey isn\'t found, answer the result of evaluating aBlock."\r\t\r\t^ self properties isNil\r\t\tifTrue: [ aBlock value ]\r\t\tifFalse: [ self properties at: aKey ifAbsent: aBlock ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ],		#time : DateAndTime [ '2017-12-12T08:00:08.948992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'propertyAt:ifAbsentPut:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey ifAbsentPut: aBlock\r\t"Answer the property associated with aKey or, if aKey isn\'t found store the result of evaluating aBlock as new value."\r\t\r\t^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ],		#time : DateAndTime [ '2017-12-12T08:00:08.949992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'propertyAt:put:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey put: anObject\r\t"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."\r\r\t^ (self properties ifNil: [ self properties: (IdentityDictionary new: 1) ])\r\t\tat: aKey put: anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ],		#time : DateAndTime [ '2017-12-12T08:00:08.951992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'removeProperty:',			#protocol : #'accessing - properties',			#sourceCode : 'removeProperty: aKey\r\t"Remove the property with aKey. Answer the property or raise an error if aKey isn\'t found."\r\t\r\t^ self removeProperty: aKey ifAbsent: [ self error: \'Property not found\' ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ],		#time : DateAndTime [ '2017-12-12T08:00:08.952992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2Properties,				#isMetaSide : false			},			#name : #'removeProperty:ifAbsent:',			#protocol : #'accessing - properties',			#sourceCode : 'removeProperty: aKey ifAbsent: aBlock\r\t"Remove the property with aKey. Answer the value or, if aKey isn\'t found, answer the result of evaluating aBlock."\r\t\r\t| answer |\r\tself properties isNil ifTrue: [ ^ aBlock value ].\r\tanswer := self properties removeKey: aKey ifAbsent: aBlock.\r\tself properties isEmpty ifTrue: [ self properties: nil ].\r\t^ answer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ],		#time : DateAndTime [ '2017-12-12T08:00:08.953992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #'cacheHit:',			#protocol : #recording,			#sourceCode : 'cacheHit: context\r\tself hits: self hits + 1.\r\tcontext cacheHit.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ],		#time : DateAndTime [ '2017-12-12T08:00:08.954992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #hitRatio,			#protocol : #'accessing - statistics',			#sourceCode : 'hitRatio\r\t^ self hits / (self invocations max: 1) asFloat',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ],		#time : DateAndTime [ '2017-12-12T08:00:08.955992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #hits,			#protocol : #recording,			#sourceCode : 'hits\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ],		#time : DateAndTime [ '2017-12-12T08:00:08.956992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #'hits:',			#protocol : #recording,			#sourceCode : 'hits: anInteger\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ],		#time : DateAndTime [ '2017-12-12T08:00:08.957992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself resetCounters.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ],		#time : DateAndTime [ '2017-12-12T08:00:08.958992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #invocation,			#protocol : #recording,			#sourceCode : 'invocation\r\tself invocations: self invocations + 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ],		#time : DateAndTime [ '2017-12-12T08:00:08.959992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #invocations,			#protocol : #recording,			#sourceCode : 'invocations\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ],		#time : DateAndTime [ '2017-12-12T08:00:08.960992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #'invocations:',			#protocol : #recording,			#sourceCode : 'invocations: anInteger\r\tself explicitRequirement',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ],		#time : DateAndTime [ '2017-12-12T08:00:08.961992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #isRecording,			#protocol : #testing,			#sourceCode : 'isRecording\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ],		#time : DateAndTime [ '2017-12-12T08:00:08.962992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ],		#time : DateAndTime [ '2017-12-12T08:00:08.963992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2RecordingCache,				#isMetaSide : false			},			#name : #resetCounters,			#protocol : #recording,			#sourceCode : 'resetCounters\r\tself invocations: 0.\r\tself hits: 0.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ],		#time : DateAndTime [ '2017-12-12T08:00:08.965992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #asCharSetPredicate,			#protocol : #'*PetitParser2',			#sourceCode : 'asCharSetPredicate\r\t^ PP2CharSetPredicate on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ],		#time : DateAndTime [ '2017-12-12T08:00:08.966992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #asPParser,			#protocol : #'*PetitParser2',			#sourceCode : 'asPParser\r\t"Answer a parser implemented in the receiving one-argument block."\r\r\t^ PP2PluggableNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ],		#time : DateAndTime [ '2017-12-12T08:00:08.967992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2ReadKeysExample class',				#isMetaSide : true			},			#name : #example,			#protocol : #'as yet unclassified',			#sourceCode : 'example\r\t<example>\r\t"Start typing into the window. You will see that the parser is happy when you write \'petit\' :) "\r\tself new open',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ],		#time : DateAndTime [ '2017-12-12T08:00:08.968992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #buildWindow,			#protocol : #'morphic ui',			#sourceCode : 'buildWindow\r\tself addMorph: textArea fullFrame: (LayoutFrame new topFraction: 0.2).\r\t\t\t\t\t\r\tself addMorph: keyMorph fullFrame: LayoutFrame identity.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ],		#time : DateAndTime [ '2017-12-12T08:00:08.969992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #close,			#protocol : #open/close,			#sourceCode : 'close\r\tkeyMorph close.\r\tsuper close\r\t\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ],		#time : DateAndTime [ '2017-12-12T08:00:08.970992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ stream contents',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ],		#time : DateAndTime [ '2017-12-12T08:00:08.971992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tstream := String new writeStream.\r\r\tkeyMorph := PP2ReadKeysMorph new.\r\ttextArea := self textMorph.\r\tkeyMorph outputStream: self.\r\t\r\tself buildWindow.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ],		#time : DateAndTime [ '2017-12-12T08:00:08.972992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #'stream mimicry',			#sourceCode : 'nextPutAll: aString\r\tstream nextPutAll: aString.\r\tself changed: #contents.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ],		#time : DateAndTime [ '2017-12-12T08:00:08.973992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #open,			#protocol : #open/close,			#sourceCode : 'open\r\tsuper open.\r\tkeyMorph takeKeyboardFocus.\r\tkeyMorph startParsing.\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ],		#time : DateAndTime [ '2017-12-12T08:00:08.974992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysExample,				#isMetaSide : false			},			#name : #textMorph,			#protocol : #'morphic ui',			#sourceCode : 'textMorph\r\t| textMorph |\r\ttextMorph := RubPluggableTextMorph new\r\t\tbeWrapped;\r\t\tgetTextSelector: #contents;\r\t\ton: self;\r\t\tyourself.\r\ttextMorph hasUnacceptedEdits: false.\r\tself nextPutAll: \'Keep focus on the blue area and start typing.\r\t\t- as you type, parsing is happening (the input is NOT reparsed with every key stroke!)\r\t\t- whenever the "petit" sequence is recognized, the info morph appears\r\'.\r\t^ textMorph',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ],		#time : DateAndTime [ '2017-12-12T08:00:08.975992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParser class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#\'PP2CompositeNode class\' #newStartingAt: #true)) #\'2016-10-24T14:28:46.455507+02:00\') )',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ],		#time : DateAndTime [ '2017-12-12T08:00:08.976992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParser class',				#isMetaSide : true			},			#name : #ruleRBEquivalentSuperclassMethodsRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBEquivalentSuperclassMethodsRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#PP2InMemoryContext #position #false)) #\'2016-10-07T18:25:00.082204+02:00\') )',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ],		#time : DateAndTime [ '2017-12-12T08:00:08.977992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParser class',				#isMetaSide : true			},			#name : #ruleRBIfTrueReturnsRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBIfTrueReturnsRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#PP2RecognizerContext #= #false)) #\'2016-09-13T08:14:53.299834+02:00\') )',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ],		#time : DateAndTime [ '2017-12-12T08:00:08.978992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParser class',				#isMetaSide : true			},			#name : #ruleRBInconsistentMethodClassificationRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBInconsistentMethodClassificationRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#PP2InMemoryContext #position #false)) #\'2016-10-07T18:25:03.188553+02:00\') )',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ],		#time : DateAndTime [ '2017-12-12T08:00:08.979992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParser class',				#isMetaSide : true			},			#name : #ruleRBTemporaryVariableCapitalizationRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBTemporaryVariableCapitalizationRuleV1FalsePositive\r\t^ #(#(#(#RGClassDefinition #(#PP2AdaptableGrammar)) #\'2016-09-03T17:12:25.309317+02:00\') )',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ],		#time : DateAndTime [ '2017-12-12T08:00:08.980992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParser class',				#isMetaSide : true			},			#name : #ruleRBUtilityMethodsRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBUtilityMethodsRuleV1FalsePositive\r\t^ #(#(#(#RGClassDefinition #(#PP2SeaOptimizationVisitor)) #\'2016-10-31T11:33:08.539255+01:00\') #(#(#RGClassDefinition #(#PP2PushMemoization)) #\'2016-11-06T14:33:18.377189+01:00\') #(#(#RGClassDefinition #(#PP2PopMemoization)) #\'2016-11-06T14:33:41.427177+01:00\') )',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ],		#time : DateAndTime [ '2017-12-12T08:00:08.981992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Text,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #'*PetitParser2',			#sourceCode : 'asPetit2Stream\r\t^ string asPetit2Stream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ],		#time : DateAndTime [ '2017-12-12T08:00:08.982992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NewValueHolder,				#isMetaSide : false			},			#name : #asArray,			#protocol : #'*PetitParser2',			#sourceCode : 'asArray\r\r\t"We need to extend the NewValueHolder with this message because we are adding Object>>#asArray"\r\r\t^ self value asArray',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ],		#time : DateAndTime [ '2017-12-12T08:00:08.983992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #close,			#protocol : #initialization,			#sourceCode : 'close\r\tkeyStream close',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ],		#time : DateAndTime [ '2017-12-12T08:00:08.984992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #'handlesKeyboard:',			#protocol : #'event handling',			#sourceCode : 'handlesKeyboard: evt\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ],		#time : DateAndTime [ '2017-12-12T08:00:08.985992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #'handlesMouseDown:',			#protocol : #'event handling',			#sourceCode : 'handlesMouseDown: evt\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ],		#time : DateAndTime [ '2017-12-12T08:00:08.986992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tkeyStream := PP2AsyncStream new.\r\toutputStream := Transcript.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ],		#time : DateAndTime [ '2017-12-12T08:00:08.987992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #'keyStroke:',			#protocol : #'event handling',			#sourceCode : 'keyStroke: anEvent\r\toutputStream nextPutAll: \'event: \', anEvent asString, String cr.\r\t\r\tkeyStream queueChar: anEvent keyCharacter.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ],		#time : DateAndTime [ '2017-12-12T08:00:08.988992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #'mouseDown:',			#protocol : #'event handling',			#sourceCode : 'mouseDown: evt\r \tself takeKeyboardFocus',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ],		#time : DateAndTime [ '2017-12-12T08:00:08.989992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #openInWorld,			#protocol : #'event handling',			#sourceCode : 'openInWorld\r\tsuper openInWorld.\r\tself startParsing.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ],		#time : DateAndTime [ '2017-12-12T08:00:08.989992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #'outputStream:',			#protocol : #'as yet unclassified',			#sourceCode : 'outputStream: aStream\r\toutputStream := aStream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ],		#time : DateAndTime [ '2017-12-12T08:00:08.991992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #startParsing,			#protocol : #initialize,			#sourceCode : 'startParsing\r\tparser := \r\t\t((\'petit\' asPParser ==> [ :literal | \r\t\t\t\tGrowlMorph openWithLabel: \'"petit" detected\' contents: \'\' ]) / \r\t\t  #any asPParser\r\t\t) star. \r\t\r\t[ \t\r\t\tTranscript crShow: \'parsing\'. \r\t\tparser parse: keyStream. \r\t\tTranscript crShow: \'parsing finished\' \r\t] fork.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ],		#time : DateAndTime [ '2017-12-12T08:00:08.992992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReadKeysMorph,				#isMetaSide : false			},			#name : #takesKeyboardFocus,			#protocol : #'event handling',			#sourceCode : 'takesKeyboardFocus\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ],		#time : DateAndTime [ '2017-12-12T08:00:08.993992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #asPParser,			#protocol : #'*PetitParser2',			#sourceCode : 'asPParser\r\t"Answer a predicate parser named after the receiving symbol. Possible symbols are the method selectors on the class-side of PPPredicateObjectParser."\r\r\t^ PP2NodeFactory instance perform: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ],		#time : DateAndTime [ '2017-12-12T08:00:08.994992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PositionableStream,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #'*petitparser2',			#sourceCode : 'asPetit2Stream\r\t^ PP2Stream on: collection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ],		#time : DateAndTime [ '2017-12-12T08:00:08.995992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #asPetit2Context,			#protocol : #'*petitparser2',			#sourceCode : 'asPetit2Context\r\t^ PP2InMemoryContext on: self position: 0',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ],		#time : DateAndTime [ '2017-12-12T08:00:08.997992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #'*petitparser2',			#sourceCode : 'asPetit2Stream\r\t^ PP2Stream on: self\r\t"^ PP2BufferStream on: (ReadStream on: self)"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ],		#time : DateAndTime [ '2017-12-12T08:00:08.998992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #asReparsableContext,			#protocol : #'*petitparser2',			#sourceCode : 'asReparsableContext\r\t^ PP2ReparsableContext on: self position: 0',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ],		#time : DateAndTime [ '2017-12-12T08:00:08.999992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UndefinedObject,				#isMetaSide : false			},			#name : #asPParser,			#protocol : #'*PetitParser2',			#sourceCode : 'asPParser\r\t^ PP2EpsilonNode new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ],		#time : DateAndTime [ '2017-12-12T08:00:09.000992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UndefinedObject,				#isMetaSide : false			},			#name : #isSeparator,			#protocol : #'*PetitParser2',			#sourceCode : 'isSeparator\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ],		#time : DateAndTime [ '2017-12-12T08:00:09.001992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2InMemoryContext class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^ self basicNew initialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ],		#time : DateAndTime [ '2017-12-12T08:00:09.002992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2InMemoryContext class',				#isMetaSide : true			},			#name : #'on:position:',			#protocol : #'instance creation',			#sourceCode : 'on: aCollection position: position\r\t^ (self on: aCollection) \r\t\tposition: position;\r\t\tsetAsStartState;\r\t\tyourself.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ],		#time : DateAndTime [ '2017-12-12T08:00:09.003992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'adoptString:',			#protocol : #reparsing,			#sourceCode : 'adoptString: newString\r\tcollection := newString.\r\treadLimit := newString size.\r\tself assert: readLimit isNotNil.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ],		#time : DateAndTime [ '2017-12-12T08:00:09.004992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'applyChange:',			#protocol : #reparsing,			#sourceCode : 'applyChange: change\r\tchange updateContext: self.\r\tchange updateTokens: self returnValue.\r\tchange updateParser: self parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ],		#time : DateAndTime [ '2017-12-12T08:00:09.005992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #asPetit2Context,			#protocol : #converting,			#sourceCode : 'asPetit2Context\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ],		#time : DateAndTime [ '2017-12-12T08:00:09.006992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #asPositionableStream,			#protocol : #converting,			#sourceCode : 'asPositionableStream\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ],		#time : DateAndTime [ '2017-12-12T08:00:09.007992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #asReparsableContext,			#protocol : #converting,			#sourceCode : 'asReparsableContext\r\t^ (PP2ReparsableContext on: collection)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ],		#time : DateAndTime [ '2017-12-12T08:00:09.008992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'copyFrom:to:',			#protocol : #copying,			#sourceCode : 'copyFrom: start to: end\r\t"start - end should be in range <1, collection size> "\r\t^ collection copyFrom: start to: end',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ],		#time : DateAndTime [ '2017-12-12T08:00:09.009992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #debugging,			#sourceCode : 'debugResult\r\t^ self globalAt: #debugResult ifAbsentPut: [ \r\t\t| context |\r\t\tcontext := self copy.\r\t\tcontext restore: self startMemento.\r\t\tcontext parser duplicate enableDebug parseWithContext: context.\r\t\tcontext currentDebugResult\r\t]',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ],		#time : DateAndTime [ '2017-12-12T08:00:09.010992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #globals,			#protocol : #accessing-globals,			#sourceCode : 'globals\r\t^ globals',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ],		#time : DateAndTime [ '2017-12-12T08:00:09.011992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'globals:',			#protocol : #accessing-globals,			#sourceCode : 'globals: anObject\r\t^ globals := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ],		#time : DateAndTime [ '2017-12-12T08:00:09.012992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tself setAsStartState',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ],		#time : DateAndTime [ '2017-12-12T08:00:09.013992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #isBuffered,			#protocol : #testing,			#sourceCode : 'isBuffered\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ],		#time : DateAndTime [ '2017-12-12T08:00:09.014992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #isPetit2Context,			#protocol : #testing,			#sourceCode : 'isPetit2Context\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ],		#time : DateAndTime [ '2017-12-12T08:00:09.015992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'newToken:from:',			#protocol : #tokenization,			#sourceCode : 'newToken: tokenClass from: start\r\t^ tokenClass \r\t\ton: collection\r\t\tstart: start + 1\r\t\tstop: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ],		#time : DateAndTime [ '2017-12-12T08:00:09.016992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'next:',			#protocol : #accessing,			#sourceCode : 'next: anInteger \r\t| endPosition |\r\r\tendPosition := position + anInteger.\r\t^ (endPosition <= readLimit) ifTrue: [ \r\t\tcollection copyFrom: position+1 to: (position := endPosition).\t\r\t] ifFalse: [  \r\t\tnil\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ],		#time : DateAndTime [ '2017-12-12T08:00:09.017992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'nextFor:',			#protocol : #accessing,			#sourceCode : 'nextFor: aCharacter\r\tposition == readLimit ifTrue: [ ^ false ].\r\tposition := position + 1.\r\t^ (collection at: position) == aCharacter \r\t\tifTrue: [  true] \r\t\tifFalse: [position := position - 1 . false ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ],		#time : DateAndTime [ '2017-12-12T08:00:09.018992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #parser,			#protocol : #accessing,			#sourceCode : 'parser\r\t^ parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ],		#time : DateAndTime [ '2017-12-12T08:00:09.019992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'parser:',			#protocol : #accessing,			#sourceCode : 'parser: anObject\r\tparser := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ],		#time : DateAndTime [ '2017-12-12T08:00:09.020992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #peek,			#protocol : #accessing,			#sourceCode : 'peek\r\t"An improved version of peek, that is slightly faster than the built in version."\r\r\t^ self atEnd ifFalse: [ collection at: position + 1 ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ],		#time : DateAndTime [ '2017-12-12T08:00:09.021992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ],		#time : DateAndTime [ '2017-12-12T08:00:09.022992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\tsuper postCopy.\r\t\r\tglobals := globals copy.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ],		#time : DateAndTime [ '2017-12-12T08:00:09.023992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ],		#time : DateAndTime [ '2017-12-12T08:00:09.024992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: newProperties\r\t^ properties := newProperties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ],		#time : DateAndTime [ '2017-12-12T08:00:09.025992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #readLimit,			#protocol : #accessing,			#sourceCode : 'readLimit\r\t^ readLimit',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ],		#time : DateAndTime [ '2017-12-12T08:00:09.026992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #remember,			#protocol : #memoization,			#sourceCode : 'remember\r\t^ PP2ContextMemento new\r\t\tstream: self;\r\t\tposition: position;\r\t\tproperties: self propertiesCopy;\r\t\tyourself.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ],		#time : DateAndTime [ '2017-12-12T08:00:09.027992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #rememberPosition,			#protocol : #memoization,			#sourceCode : 'rememberPosition\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ],		#time : DateAndTime [ '2017-12-12T08:00:09.028992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\tsuper reset.\r\r\tglobals := nil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ],		#time : DateAndTime [ '2017-12-12T08:00:09.029992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'restore:',			#protocol : #memoization,			#sourceCode : 'restore: contextMemento\r\tposition := contextMemento position.\r\tproperties := contextMemento propertiesCopy.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ],		#time : DateAndTime [ '2017-12-12T08:00:09.030992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'restorePosition:',			#protocol : #memoization,			#sourceCode : 'restorePosition: anInteger\r\tposition := anInteger ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ],		#time : DateAndTime [ '2017-12-12T08:00:09.032992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #returnValue,			#protocol : #accessing,			#sourceCode : 'returnValue\r\t^ returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ],		#time : DateAndTime [ '2017-12-12T08:00:09.033992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'returnValue:',			#protocol : #accessing,			#sourceCode : 'returnValue: anObject\r\treturnValue := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ],		#time : DateAndTime [ '2017-12-12T08:00:09.033992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #shift,			#protocol : #'stream extras',			#sourceCode : 'shift\r\tposition := position + 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ],		#time : DateAndTime [ '2017-12-12T08:00:09.034992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'shift:',			#protocol : #'stream extras',			#sourceCode : 'shift: integer\r\tposition := position + integer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ],		#time : DateAndTime [ '2017-12-12T08:00:09.035992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #startMemento,			#protocol : #accessing,			#sourceCode : 'startMemento\r\t^ startMemento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ],		#time : DateAndTime [ '2017-12-12T08:00:09.036992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'startMemento:',			#protocol : #accessing,			#sourceCode : 'startMemento: anObject\r\tstartMemento := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ],		#time : DateAndTime [ '2017-12-12T08:00:09.037992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #stream,			#protocol : #accessing,			#sourceCode : 'stream\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ],		#time : DateAndTime [ '2017-12-12T08:00:09.038992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: aPP2Stream\r\tcollection := aPP2Stream collection.\r\treadLimit := collection size.\r\tposition := 0',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ],		#time : DateAndTime [ '2017-12-12T08:00:09.039992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #uncheckedNext,			#protocol : #'stream extras',			#sourceCode : 'uncheckedNext\r\tposition := position + 1.\r\t^ collection at: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ],		#time : DateAndTime [ '2017-12-12T08:00:09.040992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #uncheckedPeek,			#protocol : #'stream extras',			#sourceCode : 'uncheckedPeek\r\t^ collection at: position + 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ],		#time : DateAndTime [ '2017-12-12T08:00:09.042992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #'upTo:',			#protocol : #accessing,			#sourceCode : 'upTo: character\r\t"fast version using indexOf:"\r\t| start end |\r\r\tstart := position+1.\r\tend := collection indexOf: character startingAt: start ifAbsent: [ 0 ].\r\r\t"not present--return rest of the collection"\t\r\t(end = 0 or: [end > readLimit]) ifTrue: [ ^ self upToEnd ].\r\r\t"skip to the end and return the data passed over"\r\tposition := end.\r\t^ collection copyFrom: start to: end',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ],		#time : DateAndTime [ '2017-12-12T08:00:09.043992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContext,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t^ returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ],		#time : DateAndTime [ '2017-12-12T08:00:09.044992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #asCacheReport,			#protocol : #converting,			#sourceCode : 'asCacheReport\r\t| table |\r\ttable := OrderedCollection new. \r\tparser allCaches do: [ :c | \r\t\ttable add: (Array with: c with: c hitRatio with: c invocations).\r\t].\r\r\t^ table',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ],		#time : DateAndTime [ '2017-12-12T08:00:09.045992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #asEventsMorph,			#protocol : #converting,			#sourceCode : 'asEventsMorph\r\t^ eventsTrace \r\t\tselection: nil;\r\t\teventsMorph',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ],		#time : DateAndTime [ '2017-12-12T08:00:09.046992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #asFrequencyTable,			#protocol : #converting,			#sourceCode : 'asFrequencyTable\r\t| bag total result |\r\tbag := (eventsTrace entriesCollect: #strategy) asBag.\r\tresult := OrderedCollection new.\r\tbag isEmpty ifTrue: [ ^ result ].\r\ttotal := 100.0 / bag size.\r\tbag sortedCounts \r\t\tdo: [ :each | result addLast: (Array with: each value with: each key with: total * each key) ].\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ],		#time : DateAndTime [ '2017-12-12T08:00:09.047992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'asFrequencyTableForEvent:',			#protocol : #converting,			#sourceCode : 'asFrequencyTableForEvent: event\r\t| bag total result filtered |\r\t\r\tfiltered := OrderedCollection new.\r\teventsTrace entriesDo: [ :e | \r\t\tevent == e event ifTrue: [ filtered add: e strategy ]\r\t].\r\t\r\tbag := filtered asBag.\r\tresult := OrderedCollection new.\r\tbag isEmpty ifTrue: [ ^ result ].\r\ttotal := 100.0 / bag size.\r\tbag sortedCounts \r\t\tdo: [ :each | result addLast: (Array with: each value with: each key with: total * each key) ].\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ],		#time : DateAndTime [ '2017-12-12T08:00:09.048992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #asReportTable,			#protocol : #converting,			#sourceCode : 'asReportTable\r\t| backtrackPerCharacter restoreCount rememberCount table lwRememberCount lwRestoreCount lwBacktrackPerCharacter |\r\trememberCount := (self countFor: #remember).\r\trestoreCount := (self countFor: #restore).\r\tbacktrackPerCharacter := (restoreCount / (totalSize max: 1) asFloat).\r\r\tlwRememberCount := (self countFor: #rememberPosition).\r\tlwRestoreCount := (self countFor: #restorePosition).\r\tlwBacktrackPerCharacter := (lwRestoreCount / (totalSize max: 1) asFloat).\r\r\ttable := OrderedCollection new. \r\ttable add: (Array with: totalSize with: #\'total stream size\' with: totalSize).\r\r\ttable add: (Array with: backtrackPerCharacter with: #\'backtrack per character\' with: backtrackPerCharacter).\r\ttable add: (Array with: rememberCount with: #\'remember count\' with: rememberCount).\r\ttable add: (Array with: restoreCount with: #\'restore count\' with: restoreCount).\r\r\ttable add: (Array with: lwBacktrackPerCharacter with: #\'lightweight backtrack per character\' with: lwBacktrackPerCharacter).\r\ttable add: (Array with: lwRememberCount with: #\'lightweight remember count\' with: lwRememberCount).\r\ttable add: (Array with: lwRestoreCount with: #\'lightweight restore count\' with: lwRestoreCount).\r\r\t^ table',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ],		#time : DateAndTime [ '2017-12-12T08:00:09.049992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #cacheHit,			#protocol : #recording,			#sourceCode : 'cacheHit\r\tself event: #cacheHit',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ],		#time : DateAndTime [ '2017-12-12T08:00:09.050992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'countFor:',			#protocol : #reporting,			#sourceCode : 'countFor: event\r\t| count |\r\tcount := 0.\r\tself eventsTrace entriesDo: [ :e |\r\t\t(e event == event) ifTrue: [ count := count + 1 ].\r\t].\r\t^ count',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ],		#time : DateAndTime [ '2017-12-12T08:00:09.050992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'event:',			#protocol : #accessing,			#sourceCode : 'event: value\r\t| entry |\r\r\tentry := PP2EventRecord new\r\t\tposition: self position;\r\t\tstrategy: self strategy;\r\t\tevent: value;\r\t\tyourself.\r\t\t\r\teventsTrace addLast: entry',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ],		#time : DateAndTime [ '2017-12-12T08:00:09.052992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #eventsTable,			#protocol : #converting,			#sourceCode : 'eventsTable\r\t| trace |\r\ttrace := OrderedCollection new.\r\t1 to: (10*1000 min: eventsTrace entriesCount) do: [ :index | \r\t\ttrace addLast: { \r\t\t\t(eventsTrace entryAt: index) position . \r\t\t\t(eventsTrace entryAt: index) event . \r\t\t\t(eventsTrace entryAt: index) strategy .\r\t\t\t(eventsTrace entryAt: index) node \r\t\t}\r\t].\r\r\t^ trace',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ],		#time : DateAndTime [ '2017-12-12T08:00:09.053992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #eventsTrace,			#protocol : #accessing,			#sourceCode : 'eventsTrace\r\t^ eventsTrace ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ],		#time : DateAndTime [ '2017-12-12T08:00:09.054992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #furthestPosition,			#protocol : #accessing,			#sourceCode : 'furthestPosition\r\t^ furthestPosition max: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ],		#time : DateAndTime [ '2017-12-12T08:00:09.055992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'furthestPosition:',			#protocol : #accessing,			#sourceCode : 'furthestPosition: anObject\r\tfurthestPosition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ],		#time : DateAndTime [ '2017-12-12T08:00:09.056992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself reset.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ],		#time : DateAndTime [ '2017-12-12T08:00:09.057992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #invocationCount,			#protocol : #reporting,			#sourceCode : 'invocationCount\r\t^  self countFor: #methodInvoked',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ],		#time : DateAndTime [ '2017-12-12T08:00:09.058992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #invoked,			#protocol : #events,			#sourceCode : 'invoked\r\t| entry |\r\r\tentry := PP2InvocationRecord new\r\t\tposition: self position;\r\t\tstrategy: self strategy;\r\t\tevent: #invoked;\r\t\tyourself.\r\t\t\r\teventsTrace addLast: entry',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ],		#time : DateAndTime [ '2017-12-12T08:00:09.058992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #isRecording,			#protocol : #testing,			#sourceCode : 'isRecording\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ],		#time : DateAndTime [ '2017-12-12T08:00:09.059992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #lastDebugResult,			#protocol : #accessing,			#sourceCode : 'lastDebugResult\r\t^ (self currentDebugResult children) isEmpty ifTrue: [ \r\t\tnil\r\t] ifFalse: [\r\t\tself currentDebugResult children last\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ],		#time : DateAndTime [ '2017-12-12T08:00:09.060992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #namedInvoked,			#protocol : #events,			#sourceCode : 'namedInvoked\r\t| entry |\r\r\tentry := PP2InvocationRecord new\r\t\tposition: self position;\r\t\tstrategy: self strategy;\r\t\tevent: #namedInvoked;\r\t\tyourself.\r\t\t\r\teventsTrace addLast: entry',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ],		#time : DateAndTime [ '2017-12-12T08:00:09.062992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\tself event: #next.\r\tfurthestPosition := (furthestPosition max: position + 1).\r\t\r\t^ super next',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ],		#time : DateAndTime [ '2017-12-12T08:00:09.063992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'next:',			#protocol : #accessing,			#sourceCode : 'next: number\r\tself event: #next.\r\tfurthestPosition := (furthestPosition max: position + number).\r\t\r\t^ super next: number',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ],		#time : DateAndTime [ '2017-12-12T08:00:09.064992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #node,			#protocol : #private,			#sourceCode : 'node\r\t^ (thisContext findContextSuchThat: [ :ctxt | (ctxt receiver isKindOf: PP2AbstractStrategy)])\r\t\tifNil: [ nil ]\r\t\tifNotNil: [ :aContext |\r\t\t\taContext receiver node\r\t\t].\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ],		#time : DateAndTime [ '2017-12-12T08:00:09.065992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'parser:',			#protocol : #accessing,			#sourceCode : 'parser: aPP2Node\r\tsuper parser: aPP2Node.\r\t\r\t"Transform to recording strategies"\r\taPP2Node enableRecording.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ],		#time : DateAndTime [ '2017-12-12T08:00:09.065992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: value\r\tself assert: value isInteger.\r\tsuper position: value',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ],		#time : DateAndTime [ '2017-12-12T08:00:09.066992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #remember,			#protocol : #events,			#sourceCode : 'remember\r\tself event: #remember.\r\t^ super remember',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ],		#time : DateAndTime [ '2017-12-12T08:00:09.067992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #rememberPosition,			#protocol : #memoization,			#sourceCode : 'rememberPosition\r\tself event: #rememberPosition.\r\t^ super rememberPosition',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ],		#time : DateAndTime [ '2017-12-12T08:00:09.068992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\tsuper reset.\r\t\r\teventsTrace := PP2EventsTrace new.\r\tfurthestPosition := -1.\r\ttotalSize := 0.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ],		#time : DateAndTime [ '2017-12-12T08:00:09.069992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'restore:',			#protocol : #memoization,			#sourceCode : 'restore: whatever\r\tself event: #restore.\r\tfurthestPosition := (furthestPosition max: position).\r\t^ super restore: whatever',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ],		#time : DateAndTime [ '2017-12-12T08:00:09.070992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'restorePosition:',			#protocol : #memoization,			#sourceCode : 'restorePosition: newPosition\r\tself event: #restorePosition.\r\tfurthestPosition := (furthestPosition max: position).\r\t\r\t^ super restorePosition: newPosition',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ],		#time : DateAndTime [ '2017-12-12T08:00:09.072992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #setAsStartState,			#protocol : #requirements,			#sourceCode : 'setAsStartState\r\t^ self startMemento: super remember',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ],		#time : DateAndTime [ '2017-12-12T08:00:09.073992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #strategy,			#protocol : #private,			#sourceCode : 'strategy\r\t^ (thisContext findContextSuchThat: [ :ctxt | (ctxt receiver isKindOf: PP2AbstractStrategy)])\r\t\tifNil: [ PP2NilStrategy new ]\r\t\tifNotNil: [ :aContext | aContext receiver ].\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ],		#time : DateAndTime [ '2017-12-12T08:00:09.073992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: aStream\r\tsuper stream: aStream.\r\r\ttotalSize := totalSize + readLimit.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ],		#time : DateAndTime [ '2017-12-12T08:00:09.074992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #totalSize,			#protocol : #accessing,			#sourceCode : 'totalSize\r\t^ totalSize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ],		#time : DateAndTime [ '2017-12-12T08:00:09.075992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #uncheckedNext,			#protocol : #events,			#sourceCode : 'uncheckedNext\r\tself event: #uncheckedNext.\r\t^ super uncheckedNext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ],		#time : DateAndTime [ '2017-12-12T08:00:09.076992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContext,				#isMetaSide : false			},			#name : #uncheckedPeek,			#protocol : #events,			#sourceCode : 'uncheckedPeek\r\tself event: #uncheckedPeek.\r\t^ super uncheckedPeek',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ],		#time : DateAndTime [ '2017-12-12T08:00:09.077992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #asReparsableContext,			#protocol : #converting,			#sourceCode : 'asReparsableContext\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ],		#time : DateAndTime [ '2017-12-12T08:00:09.078992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #furthestPosition,			#protocol : #accessing,			#sourceCode : 'furthestPosition\r\t^ furthestPosition max: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ],		#time : DateAndTime [ '2017-12-12T08:00:09.079992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'furthestPosition:',			#protocol : #accessing,			#sourceCode : 'furthestPosition: anObject\r\tfurthestPosition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ],		#time : DateAndTime [ '2017-12-12T08:00:09.080992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'next:',			#protocol : #accessing,			#sourceCode : 'next: integer\r\tfurthestPosition := (furthestPosition max: position + integer).\r\t^ super next: integer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ],		#time : DateAndTime [ '2017-12-12T08:00:09.081992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: aCollection\r\tfurthestPosition := -1.\r\t^ (super on: aCollection)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ],		#time : DateAndTime [ '2017-12-12T08:00:09.082992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'restore:',			#protocol : #memoization,			#sourceCode : 'restore: contextMemento\r\tfurthestPosition := (furthestPosition max: position).\r\t^ super restore: contextMemento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ],		#time : DateAndTime [ '2017-12-12T08:00:09.083992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'restorePosition:',			#protocol : #memoization,			#sourceCode : 'restorePosition: contextMemento\r\tfurthestPosition := (furthestPosition max: position).\r\t^ super restorePosition: contextMemento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ],		#time : DateAndTime [ '2017-12-12T08:00:09.084992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'startMemento:',			#protocol : #converting,			#sourceCode : 'startMemento: anObject\r\r\tself assert: (anObject isKindOf: PP2ContextMemento).\r\tsuper startMemento: anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ],		#time : DateAndTime [ '2017-12-12T08:00:09.085992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContext,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #memoization,			#sourceCode : 'stream: aStream\r\tsuper stream: aStream.\r\tfurthestPosition := position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ],		#time : DateAndTime [ '2017-12-12T08:00:09.086992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #asMapArgument,			#protocol : #'*PetitParser2',			#sourceCode : 'asMapArgument\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '416' ],		#self : OmReference [ '417' ],		#time : DateAndTime [ '2017-12-12T08:00:09.087992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CharacterStream class',				#isMetaSide : true			},			#name : #'on:encoder:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: stream encoder: encoder\r\t^ (self basicNew initialize)\r\t\tstream: stream;\r\t\tencoder: encoder;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '417' ],		#self : OmReference [ '418' ],		#time : DateAndTime [ '2017-12-12T08:00:09.088992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharacterStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #accessing,			#sourceCode : 'atEnd\r\t^ stream atEnd',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '418' ],		#self : OmReference [ '419' ],		#time : DateAndTime [ '2017-12-12T08:00:09.089992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharacterStream,				#isMetaSide : false			},			#name : #encoder,			#protocol : #accessing,			#sourceCode : 'encoder\r\t^ encoder',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '419' ],		#self : OmReference [ '420' ],		#time : DateAndTime [ '2017-12-12T08:00:09.089992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharacterStream,				#isMetaSide : false			},			#name : #'encoder:',			#protocol : #accessing,			#sourceCode : 'encoder: anObject\r\tencoder := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '420' ],		#self : OmReference [ '421' ],		#time : DateAndTime [ '2017-12-12T08:00:09.091992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharacterStream,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t^ (encoder nextCodePointFromStream: stream) asCharacter',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '421' ],		#self : OmReference [ '422' ],		#time : DateAndTime [ '2017-12-12T08:00:09.092992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharacterStream,				#isMetaSide : false			},			#name : #stream,			#protocol : #accessing,			#sourceCode : 'stream\r\t^ stream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '422' ],		#self : OmReference [ '423' ],		#time : DateAndTime [ '2017-12-12T08:00:09.093992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharacterStream,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: anObject\r\tstream := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '423' ],		#self : OmReference [ '424' ],		#time : DateAndTime [ '2017-12-12T08:00:09.094992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Stream,				#isMetaSide : false			},			#name : #asPetit2Context,			#protocol : #'*petitparser2',			#sourceCode : 'asPetit2Context\r\t^ self asPetit2Stream asPetit2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '424' ],		#self : OmReference [ '425' ],		#time : DateAndTime [ '2017-12-12T08:00:09.095992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Stream,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #'*petitparser2',			#sourceCode : 'asPetit2Stream\r\t^ PP2BufferStream \r\t\ton: self \r\t\tbufferSize: 4*1024',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '425' ],		#self : OmReference [ '426' ],		#time : DateAndTime [ '2017-12-12T08:00:09.096992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #'nodesDo:',			#protocol : #'*PetitParser2',			#sourceCode : 'nodesDo: aBlock\r\tself do: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '426' ],		#self : OmReference [ '427' ],		#time : DateAndTime [ '2017-12-12T08:00:09.097992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Character,				#isMetaSide : false			},			#name : #asPParser,			#protocol : #'*petitparser2',			#sourceCode : 'asPParser\r\t"Answer a parser that accepts the receiving character."\r\t\r\t^ PP2LiteralObjectNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '427' ],		#self : OmReference [ '428' ],		#time : DateAndTime [ '2017-12-12T08:00:09.099992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #asArray,			#protocol : #'*PetitParser2',			#sourceCode : 'asArray\r\t^ Array with: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '428' ],		#self : OmReference [ '429' ],		#time : DateAndTime [ '2017-12-12T08:00:09.100992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #asMapArgument,			#protocol : #'*PetitParser2',			#sourceCode : 'asMapArgument\r\t"JK: Hack alert. OrderedCollection is returned from the repeating parsers.\r\t\tArray is returned from the sequence parser.\r\t\t\r\t\tAs an argument into the mapping parser, ordered collection is transformed into an array\r\t\twith that collection. Array is passed unmodified.\r\t"\r\t^ Array with: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '429' ],		#self : OmReference [ '430' ],		#time : DateAndTime [ '2017-12-12T08:00:09.102992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #isPetit2Failure,			#protocol : #'*PetitParser2',			#sourceCode : 'isPetit2Failure\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '430' ],		#self : OmReference [ '431' ],		#time : DateAndTime [ '2017-12-12T08:00:09.104992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #isPetit2Parser,			#protocol : #'*PetitParser2',			#sourceCode : 'isPetit2Parser\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '431' ],		#self : OmReference [ '432' ],		#time : DateAndTime [ '2017-12-12T08:00:09.105992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #isPetit2Success,			#protocol : #'*PetitParser2',			#sourceCode : 'isPetit2Success\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '432' ],		#self : OmReference [ '433' ],		#time : DateAndTime [ '2017-12-12T08:00:09.106992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #isToken,			#protocol : #'*PetitParser2',			#sourceCode : 'isToken\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '433' ],		#self : OmReference [ '434' ],		#time : DateAndTime [ '2017-12-12T08:00:09.108992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #'nodesDo:',			#protocol : #'*PetitParser2-Reparsing',			#sourceCode : 'nodesDo: aBlock\r\t"JK: this is kind of hack, I don\'t like having this method here"\r\t"nothing to do"',			#stamp : 'JanKurs 8/20/2017 12:40',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '434' ],		#self : OmReference [ '435' ],		#time : DateAndTime [ '2017-12-12T08:00:09.109992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #cache,			#protocol : #conversion,			#sourceCode : 'cache\r\r\t^ PP2Cache on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '435' ],		#self : OmReference [ '436' ],		#time : DateAndTime [ '2017-12-12T08:00:09.110992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #debug,			#protocol : #conversion,			#sourceCode : 'debug\r\t^ PP2DebuggingStrategy on: self',			#stamp : 'JanKurs 9/9/2017 17:03',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '436' ],		#self : OmReference [ '437' ],		#time : DateAndTime [ '2017-12-12T08:00:09.111992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #includesCache,			#protocol : #analysis,			#sourceCode : 'includesCache\r\t^ self allChildren anySatisfy: [ :s | s isCache ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '437' ],		#self : OmReference [ '438' ],		#time : DateAndTime [ '2017-12-12T08:00:09.113992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '438' ],		#self : OmReference [ '439' ],		#time : DateAndTime [ '2017-12-12T08:00:09.114992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #isDebugging,			#protocol : #testing,			#sourceCode : 'isDebugging\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '439' ],		#self : OmReference [ '440' ],		#time : DateAndTime [ '2017-12-12T08:00:09.114992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #isMemoized,			#protocol : #testing,			#sourceCode : 'isMemoized\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '440' ],		#self : OmReference [ '441' ],		#time : DateAndTime [ '2017-12-12T08:00:09.115992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #isRecording,			#protocol : #testing,			#sourceCode : 'isRecording\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '441' ],		#self : OmReference [ '442' ],		#time : DateAndTime [ '2017-12-12T08:00:09.116992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #isReparsable,			#protocol : #testing,			#sourceCode : 'isReparsable\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '442' ],		#self : OmReference [ '443' ],		#time : DateAndTime [ '2017-12-12T08:00:09.117992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #memoize,			#protocol : #conversion,			#sourceCode : 'memoize\r\t^ PP2Packrat on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '443' ],		#self : OmReference [ '444' ],		#time : DateAndTime [ '2017-12-12T08:00:09.118992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #'parsingGuard:',			#protocol : #conversion,			#sourceCode : 'parsingGuard: classification\r\t^ (PP2ParsingGuard on: self)\r\t\tclassification: classification;\r\t\tretval: (PP2Failure message: \'Early failure, no first set character found\')\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '444' ],		#self : OmReference [ '445' ],		#time : DateAndTime [ '2017-12-12T08:00:09.119992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #conversion,			#sourceCode : 'recognizer\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '445' ],		#self : OmReference [ '446' ],		#time : DateAndTime [ '2017-12-12T08:00:09.120992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '446' ],		#self : OmReference [ '447' ],		#time : DateAndTime [ '2017-12-12T08:00:09.121992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #reparsable,			#protocol : #conversion,			#sourceCode : 'reparsable\r\t^ PP2Reparsable on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '447' ],		#self : OmReference [ '448' ],		#time : DateAndTime [ '2017-12-12T08:00:09.123992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #trimmingCache,			#protocol : #conversion,			#sourceCode : 'trimmingCache\r\t^ PP2TrimmingCache on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '448' ],		#self : OmReference [ '449' ],		#time : DateAndTime [ '2017-12-12T08:00:09.124992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractStrategy,				#isMetaSide : false			},			#name : #withoutDebugStrategy,			#protocol : #accessing,			#sourceCode : 'withoutDebugStrategy\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '449' ],		#self : OmReference [ '450' ],		#time : DateAndTime [ '2017-12-12T08:00:09.125992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NilStrategy,				#isMetaSide : false			},			#name : #displayName,			#protocol : #accessing,			#sourceCode : 'displayName\r\t^ \'nil\'',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '450' ],		#self : OmReference [ '451' ],		#time : DateAndTime [ '2017-12-12T08:00:09.126992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NilStrategy,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ nil',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '451' ],		#self : OmReference [ '452' ],		#time : DateAndTime [ '2017-12-12T08:00:09.127992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Action,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| retval |\r\t^ (retval := node child parseOn: aPP2Context) isPetit2Success\r\t\tifTrue: [ node block value: retval  ]\r\t\tifFalse: [ retval ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '452' ],		#self : OmReference [ '453' ],		#time : DateAndTime [ '2017-12-12T08:00:09.128992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Adaptable,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t^ node child parseOn: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '453' ],		#self : OmReference [ '454' ],		#time : DateAndTime [ '2017-12-12T08:00:09.129992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2And,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| memento retval |\r\tmemento := self remember: context.\r\tretval := node child parseOn: context.\r\tself restore: context from: memento. \r\t\r\t^ retval isPetit2Success \r\t\tifTrue: [\tretval ]\r\t\tifFalse: [ PP2Failure message: retval message context: context  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '454' ],		#self : OmReference [ '455' ],		#time : DateAndTime [ '2017-12-12T08:00:09.130992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndLiteralObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\tliteral := aNode child literal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '455' ],		#self : OmReference [ '456' ],		#time : DateAndTime [ '2017-12-12T08:00:09.131992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndLiteralObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t^ (context peek == literal )\r\t\tifTrue: [ literal ] \r\t\tifFalse: [ PP2Failure message: \'literal expected\' context: context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '456' ],		#self : OmReference [ '457' ],		#time : DateAndTime [ '2017-12-12T08:00:09.132992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndPredicateObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\tpredicate := aNode child predicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '457' ],		#self : OmReference [ '458' ],		#time : DateAndTime [ '2017-12-12T08:00:09.133992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndPredicateObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\t| peek |\r\tpeek := context peek.\r\t^ (peek isNil not and: [ predicate value: peek ])\r\t\tifTrue: [ peek ] \r\t\tifFalse: [ PP2Failure message: \'predicate expected\' context: context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '458' ],		#self : OmReference [ '459' ],		#time : DateAndTime [ '2017-12-12T08:00:09.135992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Choice,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| retval |\r\t\r\t1 to: node children size do: [ :index |\r\t\t(retval := (node childAt: index) parseOn: aPP2Context) isPetit2Success ifTrue: [ ^ retval ] \r\t].\r\t\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '459' ],		#self : OmReference [ '460' ],		#time : DateAndTime [ '2017-12-12T08:00:09.136992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateToken,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| start retval |\r\tstart := aPP2Context position.\r\t(retval := node child parseOn: aPP2Context) isPetit2Failure ifTrue: [ ^ retval ].\r\r\t^ aPP2Context newToken: (node tokenClass) from: start',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '460' ],		#self : OmReference [ '461' ],		#time : DateAndTime [ '2017-12-12T08:00:09.137992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Delegate,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ node child parseOn: aPP2Context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '461' ],		#self : OmReference [ '462' ],		#time : DateAndTime [ '2017-12-12T08:00:09.138992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2End,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| memento retval |\r\tmemento := aPP2Context remember.\r\tretval := node child parseOn: aPP2Context.\r\t\r\t^ aPP2Context atEnd ifTrue: [ \r\t\tretval \r\t] ifFalse: [\r\t\t| failure | \r\t\tfailure := PP2Failure message: \'end of input expected\' context: aPP2Context. \r\t\taPP2Context restore: memento. \r\t\t^ failure\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '462' ],		#self : OmReference [ '463' ],		#time : DateAndTime [ '2017-12-12T08:00:09.139992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndOfInput,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node.\r\t\r\tfailure := PP2Failure message: \'end of input expected\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '463' ],		#self : OmReference [ '464' ],		#time : DateAndTime [ '2017-12-12T08:00:09.140992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndOfInput,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t^ context atEnd ifTrue: [ nil ] ifFalse: [ failure context: context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '464' ],		#self : OmReference [ '465' ],		#time : DateAndTime [ '2017-12-12T08:00:09.141992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Epsilon,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ nil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '465' ],		#self : OmReference [ '466' ],		#time : DateAndTime [ '2017-12-12T08:00:09.142992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failing,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ PP2Failure message: \'failure\' context: aPP2Context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '466' ],		#self : OmReference [ '467' ],		#time : DateAndTime [ '2017-12-12T08:00:09.143992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Flatten,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| retval start |\r\tstart := aPP2Context position.\r\r\t^ (retval := node child parseOn: aPP2Context) isPetit2Success ifTrue: [ \r\t\taPP2Context copyFrom: start + 1 to: aPP2Context position\r\t] ifFalse: [ \r\t\tretval\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '467' ],		#self : OmReference [ '468' ],		#time : DateAndTime [ '2017-12-12T08:00:09.144992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Fragment,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| startMemento returnValue |\r\tstartMemento := context remember.\r\t(returnValue := node child parseOn: context) isPetit2Failure ifTrue: [ ^ returnValue ].\r\r\t^ context copy \r\t\treturnValue: returnValue;\r\t\tstartMemento: startMemento;\r\t\tparser: node;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '468' ],		#self : OmReference [ '469' ],		#time : DateAndTime [ '2017-12-12T08:00:09.146992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #parsing,			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '469' ],		#self : OmReference [ '470' ],		#time : DateAndTime [ '2017-12-12T08:00:09.147992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| literal |\r\tliteral := node literal.\r\t\r\t^ (aPP2Context nextFor: literal)\r\t\tifTrue: [ literal ]\r\t\tifFalse: [ PP2Failure message: node message context: aPP2Context ]\r\t\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '470' ],		#self : OmReference [ '471' ],		#time : DateAndTime [ '2017-12-12T08:00:09.148992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequence,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| position |\r\tposition := aPP2Context rememberPosition.\r\t(node literal = (aPP2Context next: node size)) ifTrue: [  \r\t\t^ node literal\r\t].\r\taPP2Context restorePosition: position.\r\t^ PP2Failure message: \'literal not found\' context: aPP2Context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '471' ],		#self : OmReference [ '472' ],		#time : DateAndTime [ '2017-12-12T08:00:09.149992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Mapping,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| retval |\r\t^ (retval := node child parseOn: aPP2Context) isPetit2Success\r\t\tifTrue: [ node block valueWithArguments: retval asMapArgument ]\r\t\tifFalse: [ retval ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '472' ],		#self : OmReference [ '473' ],		#time : DateAndTime [ '2017-12-12T08:00:09.150992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MappingOfThree,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\t| retval |\r\t^ (retval := node child parseOn: context) isPetit2Success\r\t\tifTrue: [ node block value: (retval at: 1) value: (retval at: 2) value: (retval at: 3)  ]\r\t\tifFalse: [ retval ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '473' ],		#self : OmReference [ '474' ],		#time : DateAndTime [ '2017-12-12T08:00:09.151992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MappingOfTwo,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval |\r\t^ (retval := node child parseOn: context) isPetit2Success\r\t\tifTrue: [ node block value: (retval at: 1) value: (retval at: 2)  ]\r\t\tifFalse: [ retval ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '474' ],		#self : OmReference [ '475' ],		#time : DateAndTime [ '2017-12-12T08:00:09.151992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Match,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval stackTop memento stack |\r\tmemento := self remember: context.\r\tretval := node child parseOn: context.\r\tretval isPetit2Failure ifTrue: [ ^ retval ].\r\tstack := context stackNamed: node stackId.\r\t\r\t^ (stack isEmpty not and: [(stackTop :=  stack top) = retval]) ifTrue: [  \r\t\tretval\r\t] ifFalse: [ \r\t\tself restore: context from: memento.\r\t\tPP2Failure message: (\'context stack value: "\', stackTop asString, \r\t\t\t\t\t\t\t\t   \'" does not match \', retval asString)\r\t\t\t\t\t  context: context\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '475' ],		#self : OmReference [ '476' ],		#time : DateAndTime [ '2017-12-12T08:00:09.153992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NewLine,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node.\r\tfailure := PP2Failure message: \'new line expected\'\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '476' ],		#self : OmReference [ '477' ],		#time : DateAndTime [ '2017-12-12T08:00:09.154992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NewLine,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\tcontext atEnd ifTrue: [ ^ failure ].\r\t\r\t(context uncheckedPeek == Character lf) ifTrue: [ \r\t\tcontext shift.\r\t\t^ String lf\r\t].\r\r\t(context uncheckedPeek == Character cr) ifTrue: [  \r\t\tcontext shift.\r\t\t(context peek == Character lf) ifTrue: [ \r\t\t\tcontext shift.\r\t\t\t^ String crlf.\r\t\t].\r\t\t^ String cr\r\t].\r\r\t^ failure',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '477' ],		#self : OmReference [ '478' ],		#time : DateAndTime [ '2017-12-12T08:00:09.155992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NonEpsilon,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\t| start memento retval |\r\tmemento := self remember: context.\r\tstart := context position.\r\tretval := node child parseOn: context.\r\t(retval isPetit2Success and: [ context position = start ]) ifTrue: [ \r\t\tself restore: context from: memento.\r\t\t^ PP2Failure message: \'epsilon parse not allowed\' context: context\r\t].\r\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '478' ],		#self : OmReference [ '479' ],		#time : DateAndTime [ '2017-12-12T08:00:09.156992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Not,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| memento retval |\r\tmemento := aPP2Context remember.\r\tretval := node child parseOn: aPP2Context.\r\t\r\taPP2Context restore: memento.\r\t^ retval isPetit2Failure \r\t\tifTrue: [ nil ]\r\t\tifFalse: [ PP2Failure message: \'Child was not expected to pass\' context: aPP2Context  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '479' ],		#self : OmReference [ '480' ],		#time : DateAndTime [ '2017-12-12T08:00:09.157992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotLiteralObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\tliteral := aNode child literal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '480' ],		#self : OmReference [ '481' ],		#time : DateAndTime [ '2017-12-12T08:00:09.158992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotLiteralObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t^ (context peek == literal )\r\t\tifFalse: [ nil ] \r\t\tifTrue: [ PP2Failure message: \'literal expected\' context: context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '481' ],		#self : OmReference [ '482' ],		#time : DateAndTime [ '2017-12-12T08:00:09.159992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotPredicateObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\tpredicate := aNode child predicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '482' ],		#self : OmReference [ '483' ],		#time : DateAndTime [ '2017-12-12T08:00:09.160992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotPredicateObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\t| peek |\r\tpeek := context peek.\r\t^ (peek isNil not and: [ predicate value: peek ])\r\t\tifFalse: [ nil ] \r\t\tifTrue: [ PP2Failure message: \'predicate not expected\' context: context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '483' ],		#self : OmReference [ '484' ],		#time : DateAndTime [ '2017-12-12T08:00:09.161992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Optional,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| memento retval |\r\tmemento := aPP2Context remember.\r\t\r\t^ (retval := node child parseOn: aPP2Context) isPetit2Success\r\t\tifTrue: [ retval ]\r\t\tifFalse: [ aPP2Context restore: memento. nil ]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '484' ],		#self : OmReference [ '485' ],		#time : DateAndTime [ '2017-12-12T08:00:09.162992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Optional,				#isMetaSide : false			},			#name : #'parsingGuard:',			#protocol : #'as yet unclassified',			#sourceCode : 'parsingGuard: classification\r\t^ (super parsingGuard: classification)\r\t\tretval: nil\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '485' ],		#self : OmReference [ '486' ],		#time : DateAndTime [ '2017-12-12T08:00:09.163992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptionalLiteralObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node.\r\tcharacter := node child literal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '486' ],		#self : OmReference [ '487' ],		#time : DateAndTime [ '2017-12-12T08:00:09.164992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptionalLiteralObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ (aPP2Context peek == character) ifTrue: [ \r\t\taPP2Context uncheckedNext \r\t] ifFalse: [  \r\t\tnil\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '487' ],		#self : OmReference [ '488' ],		#time : DateAndTime [ '2017-12-12T08:00:09.165992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Pluggable,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ node block value: aPP2Context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '488' ],		#self : OmReference [ '489' ],		#time : DateAndTime [ '2017-12-12T08:00:09.166992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Pop,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\t| retval |\r\tretval := node child parseOn: context.\r\t\r\tretval isPetit2Failure ifFalse: [  \r\t\t(context stackNamed: node stackId) pop\r\t].\r\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '489' ],		#self : OmReference [ '490' ],		#time : DateAndTime [ '2017-12-12T08:00:09.167992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Plus,				#isMetaSide : false			},			#name : #'bypass:to:',			#protocol : #accessing,			#sourceCode : 'bypass: aChild to: target\r\tself assert: aChild == child.\r\t\r\tchild := target',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '490' ],		#self : OmReference [ '491' ],		#time : DateAndTime [ '2017-12-12T08:00:09.168992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Plus,				#isMetaSide : false			},			#name : #child,			#protocol : #accessing,			#sourceCode : 'child\r\t^ child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '491' ],		#self : OmReference [ '492' ],		#time : DateAndTime [ '2017-12-12T08:00:09.169992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Plus,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\tchild := aNode child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '492' ],		#self : OmReference [ '493' ],		#time : DateAndTime [ '2017-12-12T08:00:09.170992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Plus,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| elements retval |\r\t\r\t(retval := child parseOn: aPP2Context) isPetit2Failure ifTrue: [\r\t\t^ retval\r\t].\r\telements := OrderedCollection with: retval.\r\t\r\t(node max - 1) timesRepeat: [\r\t \t(retval := child parseOn: aPP2Context) isPetit2Failure ifTrue: [ \r\t\t\t^ elements \r\t\t].\r\t\telements addLast: retval \r\t].\r\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '493' ],		#self : OmReference [ '494' ],		#time : DateAndTime [ '2017-12-12T08:00:09.171992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Plus,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #conversion,			#sourceCode : 'recognizer\r\t^ PP2PlusRecognizer on: self node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '494' ],		#self : OmReference [ '495' ],		#time : DateAndTime [ '2017-12-12T08:00:09.172992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PlusPredicateObject,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node.\r\t\r\tpredicate := node child predicate.\r\tfailure := PP2Failure message: \'predicate not found\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '495' ],		#self : OmReference [ '496' ],		#time : DateAndTime [ '2017-12-12T08:00:09.173992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PlusPredicateObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| elements |\r\t\r\t(aPP2Context atEnd not and: [predicate value: aPP2Context uncheckedPeek]) ifFalse: [ \r\t\t^ failure\r\t].\r\r\telements := OrderedCollection with: aPP2Context uncheckedNext.\r\t\r\t[aPP2Context atEnd not and: [ predicate value: aPP2Context uncheckedPeek ]] whileTrue: [  \r\t\telements addLast: aPP2Context uncheckedNext\r\t].\r\r\t^ elements\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '496' ],		#self : OmReference [ '497' ],		#time : DateAndTime [ '2017-12-12T08:00:09.174992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PlusRecognizer,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| retval |\r\t\t\r\t(retval := node child parseOn: aPP2Context) isPetit2Failure ifTrue: [\r\t\t^ retval\r\t].\r\r\t(node max - 1) timesRepeat: [\r\t \t(retval := node child parseOn: aPP2Context) isPetit2Failure ifTrue: [ \r\t\t\t^ self \r\t\t].\r\t].\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '497' ],		#self : OmReference [ '498' ],		#time : DateAndTime [ '2017-12-12T08:00:09.175992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PossesiveRepeating,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| memento elements retval |\r\telements := OrderedCollection new.\r\tmemento := context remember.\r\t\r\t[ elements size < node min ] whileTrue: [\r\t\t(retval := node child parseOn: context) isPetit2Failure ifTrue: [\r\t\t\tcontext restore: memento.\r\t\t\t^ retval\r\t\t].\r\t\telements addLast: retval \r\t].\r\t\r\t[ elements size < node max ] whileTrue: [\r\t \t(retval := node child parseOn: context) isPetit2Failure ifTrue: [ \r\t\t\t^ elements \r\t\t].\r\t\telements addLast: retval \r\t].\r\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '498' ],		#self : OmReference [ '499' ],		#time : DateAndTime [ '2017-12-12T08:00:09.177992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Star,				#isMetaSide : false			},			#name : #'bypass:to:',			#protocol : #transformations,			#sourceCode : 'bypass: aChild to: target\r\tself assert: aChild == child.\r\t\r\tchild := target',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '499' ],		#self : OmReference [ '500' ],		#time : DateAndTime [ '2017-12-12T08:00:09.177992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Star,				#isMetaSide : false			},			#name : #child,			#protocol : #accessing,			#sourceCode : 'child\r\t^ child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '500' ],		#self : OmReference [ '501' ],		#time : DateAndTime [ '2017-12-12T08:00:09.178992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Star,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #parsing,			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\tchild := aNode child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '501' ],		#self : OmReference [ '502' ],		#time : DateAndTime [ '2017-12-12T08:00:09.179992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Star,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| elements retval |\r\telements := OrderedCollection new.\r\t\r\tnode max timesRepeat: [\r\t\t(retval := child parseOn: aPP2Context) isPetit2Failure ifTrue: [\r\t\t\t^ elements\r\t\t].\r\t\telements addLast: retval \r\t].\r\t\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '502' ],		#self : OmReference [ '503' ],		#time : DateAndTime [ '2017-12-12T08:00:09.180992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Star,				#isMetaSide : false			},			#name : #'parsingGuard:',			#protocol : #'as yet unclassified',			#sourceCode : 'parsingGuard: classification\r\t^ (super parsingGuard: classification)\r\t\tretval: #();\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '503' ],		#self : OmReference [ '504' ],		#time : DateAndTime [ '2017-12-12T08:00:09.181992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2StarPredicateObject class',				#isMetaSide : true			},			#name : #'on:predicate:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: node predicate: predicate\r\t^ (super on: node)\r\t\tpredicate: predicate;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '504' ],		#self : OmReference [ '505' ],		#time : DateAndTime [ '2017-12-12T08:00:09.182992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StarPredicateObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| collection |\r\tcollection := OrderedCollection new.\r\t\r\t[aPP2Context atEnd not and: [ predicate value: aPP2Context uncheckedPeek ]] whileTrue: [  \r\t\tcollection addLast: aPP2Context uncheckedNext\r\t].\r\r\t^ collection\r\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '505' ],		#self : OmReference [ '506' ],		#time : DateAndTime [ '2017-12-12T08:00:09.183992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StarPredicateObject,				#isMetaSide : false			},			#name : #'predicate:',			#protocol : #accessing,			#sourceCode : 'predicate: newPredicate\r\tpredicate := newPredicate ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '506' ],		#self : OmReference [ '507' ],		#time : DateAndTime [ '2017-12-12T08:00:09.184992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StarPredicateObject,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #conversion,			#sourceCode : 'recognizer\r\t^ PP2StarPredicateObjectRecognizer on: self node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '507' ],		#self : OmReference [ '508' ],		#time : DateAndTime [ '2017-12-12T08:00:09.185992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StarPredicateObjectRecognizer,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node.\r\r\tpredicate := node child predicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '508' ],		#self : OmReference [ '509' ],		#time : DateAndTime [ '2017-12-12T08:00:09.187992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StarPredicateObjectRecognizer,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: aPP2Context\r\t[aPP2Context atEnd not and: [ predicate value: aPP2Context uncheckedPeek ]] whileTrue: [  \r\t\taPP2Context shift\r\t].\r\r\t^ #()\r\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '509' ],		#self : OmReference [ '510' ],		#time : DateAndTime [ '2017-12-12T08:00:09.188992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ (aPP2Context atEnd not and: [ node predicate value: aPP2Context uncheckedPeek ])\r\t\tifFalse: [ PP2Failure message: node predicateMessage context: aPP2Context  ]\r\t\tifTrue: [ aPP2Context uncheckedNext ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '510' ],		#self : OmReference [ '511' ],		#time : DateAndTime [ '2017-12-12T08:00:09.188992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObject,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #conversion,			#sourceCode : 'recognizer\r\t^ PP2PredicateObjectRecognizer on: self node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '511' ],		#self : OmReference [ '512' ],		#time : DateAndTime [ '2017-12-12T08:00:09.189992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObjectRecognizer,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: aPP2Context\r\t^ (aPP2Context atEnd not and: [ node predicate value: aPP2Context uncheckedPeek ])\r\t\tifFalse: [ PP2Failure message: node predicateMessage context: aPP2Context  ]\r\t\tifTrue: [ aPP2Context shift ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '512' ],		#self : OmReference [ '513' ],		#time : DateAndTime [ '2017-12-12T08:00:09.190992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequence,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| retval position |\r\tposition := aPP2Context rememberPosition.\r\tretval := aPP2Context next: node size.\r\t\r\t^ (retval isNil not and: [ node predicate value: retval ]) \r\t\tifTrue: [ retval ]\r\t\tifFalse: [ \r\t\t\taPP2Context restorePosition: position.\r\t\t\tPP2Failure message: node predicateMessage context: aPP2Context \r\t\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '513' ],		#self : OmReference [ '514' ],		#time : DateAndTime [ '2017-12-12T08:00:09.191992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Push,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval |\r\tretval := (node child parseOn: context).\r\tretval isPetit2Failure ifTrue: [ ^ retval ].\r\t\r\t(context stackNamed: node stackId) push: retval.\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '514' ],		#self : OmReference [ '515' ],		#time : DateAndTime [ '2017-12-12T08:00:09.192992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sea,				#isMetaSide : false			},			#name : #memoize,			#protocol : #conversion,			#sourceCode : 'memoize\r\t^ PP2MemoizedSea on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '515' ],		#self : OmReference [ '516' ],		#time : DateAndTime [ '2017-12-12T08:00:09.193992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sea,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\r\t| awr bwr ir memento |\r\tmemento := self remember: context.\r\tnode reset: context.\r\t\r\t(bwr := node beforeWater parseOn: context) isPetit2Failure ifTrue: [\r\t\t^ bwr\r\t].\r\r\t(ir := node island parseOn: context) isPetit2Failure ifTrue: [  \r\t\tself restore: context from: memento.\r\t\t^ PP2Failure message: \'island not found\' context: context\r\t].\r\r\t(awr := node afterWater parseOn: context) isPetit2Failure ifTrue: [  \r\t\tself restore: context from: memento.\r\t\t^  PP2Failure message: \'boundary not found\' context: context\r\t].\r\r\t^ Array with: bwr with: ir with: awr',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '516' ],		#self : OmReference [ '517' ],		#time : DateAndTime [ '2017-12-12T08:00:09.194992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sequence,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval elements memento |\r\r\tmemento := self remember: context.\r\telements := Array new: node children size.\r\t\r\t1 to: elements size do: [ :index |\r\t\tretval := (node childAt: index) parseOn: context.\r\t\tretval isPetit2Failure ifTrue: [ \r\t\t\tself restore: context from: memento. \r\t\t\t^ retval\r\t\t].\r\t\telements at: index put: retval \r\t].\r\t\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '517' ],		#self : OmReference [ '518' ],		#time : DateAndTime [ '2017-12-12T08:00:09.195992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfThree,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2SequenceNode\r\tsuper initializeFor: aPP2SequenceNode.\r\t\r\tfirstChild := aPP2SequenceNode firstChild.\r\tsecondChild := aPP2SequenceNode secondChild.\r\tthirdChild := aPP2SequenceNode thirdChild.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '518' ],		#self : OmReference [ '519' ],		#time : DateAndTime [ '2017-12-12T08:00:09.197992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfThree,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval elements memento |\r\tmemento := self remember: context.\r\t(retval := firstChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\t^ retval\r\t].\r\telements := Array new: 3.\r\telements at: 1 put: retval.\r\t\r\t(retval := secondChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\tself restore: context from: memento.\r\t\t^ retval\r\t].\r\telements at: 2 put: retval.\r\r\t(retval := thirdChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\tself restore: context from: memento.\r\t\t^ retval\r\t].\r\telements at: 3 put: retval.\r\t\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '519' ],		#self : OmReference [ '520' ],		#time : DateAndTime [ '2017-12-12T08:00:09.198992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwo,				#isMetaSide : false			},			#name : #'bypass:to:',			#protocol : #transformation,			#sourceCode : 'bypass: child to: target\r\tfirstChild == child ifTrue: [ firstChild := target ].\r\tsecondChild == child ifTrue: [ secondChild := target ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '520' ],		#self : OmReference [ '521' ],		#time : DateAndTime [ '2017-12-12T08:00:09.199992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwo,				#isMetaSide : false			},			#name : #firstChild,			#protocol : #accessing,			#sourceCode : 'firstChild\r\t^ firstChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '521' ],		#self : OmReference [ '522' ],		#time : DateAndTime [ '2017-12-12T08:00:09.200992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwo,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2SequenceNode\r\tsuper initializeFor: aPP2SequenceNode.\r\t\r\tfirstChild := aPP2SequenceNode firstChild.\r\tsecondChild := aPP2SequenceNode secondChild.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '522' ],		#self : OmReference [ '523' ],		#time : DateAndTime [ '2017-12-12T08:00:09.201992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwo,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval elements memento |\r\tmemento := self remember: context.\r\t(retval := firstChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\t^ retval\r\t].\r\telements := Array new: 2.\r\telements at: 1 put: retval.\r\t\r\t(retval := secondChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\tself restore: context from: memento.\r\t\t^ retval\r\t].\r\telements at: 2 put: retval.\r\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '523' ],		#self : OmReference [ '524' ],		#time : DateAndTime [ '2017-12-12T08:00:09.202992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwo,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #conversion,			#sourceCode : 'recognizer\r\t^ PP2SequenceOfTwoRecognizer on: self node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '524' ],		#self : OmReference [ '525' ],		#time : DateAndTime [ '2017-12-12T08:00:09.202992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwo,				#isMetaSide : false			},			#name : #secondChild,			#protocol : #accessing,			#sourceCode : 'secondChild\r\t^ secondChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '525' ],		#self : OmReference [ '526' ],		#time : DateAndTime [ '2017-12-12T08:00:09.203992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwoRecognizer,				#isMetaSide : false			},			#name : #'bypass:to:',			#protocol : #transformation,			#sourceCode : 'bypass: child to: target\r\tfirstChild == child ifTrue: [ firstChild := target ].\r\tsecondChild == child ifTrue: [ secondChild := target ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '526' ],		#self : OmReference [ '527' ],		#time : DateAndTime [ '2017-12-12T08:00:09.204992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwoRecognizer,				#isMetaSide : false			},			#name : #firstChild,			#protocol : #'as yet unclassified',			#sourceCode : 'firstChild\r\t^ firstChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '527' ],		#self : OmReference [ '528' ],		#time : DateAndTime [ '2017-12-12T08:00:09.205992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwoRecognizer,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2SequenceNode\r\tsuper initializeFor: aPP2SequenceNode.\r\t\r\tfirstChild := aPP2SequenceNode firstChild.\r\tsecondChild := aPP2SequenceNode secondChild.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '528' ],		#self : OmReference [ '529' ],		#time : DateAndTime [ '2017-12-12T08:00:09.207992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwoRecognizer,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval memento |\r\tmemento := self remember: context.\r\t(retval := firstChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\t^ retval\r\t].\r\r\t(retval := secondChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\tself restore: context from: memento.\r\t\t^ retval\r\t].',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '529' ],		#self : OmReference [ '530' ],		#time : DateAndTime [ '2017-12-12T08:00:09.208992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceOfTwoRecognizer,				#isMetaSide : false			},			#name : #secondChild,			#protocol : #'as yet unclassified',			#sourceCode : 'secondChild\r\t^ secondChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '530' ],		#self : OmReference [ '531' ],		#time : DateAndTime [ '2017-12-12T08:00:09.209992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2AnyStarLazyLiteralObject class',				#isMetaSide : true			},			#name : #'on:literal:',			#protocol : #'instance creation',			#sourceCode : 'on: node literal: literal\r\t^ (super on: node)\r\t\tliteral: literal;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '531' ],		#self : OmReference [ '532' ],		#time : DateAndTime [ '2017-12-12T08:00:09.210992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AnyStarLazyLiteralObject,				#isMetaSide : false			},			#name : #literal,			#protocol : #accessing,			#sourceCode : 'literal\r\t^ literal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '532' ],		#self : OmReference [ '533' ],		#time : DateAndTime [ '2017-12-12T08:00:09.211992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AnyStarLazyLiteralObject,				#isMetaSide : false			},			#name : #'literal:',			#protocol : #accessing,			#sourceCode : 'literal: newLiteral\r\tliteral := newLiteral ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '533' ],		#self : OmReference [ '534' ],		#time : DateAndTime [ '2017-12-12T08:00:09.212992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AnyStarLazyLiteralObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval position |\r\tretval := OrderedCollection new.\r\tposition := context rememberPosition.\t\r\r\t[ \r\t\tcontext atEnd ifTrue: [ \r\t\t\tcontext restorePosition: position.\r\t\t\t^ PP2Failure message: \'boundary not found\' context: context\r\t\t].\r\r\t\tcontext uncheckedPeek == literal\r\t] whileFalse: [  \r\t\tretval addLast: context uncheckedNext\r\t].\r\r\t^ retval\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '534' ],		#self : OmReference [ '535' ],		#time : DateAndTime [ '2017-12-12T08:00:09.213992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2AnyStarLazyPredicateObject class',				#isMetaSide : true			},			#name : #'on:predicate:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: node predicate: predicate\r\t^ (super on: node)\r\t\tpredicate: predicate;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '535' ],		#self : OmReference [ '536' ],		#time : DateAndTime [ '2017-12-12T08:00:09.214992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AnyStarLazyPredicateObject,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval position |\r\r\tretval := OrderedCollection new.\r\tposition := context rememberPosition.\r\r\t[ \r\t\tcontext atEnd ifTrue: [ \r\t\t\tcontext restorePosition: position.\r\t\t\t^ PP2Failure message: \'boundary not found\' context: context\r\t\t].\r\r\t\tpredicate value: context uncheckedPeek\r\t] whileFalse: [  \r\t\tretval addLast: context uncheckedNext\r\t].\r\r\t^ retval\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '536' ],		#self : OmReference [ '537' ],		#time : DateAndTime [ '2017-12-12T08:00:09.215992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AnyStarLazyPredicateObject,				#isMetaSide : false			},			#name : #predicate,			#protocol : #accessing,			#sourceCode : 'predicate\r\t^ predicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '537' ],		#self : OmReference [ '538' ],		#time : DateAndTime [ '2017-12-12T08:00:09.216992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AnyStarLazyPredicateObject,				#isMetaSide : false			},			#name : #'predicate:',			#protocol : #accessing,			#sourceCode : 'predicate: newPredicate\r\tpredicate := newPredicate ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '538' ],		#self : OmReference [ '539' ],		#time : DateAndTime [ '2017-12-12T08:00:09.218992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Strategy class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^ self error: \'Use "#on: aPP2Node" instead\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '539' ],		#self : OmReference [ '540' ],		#time : DateAndTime [ '2017-12-12T08:00:09.219992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Strategy class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aPP2Node\r\t^ self basicNew initializeFor:\taPP2Node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '540' ],		#self : OmReference [ '541' ],		#time : DateAndTime [ '2017-12-12T08:00:09.219992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #allChildren,			#protocol : #accessing,			#sourceCode : 'allChildren\r\t^ OrderedCollection with: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '541' ],		#self : OmReference [ '542' ],		#time : DateAndTime [ '2017-12-12T08:00:09.220992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #'bypass:to:',			#protocol : #transformation,			#sourceCode : 'bypass: aPP2Node to: target\r\t"nothing to do really"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '542' ],		#self : OmReference [ '543' ],		#time : DateAndTime [ '2017-12-12T08:00:09.221992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2Node\r\tnode := aPP2Node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '543' ],		#self : OmReference [ '544' ],		#time : DateAndTime [ '2017-12-12T08:00:09.222992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '544' ],		#self : OmReference [ '545' ],		#time : DateAndTime [ '2017-12-12T08:00:09.223992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #'node:',			#protocol : #accessing,			#sourceCode : 'node: anObject\r\tnode := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '545' ],		#self : OmReference [ '546' ],		#time : DateAndTime [ '2017-12-12T08:00:09.224992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '546' ],		#self : OmReference [ '547' ],		#time : DateAndTime [ '2017-12-12T08:00:09.225992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t^ node memoizationStrategy remember: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '547' ],		#self : OmReference [ '548' ],		#time : DateAndTime [ '2017-12-12T08:00:09.226992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Strategy,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\tnode memoizationStrategy restore: context from: memento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '548' ],		#self : OmReference [ '549' ],		#time : DateAndTime [ '2017-12-12T08:00:09.227992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Trimming,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t| position retval |\r\tposition := aPP2Context position.\r\r\tnode trimmer parseOn: aPP2Context.\r\t\r\t(retval := node child parseOn: aPP2Context) isPetit2Failure ifTrue: [ \r\t\taPP2Context restorePosition: position.\r\t\t^ retval\r\t].\r\t\r\tnode trimmer parseOn: aPP2Context.\r\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '549' ],		#self : OmReference [ '550' ],		#time : DateAndTime [ '2017-12-12T08:00:09.228992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingLiteralObjectToken,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aNode\r\t| token |\r\tsuper initializeFor: aNode.\r\t\r\ttoken := aNode child.\r\tliteral := token childSkipDelegate literal.\r\r\tfailure := PP2Failure message: \'literal expected\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '550' ],		#self : OmReference [ '551' ],		#time : DateAndTime [ '2017-12-12T08:00:09.229992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingLiteralObjectToken,				#isMetaSide : false			},			#name : #literal,			#protocol : #'as yet unclassified',			#sourceCode : 'literal\r\t^ literal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '551' ],		#self : OmReference [ '552' ],		#time : DateAndTime [ '2017-12-12T08:00:09.230992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingLiteralObjectToken,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'parseOn: context\r\t| position retval |\r\tposition := context rememberPosition.\r\ttrimmer parseOn: context.\r\t\r\t(context nextFor: literal) ifTrue: [\r\t\tretval := context newToken: tokenClass from: context position - 1\r\t] ifFalse: [  \r\t\tcontext restorePosition: position.\r\t\t^ failure\r\t].\r\t\r\ttrimmer parseOn: context.\r\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '552' ],		#self : OmReference [ '553' ],		#time : DateAndTime [ '2017-12-12T08:00:09.231992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #parsing,			#sourceCode : 'initializeFor: aNode\r\tsuper initializeFor: aNode.\r\t\r\ttokenClass := aNode child tokenClass.\r\ttokenChild := aNode child child.\r\ttrimmer := aNode trimmer.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '553' ],		#self : OmReference [ '554' ],		#time : DateAndTime [ '2017-12-12T08:00:09.232992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| position retval start |\r\tposition := context rememberPosition.\r\ttrimmer parseOn: context.\r\r\tstart := context position.\r\t(retval := tokenChild parseOn: context) isPetit2Failure ifTrue: [ \r\t\tcontext restorePosition: position.\r\t\t^ retval\r\t].\r\tretval := context newToken: tokenClass from: start.\r\ttrimmer parseOn: context.\r\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '554' ],		#self : OmReference [ '555' ],		#time : DateAndTime [ '2017-12-12T08:00:09.233992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #tokenChild,			#protocol : #accessing,			#sourceCode : 'tokenChild\r\t^ tokenChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '555' ],		#self : OmReference [ '556' ],		#time : DateAndTime [ '2017-12-12T08:00:09.234992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #'tokenChild:',			#protocol : #accessing,			#sourceCode : 'tokenChild: anObject\r\ttokenChild := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '556' ],		#self : OmReference [ '557' ],		#time : DateAndTime [ '2017-12-12T08:00:09.235992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #tokenClass,			#protocol : #accessing,			#sourceCode : 'tokenClass\r\t^ tokenClass',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '557' ],		#self : OmReference [ '558' ],		#time : DateAndTime [ '2017-12-12T08:00:09.236992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #'tokenClass:',			#protocol : #accessing,			#sourceCode : 'tokenClass: anObject\r\ttokenClass := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '558' ],		#self : OmReference [ '559' ],		#time : DateAndTime [ '2017-12-12T08:00:09.237992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #trimmer,			#protocol : #accessing,			#sourceCode : 'trimmer\r\t^ trimmer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '559' ],		#self : OmReference [ '560' ],		#time : DateAndTime [ '2017-12-12T08:00:09.238992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingToken,				#isMetaSide : false			},			#name : #'trimmer:',			#protocol : #accessing,			#sourceCode : 'trimmer: anObject\r\ttrimmer := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '560' ],		#self : OmReference [ '561' ],		#time : DateAndTime [ '2017-12-12T08:00:09.239992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Water,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '561' ],		#self : OmReference [ '562' ],		#time : DateAndTime [ '2017-12-12T08:00:09.240992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Water,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| result contents memento startWaterPosition |\r\tmemento := self remember: context.\r\tstartWaterPosition := context waterPosition.\r\tcontents := OrderedCollection new.\r\t\r\t"Recursive Water case"\r\t(context waterPosition = context position) ifTrue: [  ^ \'\' ].\r\t\r\t[\r\t\tcontext waterPosition: context position.\r\t\t(node boundary parseOn: context) isPetit2Failure \r\t] whileTrue: [  \r\t\t(result := node waterToken parseOn: context) isPetit2Failure ifTrue: [  \r\t\t\tself restore: context from: memento.\r\t\t\tcontext waterPosition: startWaterPosition.\r\t\t\t^ PP2Failure message: \'water boundary not found\' context: context.\r\t\t].\r\t\tcontents add: result.\r\t].\r\tcontext waterPosition: startWaterPosition.\r\t^ contents',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '562' ],		#self : OmReference [ '563' ],		#time : DateAndTime [ '2017-12-12T08:00:09.241992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Wrapping,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ node block value: aPP2Context value: [ node child parseOn: aPP2Context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '563' ],		#self : OmReference [ '564' ],		#time : DateAndTime [ '2017-12-12T08:00:09.242992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #cache,			#protocol : #conversion,			#sourceCode : 'cache\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '564' ],		#self : OmReference [ '565' ],		#time : DateAndTime [ '2017-12-12T08:00:09.243992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #'cacheHit:',			#protocol : #profiling,			#sourceCode : 'cacheHit: context\r\t"profiling not implemented"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '565' ],		#self : OmReference [ '566' ],		#time : DateAndTime [ '2017-12-12T08:00:09.244992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #invocation,			#protocol : #profiling,			#sourceCode : 'invocation\r\t"profiling not implemented"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '566' ],		#self : OmReference [ '567' ],		#time : DateAndTime [ '2017-12-12T08:00:09.245992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '567' ],		#self : OmReference [ '568' ],		#time : DateAndTime [ '2017-12-12T08:00:09.246992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| start |\r\tself invocation.\r\t(context position == position) ifTrue: [ \r\t\tself cacheHit: context.\r\t\tcontext position: endPosition.\r\t\t^ retval\r\t].\r\tstart := context position.\r\tretval := strategy parseOn: context.\r\tposition := start.\r\tendPosition := context position.\r\t\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '568' ],		#self : OmReference [ '569' ],		#time : DateAndTime [ '2017-12-12T08:00:09.247992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ PP2RecordingCache on: strategy',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '569' ],		#self : OmReference [ '570' ],		#time : DateAndTime [ '2017-12-12T08:00:09.248992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Cache,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\tposition := -1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '570' ],		#self : OmReference [ '571' ],		#time : DateAndTime [ '2017-12-12T08:00:09.249992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingCache,				#isMetaSide : false			},			#name : #hits,			#protocol : #accessing,			#sourceCode : 'hits\r\t^ hits',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '571' ],		#self : OmReference [ '572' ],		#time : DateAndTime [ '2017-12-12T08:00:09.250992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingCache,				#isMetaSide : false			},			#name : #'hits:',			#protocol : #accessing,			#sourceCode : 'hits: anInteger\r\thits := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '572' ],		#self : OmReference [ '573' ],		#time : DateAndTime [ '2017-12-12T08:00:09.251992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingCache,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself resetCounters.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '573' ],		#self : OmReference [ '574' ],		#time : DateAndTime [ '2017-12-12T08:00:09.252992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingCache,				#isMetaSide : false			},			#name : #invocations,			#protocol : #accessing,			#sourceCode : 'invocations\r\t^ invocations ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '574' ],		#self : OmReference [ '575' ],		#time : DateAndTime [ '2017-12-12T08:00:09.253992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingCache,				#isMetaSide : false			},			#name : #'invocations:',			#protocol : #accessing,			#sourceCode : 'invocations: anInteger\r\tinvocations := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '575' ],		#self : OmReference [ '576' ],		#time : DateAndTime [ '2017-12-12T08:00:09.254992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2DebuggingStrategy class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aPP2Strategy\r\t^ self new initializeFor: aPP2Strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '576' ],		#self : OmReference [ '577' ],		#time : DateAndTime [ '2017-12-12T08:00:09.255992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #cache,			#protocol : #conversion,			#sourceCode : 'cache\r\tstrategy := strategy cache',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '577' ],		#self : OmReference [ '578' ],		#time : DateAndTime [ '2017-12-12T08:00:09.256992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #'cacheIfNeeded:debugResult:',			#protocol : #caching,			#sourceCode : 'cacheIfNeeded: result debugResult: debugResult\r\t\r\t(strategy includesCache and: [ (resultCache includesKey: result) and: [ (debugResult allResults size = 1 )]]) ifTrue:[\r\t\tdebugResult children add: (PP2DebugResultLink on: (resultCache at: result))\r\t] ifFalse: [ \r\t\tresultCache at: result put: debugResult.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '578' ],		#self : OmReference [ '579' ],		#time : DateAndTime [ '2017-12-12T08:00:09.258992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #debug,			#protocol : #conversion,			#sourceCode : 'debug\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '579' ],		#self : OmReference [ '580' ],		#time : DateAndTime [ '2017-12-12T08:00:09.259992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tresultCache := IdentityDictionary new.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '580' ],		#self : OmReference [ '581' ],		#time : DateAndTime [ '2017-12-12T08:00:09.260992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #isDebugging,			#protocol : #testing,			#sourceCode : 'isDebugging\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '581' ],		#self : OmReference [ '582' ],		#time : DateAndTime [ '2017-12-12T08:00:09.261992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| parentDebugResult debugResult result |\r\tparentDebugResult := context currentDebugResult.\r\t\r\tdebugResult := PP2DebugResult new\r\t\tparser: self node;\r\t\tstart: context position + 1;\r\t\tparent: parentDebugResult;\r\t\tyourself.\r\t\r\tparentDebugResult children add: debugResult.\r\t\t\r\tcontext currentDebugResult: debugResult.\r\tresult := strategy parseOn: context.\r\tself cacheIfNeeded: result debugResult: debugResult.\r\tcontext currentDebugResult: parentDebugResult.\r\t\r\tdebugResult \r\t\tstop: context position;\r\t\tresult: result.\r\t\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '582' ],		#self : OmReference [ '583' ],		#time : DateAndTime [ '2017-12-12T08:00:09.261992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #'parsingGuard:',			#protocol : #conversion,			#sourceCode : 'parsingGuard: classification\r\tstrategy := strategy parsingGuard: classification',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '583' ],		#self : OmReference [ '584' ],		#time : DateAndTime [ '2017-12-12T08:00:09.262992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ PP2RecordingDebuggingStrategy on: strategy ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '584' ],		#self : OmReference [ '585' ],		#time : DateAndTime [ '2017-12-12T08:00:09.263992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #reparsable,			#protocol : #conversion,			#sourceCode : 'reparsable\r\tstrategy := strategy reparsable',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '585' ],		#self : OmReference [ '586' ],		#time : DateAndTime [ '2017-12-12T08:00:09.264992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategy,				#isMetaSide : false			},			#name : #withoutDebugStrategy,			#protocol : #accessing,			#sourceCode : 'withoutDebugStrategy\r\t^ strategy withoutDebugStrategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '586' ],		#self : OmReference [ '587' ],		#time : DateAndTime [ '2017-12-12T08:00:09.265992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingDebuggingStrategy,				#isMetaSide : false			},			#name : #isRecording,			#protocol : #testing,			#sourceCode : 'isRecording\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '587' ],		#self : OmReference [ '588' ],		#time : DateAndTime [ '2017-12-12T08:00:09.266992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingDebuggingStrategy,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| result entry |\r\tself node hasName ifTrue: [ context namedInvoked \t] ifFalse: [ context invoked ].\r\tentry := context eventsTrace last.\r\tentry start: context eventsTrace entriesCount.\r\t\r\tresult := super parseOn: context.\r\t\r\tentry stop: context eventsTrace entriesCount.\r\tentry debugResult: context lastDebugResult.\r\r\t"JK: I don\'t like this reference from debugResult to entry..."\r\tcontext lastDebugResult invocationEntry: entry.\r\t\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '588' ],		#self : OmReference [ '589' ],		#time : DateAndTime [ '2017-12-12T08:00:09.268992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingDebuggingStrategy,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '589' ],		#self : OmReference [ '590' ],		#time : DateAndTime [ '2017-12-12T08:00:09.269992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #cache,			#protocol : #conversion,			#sourceCode : 'cache\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '590' ],		#self : OmReference [ '591' ],		#time : DateAndTime [ '2017-12-12T08:00:09.270992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #'cacheHit:',			#protocol : #profiling,			#sourceCode : 'cacheHit: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '591' ],		#self : OmReference [ '592' ],		#time : DateAndTime [ '2017-12-12T08:00:09.271992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t"\r\tWould be nice to call this, but there is some mess in initializations.\r\tThis would be called before underlying strategy knows, what is its node :(\r\t\r\tself reset\r\t"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '592' ],		#self : OmReference [ '593' ],		#time : DateAndTime [ '2017-12-12T08:00:09.272992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #invocation,			#protocol : #profiling,			#sourceCode : 'invocation',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '593' ],		#self : OmReference [ '594' ],		#time : DateAndTime [ '2017-12-12T08:00:09.273992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '594' ],		#self : OmReference [ '595' ],		#time : DateAndTime [ '2017-12-12T08:00:09.273992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #isMemoized,			#protocol : #testing,			#sourceCode : 'isMemoized\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '595' ],		#self : OmReference [ '596' ],		#time : DateAndTime [ '2017-12-12T08:00:09.274992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #memoize,			#protocol : #conversion,			#sourceCode : 'memoize\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '596' ],		#self : OmReference [ '597' ],		#time : DateAndTime [ '2017-12-12T08:00:09.275992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| contextMemento returnValue |\r\tself invocation.\r\tcontextMemento := self remember: context.\r\tbuffer at: contextMemento ifPresent: [:memento |\r\t\tself cacheHit: context.\r\t\tself restore: context from: memento contextMemento.\r\t\t^ memento returnValue\r\t].\r\r\treturnValue := strategy parseOn: context.\r\r\t(context waterPosition == context position) ifFalse: [  \r\t\t| result |\r\t\tresult := PP2Memento new \r\t\t\treturnValue: returnValue;\r\t\t\tcontextMemento: (self remember: context);\r\t\t\tyourself.\r\r\t\tbuffer at: contextMemento put: result\r\t].\r\r\t^ returnValue\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '597' ],		#self : OmReference [ '598' ],		#time : DateAndTime [ '2017-12-12T08:00:09.276992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ PP2RecordingMemoizedSea on: strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '598' ],		#self : OmReference [ '599' ],		#time : DateAndTime [ '2017-12-12T08:00:09.277992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t^ memoizationStrategy remember: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '599' ],		#self : OmReference [ '600' ],		#time : DateAndTime [ '2017-12-12T08:00:09.279992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\tself node isContextSensitive ifTrue: [  \r\t\tmemoizationStrategy := PP2CSMemoization new.\r\t\tbuffer := Dictionary new.\r\t] ifFalse: [  \r\t\tmemoizationStrategy := PP2CFMemoization new.\r\t\tbuffer := IdentityDictionary new\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '600' ],		#self : OmReference [ '601' ],		#time : DateAndTime [ '2017-12-12T08:00:09.280992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MemoizedSea,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\t^ memoizationStrategy restore: context from: memento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '601' ],		#self : OmReference [ '602' ],		#time : DateAndTime [ '2017-12-12T08:00:09.281992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingMemoizedSea,				#isMetaSide : false			},			#name : #hits,			#protocol : #profiling,			#sourceCode : 'hits\r\t^ hits',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '602' ],		#self : OmReference [ '603' ],		#time : DateAndTime [ '2017-12-12T08:00:09.282992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingMemoizedSea,				#isMetaSide : false			},			#name : #'hits:',			#protocol : #profiling,			#sourceCode : 'hits: anInteger\r\thits := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '603' ],		#self : OmReference [ '604' ],		#time : DateAndTime [ '2017-12-12T08:00:09.283992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingMemoizedSea,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself resetCounters.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '604' ],		#self : OmReference [ '605' ],		#time : DateAndTime [ '2017-12-12T08:00:09.284992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingMemoizedSea,				#isMetaSide : false			},			#name : #invocations,			#protocol : #profiling,			#sourceCode : 'invocations\r\t^ invocations',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '605' ],		#self : OmReference [ '606' ],		#time : DateAndTime [ '2017-12-12T08:00:09.285992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingMemoizedSea,				#isMetaSide : false			},			#name : #'invocations:',			#protocol : #profiling,			#sourceCode : 'invocations: anInteger\r\tinvocations := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '606' ],		#self : OmReference [ '607' ],		#time : DateAndTime [ '2017-12-12T08:00:09.286992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #buffer,			#protocol : #accessing,			#sourceCode : 'buffer\r\t^ buffer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '607' ],		#self : OmReference [ '608' ],		#time : DateAndTime [ '2017-12-12T08:00:09.287992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #'cacheHit:',			#protocol : #profiling,			#sourceCode : 'cacheHit: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '608' ],		#self : OmReference [ '609' ],		#time : DateAndTime [ '2017-12-12T08:00:09.287992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #invocation,			#protocol : #profiling,			#sourceCode : 'invocation',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '609' ],		#self : OmReference [ '610' ],		#time : DateAndTime [ '2017-12-12T08:00:09.289992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '610' ],		#self : OmReference [ '611' ],		#time : DateAndTime [ '2017-12-12T08:00:09.290992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #isMemoized,			#protocol : #testing,			#sourceCode : 'isMemoized\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '611' ],		#self : OmReference [ '612' ],		#time : DateAndTime [ '2017-12-12T08:00:09.291992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #memoize,			#protocol : #conversion,			#sourceCode : 'memoize\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '612' ],		#self : OmReference [ '613' ],		#time : DateAndTime [ '2017-12-12T08:00:09.292992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| contextMemento returnValue result |\r\tself invocation.\r\tcontextMemento := self remember: context.\r\tbuffer at: contextMemento ifPresent: [:memento |\r\t\tself cacheHit: context.\r\t\tself restore: context from: memento contextMemento.\r\t\t^ memento returnValue\r\t].\r\r\treturnValue := strategy parseOn: context.\r\r\tresult := PP2Memento new \r\t\treturnValue: returnValue;\r\t\tcontextMemento: (self remember: context);\r\t\tyourself.\r\r\tbuffer at: contextMemento put: result.\r\r\t^ returnValue\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '613' ],		#self : OmReference [ '614' ],		#time : DateAndTime [ '2017-12-12T08:00:09.293992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ PP2RecordingPackrat on: strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '614' ],		#self : OmReference [ '615' ],		#time : DateAndTime [ '2017-12-12T08:00:09.294992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t^ memoizationStrategy remember: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '615' ],		#self : OmReference [ '616' ],		#time : DateAndTime [ '2017-12-12T08:00:09.295992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #reset,			#protocol : #accessing,			#sourceCode : 'reset\r\tself node isContextSensitive ifTrue: [  \r\t\tmemoizationStrategy := PP2CSMemoization new.\r\t\tbuffer := Dictionary new\r\t] ifFalse: [  \r\t\tmemoizationStrategy := PP2CFMemoization new.\r\t\tbuffer := IdentityDictionary new\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '616' ],		#self : OmReference [ '617' ],		#time : DateAndTime [ '2017-12-12T08:00:09.296992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Packrat,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\t^ memoizationStrategy restore: context from: memento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '617' ],		#self : OmReference [ '618' ],		#time : DateAndTime [ '2017-12-12T08:00:09.296992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingPackrat,				#isMetaSide : false			},			#name : #hits,			#protocol : #accessing,			#sourceCode : 'hits\r\t^ hits',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '618' ],		#self : OmReference [ '619' ],		#time : DateAndTime [ '2017-12-12T08:00:09.297992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingPackrat,				#isMetaSide : false			},			#name : #'hits:',			#protocol : #accessing,			#sourceCode : 'hits: anObject\r\thits := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '619' ],		#self : OmReference [ '620' ],		#time : DateAndTime [ '2017-12-12T08:00:09.299992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingPackrat,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself resetCounters.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '620' ],		#self : OmReference [ '621' ],		#time : DateAndTime [ '2017-12-12T08:00:09.300992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingPackrat,				#isMetaSide : false			},			#name : #invocations,			#protocol : #accessing,			#sourceCode : 'invocations\r\t^ invocations',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '621' ],		#self : OmReference [ '622' ],		#time : DateAndTime [ '2017-12-12T08:00:09.301992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingPackrat,				#isMetaSide : false			},			#name : #'invocations:',			#protocol : #accessing,			#sourceCode : 'invocations: anObject\r\tinvocations := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '622' ],		#self : OmReference [ '623' ],		#time : DateAndTime [ '2017-12-12T08:00:09.302992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuard,				#isMetaSide : false			},			#name : #classification,			#protocol : #accessing,			#sourceCode : 'classification\r\t^ classification ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '623' ],		#self : OmReference [ '624' ],		#time : DateAndTime [ '2017-12-12T08:00:09.303992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuard,				#isMetaSide : false			},			#name : #'classification:',			#protocol : #accessing,			#sourceCode : 'classification: anArray\r\t"I am experimenting with smaller classification, but not 100% sure this improves performance"\r\tclassification := (anArray copyFrom: 1 to: 128)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '624' ],		#self : OmReference [ '625' ],		#time : DateAndTime [ '2017-12-12T08:00:09.304992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuard,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| intValue |\r\tcontext atEnd ifTrue: [ ^ retval ].\r\r\tintValue := context uncheckedPeek asInteger.\r\t(intValue between: 0 and: 128) ifFalse: [  \r\t\t^ strategy parseOn: context\r\t].\r\t\r\t(classification at: intValue) ifFalse: [ \r\t\t^ retval\r\t].\r\r\t^ strategy parseOn: context\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '625' ],		#self : OmReference [ '626' ],		#time : DateAndTime [ '2017-12-12T08:00:09.305992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuard,				#isMetaSide : false			},			#name : #'parsingGuard:',			#protocol : #conversion,			#sourceCode : 'parsingGuard: anArray\r\tself assert: classification = (anArray copyFrom: 1 to: classification size).\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '626' ],		#self : OmReference [ '627' ],		#time : DateAndTime [ '2017-12-12T08:00:09.306992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuard,				#isMetaSide : false			},			#name : #retval,			#protocol : #accessing,			#sourceCode : 'retval\r\t^ retval ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '627' ],		#self : OmReference [ '628' ],		#time : DateAndTime [ '2017-12-12T08:00:09.307992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuard,				#isMetaSide : false			},			#name : #'retval:',			#protocol : #accessing,			#sourceCode : 'retval: anObject\r\tretval := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '628' ],		#self : OmReference [ '629' ],		#time : DateAndTime [ '2017-12-12T08:00:09.308992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingStrategy,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| result entry lastDebugResult |\r\tself node hasName ifTrue: [ context namedInvoked \t] ifFalse: [ context invoked ].\r\tentry := context eventsTrace last.\r\tentry start: context eventsTrace entriesCount.\r\t\r\tresult := strategy parseOn: context.\r\t\r\tentry stop: context eventsTrace entriesCount.\r\r\t(lastDebugResult := context lastDebugResult) isNil ifFalse: [ \r\t\tentry debugResult: lastDebugResult.\r\t\tlastDebugResult invocationEntry: entry.\r\t].\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '629' ],		#self : OmReference [ '630' ],		#time : DateAndTime [ '2017-12-12T08:00:09.310992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #buffer,			#protocol : #accessing,			#sourceCode : 'buffer\r\t^ buffer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '630' ],		#self : OmReference [ '631' ],		#time : DateAndTime [ '2017-12-12T08:00:09.310992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #'buffer:',			#protocol : #accessing,			#sourceCode : 'buffer: anObject\r\tbuffer := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '631' ],		#self : OmReference [ '632' ],		#time : DateAndTime [ '2017-12-12T08:00:09.311992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #cache,			#protocol : #conversion,			#sourceCode : 'cache\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '632' ],		#self : OmReference [ '633' ],		#time : DateAndTime [ '2017-12-12T08:00:09.312992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #displayName,			#protocol : #'as yet unclassified',			#sourceCode : 'displayName\r\t^ super displayName, \'#\', self identityHash asString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '633' ],		#self : OmReference [ '634' ],		#time : DateAndTime [ '2017-12-12T08:00:09.313992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tself reset',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '634' ],		#self : OmReference [ '635' ],		#time : DateAndTime [ '2017-12-12T08:00:09.314992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '635' ],		#self : OmReference [ '636' ],		#time : DateAndTime [ '2017-12-12T08:00:09.315992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #isReparsable,			#protocol : #testing,			#sourceCode : 'isReparsable\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '636' ],		#self : OmReference [ '637' ],		#time : DateAndTime [ '2017-12-12T08:00:09.316992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| memento mementoPromise |\r\tHalt if: [ Sensor shiftPressed  ].\r\t\r\tmementoPromise := buffer at: context position ifAbsentPut: [ \r\t\tPP2MementoPromise new\r\t\t\tposition: context position;\r\t\t\tbuffer: buffer;\r\t\t\tyourself\r\t].\r\r\tmemento := mementoPromise resolveFor: strategy in: context.\r\tcontext restore: memento contextMemento.\r\r\t^ memento returnValue\r\t\r\t"\r\t\tThe code might be a bit of magic, because it handles \'reparses\':\r\t\t\t1) In case of the first parse, a MementoPromise is crated and immediately resolved.\r\t\t\t2) In case of a reparse after a change in input, an PP2InputChange puts a mementoPromise \r\t\t\t\tto the buffer with a limit. If parser during the resolve does not fit the limit, an\r\t\t\t\texception is raised and reparse fails.\r\t"\r\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '637' ],		#self : OmReference [ '638' ],		#time : DateAndTime [ '2017-12-12T08:00:09.317992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\tsuper postCopy.\r\t\r\tbuffer := buffer copy.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '638' ],		#self : OmReference [ '639' ],		#time : DateAndTime [ '2017-12-12T08:00:09.318992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #reparsable,			#protocol : #accessing,			#sourceCode : 'reparsable\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '639' ],		#self : OmReference [ '640' ],		#time : DateAndTime [ '2017-12-12T08:00:09.320992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Reparsable,				#isMetaSide : false			},			#name : #reset,			#protocol : #accessing,			#sourceCode : 'reset\r\tbuffer := IdentityDictionary new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '640' ],		#self : OmReference [ '641' ],		#time : DateAndTime [ '2017-12-12T08:00:09.321992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingTrimmingCache,				#isMetaSide : false			},			#name : #hits,			#protocol : #accessing,			#sourceCode : 'hits\r\t^ hits ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '641' ],		#self : OmReference [ '642' ],		#time : DateAndTime [ '2017-12-12T08:00:09.322992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingTrimmingCache,				#isMetaSide : false			},			#name : #'hits:',			#protocol : #accessing,			#sourceCode : 'hits: anInteger\r\thits := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '642' ],		#self : OmReference [ '643' ],		#time : DateAndTime [ '2017-12-12T08:00:09.323992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingTrimmingCache,				#isMetaSide : false			},			#name : #invocations,			#protocol : #accessing,			#sourceCode : 'invocations\r\t^ invocations ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '643' ],		#self : OmReference [ '644' ],		#time : DateAndTime [ '2017-12-12T08:00:09.324992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingTrimmingCache,				#isMetaSide : false			},			#name : #'invocations:',			#protocol : #accessing,			#sourceCode : 'invocations: anInteger\r\tinvocations := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '644' ],		#self : OmReference [ '645' ],		#time : DateAndTime [ '2017-12-12T08:00:09.325992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #cache,			#protocol : #conversion,			#sourceCode : 'cache\r\t"I already cache trimming, no need to add another layer of caches"\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '645' ],		#self : OmReference [ '646' ],		#time : DateAndTime [ '2017-12-12T08:00:09.326992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #'cacheHit:',			#protocol : #profiling,			#sourceCode : 'cacheHit: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '646' ],		#self : OmReference [ '647' ],		#time : DateAndTime [ '2017-12-12T08:00:09.327992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2Strategy\r\tsuper initializeFor: aPP2Strategy.\r\t\r\tfailure := PP2Failure message: \'no more whitespace\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '647' ],		#self : OmReference [ '648' ],		#time : DateAndTime [ '2017-12-12T08:00:09.328992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #invocation,			#protocol : #profiling,			#sourceCode : 'invocation',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '648' ],		#self : OmReference [ '649' ],		#time : DateAndTime [ '2017-12-12T08:00:09.328992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '649' ],		#self : OmReference [ '650' ],		#time : DateAndTime [ '2017-12-12T08:00:09.330992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: context\r\t| retval |\r\tself invocation.\r\t(context position == lastTrimming) ifTrue: [ \r\t\tself cacheHit: context.\r\t\t^ failure \r\t].\r\tretval := strategy parseOn: context.\r\tlastTrimming := context position.\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '650' ],		#self : OmReference [ '651' ],		#time : DateAndTime [ '2017-12-12T08:00:09.331992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #recording,			#protocol : #conversion,			#sourceCode : 'recording\r\t^ PP2RecordingTrimmingCache on: strategy',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '651' ],		#self : OmReference [ '652' ],		#time : DateAndTime [ '2017-12-12T08:00:09.332992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\tlastTrimming := nil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '652' ],		#self : OmReference [ '653' ],		#time : DateAndTime [ '2017-12-12T08:00:09.333992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCache,				#isMetaSide : false			},			#name : #trimmingCache,			#protocol : #conversion,			#sourceCode : 'trimmingCache\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '653' ],		#self : OmReference [ '654' ],		#time : DateAndTime [ '2017-12-12T08:00:09.334992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2WrappingStrategy class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aPP2Strategy\r\t^ self new initializeFor: aPP2Strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '654' ],		#self : OmReference [ '655' ],		#time : DateAndTime [ '2017-12-12T08:00:09.335992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #allChildren,			#protocol : #accessing,			#sourceCode : 'allChildren\r\t^ (strategy allChildren) \r\t\taddFirst: self;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '655' ],		#self : OmReference [ '656' ],		#time : DateAndTime [ '2017-12-12T08:00:09.336992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'bypass:to:',			#protocol : #transformation,			#sourceCode : 'bypass: aChild to: target\r\tstrategy bypass: aChild to: target',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '656' ],		#self : OmReference [ '657' ],		#time : DateAndTime [ '2017-12-12T08:00:09.337992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'changeStrategy:',			#protocol : #parsing,			#sourceCode : 'changeStrategy: newStrategy\r\tself halt: \'JK: delete?\'.\r\tstrategy := newStrategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '657' ],		#self : OmReference [ '658' ],		#time : DateAndTime [ '2017-12-12T08:00:09.338992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #initialization,			#sourceCode : 'initializeFor: aPP2Strategy\r\tstrategy := aPP2Strategy.\r\t\r\tself assert: aPP2Strategy class ~= self class',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '658' ],		#self : OmReference [ '659' ],		#time : DateAndTime [ '2017-12-12T08:00:09.339992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #isCache,			#protocol : #testing,			#sourceCode : 'isCache\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '659' ],		#self : OmReference [ '660' ],		#time : DateAndTime [ '2017-12-12T08:00:09.340992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ strategy node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '660' ],		#self : OmReference [ '661' ],		#time : DateAndTime [ '2017-12-12T08:00:09.341992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'node:',			#protocol : #accessing,			#sourceCode : 'node: anObject\r\t^ strategy node: anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '661' ],		#self : OmReference [ '662' ],		#time : DateAndTime [ '2017-12-12T08:00:09.342992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '662' ],		#self : OmReference [ '663' ],		#time : DateAndTime [ '2017-12-12T08:00:09.343992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\tsuper postCopy.\r\t\r\tstrategy := strategy copy.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '663' ],		#self : OmReference [ '664' ],		#time : DateAndTime [ '2017-12-12T08:00:09.344992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #conversion,			#sourceCode : 'recognizer\r\tstrategy := strategy recognizer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '664' ],		#self : OmReference [ '665' ],		#time : DateAndTime [ '2017-12-12T08:00:09.345992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t^ self node memoizationStrategy remember: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '665' ],		#self : OmReference [ '666' ],		#time : DateAndTime [ '2017-12-12T08:00:09.346992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\t^ self node memoizationStrategy restore: context from: memento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '666' ],		#self : OmReference [ '667' ],		#time : DateAndTime [ '2017-12-12T08:00:09.347992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #strategy,			#protocol : #accessing,			#sourceCode : 'strategy\r\t^ strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '667' ],		#self : OmReference [ '668' ],		#time : DateAndTime [ '2017-12-12T08:00:09.348992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingStrategy,				#isMetaSide : false			},			#name : #'strategy:',			#protocol : #accessing,			#sourceCode : 'strategy: newStrategy\r\tstrategy := newStrategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '668' ],		#self : OmReference [ '669' ],		#time : DateAndTime [ '2017-12-12T08:00:09.349992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AsyncStream,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #converting,			#sourceCode : 'asPetit2Stream\r\t^ PP2BufferStream on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '669' ],		#self : OmReference [ '670' ],		#time : DateAndTime [ '2017-12-12T08:00:09.350992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AsyncStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #'minimal interface',			#sourceCode : 'atEnd\r\t^ queue isEmpty and: closed',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '670' ],		#self : OmReference [ '671' ],		#time : DateAndTime [ '2017-12-12T08:00:09.352992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AsyncStream,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\tclosed := true.\r\t"I need to queue some character at the end, because next is waiting for an input"\r\tqueue addLast: (Character codePoint: 4).',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '671' ],		#self : OmReference [ '672' ],		#time : DateAndTime [ '2017-12-12T08:00:09.352992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AsyncStream,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tclosed := false.\r\tqueue := OrderedCollection new.\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '672' ],		#self : OmReference [ '673' ],		#time : DateAndTime [ '2017-12-12T08:00:09.353992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AsyncStream,				#isMetaSide : false			},			#name : #next,			#protocol : #'minimal interface',			#sourceCode : 'next\r\t| delay |\r\tdelay := Delay forMilliseconds: 50.\r\t\r\t[ queue isEmpty] whileTrue: [ delay wait  ].\r\t^  queue removeFirst',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '673' ],		#self : OmReference [ '674' ],		#time : DateAndTime [ '2017-12-12T08:00:09.354992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AsyncStream,				#isMetaSide : false			},			#name : #'queueChar:',			#protocol : #events,			#sourceCode : 'queueChar: aCharacter\r\tclosed ifFalse: [  queue addLast: aCharacter ]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '674' ],		#self : OmReference [ '675' ],		#time : DateAndTime [ '2017-12-12T08:00:09.355992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2BufferStream class',				#isMetaSide : true			},			#name : #new,			#protocol : #'as yet unclassified',			#sourceCode : 'new\r\t"for compatibility reasons"\r\t^ self basicNew\r\t\tinitialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '675' ],		#self : OmReference [ '676' ],		#time : DateAndTime [ '2017-12-12T08:00:09.356992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2BufferStream class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: stream\r\t^ self on: stream bufferSize: 1024',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '676' ],		#self : OmReference [ '677' ],		#time : DateAndTime [ '2017-12-12T08:00:09.357992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2BufferStream class',				#isMetaSide : true			},			#name : #'on:bufferSize:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: stream bufferSize: bufferSize\r\t^ (self basicNew)\r\t\tinitializeForSize: bufferSize;\r\t\tstream: stream;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '677' ],		#self : OmReference [ '678' ],		#time : DateAndTime [ '2017-12-12T08:00:09.358992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #asPetit2Context,			#protocol : #converting,			#sourceCode : 'asPetit2Context\r\t^ PP2Context on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '678' ],		#self : OmReference [ '679' ],		#time : DateAndTime [ '2017-12-12T08:00:09.359992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #converting,			#sourceCode : 'asPetit2Stream\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '679' ],		#self : OmReference [ '680' ],		#time : DateAndTime [ '2017-12-12T08:00:09.360992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #asPetitStream,			#protocol : #converting,			#sourceCode : 'asPetitStream\r\t^ stream asPetitStream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '680' ],		#self : OmReference [ '681' ],		#time : DateAndTime [ '2017-12-12T08:00:09.362992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'atEnd:',			#protocol : #'context interface',			#sourceCode : 'atEnd: readPosition\r\tself upToPosition: readPosition.\r\t\r\t^ (readPosition >= position) and: [ stream atEnd ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '681' ],		#self : OmReference [ '682' ],		#time : DateAndTime [ '2017-12-12T08:00:09.363992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'atPosition:',			#protocol : #'context interface',			#sourceCode : 'atPosition: readPosition\r\t(readPosition == position) ifTrue: [ \r\t\t^ self last.\r\t].\r\r\t(readPosition > position) ifTrue: [ \r\t\tself upToPosition: readPosition.\r\t\t(readPosition > position) ifTrue: [ SubscriptOutOfBounds signal ].\r\t\t^ self last\r\t].\r\r\t"backtrack case"\r\t(position - readPosition >= bufferSize) ifTrue: [ \r\t\tSubscriptOutOfBounds signalFor: readPosition.\r\t].\r\t^ buffer at: ((readPosition - 1) % bufferSize) + 1.\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '682' ],		#self : OmReference [ '683' ],		#time : DateAndTime [ '2017-12-12T08:00:09.364992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #buffer,			#protocol : #'accessing - private',			#sourceCode : 'buffer\r\t^ buffer ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '683' ],		#self : OmReference [ '684' ],		#time : DateAndTime [ '2017-12-12T08:00:09.364992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #bufferSize,			#protocol : #'accessing - private',			#sourceCode : 'bufferSize\r\t^ bufferSize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '684' ],		#self : OmReference [ '685' ],		#time : DateAndTime [ '2017-12-12T08:00:09.365992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"Not sure, what is the best think to return..."\r\t^ buffer contents copyFrom: 1 to: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '685' ],		#self : OmReference [ '686' ],		#time : DateAndTime [ '2017-12-12T08:00:09.366992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'copyFrom:to:',			#protocol : #'context interface',			#sourceCode : 'copyFrom: start to: stop\r\t"start - end should be in range <0, size)"\r\t| bufferStart bufferStop |\t\r\t(stop - start >= bufferSize ) ifTrue: [ \r\t\t"range bigger than buffer"\r\t\tSubscriptOutOfBounds signalFor: start.\r\t].\r\r\t(position - start >= bufferSize) ifTrue: [ \r\t\t"buffer not big enough"\r\t\tSubscriptOutOfBounds signalFor: start.\r\t].\r\r\tself upToPosition: stop.\r\t\r\t(position < stop) ifTrue: [ \r\t\tSubscriptOutOfBounds signalFor: stop.\r\t].\r\r\r\tbufferStart := ((start - 1) % bufferSize) + 1.\r\tbufferStop := ((stop -1) % bufferSize) + 1.\r\t\r\t(bufferStart <= bufferStop) ifTrue: [ \r\t\t^ buffer copyFrom: bufferStart to: bufferStop\r\t] ifFalse: [\r\t\t| retval |\r\t\tretval := ByteString new: stop - start + 1. \r\t\t0 to: stop - start do: [ :index |\r\t\t\tretval at: (index + 1) put: (buffer at: ((start - 1 + index) % bufferSize) + 1)\r\t\t].\r\t\t^ retval\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '686' ],		#self : OmReference [ '687' ],		#time : DateAndTime [ '2017-12-12T08:00:09.367992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tself initializeForSize: 1024',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '687' ],		#self : OmReference [ '688' ],		#time : DateAndTime [ '2017-12-12T08:00:09.368992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'initializeForSize:',			#protocol : #initialization,			#sourceCode : 'initializeForSize: size\r\t"nothing to do"\r\tbufferSize := size.\r\tbuffer := ByteString new: bufferSize.\r\tposition := 0.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '688' ],		#self : OmReference [ '689' ],		#time : DateAndTime [ '2017-12-12T08:00:09.369992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #isBuffered,			#protocol : #testing,			#sourceCode : 'isBuffered\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '689' ],		#self : OmReference [ '690' ],		#time : DateAndTime [ '2017-12-12T08:00:09.370992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #last,			#protocol : #private,			#sourceCode : 'last\r\t^ buffer at: ((position - 1) % bufferSize) + 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '690' ],		#self : OmReference [ '691' ],		#time : DateAndTime [ '2017-12-12T08:00:09.372992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'newToken:from:to:',			#protocol : #'context interface',			#sourceCode : 'newToken: tokenClass from: start to: stop\r\t| collection |\r\tcollection := self copyFrom: start to: stop.\r\t\r\t^ tokenClass \r\t\ton: collection \r\t\tstart:  1\r\t\tstop: \t(stop - start + 1)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '691' ],		#self : OmReference [ '692' ],		#time : DateAndTime [ '2017-12-12T08:00:09.373992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'printOn:position:',			#protocol : #testing,			#sourceCode : 'printOn: writeStream position: currentPosition\r\t"TODO: show the position as well"\r\tstream contents printOn: writeStream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '692' ],		#self : OmReference [ '693' ],		#time : DateAndTime [ '2017-12-12T08:00:09.374992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '693' ],		#self : OmReference [ '694' ],		#time : DateAndTime [ '2017-12-12T08:00:09.375992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: aStream\r\tstream := aStream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '694' ],		#self : OmReference [ '695' ],		#time : DateAndTime [ '2017-12-12T08:00:09.376992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #uncheckedNext,			#protocol : #private,			#sourceCode : 'uncheckedNext\r\t| bufferIndex |\r\tbufferIndex := (position % bufferSize) + 1.\r\tposition := position + 1.\r\t\r\tbuffer at: bufferIndex put: stream next.\r\t^ buffer at: bufferIndex',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '695' ],		#self : OmReference [ '696' ],		#time : DateAndTime [ '2017-12-12T08:00:09.377992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStream,				#isMetaSide : false			},			#name : #'upToPosition:',			#protocol : #private,			#sourceCode : 'upToPosition: readPosition\r\t[position < (readPosition) and: [ stream atEnd not ]] whileTrue: [  \r\t\tself uncheckedNext\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '696' ],		#self : OmReference [ '697' ],		#time : DateAndTime [ '2017-12-12T08:00:09.378992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcChange,				#isMetaSide : false			},			#name : #isContextChange,			#protocol : #testing,			#sourceCode : 'isContextChange\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '697' ],		#self : OmReference [ '698' ],		#time : DateAndTime [ '2017-12-12T08:00:09.378992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcChange,				#isMetaSide : false			},			#name : #isNotContextChange,			#protocol : #testing,			#sourceCode : 'isNotContextChange\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '698' ],		#self : OmReference [ '699' ],		#time : DateAndTime [ '2017-12-12T08:00:09.379992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcChange,				#isMetaSide : false			},			#name : #isUnknownChange,			#protocol : #testing,			#sourceCode : 'isUnknownChange\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '699' ],		#self : OmReference [ '700' ],		#time : DateAndTime [ '2017-12-12T08:00:09.380992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcDoesNotChange,				#isMetaSide : false			},			#name : #isContextChange,			#protocol : #'as yet unclassified',			#sourceCode : 'isContextChange\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '700' ],		#self : OmReference [ '701' ],		#time : DateAndTime [ '2017-12-12T08:00:09.382992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcDoesNotChange,				#isMetaSide : false			},			#name : #isNotContextChange,			#protocol : #'as yet unclassified',			#sourceCode : 'isNotContextChange\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '701' ],		#self : OmReference [ '702' ],		#time : DateAndTime [ '2017-12-12T08:00:09.383992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcPop,				#isMetaSide : false			},			#name : #isContextChange,			#protocol : #testing,			#sourceCode : 'isContextChange\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '702' ],		#self : OmReference [ '703' ],		#time : DateAndTime [ '2017-12-12T08:00:09.384992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcPop,				#isMetaSide : false			},			#name : #isContextPop,			#protocol : #testing,			#sourceCode : 'isContextPop\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '703' ],		#self : OmReference [ '704' ],		#time : DateAndTime [ '2017-12-12T08:00:09.385992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcPush,				#isMetaSide : false			},			#name : #isContextChange,			#protocol : #'as yet unclassified',			#sourceCode : 'isContextChange\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '704' ],		#self : OmReference [ '705' ],		#time : DateAndTime [ '2017-12-12T08:00:09.386992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcPush,				#isMetaSide : false			},			#name : #isContextPush,			#protocol : #'as yet unclassified',			#sourceCode : 'isContextPush\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '705' ],		#self : OmReference [ '706' ],		#time : DateAndTime [ '2017-12-12T08:00:09.387992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CcResult class',				#isMetaSide : true			},			#name : #change,			#protocol : #'instance creation',			#sourceCode : 'change\r\t^ PP2CcChange instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '706' ],		#self : OmReference [ '707' ],		#time : DateAndTime [ '2017-12-12T08:00:09.388992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CcResult class',				#isMetaSide : true			},			#name : #instance,			#protocol : #'instance creation',			#sourceCode : 'instance\r\tInstance isNil ifTrue: [  \r\t\tInstance := self new\r\t].\r\r\t^ Instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '707' ],		#self : OmReference [ '708' ],		#time : DateAndTime [ '2017-12-12T08:00:09.389992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CcResult class',				#isMetaSide : true			},			#name : #noChange,			#protocol : #'instance creation',			#sourceCode : 'noChange\r\t^ PP2CcDoesNotChange instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '708' ],		#self : OmReference [ '709' ],		#time : DateAndTime [ '2017-12-12T08:00:09.390992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CcResult class',				#isMetaSide : true			},			#name : #pop,			#protocol : #'instance creation',			#sourceCode : 'pop\r\t^ PP2CcPop instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '709' ],		#self : OmReference [ '710' ],		#time : DateAndTime [ '2017-12-12T08:00:09.390992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CcResult class',				#isMetaSide : true			},			#name : #push,			#protocol : #'instance creation',			#sourceCode : 'push\r\t^ PP2CcPush instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '710' ],		#self : OmReference [ '711' ],		#time : DateAndTime [ '2017-12-12T08:00:09.392992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcResult,				#isMetaSide : false			},			#name : #isContextChange,			#protocol : #testing,			#sourceCode : 'isContextChange\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '711' ],		#self : OmReference [ '712' ],		#time : DateAndTime [ '2017-12-12T08:00:09.393992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcResult,				#isMetaSide : false			},			#name : #isContextPop,			#protocol : #testing,			#sourceCode : 'isContextPop\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '712' ],		#self : OmReference [ '713' ],		#time : DateAndTime [ '2017-12-12T08:00:09.394992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcResult,				#isMetaSide : false			},			#name : #isContextPush,			#protocol : #testing,			#sourceCode : 'isContextPush\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '713' ],		#self : OmReference [ '714' ],		#time : DateAndTime [ '2017-12-12T08:00:09.395992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcResult,				#isMetaSide : false			},			#name : #isNotContextChange,			#protocol : #testing,			#sourceCode : 'isNotContextChange\r\t^ self isContextChange not',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '714' ],		#self : OmReference [ '715' ],		#time : DateAndTime [ '2017-12-12T08:00:09.396992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CcResult,				#isMetaSide : false			},			#name : #isUnknownChange,			#protocol : #testing,			#sourceCode : 'isUnknownChange\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '715' ],		#self : OmReference [ '716' ],		#time : DateAndTime [ '2017-12-12T08:00:09.397992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CharSetPredicate class',				#isMetaSide : true			},			#name : #any,			#protocol : #'instance creation',			#sourceCode : 'any\r\t^ self on: [ :e | true ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '716' ],		#self : OmReference [ '717' ],		#time : DateAndTime [ '2017-12-12T08:00:09.398992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CharSetPredicate class',				#isMetaSide : true			},			#name : #empty,			#protocol : #'instance creation',			#sourceCode : 'empty\r\t^ self on: [ :e | false ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '717' ],		#self : OmReference [ '718' ],		#time : DateAndTime [ '2017-12-12T08:00:09.399992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CharSetPredicate class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aBlock\r\t^ self basicNew initializeOn: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '718' ],		#self : OmReference [ '719' ],		#time : DateAndTime [ '2017-12-12T08:00:09.400992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharSetPredicate,				#isMetaSide : false			},			#name : #asCharSetPredicate,			#protocol : #converting,			#sourceCode : 'asCharSetPredicate\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '719' ],		#self : OmReference [ '720' ],		#time : DateAndTime [ '2017-12-12T08:00:09.401992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharSetPredicate,				#isMetaSide : false			},			#name : #classification,			#protocol : #accessing,			#sourceCode : 'classification\r\t^ classification',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '720' ],		#self : OmReference [ '721' ],		#time : DateAndTime [ '2017-12-12T08:00:09.401992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharSetPredicate,				#isMetaSide : false			},			#name : #'initializeOn:',			#protocol : #initialization,			#sourceCode : 'initializeOn: aBlock\r\tblock := aBlock.\r\tclassification := Array new: 255.\r\t1 to: classification size do: [ :index |\r\t\tclassification at: index put: (block\r\t\t\tvalue: (Character codePoint: index)) ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '721' ],		#self : OmReference [ '722' ],		#time : DateAndTime [ '2017-12-12T08:00:09.404992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharSetPredicate,				#isMetaSide : false			},			#name : #isUnknown,			#protocol : #testing,			#sourceCode : 'isUnknown\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '722' ],		#self : OmReference [ '723' ],		#time : DateAndTime [ '2017-12-12T08:00:09.405992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CharSetPredicate,				#isMetaSide : false			},			#name : #'value:',			#protocol : #evaluating,			#sourceCode : 'value: aCharacter\r\t| index |\r\tindex := aCharacter asInteger.\r\tindex == 0\tifTrue: [ ^ block value: aCharacter ].\r\tindex > 255\tifTrue: [ ^ block value: aCharacter ].\r\t\t\r\t^ classification at: index',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '723' ],		#self : OmReference [ '724' ],		#time : DateAndTime [ '2017-12-12T08:00:09.406992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Context class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: stream\r\t^ self on: stream position: 0',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '724' ],		#self : OmReference [ '725' ],		#time : DateAndTime [ '2017-12-12T08:00:09.407992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Context class',				#isMetaSide : true			},			#name : #'on:position:',			#protocol : #'instance creation',			#sourceCode : 'on: stream position: position\r\t^ self new \r\t\tstream: stream;\r\t\tposition: position;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '725' ],		#self : OmReference [ '726' ],		#time : DateAndTime [ '2017-12-12T08:00:09.408992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'adoptString:',			#protocol : #reparsing,			#sourceCode : 'adoptString: newString\r\tstream adoptString: newString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '726' ],		#self : OmReference [ '727' ],		#time : DateAndTime [ '2017-12-12T08:00:09.409992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #asPositionableStream,			#protocol : #converting,			#sourceCode : 'asPositionableStream\r\t^ (ReadStream on: stream collection)\r\t\tposition: position;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '727' ],		#self : OmReference [ '728' ],		#time : DateAndTime [ '2017-12-12T08:00:09.410992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #asReparsableContext,			#protocol : #converting,			#sourceCode : 'asReparsableContext\r\t^ self collection asReparsableContext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '728' ],		#self : OmReference [ '729' ],		#time : DateAndTime [ '2017-12-12T08:00:09.411992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #'stream mimicry',			#sourceCode : 'atEnd\r\t^ stream atEnd: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '729' ],		#self : OmReference [ '730' ],		#time : DateAndTime [ '2017-12-12T08:00:09.412992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ stream contents',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '730' ],		#self : OmReference [ '731' ],		#time : DateAndTime [ '2017-12-12T08:00:09.413992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'copyFrom:to:',			#protocol : #copying,			#sourceCode : 'copyFrom: start to: end\r\t^ stream copyFrom: start to: end',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '731' ],		#self : OmReference [ '732' ],		#time : DateAndTime [ '2017-12-12T08:00:09.414992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #debugging,			#sourceCode : 'debugResult\r\t^ self globalAt: #debugResult ifAbsentPut: [ \r\t\t| context |\r\t\tcontext := self copy.\r\t\tcontext restore: self startMemento.\r\t\tcontext parser duplicate enableDebug parseWithContext: context.\r\t\tcontext currentDebugResult\r\t]',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '732' ],		#self : OmReference [ '733' ],		#time : DateAndTime [ '2017-12-12T08:00:09.415992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #globals,			#protocol : #accessing-globals,			#sourceCode : 'globals\r\t^ globals',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '733' ],		#self : OmReference [ '734' ],		#time : DateAndTime [ '2017-12-12T08:00:09.416992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'globals:',			#protocol : #accessing-globals,			#sourceCode : 'globals: anObject\r\t^ globals := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '734' ],		#self : OmReference [ '735' ],		#time : DateAndTime [ '2017-12-12T08:00:09.417992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '735' ],		#self : OmReference [ '736' ],		#time : DateAndTime [ '2017-12-12T08:00:09.418992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #isPetit2Context,			#protocol : #testing,			#sourceCode : 'isPetit2Context\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '736' ],		#self : OmReference [ '737' ],		#time : DateAndTime [ '2017-12-12T08:00:09.419992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'newToken:from:',			#protocol : #tokenization,			#sourceCode : 'newToken: tokenClass from: start\r\t^ stream newToken: tokenClass from: start + 1 to: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '737' ],		#self : OmReference [ '738' ],		#time : DateAndTime [ '2017-12-12T08:00:09.419992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #next,			#protocol : #'stream mimicry',			#sourceCode : 'next\r\t^ (stream atEnd: position) not ifTrue: [ \r\t\tposition := position + 1.\r\t\tstream atPosition: position\r\t] ifFalse: [  \r\t\tnil\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '738' ],		#self : OmReference [ '739' ],		#time : DateAndTime [ '2017-12-12T08:00:09.420992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'next:',			#protocol : #'stream mimicry',			#sourceCode : 'next: size\r\t^ ((stream atEnd: position + size - 1) not) ifTrue: [ \r\t\tstream copyFrom: (position + 1) to: (position := position + size)\r\t] ifFalse: [ \r\t\tnil\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '739' ],		#self : OmReference [ '740' ],		#time : DateAndTime [ '2017-12-12T08:00:09.421992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'nextFor:',			#protocol : #'stream mimicry',			#sourceCode : 'nextFor: aCharacter\r\t^ (stream atEnd: position) not ifTrue: [ \r\t\tposition := position + 1.\r\t\t^ ((stream atPosition: position) == aCharacter )\r\t\t\tifTrue: [ true ]\r\t\t\tifFalse:[ position := position - 1 . false ].\r\t] ifFalse: [  \r\t\tfalse\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '740' ],		#self : OmReference [ '741' ],		#time : DateAndTime [ '2017-12-12T08:00:09.422992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #parser,			#protocol : #accessing,			#sourceCode : 'parser\r\t^ parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '741' ],		#self : OmReference [ '742' ],		#time : DateAndTime [ '2017-12-12T08:00:09.423992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'parser:',			#protocol : #accessing,			#sourceCode : 'parser: aPP2Parser\r\tparser := aPP2Parser ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '742' ],		#self : OmReference [ '743' ],		#time : DateAndTime [ '2017-12-12T08:00:09.424992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #peek,			#protocol : #'stream mimicry',			#sourceCode : 'peek\r\t^ (stream atEnd: position) not ifTrue: [ \r\t\tstream atPosition: position + 1\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '743' ],		#self : OmReference [ '744' ],		#time : DateAndTime [ '2017-12-12T08:00:09.425992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'peekFor:',			#protocol : #'stream mimicry',			#sourceCode : 'peekFor: anObject \r\t"Answer false and do not move over the next element if it is not equal to \r\tthe argument, anObject, or if the receiver is at the end. Answer true \r\tand increment the position for accessing elements, if the next element is \r\tequal to anObject."\r\t| nextObject |\r\tself atEnd ifTrue: [^false].\r\tnextObject := self next.\r\t"peek for matching element"\r\tanObject = nextObject ifTrue: [^true].\r\t"gobble it if found"\r\tposition := position - 1.\r\t^false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '744' ],		#self : OmReference [ '745' ],		#time : DateAndTime [ '2017-12-12T08:00:09.426992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '745' ],		#self : OmReference [ '746' ],		#time : DateAndTime [ '2017-12-12T08:00:09.427992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anInteger\r\tposition := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '746' ],		#self : OmReference [ '747' ],		#time : DateAndTime [ '2017-12-12T08:00:09.428992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\tsuper postCopy.\r\r\tglobals := globals copy.\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '747' ],		#self : OmReference [ '748' ],		#time : DateAndTime [ '2017-12-12T08:00:09.429992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPut: $:.\r\taStream nextPut: $ .\r\tstream printOn: aStream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '748' ],		#self : OmReference [ '749' ],		#time : DateAndTime [ '2017-12-12T08:00:09.430992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '749' ],		#self : OmReference [ '750' ],		#time : DateAndTime [ '2017-12-12T08:00:09.431992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: newProperties\r\t^ properties := newProperties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '750' ],		#self : OmReference [ '751' ],		#time : DateAndTime [ '2017-12-12T08:00:09.432992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #remember,			#protocol : #memoization,			#sourceCode : 'remember\r\t^ PP2ContextMemento new\r\t\tstream: stream;\r\t\tposition: position;\r\t\tproperties: self propertiesCopy;\r\t\tyourself.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '751' ],		#self : OmReference [ '752' ],		#time : DateAndTime [ '2017-12-12T08:00:09.433992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #rememberPosition,			#protocol : #memoization,			#sourceCode : 'rememberPosition\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '752' ],		#self : OmReference [ '753' ],		#time : DateAndTime [ '2017-12-12T08:00:09.434992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\tglobals := nil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '753' ],		#self : OmReference [ '754' ],		#time : DateAndTime [ '2017-12-12T08:00:09.435992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'restore:',			#protocol : #memoization,			#sourceCode : 'restore: contextMemento\r\tposition := contextMemento position.\r\tproperties := contextMemento propertiesCopy.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '754' ],		#self : OmReference [ '755' ],		#time : DateAndTime [ '2017-12-12T08:00:09.436992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'restorePosition:',			#protocol : #memoization,			#sourceCode : 'restorePosition: anInteger\r\tposition := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '755' ],		#self : OmReference [ '756' ],		#time : DateAndTime [ '2017-12-12T08:00:09.437992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #returnValue,			#protocol : #accessing,			#sourceCode : 'returnValue\r\t^ returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '756' ],		#self : OmReference [ '757' ],		#time : DateAndTime [ '2017-12-12T08:00:09.438992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'returnValue:',			#protocol : #accessing,			#sourceCode : 'returnValue: anObject\r\treturnValue := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '757' ],		#self : OmReference [ '758' ],		#time : DateAndTime [ '2017-12-12T08:00:09.439992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #shift,			#protocol : #'stream extras',			#sourceCode : 'shift\r\tposition := position + 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '758' ],		#self : OmReference [ '759' ],		#time : DateAndTime [ '2017-12-12T08:00:09.440992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #startMemento,			#protocol : #requirements,			#sourceCode : 'startMemento\r\t^ startMemento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '759' ],		#self : OmReference [ '760' ],		#time : DateAndTime [ '2017-12-12T08:00:09.440992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'startMemento:',			#protocol : #requirements,			#sourceCode : 'startMemento: anObject\r\tstartMemento := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '760' ],		#self : OmReference [ '761' ],		#time : DateAndTime [ '2017-12-12T08:00:09.442992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #stream,			#protocol : #accessing,			#sourceCode : 'stream\r\t^ stream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '761' ],		#self : OmReference [ '762' ],		#time : DateAndTime [ '2017-12-12T08:00:09.442992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: aStream\r\tstream := aStream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '762' ],		#self : OmReference [ '763' ],		#time : DateAndTime [ '2017-12-12T08:00:09.443992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #uncheckedNext,			#protocol : #'stream extras',			#sourceCode : 'uncheckedNext\r\tposition := position + 1.\r\t^ stream atPosition: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '763' ],		#self : OmReference [ '764' ],		#time : DateAndTime [ '2017-12-12T08:00:09.444992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #uncheckedPeek,			#protocol : #'stream extras',			#sourceCode : 'uncheckedPeek\r\t^ stream atPosition: position + 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '764' ],		#self : OmReference [ '765' ],		#time : DateAndTime [ '2017-12-12T08:00:09.445992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #'upTo:',			#protocol : #'stream mimicry',			#sourceCode : 'upTo: character\r\t| start |\r\tstart := position := position + 1.\r\t\r\t[ \r\t\t(stream atEnd: position) ifTrue: [  \r\t\t\t^ stream copyFrom: start to: position\t\r\t\t].\r\t\t(stream atPosition: position) = character\r\t\t\r\t] whileFalse: [ position := position + 1 ].\r\r\t^ stream copyFrom: start to: position \r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '765' ],		#self : OmReference [ '766' ],		#time : DateAndTime [ '2017-12-12T08:00:09.446992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #'stream mimicry',			#sourceCode : 'upToEnd\r\t| start |\r\tstart := position.\r\t\r\t[ stream atEnd: position ] whileFalse: [ position := position + 1 ].\r\t^ stream copyFrom: start + 1 to: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '766' ],		#self : OmReference [ '767' ],		#time : DateAndTime [ '2017-12-12T08:00:09.447992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Context,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t^ returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '767' ],		#self : OmReference [ '768' ],		#time : DateAndTime [ '2017-12-12T08:00:09.448992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ anInteger\r\t^ (self copy)\r\t\tposition: position + anInteger;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '768' ],		#self : OmReference [ '769' ],		#time : DateAndTime [ '2017-12-12T08:00:09.449992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #-,			#protocol : #arithmetic,			#sourceCode : '- anInteger\r\t^ (self copy)\r\t\tposition: position - anInteger;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '769' ],		#self : OmReference [ '770' ],		#time : DateAndTime [ '2017-12-12T08:00:09.450992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparison,			#sourceCode : '= anotherMemento\r\tself class == anotherMemento class ifFalse: [ ^ false ].\r\t\r\tself position == anotherMemento position ifFalse: [ ^ false ].\r\tself stream == anotherMemento stream ifFalse: [ ^ false ].\r\t\r\t^ self properties = anotherMemento properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '770' ],		#self : OmReference [ '771' ],		#time : DateAndTime [ '2017-12-12T08:00:09.451992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparison,			#sourceCode : 'hash\r\t^ self position hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '771' ],		#self : OmReference [ '772' ],		#time : DateAndTime [ '2017-12-12T08:00:09.452992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '772' ],		#self : OmReference [ '773' ],		#time : DateAndTime [ '2017-12-12T08:00:09.453992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '773' ],		#self : OmReference [ '774' ],		#time : DateAndTime [ '2017-12-12T08:00:09.454992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\tproperties := properties copy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '774' ],		#self : OmReference [ '775' ],		#time : DateAndTime [ '2017-12-12T08:00:09.455992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '775' ],		#self : OmReference [ '776' ],		#time : DateAndTime [ '2017-12-12T08:00:09.456992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: newProperties\r\t^ properties := newProperties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '776' ],		#self : OmReference [ '777' ],		#time : DateAndTime [ '2017-12-12T08:00:09.457992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #stream,			#protocol : #accessing,			#sourceCode : 'stream\r\t^ stream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '777' ],		#self : OmReference [ '778' ],		#time : DateAndTime [ '2017-12-12T08:00:09.458992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemento,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: anObject\r\tstream := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '778' ],		#self : OmReference [ '779' ],		#time : DateAndTime [ '2017-12-12T08:00:09.458992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #allResults,			#protocol : #analysis,			#sourceCode : 'allResults\r\t^ allChildren ifNil: [  \r\t\t| collection |\r\t\tcollection := IdentitySet new.\r\t\tself allResultsTo: collection.\r\t\tallChildren := collection\t\r\t]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '779' ],		#self : OmReference [ '780' ],		#time : DateAndTime [ '2017-12-12T08:00:09.459992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'allResultsTo:',			#protocol : #analysis,			#sourceCode : 'allResultsTo: set\r\tset add: self.\r\tself children do: [ :child | child allResultsTo: set ].',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '780' ],		#self : OmReference [ '781' ],		#time : DateAndTime [ '2017-12-12T08:00:09.461992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #asEventsMorph,			#protocol : #converting,			#sourceCode : 'asEventsMorph\r\tinvocationEntry isNil ifTrue: [ ^ Morph new ].\r\t\r\t^ (self findContext eventsTrace)\r\t\tselection: invocationEntry;\r\t\teventsMorph',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '781' ],		#self : OmReference [ '782' ],		#time : DateAndTime [ '2017-12-12T08:00:09.461992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ children',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '782' ],		#self : OmReference [ '783' ],		#time : DateAndTime [ '2017-12-12T08:00:09.462992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'children:',			#protocol : #accessing,			#sourceCode : 'children: anObject\r\tchildren := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '783' ],		#self : OmReference [ '784' ],		#time : DateAndTime [ '2017-12-12T08:00:09.463992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ self findContextContents',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '784' ],		#self : OmReference [ '785' ],		#time : DateAndTime [ '2017-12-12T08:00:09.464992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\t\r\t^ context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '785' ],		#self : OmReference [ '786' ],		#time : DateAndTime [ '2017-12-12T08:00:09.465992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'context:',			#protocol : #accessing,			#sourceCode : 'context: anObject\r\t\r\tcontext := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '786' ],		#self : OmReference [ '787' ],		#time : DateAndTime [ '2017-12-12T08:00:09.466992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #accessing,			#sourceCode : 'debugResult\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '787' ],		#self : OmReference [ '788' ],		#time : DateAndTime [ '2017-12-12T08:00:09.467992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #findContext,			#protocol : #accessing,			#sourceCode : 'findContext\r\t\r\tcontext ifNil: [ ^ parent ifNotNil: [ parent findContext ] ].\r\t^ context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '788' ],		#self : OmReference [ '789' ],		#time : DateAndTime [ '2017-12-12T08:00:09.468992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #findContextContents,			#protocol : #accessing,			#sourceCode : 'findContextContents\r\t^ (self findContext ifNotNil: [ :s | s contents ]) ifNil: [ \'\' ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '789' ],		#self : OmReference [ '790' ],		#time : DateAndTime [ '2017-12-12T08:00:09.469992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #formattedText,			#protocol : #printing,			#sourceCode : 'formattedText\r\tself result isPetit2Failure ifTrue: [ \r\t\t^ Text string: self printString attribute: TextColor gray \r\t].\r\t\r\t(self isBiggestChild) ifTrue: [  \r\t\t^ Text string: self printString attribute: (TextColor new color: Color red muchDarker)\r\t].\r\t\r\t^ self printString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '790' ],		#self : OmReference [ '791' ],		#time : DateAndTime [ '2017-12-12T08:00:09.470992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #furthestPosition,			#protocol : #accessing,			#sourceCode : 'furthestPosition\r\t^ furthestPosition',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '791' ],		#self : OmReference [ '792' ],		#time : DateAndTime [ '2017-12-12T08:00:09.471992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'furthestPosition:',			#protocol : #accessing,			#sourceCode : 'furthestPosition: anObject\r\tfurthestPosition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '792' ],		#self : OmReference [ '793' ],		#time : DateAndTime [ '2017-12-12T08:00:09.472992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \r\tchildren := OrderedCollection new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '793' ],		#self : OmReference [ '794' ],		#time : DateAndTime [ '2017-12-12T08:00:09.473992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #invocationEntry,			#protocol : #accessing,			#sourceCode : 'invocationEntry\r\tself flag: \'JK: I don\'\'t like the cyclic dependency between debug result and profiling info. Is there a better architecture for this?\'.\r\t\r\t^ invocationEntry',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '794' ],		#self : OmReference [ '795' ],		#time : DateAndTime [ '2017-12-12T08:00:09.473992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'invocationEntry:',			#protocol : #accessing,			#sourceCode : 'invocationEntry: entry\r\tinvocationEntry := entry',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '795' ],		#self : OmReference [ '796' ],		#time : DateAndTime [ '2017-12-12T08:00:09.474992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #isBiggestChild,			#protocol : #printing,			#sourceCode : 'isBiggestChild\r\tparent isNil ifTrue: [ ^ false ].\r\t^ (parent children sort: [ :c1 :c2 | c1 allResults size > c2 allResults size ]) first == self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '796' ],		#self : OmReference [ '797' ],		#time : DateAndTime [ '2017-12-12T08:00:09.475992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #parent,			#protocol : #accessing,			#sourceCode : 'parent\r\t^ parent',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '797' ],		#self : OmReference [ '798' ],		#time : DateAndTime [ '2017-12-12T08:00:09.476992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'parent:',			#protocol : #accessing,			#sourceCode : 'parent: anObject\r\tparent := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '798' ],		#self : OmReference [ '799' ],		#time : DateAndTime [ '2017-12-12T08:00:09.477992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #parser,			#protocol : #accessing,			#sourceCode : 'parser\r\t^ parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '799' ],		#self : OmReference [ '800' ],		#time : DateAndTime [ '2017-12-12T08:00:09.478992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'parser:',			#protocol : #accessing,			#sourceCode : 'parser: anObject\r\tparser := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '800' ],		#self : OmReference [ '801' ],		#time : DateAndTime [ '2017-12-12T08:00:09.479992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream \r\tself parser ifNil: [ ^ super printOn: aStream ].\r\taStream \r\t\tnextPutAll: self parser displayName;\r\t\tnextPutAll: \'[\';\r\t\tnextPutAll: self parser withoutDebugStrategy displayName;\t"first ones are the debugging ones, skip them"\r\t\tnextPutAll: \']\';\r\t\tnextPutAll: \'(\';\r\t\tnextPutAll: self allResults size asString;\r"\t\tnextPutAll: \':\';\r\t\tnextPutAll: self events size asString;\r"\t\tnextPutAll: \')\';\r\t\tnextPutAll: \' - \';   \r\t\tnextPutAll: (self result printStringLimitedTo: 50).\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '801' ],		#self : OmReference [ '802' ],		#time : DateAndTime [ '2017-12-12T08:00:09.480992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #result,			#protocol : #accessing,			#sourceCode : 'result\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '802' ],		#self : OmReference [ '803' ],		#time : DateAndTime [ '2017-12-12T08:00:09.481992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'result:',			#protocol : #accessing,			#sourceCode : 'result: anObject\r\tresult := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '803' ],		#self : OmReference [ '804' ],		#time : DateAndTime [ '2017-12-12T08:00:09.482992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ start',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '804' ],		#self : OmReference [ '805' ],		#time : DateAndTime [ '2017-12-12T08:00:09.483992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'start:',			#protocol : #accessing,			#sourceCode : 'start: anObject\r\tstart := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '805' ],		#self : OmReference [ '806' ],		#time : DateAndTime [ '2017-12-12T08:00:09.484992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #startStopInterval,			#protocol : #accessing,			#sourceCode : 'startStopInterval\r\t(start isNil or: [stop isNil]) ifTrue: [ ^ 1 to: 0 ].\r\t\r\t^ start to: stop ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '806' ],		#self : OmReference [ '807' ],		#time : DateAndTime [ '2017-12-12T08:00:09.485992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #steps,			#protocol : #analysis,			#sourceCode : 'steps\r\t^ self allResults size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '807' ],		#self : OmReference [ '808' ],		#time : DateAndTime [ '2017-12-12T08:00:09.486992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #stop,			#protocol : #accessing,			#sourceCode : 'stop\r\t^ stop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '808' ],		#self : OmReference [ '809' ],		#time : DateAndTime [ '2017-12-12T08:00:09.486992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResult,				#isMetaSide : false			},			#name : #'stop:',			#protocol : #accessing,			#sourceCode : 'stop: anObject\r\tstop := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '809' ],		#self : OmReference [ '810' ],		#time : DateAndTime [ '2017-12-12T08:00:09.487992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2DebugResultLink class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aPP2DebugResult\r\t^ (self new)\r\t\treference: aPP2DebugResult;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '810' ],		#self : OmReference [ '811' ],		#time : DateAndTime [ '2017-12-12T08:00:09.488992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #allResults,			#protocol : #analysis,			#sourceCode : 'allResults\r\t^ #()',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '811' ],		#self : OmReference [ '812' ],		#time : DateAndTime [ '2017-12-12T08:00:09.489992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #'allResultsTo:',			#protocol : #analysis,			#sourceCode : 'allResultsTo: aSet\r\t^ aSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '812' ],		#self : OmReference [ '813' ],		#time : DateAndTime [ '2017-12-12T08:00:09.490992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #asEventsMorph,			#protocol : #converting,			#sourceCode : 'asEventsMorph\r\t^ reference asEventsMorph',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '813' ],		#self : OmReference [ '814' ],		#time : DateAndTime [ '2017-12-12T08:00:09.491992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ Array with: reference ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '814' ],		#self : OmReference [ '815' ],		#time : DateAndTime [ '2017-12-12T08:00:09.492992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ reference contents',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '815' ],		#self : OmReference [ '816' ],		#time : DateAndTime [ '2017-12-12T08:00:09.493992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #accessing,			#sourceCode : 'debugResult\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '816' ],		#self : OmReference [ '817' ],		#time : DateAndTime [ '2017-12-12T08:00:09.494992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #formattedText,			#protocol : #printing,			#sourceCode : 'formattedText\r\t^ Text string: self printString attribute: (TextColor new color: Color blue muchDarker)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '817' ],		#self : OmReference [ '818' ],		#time : DateAndTime [ '2017-12-12T08:00:09.495992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream \r\tsuper printOn: aStream.\r\taStream nextPutAll: \': reference\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '818' ],		#self : OmReference [ '819' ],		#time : DateAndTime [ '2017-12-12T08:00:09.496992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #reference,			#protocol : #accessing,			#sourceCode : 'reference\r\t^ reference',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '819' ],		#self : OmReference [ '820' ],		#time : DateAndTime [ '2017-12-12T08:00:09.497992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #'reference:',			#protocol : #accessing,			#sourceCode : 'reference: anObject\r\treference := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '820' ],		#self : OmReference [ '821' ],		#time : DateAndTime [ '2017-12-12T08:00:09.498992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultLink,				#isMetaSide : false			},			#name : #startStopInterval,			#protocol : #accessing,			#sourceCode : 'startStopInterval\r\t^ reference startStopInterval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '821' ],		#self : OmReference [ '822' ],		#time : DateAndTime [ '2017-12-12T08:00:09.499992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #event,			#protocol : #accessing,			#sourceCode : 'event\r\t^ event',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '822' ],		#self : OmReference [ '823' ],		#time : DateAndTime [ '2017-12-12T08:00:09.500992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #'event:',			#protocol : #accessing,			#sourceCode : 'event: anObject\r\tevent := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '823' ],		#self : OmReference [ '824' ],		#time : DateAndTime [ '2017-12-12T08:00:09.500992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #isInvocation,			#protocol : #testing,			#sourceCode : 'isInvocation\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '824' ],		#self : OmReference [ '825' ],		#time : DateAndTime [ '2017-12-12T08:00:09.502992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ strategy node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '825' ],		#self : OmReference [ '826' ],		#time : DateAndTime [ '2017-12-12T08:00:09.502992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '826' ],		#self : OmReference [ '827' ],		#time : DateAndTime [ '2017-12-12T08:00:09.503992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '827' ],		#self : OmReference [ '828' ],		#time : DateAndTime [ '2017-12-12T08:00:09.504992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #strategy,			#protocol : #accessing,			#sourceCode : 'strategy\r\t^ strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '828' ],		#self : OmReference [ '829' ],		#time : DateAndTime [ '2017-12-12T08:00:09.505992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventRecord,				#isMetaSide : false			},			#name : #'strategy:',			#protocol : #accessing,			#sourceCode : 'strategy: anObject\r\tstrategy := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '829' ],		#self : OmReference [ '830' ],		#time : DateAndTime [ '2017-12-12T08:00:09.506992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #accessing,			#sourceCode : 'debugResult\r\t^ debugResult',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '830' ],		#self : OmReference [ '831' ],		#time : DateAndTime [ '2017-12-12T08:00:09.507992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #'debugResult:',			#protocol : #accessing,			#sourceCode : 'debugResult: anObject\r\tdebugResult := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '831' ],		#self : OmReference [ '832' ],		#time : DateAndTime [ '2017-12-12T08:00:09.508992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #isInvocation,			#protocol : #testing,			#sourceCode : 'isInvocation\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '832' ],		#self : OmReference [ '833' ],		#time : DateAndTime [ '2017-12-12T08:00:09.509992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ start',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '833' ],		#self : OmReference [ '834' ],		#time : DateAndTime [ '2017-12-12T08:00:09.510992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #'start:',			#protocol : #accessing,			#sourceCode : 'start: anObject\r\tstart := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '834' ],		#self : OmReference [ '835' ],		#time : DateAndTime [ '2017-12-12T08:00:09.511992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #stop,			#protocol : #accessing,			#sourceCode : 'stop\r\t^ stop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '835' ],		#self : OmReference [ '836' ],		#time : DateAndTime [ '2017-12-12T08:00:09.512992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InvocationRecord,				#isMetaSide : false			},			#name : #'stop:',			#protocol : #accessing,			#sourceCode : 'stop: anObject\r\tstop := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '836' ],		#self : OmReference [ '837' ],		#time : DateAndTime [ '2017-12-12T08:00:09.513992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'addLast:',			#protocol : #adding,			#sourceCode : 'addLast: aPP2ProfilingEvent\r\tentries addLast: aPP2ProfilingEvent ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '837' ],		#self : OmReference [ '838' ],		#time : DateAndTime [ '2017-12-12T08:00:09.514992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'colorForEvent:',			#protocol : #'as yet unclassified',			#sourceCode : 'colorForEvent: event\r\t| eventSet |\r\tevent == #namedInvoked ifTrue: [ ^ Color green muchDarker ].\r\t\r\tcolors isNil ifTrue: [ \r\t\teventSet := (entries collect: #event) asIdentitySet asArray.\r\t\tself flag: \'JK: Dependency on Roassal? Should probably move this method!\'.\r\t\tcolors := (Smalltalk at: #RTMultiLinearColorForIdentity) new objects: eventSet.\r\t].\r\t^ colors \trtValue: event',			#stamp : 'JanKurs 9/3/2017 17:05',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '838' ],		#self : OmReference [ '839' ],		#time : DateAndTime [ '2017-12-12T08:00:09.515992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #entries,			#protocol : #accessing,			#sourceCode : 'entries\r\t^ entries',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '839' ],		#self : OmReference [ '840' ],		#time : DateAndTime [ '2017-12-12T08:00:09.515992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'entries:',			#protocol : #accessing,			#sourceCode : 'entries: aCollection\r\tentries := aCollection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '840' ],		#self : OmReference [ '841' ],		#time : DateAndTime [ '2017-12-12T08:00:09.516992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'entriesCollect:',			#protocol : #enumerating,			#sourceCode : 'entriesCollect: aBlock\r\t^ entries collect: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '841' ],		#self : OmReference [ '842' ],		#time : DateAndTime [ '2017-12-12T08:00:09.518992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #entriesCount,			#protocol : #accessing,			#sourceCode : 'entriesCount\r\t^ entries size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '842' ],		#self : OmReference [ '843' ],		#time : DateAndTime [ '2017-12-12T08:00:09.518992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'entriesDo:',			#protocol : #enumerating,			#sourceCode : 'entriesDo: aBlock\r\t^ entries do: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '843' ],		#self : OmReference [ '844' ],		#time : DateAndTime [ '2017-12-12T08:00:09.519992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'entryAt:',			#protocol : #accessing,			#sourceCode : 'entryAt: index\r\t^ entries at: index',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '844' ],		#self : OmReference [ '845' ],		#time : DateAndTime [ '2017-12-12T08:00:09.520992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #eventsMorph,			#protocol : #'as yet unclassified',			#sourceCode : 'eventsMorph\r"\t^ self eventsMorph: #(#uncheckedNext #uncheckedPeek #peek #next)"\r\t^ self eventsMorph: #(#namedInvoked)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '845' ],		#self : OmReference [ '846' ],		#time : DateAndTime [ '2017-12-12T08:00:09.522992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'eventsMorph:',			#protocol : #'as yet unclassified',			#sourceCode : 'eventsMorph: eventArray\r\t| limit width height canvas morph heightIndex highlightStart highlightStop highlightColor |\r\tlimit := self limit: eventArray.\r\twidth  := (entries collect: #position) max min: 4096.\r\theight := limit min: 65535.\r\tcanvas := FormCanvas extent: width @ height.\r\tmorph := canvas form asMorph.\r\theightIndex := 0.\r\tfEntries := OrderedCollection new.\r\t\r\thighlightStart := Stack with: SmallInteger maxVal.\r\thighlightStop := Stack with: SmallInteger maxVal.\r\thighlightColor := Color red muchLighter muchLighter.\r\t\r\tself interval do: [ :index |\r\t\t| entry |\r\t\tentry := entries at: index.\r\r\t\t(eventArray isNil or: [eventArray includes: entry event]) ifTrue: [ \r\t\t\tfEntries addLast: entry.\r\t\t\theightIndex := heightIndex + 1.\r\t\t\t\r\t\t\t(entry isInvocation and: [ \r\t\t\t(entry node == self selectionNode) and: [ \r\t\t\t(entry position == self selectionPosition) and: [ \r\t\t\t(entry ~= self selection) ] ] ] ) ifTrue: [  \r\t\t\t\thighlightStart push: entry start.\r\t\t\t\thighlightStop push: entry stop.\r\t\t\t\thighlightColor := highlightColor darker.\r\t\t\t].\r\t\t\tindex > highlightStop top ifTrue: [ \r\t\t\t\thighlightColor := highlightColor lighter.\r\t\t\t\thighlightStop pop. \r\t\t\t\thighlightStart pop \r\t\t\t].\r\r\t\t\t(highlightStart top <= index and: [ highlightStop top >= index]) ifTrue: [  \r\t\t\t\tcanvas line: 1 @ heightIndex to: width @ heightIndex color: highlightColor\r\t\t\t].\r\r\t\t\t(self selectionStart <= index and: [ self selectionStop >= index]) ifTrue: [  \r\t\t\t\t| color |\r\t\t\t\tcolor := Color yellow muchLighter.\r\t\t\t\tcanvas line: 1 @ heightIndex to: width @ heightIndex color: color\r\t\t\t].\r\r\r\t\t\tcanvas form \r\t\t\t\tcolorAt: entry position @ heightIndex \r\t\t\t\tput: (self colorForEvent: entry event).\r\t\t]\r\t].\r\r\tmorph := canvas form asMorph.\r\tmorph on: #mouseMove\r\t\tsend: #mouseDown:with:\r\t\tto: self.\r\t\t\r\t^ morph',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '846' ],		#self : OmReference [ '847' ],		#time : DateAndTime [ '2017-12-12T08:00:09.523992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'filterEvents:',			#protocol : #private,			#sourceCode : 'filterEvents: eventsCollection\r\tfEntries := OrderedCollection new.\r\tself halt: \'obsolete?\'.\t\r\tself interval do: [ :index | | e |\r\t\te := self entries at: index.\r\t\t(eventsCollection isNil or: [ eventsCollection includes: e event]) ifTrue: [\r\t\t\tfEntries add: e.\r\t\t]\r\t].\r\t\r\t^ fEntries',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '847' ],		#self : OmReference [ '848' ],		#time : DateAndTime [ '2017-12-12T08:00:09.523992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tentries := OrderedCollection new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '848' ],		#self : OmReference [ '849' ],		#time : DateAndTime [ '2017-12-12T08:00:09.524992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #interval,			#protocol : #accessing,			#sourceCode : 'interval\r"\t\r\t(start isNil not and: [stop isNil not]) ifTrue: [ \r\t\t^ (start to: stop)\r\t].\r"\r\t^ 1 to: entries size.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '849' ],		#self : OmReference [ '850' ],		#time : DateAndTime [ '2017-12-12T08:00:09.525992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #last,			#protocol : #accessing,			#sourceCode : 'last\r\t^ entries last',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '850' ],		#self : OmReference [ '851' ],		#time : DateAndTime [ '2017-12-12T08:00:09.526992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'limit:',			#protocol : #accessing,			#sourceCode : 'limit: eventsCollection\r\t| limit |\r\t\r\teventsCollection isNil ifTrue: [ ^ entries size ].\r\tlimit := 0.\r\t\t\r\tself interval do: [ :index | | e |\r\t\te := self entries at: index.\r\t\t(eventsCollection includes: e event) ifTrue: [\r\t\t\tlimit := limit + 1\r\t\t]\r\t].\r\t\r\t^ limit',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '851' ],		#self : OmReference [ '852' ],		#time : DateAndTime [ '2017-12-12T08:00:09.527992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'mouseDown:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'mouseDown: anEvent with: aMorph\r\t| location msg entry |\r\tlocation := anEvent position.\r\t(location  y < fEntries size and: [ location y > 0 ]) ifTrue: [ \r\t\tentry := fEntries at: location y.\r\t\tmsg := (entry position asString, \':\', entry event, \': \', entry node asString).\r\t\taMorph showBalloon: msg.\r\t\tTranscript cr; show: msg.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '852' ],		#self : OmReference [ '853' ],		#time : DateAndTime [ '2017-12-12T08:00:09.528992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #selection,			#protocol : #accessing,			#sourceCode : 'selection\r\t^ selection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '853' ],		#self : OmReference [ '854' ],		#time : DateAndTime [ '2017-12-12T08:00:09.529992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #'selection:',			#protocol : #accessing,			#sourceCode : 'selection: invocationEntry\r\tselection := invocationEntry',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '854' ],		#self : OmReference [ '855' ],		#time : DateAndTime [ '2017-12-12T08:00:09.530992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #selectionNode,			#protocol : #accessing,			#sourceCode : 'selectionNode\r\t^ selection isNil ifFalse: [ selection node ] ifTrue: [ nil  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '855' ],		#self : OmReference [ '856' ],		#time : DateAndTime [ '2017-12-12T08:00:09.531992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #selectionPosition,			#protocol : #accessing,			#sourceCode : 'selectionPosition\r\t^ selection isNil ifFalse: [ selection position ] ifTrue: [ SmallInteger maxVal  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '856' ],		#self : OmReference [ '857' ],		#time : DateAndTime [ '2017-12-12T08:00:09.532992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #selectionStart,			#protocol : #accessing,			#sourceCode : 'selectionStart\r\t^ selection isNil ifFalse: [ selection start ] ifTrue: [ SmallInteger maxVal  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '857' ],		#self : OmReference [ '858' ],		#time : DateAndTime [ '2017-12-12T08:00:09.533992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #selectionStop,			#protocol : #accessing,			#sourceCode : 'selectionStop\r\t^ selection isNil ifFalse: [ selection stop ] ifTrue: [ SmallInteger minVal  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '858' ],		#self : OmReference [ '859' ],		#time : DateAndTime [ '2017-12-12T08:00:09.534992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EventsTrace,				#isMetaSide : false			},			#name : #strategies,			#protocol : #accessing,			#sourceCode : 'strategies\r\t^ entries collect: #strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '859' ],		#self : OmReference [ '860' ],		#time : DateAndTime [ '2017-12-12T08:00:09.535992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Failure class',				#isMetaSide : true			},			#name : #'message:',			#protocol : #'instance creation',			#sourceCode : 'message: aString\r\t^ (self new )\r\t\tmessage: aString;\r\t\tposition: 0\r\t\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '860' ],		#self : OmReference [ '861' ],		#time : DateAndTime [ '2017-12-12T08:00:09.536992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Failure class',				#isMetaSide : true			},			#name : #'message:context:',			#protocol : #'instance creation',			#sourceCode : 'message: aString context: aPP2Context\r\t^ self basicNew message: aString position: aPP2Context position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '861' ],		#self : OmReference [ '862' ],		#time : DateAndTime [ '2017-12-12T08:00:09.537992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #'context:',			#protocol : #accessing,			#sourceCode : 'context: aPP2Context\r\tself flag: \'TODO FIX: so far use #setContext: as a setter\'.\r\tposition := aPP2Context position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '862' ],		#self : OmReference [ '863' ],		#time : DateAndTime [ '2017-12-12T08:00:09.538992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #debugResult,			#protocol : #debugging,			#sourceCode : 'debugResult\r\t^ context debugResult',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '863' ],		#self : OmReference [ '864' ],		#time : DateAndTime [ '2017-12-12T08:00:09.539992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #furthestPosition,			#protocol : #accessing,			#sourceCode : 'furthestPosition\r\t^ context furthestPosition',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '864' ],		#self : OmReference [ '865' ],		#time : DateAndTime [ '2017-12-12T08:00:09.540992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #isPetit2Failure,			#protocol : #testing,			#sourceCode : 'isPetit2Failure\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '865' ],		#self : OmReference [ '866' ],		#time : DateAndTime [ '2017-12-12T08:00:09.540992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #isPetit2Success,			#protocol : #testing,			#sourceCode : 'isPetit2Success\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '866' ],		#self : OmReference [ '867' ],		#time : DateAndTime [ '2017-12-12T08:00:09.541992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #message,			#protocol : #accessing,			#sourceCode : 'message\r\t^ message',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '867' ],		#self : OmReference [ '868' ],		#time : DateAndTime [ '2017-12-12T08:00:09.542992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #'message:',			#protocol : #accessing,			#sourceCode : 'message: anObject\r\tmessage := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '868' ],		#self : OmReference [ '869' ],		#time : DateAndTime [ '2017-12-12T08:00:09.543992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #'message:position:',			#protocol : #accessing,			#sourceCode : 'message: aString position: anInteger\r\tmessage := aString.\r\tposition := anInteger',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '869' ],		#self : OmReference [ '870' ],		#time : DateAndTime [ '2017-12-12T08:00:09.544992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #parser,			#protocol : #accessing,			#sourceCode : 'parser\r\t^ context parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '870' ],		#self : OmReference [ '871' ],		#time : DateAndTime [ '2017-12-12T08:00:09.545992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '871' ],		#self : OmReference [ '872' ],		#time : DateAndTime [ '2017-12-12T08:00:09.546992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '872' ],		#self : OmReference [ '873' ],		#time : DateAndTime [ '2017-12-12T08:00:09.547992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPutAll: \': \'.\r\tself message printOn: aStream ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '873' ],		#self : OmReference [ '874' ],		#time : DateAndTime [ '2017-12-12T08:00:09.548992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #returnValue,			#protocol : #accessing,			#sourceCode : 'returnValue\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '874' ],		#self : OmReference [ '875' ],		#time : DateAndTime [ '2017-12-12T08:00:09.549992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Failure,				#isMetaSide : false			},			#name : #'setContext:',			#protocol : #accessing,			#sourceCode : 'setContext: aPP2Context\r\tcontext := aPP2Context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '875' ],		#self : OmReference [ '876' ],		#time : DateAndTime [ '2017-12-12T08:00:09.550992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacter,				#isMetaSide : false			},			#name : #'changeAfterRange:',			#protocol : #'as yet unclassified',			#sourceCode : 'changeAfterRange: highIndex\r\t^ position > (highIndex + 1)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '876' ],		#self : OmReference [ '877' ],		#time : DateAndTime [ '2017-12-12T08:00:09.551992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacter,				#isMetaSide : false			},			#name : #'changeBeforeRange:',			#protocol : #'as yet unclassified',			#sourceCode : 'changeBeforeRange: lowIndex\r\t^ position  < lowIndex',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '877' ],		#self : OmReference [ '878' ],		#time : DateAndTime [ '2017-12-12T08:00:09.551992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacter,				#isMetaSide : false			},			#name : #'changeBetween:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'changeBetween: lowIndex and: highIndex\r\t^ position >= lowIndex and: [ (position - 1) <= highIndex ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '878' ],		#self : OmReference [ '879' ],		#time : DateAndTime [ '2017-12-12T08:00:09.552992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacter,				#isMetaSide : false			},			#name : #'updateBuffer:',			#protocol : #'private - updates',			#sourceCode : 'updateBuffer: buffer\r\t| newBuffer|\r\tnewBuffer := IdentityDictionary new.\r\t\r\tbuffer associationsDo: [ :assoc |\r\t\t| key memento  lowIndex highIndex contextMemento |\r\t\tkey := assoc key.\r\t\tmemento := assoc value.\r\t\t\r\t\tlowIndex := (assoc key + 1).\r\t\thighIndex := assoc value furthestPosition.\r\t\tcontextMemento := assoc value contextMemento.\r\r\t\t(self changeAfterRange: highIndex) ifTrue: [ newBuffer at: key put: memento ].\r\t\t(self changeBetween: lowIndex and: highIndex) ifTrue: [ \r\t\t\tnewBuffer at: key put: (PP2MementoPromise new\r\t\t\t\tcontextMemento: contextMemento - 1;\r\t\t\t\tfurthestPosition: highIndex - 1;\r\t\t\t\tbuffer: newBuffer;\r\t\t\t\tposition: key;\r\t\t\t\tyourself)\r\t\t].\r\t\t(self changeBeforeRange: lowIndex) ifTrue: [ \r\t\t\tmemento contextMemento: contextMemento - 1.\r\t\t\tnewBuffer at: key - 1 put: memento \r\t\t].\r\t].\r\r\t^ newBuffer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '879' ],		#self : OmReference [ '880' ],		#time : DateAndTime [ '2017-12-12T08:00:09.553992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacter,				#isMetaSide : false			},			#name : #'updateToken:',			#protocol : #'private - updates',			#sourceCode : 'updateToken: token\r\t(self changeBeforeRange: token start) ifTrue: [ \r\t\ttoken start: token start - 1.\r\t\ttoken stop: token stop - 1.\r\t\ttoken collection: input\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '880' ],		#self : OmReference [ '881' ],		#time : DateAndTime [ '2017-12-12T08:00:09.554992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2InputChange class',				#isMetaSide : true			},			#name : #'on:at:',			#protocol : #'instance creation',			#sourceCode : 'on: input at: position\r\t^ self new\r\t\tposition: position;\r\t\tinput: input;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '881' ],		#self : OmReference [ '882' ],		#time : DateAndTime [ '2017-12-12T08:00:09.556992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'deepSelectTokens:into:',			#protocol : #enumerating,			#sourceCode : 'deepSelectTokens: node into: aSet\r\tnode isToken ifTrue: [ aSet add: node ].\r\t\r\tnode nodesDo: [ :child | self deepSelectTokens: child into: aSet\t]\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '882' ],		#self : OmReference [ '883' ],		#time : DateAndTime [ '2017-12-12T08:00:09.557992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #input,			#protocol : #accessing,			#sourceCode : 'input\r\t^ input',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '883' ],		#self : OmReference [ '884' ],		#time : DateAndTime [ '2017-12-12T08:00:09.557992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'input:',			#protocol : #accessing,			#sourceCode : 'input: anObject\r\tinput := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '884' ],		#self : OmReference [ '885' ],		#time : DateAndTime [ '2017-12-12T08:00:09.558992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '885' ],		#self : OmReference [ '886' ],		#time : DateAndTime [ '2017-12-12T08:00:09.559992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '886' ],		#self : OmReference [ '887' ],		#time : DateAndTime [ '2017-12-12T08:00:09.560992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'updateBuffer:',			#protocol : #'private - updates',			#sourceCode : 'updateBuffer: buffer\r\tself subclassResponsibility',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '887' ],		#self : OmReference [ '888' ],		#time : DateAndTime [ '2017-12-12T08:00:09.561992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'updateContext:',			#protocol : #updates,			#sourceCode : 'updateContext: context\r\tcontext adoptString: input',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '888' ],		#self : OmReference [ '889' ],		#time : DateAndTime [ '2017-12-12T08:00:09.562992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'updateParser:',			#protocol : #updates,			#sourceCode : 'updateParser: node\r\tnode ifNil: [ ^ self ].\r\tnode allReparsables do: [ :reparsable |\r\t\treparsable buffer: (self updateBuffer: reparsable buffer).\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '889' ],		#self : OmReference [ '890' ],		#time : DateAndTime [ '2017-12-12T08:00:09.563992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'updateToken:',			#protocol : #'private - updates',			#sourceCode : 'updateToken: token\r\tself subclassResponsibility',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '890' ],		#self : OmReference [ '891' ],		#time : DateAndTime [ '2017-12-12T08:00:09.564992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InputChange,				#isMetaSide : false			},			#name : #'updateTokens:',			#protocol : #updates,			#sourceCode : 'updateTokens: node\r\t| set |\r\t"make sure you update every token only once ;-)"\r\tset := IdentitySet new.\r\tself deepSelectTokens: node into: set.\r\t\r\tset do: [ :token | self updateToken: token ].\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '891' ],		#self : OmReference [ '892' ],		#time : DateAndTime [ '2017-12-12T08:00:09.565992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacter,				#isMetaSide : false			},			#name : #'changeAfterRange:',			#protocol : #testing,			#sourceCode : 'changeAfterRange: highIndex\r\t^ position > (highIndex + 1)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '892' ],		#self : OmReference [ '893' ],		#time : DateAndTime [ '2017-12-12T08:00:09.566992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacter,				#isMetaSide : false			},			#name : #'changeBeforeRange:',			#protocol : #testing,			#sourceCode : 'changeBeforeRange: lowIndex\r\t^ position < lowIndex',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '893' ],		#self : OmReference [ '894' ],		#time : DateAndTime [ '2017-12-12T08:00:09.567992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacter,				#isMetaSide : false			},			#name : #'changeBetween:and:',			#protocol : #testing,			#sourceCode : 'changeBetween: lowIndex and: highIndex\r\t^ (position >= lowIndex) and: [ position <= (highIndex + 1) ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '894' ],		#self : OmReference [ '895' ],		#time : DateAndTime [ '2017-12-12T08:00:09.568992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacter,				#isMetaSide : false			},			#name : #'updateBuffer:',			#protocol : #'private - updates',			#sourceCode : 'updateBuffer: buffer\r\t| newBuffer |\r\tnewBuffer := IdentityDictionary new.\r\r\tbuffer associationsDo: [ :assoc |\r\t\t| key lowIndex highIndex memento contextMemento |\r\t\t"for some reason, key has indexing from zero"\r\t\tmemento := assoc value.\r\t\tkey := assoc key.\r\t\tlowIndex := (assoc key + 1).\r\t\thighIndex := assoc value furthestPosition.\r\t\tcontextMemento := assoc value contextMemento.\r\r\t\t(self changeAfterRange: highIndex) ifTrue: [ newBuffer at: key put: memento ].\r\t\t(self changeBetween: lowIndex and: highIndex) ifTrue: [ \r\t\t\tnewBuffer at: key put: (PP2MementoPromise new\r\t\t\t\tcontextMemento: contextMemento + 1;\r\t\t\t\tfurthestPosition: highIndex +1;\r\t\t\t\tposition: key;\r\t\t\t\tbuffer: newBuffer;\r\t\t\t\tyourself)\r\t\t].\r\t\t(self changeBeforeRange: lowIndex) ifTrue: [ \r\t\t\tmemento contextMemento: contextMemento + 1.\r\t\t\tnewBuffer at: (key + 1) put: memento \r\t\t].\r\r\t].\r\r\t^ newBuffer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '895' ],		#self : OmReference [ '896' ],		#time : DateAndTime [ '2017-12-12T08:00:09.569992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacter,				#isMetaSide : false			},			#name : #'updateToken:',			#protocol : #'private - updates',			#sourceCode : 'updateToken: token\r\t(self changeBeforeRange: token start) ifTrue: [ \r\t\ttoken start: token start + 1.\r\t\ttoken stop: token stop + 1.\r\t\ttoken collection: input\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '896' ],		#self : OmReference [ '897' ],		#time : DateAndTime [ '2017-12-12T08:00:09.570992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #contextMemento,			#protocol : #accessing,			#sourceCode : 'contextMemento\r\t^ contextMemento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '897' ],		#self : OmReference [ '898' ],		#time : DateAndTime [ '2017-12-12T08:00:09.571992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #'contextMemento:',			#protocol : #accessing,			#sourceCode : 'contextMemento: anObject\r\tcontextMemento := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '898' ],		#self : OmReference [ '899' ],		#time : DateAndTime [ '2017-12-12T08:00:09.571992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #furthestPosition,			#protocol : #accessing,			#sourceCode : 'furthestPosition\r\t^ furthestPosition',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '899' ],		#self : OmReference [ '900' ],		#time : DateAndTime [ '2017-12-12T08:00:09.572992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #'furthestPosition:',			#protocol : #accessing,			#sourceCode : 'furthestPosition: anObject\r\tfurthestPosition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '900' ],		#self : OmReference [ '901' ],		#time : DateAndTime [ '2017-12-12T08:00:09.573992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #isPromise,			#protocol : #testing,			#sourceCode : 'isPromise\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '901' ],		#self : OmReference [ '902' ],		#time : DateAndTime [ '2017-12-12T08:00:09.574992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #'resolveFor:in:',			#protocol : #resolving,			#sourceCode : 'resolveFor: parser in: context\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '902' ],		#self : OmReference [ '903' ],		#time : DateAndTime [ '2017-12-12T08:00:09.575992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #returnValue,			#protocol : #accessing,			#sourceCode : 'returnValue\r\t^ returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '903' ],		#self : OmReference [ '904' ],		#time : DateAndTime [ '2017-12-12T08:00:09.576992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memento,				#isMetaSide : false			},			#name : #'returnValue:',			#protocol : #accessing,			#sourceCode : 'returnValue: anObject\r\treturnValue := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '904' ],		#self : OmReference [ '905' ],		#time : DateAndTime [ '2017-12-12T08:00:09.577992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #buffer,			#protocol : #accessing,			#sourceCode : 'buffer\r\t^ buffer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '905' ],		#self : OmReference [ '906' ],		#time : DateAndTime [ '2017-12-12T08:00:09.578992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #'buffer:',			#protocol : #accessing,			#sourceCode : 'buffer: anObject\r\tbuffer := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '906' ],		#self : OmReference [ '907' ],		#time : DateAndTime [ '2017-12-12T08:00:09.579992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #contextMemento,			#protocol : #accessing,			#sourceCode : 'contextMemento\r\t^ contextMemento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '907' ],		#self : OmReference [ '908' ],		#time : DateAndTime [ '2017-12-12T08:00:09.580992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #'contextMemento:',			#protocol : #accessing,			#sourceCode : 'contextMemento: anObject\r\tcontextMemento := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '908' ],		#self : OmReference [ '909' ],		#time : DateAndTime [ '2017-12-12T08:00:09.581992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #furthestPosition,			#protocol : #accessing,			#sourceCode : 'furthestPosition\r\t^ furthestPosition',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '909' ],		#self : OmReference [ '910' ],		#time : DateAndTime [ '2017-12-12T08:00:09.582992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #'furthestPosition:',			#protocol : #accessing,			#sourceCode : 'furthestPosition: anObject\r\tfurthestPosition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '910' ],		#self : OmReference [ '911' ],		#time : DateAndTime [ '2017-12-12T08:00:09.582992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #isPromise,			#protocol : #testing,			#sourceCode : 'isPromise\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '911' ],		#self : OmReference [ '912' ],		#time : DateAndTime [ '2017-12-12T08:00:09.583992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '912' ],		#self : OmReference [ '913' ],		#time : DateAndTime [ '2017-12-12T08:00:09.585992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '913' ],		#self : OmReference [ '914' ],		#time : DateAndTime [ '2017-12-12T08:00:09.586992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MementoPromise,				#isMetaSide : false			},			#name : #'resolveFor:in:',			#protocol : #resolving,			#sourceCode : 'resolveFor: parser in: context\r\t| memento |\r\tmemento := PP2Memento new\r\t\treturnValue: (parser parseOn: context);\r\t\tcontextMemento: context remember;\r\t\tfurthestPosition: context furthestPosition;\r\t\tyourself.\r\r\t(contextMemento isNotNil and: [ memento contextMemento position ~= contextMemento position ]) ifTrue: [ \r\t\tPP2ReparseException signal: \'reparse consumed more or less characters than expected\'\r\t].\r\t\t\r\t^ buffer at: position put: memento.\r\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '914' ],		#self : OmReference [ '915' ],		#time : DateAndTime [ '2017-12-12T08:00:09.587992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CFMemoization,				#isMetaSide : false			},			#name : #isContextFree,			#protocol : #testing,			#sourceCode : 'isContextFree\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '915' ],		#self : OmReference [ '916' ],		#time : DateAndTime [ '2017-12-12T08:00:09.587992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CFMemoization,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t^ context rememberPosition ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '916' ],		#self : OmReference [ '917' ],		#time : DateAndTime [ '2017-12-12T08:00:09.588992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CFMemoization,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\tcontext restorePosition: memento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '917' ],		#self : OmReference [ '918' ],		#time : DateAndTime [ '2017-12-12T08:00:09.589992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CSMemoization,				#isMetaSide : false			},			#name : #isContextFree,			#protocol : #testing,			#sourceCode : 'isContextFree\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '918' ],		#self : OmReference [ '919' ],		#time : DateAndTime [ '2017-12-12T08:00:09.590992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CSMemoization,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t^ context remember ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '919' ],		#self : OmReference [ '920' ],		#time : DateAndTime [ '2017-12-12T08:00:09.591992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CSMemoization,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\tcontext restore: memento',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '920' ],		#self : OmReference [ '921' ],		#time : DateAndTime [ '2017-12-12T08:00:09.592992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memoization,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '921' ],		#self : OmReference [ '922' ],		#time : DateAndTime [ '2017-12-12T08:00:09.593992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Memoization,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '922' ],		#self : OmReference [ '923' ],		#time : DateAndTime [ '2017-12-12T08:00:09.594992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemoization,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t"TODO JK: make it working with other than default stacks"\r\t^ PP2PopMemento new \r\t\tposition: context rememberPosition;\r\t\tstackSize: context defaultStack size;\r\t\tstackTop: context defaultStack top;\r\t\tyourself\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '923' ],		#self : OmReference [ '924' ],		#time : DateAndTime [ '2017-12-12T08:00:09.595992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemoization,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\tcontext restorePosition: memento position.\r\tcontext defaultStack size < memento stackSize ifTrue: [ \t\r\t\tcontext defaultStack push: memento stackTop.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '924' ],		#self : OmReference [ '925' ],		#time : DateAndTime [ '2017-12-12T08:00:09.596992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushMemoization,				#isMetaSide : false			},			#name : #'remember:',			#protocol : #memoization,			#sourceCode : 'remember: context\r\t"TODO JK: make it working with other than default stacks"\r\t^ PP2PushMemento new \r\t\tposition: context rememberPosition;\r\t\tstackSize: context defaultStack size;\r\t\tyourself\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '925' ],		#self : OmReference [ '926' ],		#time : DateAndTime [ '2017-12-12T08:00:09.597992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushMemoization,				#isMetaSide : false			},			#name : #'restore:from:',			#protocol : #memoization,			#sourceCode : 'restore: context from: memento\r\tcontext restorePosition: memento position.\r\tcontext defaultStack size > memento stackSize ifTrue: [ \t\r\t\tcontext defaultStack pop\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '926' ],		#self : OmReference [ '927' ],		#time : DateAndTime [ '2017-12-12T08:00:09.598992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitAdaptable: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '927' ],		#self : OmReference [ '928' ],		#time : DateAndTime [ '2017-12-12T08:00:09.599992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #'changeChild:',			#protocol : #transforming,			#sourceCode : 'changeChild: newChild\r\tchild := newChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '928' ],		#self : OmReference [ '929' ],		#time : DateAndTime [ '2017-12-12T08:00:09.600992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #child,			#protocol : #visiting,			#sourceCode : 'child\r\t^ child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '929' ],		#self : OmReference [ '930' ],		#time : DateAndTime [ '2017-12-12T08:00:09.601992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ child isNil ifTrue: [ Array new ] ifFalse: [ Array with: child ]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '930' ],		#self : OmReference [ '931' ],		#time : DateAndTime [ '2017-12-12T08:00:09.602992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #isAdaptable,			#protocol : #testing,			#sourceCode : 'isAdaptable\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '931' ],		#self : OmReference [ '932' ],		#time : DateAndTime [ '2017-12-12T08:00:09.603992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #isFirstSetTerminal,			#protocol : #testing,			#sourceCode : 'isFirstSetTerminal\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '932' ],		#self : OmReference [ '933' ],		#time : DateAndTime [ '2017-12-12T08:00:09.604992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #transforming,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Delegate on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '933' ],		#self : OmReference [ '934' ],		#time : DateAndTime [ '2017-12-12T08:00:09.605992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2AbstractActionNode class',				#isMetaSide : true			},			#name : #'on:block:',			#protocol : #'instance creation',			#sourceCode : 'on: node block: aBlock\r\t^ self new\r\t\tchild: node;\r\t\tblock: aBlock;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '934' ],		#self : OmReference [ '935' ],		#time : DateAndTime [ '2017-12-12T08:00:09.606992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractActionNode,				#isMetaSide : false			},			#name : #block,			#protocol : #accessing,			#sourceCode : 'block\r\t"Answer the action block of the receiver."\r\r\t^ block',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '935' ],		#self : OmReference [ '936' ],		#time : DateAndTime [ '2017-12-12T08:00:09.607992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractActionNode,				#isMetaSide : false			},			#name : #'block:',			#protocol : #accessing,			#sourceCode : 'block: anObject\r\tblock := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '936' ],		#self : OmReference [ '937' ],		#time : DateAndTime [ '2017-12-12T08:00:09.608992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractActionNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\t^ (self block printString = anotherNode block printString)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '937' ],		#self : OmReference [ '938' ],		#time : DateAndTime [ '2017-12-12T08:00:09.609992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractActionNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: block printString hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '938' ],		#self : OmReference [ '939' ],		#time : DateAndTime [ '2017-12-12T08:00:09.610992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractActionNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: context\r\t^ strategy parseOn: context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '939' ],		#self : OmReference [ '940' ],		#time : DateAndTime [ '2017-12-12T08:00:09.611992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ActionNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitAction: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '940' ],		#self : OmReference [ '941' ],		#time : DateAndTime [ '2017-12-12T08:00:09.612992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ActionNode,				#isMetaSide : false			},			#name : #'parseOld:',			#protocol : #'parsing - private',			#sourceCode : 'parseOld: aPP2Context\r\t| context |\r\t^ (context := child parseWithContext:  aPP2Context) isPetit2Failure\r\t\tifFalse: [ context setValue: (block value: context value) ]\r\t\tifTrue: [ context ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '941' ],		#self : OmReference [ '942' ],		#time : DateAndTime [ '2017-12-12T08:00:09.613992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ActionNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Action on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '942' ],		#self : OmReference [ '943' ],		#time : DateAndTime [ '2017-12-12T08:00:09.614992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MappingNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitMapping: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '943' ],		#self : OmReference [ '944' ],		#time : DateAndTime [ '2017-12-12T08:00:09.615992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MappingNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Mapping on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '944' ],		#self : OmReference [ '945' ],		#time : DateAndTime [ '2017-12-12T08:00:09.616992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitWrapping: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '945' ],		#self : OmReference [ '946' ],		#time : DateAndTime [ '2017-12-12T08:00:09.617992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #doesFunctionalChanges,			#protocol : #testing,			#sourceCode : 'doesFunctionalChanges\r\t^ self propertyAt: #functionalChanges',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '946' ],		#self : OmReference [ '947' ],		#time : DateAndTime [ '2017-12-12T08:00:09.618992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t^ self doesFunctionalChanges ifTrue: [ \r\t\tPP2UnknownCharSetPredicate instance\r\t] ifFalse: [  \r\t\tchild firstCharSet\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '947' ],		#self : OmReference [ '948' ],		#time : DateAndTime [ '2017-12-12T08:00:09.618992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #'functionalChanges:',			#protocol : #accessing,			#sourceCode : 'functionalChanges: aBoolean\r\tself propertyAt: #functionalChanges put: aBoolean',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '948' ],		#self : OmReference [ '949' ],		#time : DateAndTime [ '2017-12-12T08:00:09.619992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself functionalChanges: true.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '949' ],		#self : OmReference [ '950' ],		#time : DateAndTime [ '2017-12-12T08:00:09.620992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #isFirstSetTerminal,			#protocol : #'analysis - first',			#sourceCode : 'isFirstSetTerminal\r\t"lets be conservative here"\r\tself doesFunctionalChanges ifTrue: [  \r\t\t^ true\r\t].\r\r\t^ false\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '950' ],		#self : OmReference [ '951' ],		#time : DateAndTime [ '2017-12-12T08:00:09.621992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: context\r\t^ strategy parseOn: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '951' ],		#self : OmReference [ '952' ],		#time : DateAndTime [ '2017-12-12T08:00:09.622992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WrappingNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Wrapping on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '952' ],		#self : OmReference [ '953' ],		#time : DateAndTime [ '2017-12-12T08:00:09.623992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitAnd: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '953' ],		#self : OmReference [ '954' ],		#time : DateAndTime [ '2017-12-12T08:00:09.624992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndNode,				#isMetaSide : false			},			#name : #and,			#protocol : #operators,			#sourceCode : 'and\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '954' ],		#self : OmReference [ '955' ],		#time : DateAndTime [ '2017-12-12T08:00:09.625992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AndNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2And on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '955' ],		#self : OmReference [ '956' ],		#time : DateAndTime [ '2017-12-12T08:00:09.626992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammar,				#isMetaSide : false			},			#name : #body,			#protocol : #accessing,			#sourceCode : 'body\r\t^ PP2AdaptableNode new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '956' ],		#self : OmReference [ '957' ],		#time : DateAndTime [ '2017-12-12T08:00:09.627992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammar,				#isMetaSide : false			},			#name : #content,			#protocol : #accessing,			#sourceCode : 'content\r\t^ element star',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '957' ],		#self : OmReference [ '958' ],		#time : DateAndTime [ '2017-12-12T08:00:09.628992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammar,				#isMetaSide : false			},			#name : #element,			#protocol : #accessing,			#sourceCode : 'element\r\t^ head, body',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '958' ],		#self : OmReference [ '959' ],		#time : DateAndTime [ '2017-12-12T08:00:09.629992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammar,				#isMetaSide : false			},			#name : #head,			#protocol : #accessing,			#sourceCode : 'head\r\t"I set the body parser dynamically; based on the result of the head"\r\t^ #digit asPParser plus flatten \r\t\r\t==> [ :_number |\r\t\tbody changeChild: (#any asPParser times: _number asNumber) flatten\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '959' ],		#self : OmReference [ '960' ],		#time : DateAndTime [ '2017-12-12T08:00:09.630992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammar,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ content',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '960' ],		#self : OmReference [ '961' ],		#time : DateAndTime [ '2017-12-12T08:00:09.631992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #ignoredNames,			#protocol : #accessing,			#sourceCode : 'ignoredNames\r\t"Answer a collection of instance-variables that should not be automatically initialized with productions, but that are used internal to the composite parser."\r\r\t^ PP2CompositeNode allInstVarNames',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '961' ],		#self : OmReference [ '962' ],		#time : DateAndTime [ '2017-12-12T08:00:09.632992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t"Answer a new parser starting at the default start symbol."\r\r\t^ self newStartingAt: self startSymbol',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '962' ],		#self : OmReference [ '963' ],		#time : DateAndTime [ '2017-12-12T08:00:09.633992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #'newStartingAt:',			#protocol : #'instance creation',			#sourceCode : 'newStartingAt: aSymbol\r\t"Answer a new parser starting at aSymbol."\r\t^ self basicNew\r\t\tinitializeStartingAt: aSymbol;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '963' ],		#self : OmReference [ '964' ],		#time : DateAndTime [ '2017-12-12T08:00:09.634992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #'parse:',			#protocol : #parsing,			#sourceCode : 'parse: anObject\r\t^ self parse: anObject startingAt: self startSymbol',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '964' ],		#self : OmReference [ '965' ],		#time : DateAndTime [ '2017-12-12T08:00:09.635992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #'parse:onError:',			#protocol : #parsing,			#sourceCode : 'parse: anObject onError: aBlock\r\t^ self parse: anObject startingAt: self startSymbol onError: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '965' ],		#self : OmReference [ '966' ],		#time : DateAndTime [ '2017-12-12T08:00:09.636992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #'parse:startingAt:',			#protocol : #parsing,			#sourceCode : 'parse: anObject startingAt: aSymbol\r\t^ (self newStartingAt: aSymbol) parse: anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '966' ],		#self : OmReference [ '967' ],		#time : DateAndTime [ '2017-12-12T08:00:09.637992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #'parse:startingAt:onError:',			#protocol : #parsing,			#sourceCode : 'parse: anObject startingAt: aSymbol onError: aBlock\r\t^ (self newStartingAt: aSymbol) parse: anObject onError: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '967' ],		#self : OmReference [ '968' ],		#time : DateAndTime [ '2017-12-12T08:00:09.638992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNode class',				#isMetaSide : true			},			#name : #startSymbol,			#protocol : #accessing,			#sourceCode : 'startSymbol\r\t"Answer the method that represents the default start symbol."\r\r\t^ #start',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '968' ],		#self : OmReference [ '969' ],		#time : DateAndTime [ '2017-12-12T08:00:09.639992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitComposite: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '969' ],		#self : OmReference [ '970' ],		#time : DateAndTime [ '2017-12-12T08:00:09.640992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #'initializeStartingAt:',			#protocol : #initialization,			#sourceCode : 'initializeStartingAt: aSymbol\r\t| parser |\r\tself initialize.\r\r\tself productionNames keysAndValuesDo: [ :key :value |\r\t\tself instVarAt: key put: (PP2DelegateNode named: value) \r\t].\r\r\tself productionNames keysAndValuesDo: [ :key :value |\r\t\tparser := self perform: value.\r\t\tself assert: parser ~= self description: \'you probably forgot to return the parser in "\', value, \'"\'.\r\t\t(self instVarAt: key) child: parser \r\t].\r\r\tchild := (self perform: aSymbol)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '970' ],		#self : OmReference [ '971' ],		#time : DateAndTime [ '2017-12-12T08:00:09.641992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #isProduction,			#protocol : #testing,			#sourceCode : 'isProduction\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '971' ],		#self : OmReference [ '972' ],		#time : DateAndTime [ '2017-12-12T08:00:09.642992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #'productionAt:',			#protocol : #querying,			#sourceCode : 'productionAt: aSymbol\r\t"Answer the production named aSymbol."\r\t\r\t^ self productionAt: aSymbol ifAbsent: [ nil ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '972' ],		#self : OmReference [ '973' ],		#time : DateAndTime [ '2017-12-12T08:00:09.643992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #'productionAt:ifAbsent:',			#protocol : #querying,			#sourceCode : 'productionAt: aSymbol ifAbsent: aBlock\r\t"Answer the production named aSymbol, if there is no such production answer the result of evaluating aBlock."\r\t\r\t(self class ignoredNames includes: aSymbol asString)\r\t\tifTrue: [ ^ aBlock value ].\r\t(self class startSymbol = aSymbol)\r\t\tifTrue: [ ^ child ].\r\t^ self instVarAt: (self class allInstVarNames\r\t\tindexOf: aSymbol asString\r\t\tifAbsent: [ ^ aBlock value ])',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '973' ],		#self : OmReference [ '974' ],		#time : DateAndTime [ '2017-12-12T08:00:09.644992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #productionNames,			#protocol : #querying,			#sourceCode : 'productionNames\r\t"Answer a dictionary of slot indexes and production names."\r\t\r\t| productionNames ignoredNames |\r\tproductionNames := Dictionary new.\r\tignoredNames := self class ignoredNames\r\t\tcollect: [ :each | each asSymbol ].\r\tself class allInstVarNames keysAndValuesDo: [ :key :value |\r\t\t(ignoredNames includes: value asSymbol)\r\t\t\tifFalse: [ productionNames at: key put: value asSymbol ] ].\r\t^ productionNames',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '974' ],		#self : OmReference [ '975' ],		#time : DateAndTime [ '2017-12-12T08:00:09.645992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNode,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t"Answer the production to start this parser with."\r\t\r\tself subclassResponsibility',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '975' ],		#self : OmReference [ '976' ],		#time : DateAndTime [ '2017-12-12T08:00:09.646992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #addition,			#protocol : #grammar,			#sourceCode : 'addition\r\t^ primary, plus trim, terms',			#stamp : 'JanKurs 7/2/2017 14:57',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '976' ],		#self : OmReference [ '977' ],		#time : DateAndTime [ '2017-12-12T08:00:09.647992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #closeBracket,			#protocol : #tokens,			#sourceCode : 'closeBracket\r\t^ $) asPParser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '977' ],		#self : OmReference [ '978' ],		#time : DateAndTime [ '2017-12-12T08:00:09.648992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #multiplication,			#protocol : #grammar,			#sourceCode : 'multiplication\r\t^ primary, star trim, terms',			#stamp : 'JanKurs 7/2/2017 14:57',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '978' ],		#self : OmReference [ '979' ],		#time : DateAndTime [ '2017-12-12T08:00:09.649992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #number,			#protocol : #tokens,			#sourceCode : 'number\r\t^ ($- asPParser optional , #digit asPParser plus , ($. asPParser, #digit asPParser plus) optional) flatten',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '979' ],		#self : OmReference [ '980' ],		#time : DateAndTime [ '2017-12-12T08:00:09.650992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #openBracket,			#protocol : #tokens,			#sourceCode : 'openBracket\r\t^ $( asPParser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '980' ],		#self : OmReference [ '981' ],		#time : DateAndTime [ '2017-12-12T08:00:09.650992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #parentheses,			#protocol : #grammar,			#sourceCode : 'parentheses\r\t^ openBracket trim , terms , closeBracket trim',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '981' ],		#self : OmReference [ '982' ],		#time : DateAndTime [ '2017-12-12T08:00:09.651992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #plus,			#protocol : #tokens,			#sourceCode : 'plus\r\t^ $+ asPParser',			#stamp : 'JanKurs 7/2/2017 14:57',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '982' ],		#self : OmReference [ '983' ],		#time : DateAndTime [ '2017-12-12T08:00:09.652992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #primary,			#protocol : #grammar,			#sourceCode : 'primary\r\t^ number / parentheses',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '983' ],		#self : OmReference [ '984' ],		#time : DateAndTime [ '2017-12-12T08:00:09.654992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #star,			#protocol : #tokens,			#sourceCode : 'star\r\t^ $* asPParser',			#stamp : 'JanKurs 7/2/2017 14:57',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '984' ],		#self : OmReference [ '985' ],		#time : DateAndTime [ '2017-12-12T08:00:09.655992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ terms end',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '985' ],		#self : OmReference [ '986' ],		#time : DateAndTime [ '2017-12-12T08:00:09.656992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammar,				#isMetaSide : false			},			#name : #terms,			#protocol : #grammar,			#sourceCode : 'terms\r\t^ addition / multiplication / primary',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '986' ],		#self : OmReference [ '987' ],		#time : DateAndTime [ '2017-12-12T08:00:09.656992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionParser,				#isMetaSide : false			},			#name : #number,			#protocol : #tokens,			#sourceCode : 'number\r\t^ super number ==> #asNumber',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '987' ],		#self : OmReference [ '988' ],		#time : DateAndTime [ '2017-12-12T08:00:09.658992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2HtmlHeaderGrammar class',				#isMetaSide : true			},			#name : #example,			#protocol : #example,			#sourceCode : 'example\r\t| byteStream stream |\r\tbyteStream := ZnClient new\r \t\turl: \'http://pharo.org\';\r  \t\tstreaming: true;\r  \t\tget.\r\tstream := PP2CharacterStream on: byteStream encoder: ZnUTF8Encoder new.\r\r\t^ PP2HtmlHeaderGrammar new optimize parse: stream',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '988' ],		#self : OmReference [ '989' ],		#time : DateAndTime [ '2017-12-12T08:00:09.658992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammar,				#isMetaSide : false			},			#name : #bodyStart,			#protocol : #rules,			#sourceCode : 'bodyStart\r\t^ \'<body\' asPParser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '989' ],		#self : OmReference [ '990' ],		#time : DateAndTime [ '2017-12-12T08:00:09.659992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammar,				#isMetaSide : false			},			#name : #header,			#protocol : #rules,			#sourceCode : 'header\r\t^ \'<head>\' asPParser, #any asPParser starLazy, \'</head>\' asPParser\r\t\r\tmap: [ :_begin :_content :_end |\r\t\t(_content inject: (WriteStream on: \'\') into: [ :stream :char | stream nextPut: char. stream ]) \t\t\tcontents\r\t]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '990' ],		#self : OmReference [ '991' ],		#time : DateAndTime [ '2017-12-12T08:00:09.660992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammar,				#isMetaSide : false			},			#name : #headerStart,			#protocol : #rules,			#sourceCode : 'headerStart\r\t^ \'<head\' asPParser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '991' ],		#self : OmReference [ '992' ],		#time : DateAndTime [ '2017-12-12T08:00:09.661992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammar,				#isMetaSide : false			},			#name : #htmlFragment,			#protocol : #rules,			#sourceCode : 'htmlFragment\r\t^ (#any asPParser starLazy: (headerStart / bodyStart)), header ==> #second',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '992' ],		#self : OmReference [ '993' ],		#time : DateAndTime [ '2017-12-12T08:00:09.662992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammar,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ htmlFragment',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '993' ],		#self : OmReference [ '994' ],		#time : DateAndTime [ '2017-12-12T08:00:09.664992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\tself flag: \'JK: rename to visitCreateTokenNode: (???)\'.\r\t^ aPP2Visitor visitToken: self',			#stamp : 'JanKurs 8/20/2017 17:20',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '994' ],		#self : OmReference [ '995' ],		#time : DateAndTime [ '2017-12-12T08:00:09.664992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #defaultTokenClass,			#protocol : #private,			#sourceCode : 'defaultTokenClass\r\t^ PP2Token',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '995' ],		#self : OmReference [ '996' ],		#time : DateAndTime [ '2017-12-12T08:00:09.665992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\ttokenClass := self defaultTokenClass',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '996' ],		#self : OmReference [ '997' ],		#time : DateAndTime [ '2017-12-12T08:00:09.666992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #isToken,			#protocol : #testing,			#sourceCode : 'isToken\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '997' ],		#self : OmReference [ '998' ],		#time : DateAndTime [ '2017-12-12T08:00:09.667992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\r\t^ self tokenClass == anotherNode tokenClass',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '998' ],		#self : OmReference [ '999' ],		#time : DateAndTime [ '2017-12-12T08:00:09.668992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: tokenClass hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '999' ],		#self : OmReference [ '1000' ],		#time : DateAndTime [ '2017-12-12T08:00:09.669992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #nodeName,			#protocol : #visiting,			#sourceCode : 'nodeName\r\t^ self name',			#stamp : 'JanKurs 8/21/2017 07:55',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1000' ],		#self : OmReference [ '1001' ],		#time : DateAndTime [ '2017-12-12T08:00:09.670992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2CreateToken on: self',			#stamp : 'JanKurs 8/20/2017 17:19',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1001' ],		#self : OmReference [ '1002' ],		#time : DateAndTime [ '2017-12-12T08:00:09.671992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #tokenClass,			#protocol : #accessing,			#sourceCode : 'tokenClass\r\t^ tokenClass',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1002' ],		#self : OmReference [ '1003' ],		#time : DateAndTime [ '2017-12-12T08:00:09.672992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CreateTokenNode,				#isMetaSide : false			},			#name : #'tokenClass:',			#protocol : #accessing,			#sourceCode : 'tokenClass: anObject\r\ttokenClass := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1003' ],		#self : OmReference [ '1004' ],		#time : DateAndTime [ '2017-12-12T08:00:09.673992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1004' ],		#self : OmReference [ '1005' ],		#time : DateAndTime [ '2017-12-12T08:00:09.674992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1005' ],		#self : OmReference [ '1006' ],		#time : DateAndTime [ '2017-12-12T08:00:09.675992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNode,				#isMetaSide : false			},			#name : #stackId,			#protocol : #accessing,			#sourceCode : 'stackId\r\t^ stackId ifNil: [ #defaultStack ] ifNotNil: [ stackId ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1006' ],		#self : OmReference [ '1007' ],		#time : DateAndTime [ '2017-12-12T08:00:09.676992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNode,				#isMetaSide : false			},			#name : #'stackId:',			#protocol : #accessing,			#sourceCode : 'stackId: id\r\t^ stackId := id',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1007' ],		#self : OmReference [ '1008' ],		#time : DateAndTime [ '2017-12-12T08:00:09.677992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MatchNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitMatch: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1008' ],		#self : OmReference [ '1009' ],		#time : DateAndTime [ '2017-12-12T08:00:09.678992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MatchNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Match on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1009' ],		#self : OmReference [ '1010' ],		#time : DateAndTime [ '2017-12-12T08:00:09.679992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitPop: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1010' ],		#self : OmReference [ '1011' ],		#time : DateAndTime [ '2017-12-12T08:00:09.680992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Pop on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1011' ],		#self : OmReference [ '1012' ],		#time : DateAndTime [ '2017-12-12T08:00:09.680992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitPush: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1012' ],		#self : OmReference [ '1013' ],		#time : DateAndTime [ '2017-12-12T08:00:09.681992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Push on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1013' ],		#self : OmReference [ '1014' ],		#time : DateAndTime [ '2017-12-12T08:00:09.683992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2DelegateNode class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: node\r\t^ self new child: node\r\t\t\r\t',			#stamp : 'JanKurs 8/14/2017 21:28',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1014' ],		#self : OmReference [ '1015' ],		#time : DateAndTime [ '2017-12-12T08:00:09.684992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitDelegate: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1015' ],		#self : OmReference [ '1016' ],		#time : DateAndTime [ '2017-12-12T08:00:09.685992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #'changeChild:',			#protocol : #transforming,			#sourceCode : 'changeChild: newChild\r\tself assert: child isAdaptable.\r\tchild changeChild: newChild.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1016' ],		#self : OmReference [ '1017' ],		#time : DateAndTime [ '2017-12-12T08:00:09.686992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #child,			#protocol : #accessing,			#sourceCode : 'child\r\t^ child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1017' ],		#self : OmReference [ '1018' ],		#time : DateAndTime [ '2017-12-12T08:00:09.686992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #'child:',			#protocol : #accessing,			#sourceCode : 'child: newChild\r\tchild := newChild',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1018' ],		#self : OmReference [ '1019' ],		#time : DateAndTime [ '2017-12-12T08:00:09.687992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #childSkipDelegate,			#protocol : #accessing,			#sourceCode : 'childSkipDelegate\r\t^ child isJustDelegate ifTrue: [  child child ] ifFalse: [\t^ child ]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1019' ],		#self : OmReference [ '1020' ],		#time : DateAndTime [ '2017-12-12T08:00:09.688992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ Array with: child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1020' ],		#self : OmReference [ '1021' ],		#time : DateAndTime [ '2017-12-12T08:00:09.689992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #isCacheForbidden,			#protocol : #'optimizations - caching',			#sourceCode : 'isCacheForbidden\r\tself isJustDelegate ifFalse: [  \r\t\t^ super isCacheForbidden \r\t].\r\r\t^ super isCacheForbidden or: [ self child isCacheForbidden  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1021' ],		#self : OmReference [ '1022' ],		#time : DateAndTime [ '2017-12-12T08:00:09.690992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #isDelegate,			#protocol : #testing,			#sourceCode : 'isDelegate\r\tself class == PP2DelegateNode ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1022' ],		#self : OmReference [ '1023' ],		#time : DateAndTime [ '2017-12-12T08:00:09.691992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #isJustDelegate,			#protocol : #testing,			#sourceCode : 'isJustDelegate\r\t^ self class == PP2DelegateNode ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1023' ],		#self : OmReference [ '1024' ],		#time : DateAndTime [ '2017-12-12T08:00:09.692992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: context\r\t^ strategy parseOn: context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1024' ],		#self : OmReference [ '1025' ],		#time : DateAndTime [ '2017-12-12T08:00:09.693992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #'replace:with:',			#protocol : #transforming,			#sourceCode : 'replace: node with: anotherNode\r\tchild == node ifTrue: [ child := anotherNode ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1025' ],		#self : OmReference [ '1026' ],		#time : DateAndTime [ '2017-12-12T08:00:09.694992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DelegateNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Delegate on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1026' ],		#self : OmReference [ '1027' ],		#time : DateAndTime [ '2017-12-12T08:00:09.695992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitEnd: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1027' ],		#self : OmReference [ '1028' ],		#time : DateAndTime [ '2017-12-12T08:00:09.696992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndNode,				#isMetaSide : false			},			#name : #end,			#protocol : #operators,			#sourceCode : 'end\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1028' ],		#self : OmReference [ '1029' ],		#time : DateAndTime [ '2017-12-12T08:00:09.697992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2End on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1029' ],		#self : OmReference [ '1030' ],		#time : DateAndTime [ '2017-12-12T08:00:09.698992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FlattenNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitFlatten: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1030' ],		#self : OmReference [ '1031' ],		#time : DateAndTime [ '2017-12-12T08:00:09.699992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FlattenNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Flatten on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1031' ],		#self : OmReference [ '1032' ],		#time : DateAndTime [ '2017-12-12T08:00:09.700992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FragmentNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitFragment: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1032' ],		#self : OmReference [ '1033' ],		#time : DateAndTime [ '2017-12-12T08:00:09.701992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FragmentNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Fragment on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1033' ],		#self : OmReference [ '1034' ],		#time : DateAndTime [ '2017-12-12T08:00:09.702992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NonEpsilonNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #'as yet unclassified',			#sourceCode : 'accept: visitor\r\t^ visitor visitNonEpsilon: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1034' ],		#self : OmReference [ '1035' ],		#time : DateAndTime [ '2017-12-12T08:00:09.704992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NonEpsilonNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #'as yet unclassified',			#sourceCode : 'resetStrategy\r\tstrategy := PP2NonEpsilon on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1035' ],		#self : OmReference [ '1036' ],		#time : DateAndTime [ '2017-12-12T08:00:09.705992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitNot: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1036' ],		#self : OmReference [ '1037' ],		#time : DateAndTime [ '2017-12-12T08:00:09.706992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t^ PP2UnknownCharSetPredicate instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1037' ],		#self : OmReference [ '1038' ],		#time : DateAndTime [ '2017-12-12T08:00:09.707992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotNode,				#isMetaSide : false			},			#name : #isFirstSetTerminal,			#protocol : #'analysis - first',			#sourceCode : 'isFirstSetTerminal\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1038' ],		#self : OmReference [ '1039' ],		#time : DateAndTime [ '2017-12-12T08:00:09.708992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1039' ],		#self : OmReference [ '1040' ],		#time : DateAndTime [ '2017-12-12T08:00:09.709992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NotNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Not on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1040' ],		#self : OmReference [ '1041' ],		#time : DateAndTime [ '2017-12-12T08:00:09.709992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptionalNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitOptional: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1041' ],		#self : OmReference [ '1042' ],		#time : DateAndTime [ '2017-12-12T08:00:09.710992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptionalNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1042' ],		#self : OmReference [ '1043' ],		#time : DateAndTime [ '2017-12-12T08:00:09.711992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptionalNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Optional on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1043' ],		#self : OmReference [ '1044' ],		#time : DateAndTime [ '2017-12-12T08:00:09.712992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PossesiveRepeatingNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitPossesiveRepeating: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1044' ],		#self : OmReference [ '1045' ],		#time : DateAndTime [ '2017-12-12T08:00:09.714992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PossesiveRepeatingNode,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ super hash bitXor: (min hash bitXor: max hash)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1045' ],		#self : OmReference [ '1046' ],		#time : DateAndTime [ '2017-12-12T08:00:09.715992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PossesiveRepeatingNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\tself min = anotherNode min ifFalse: [ ^ false ].\r\tself max = anotherNode max ifFalse: [ ^ false ].\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1046' ],		#self : OmReference [ '1047' ],		#time : DateAndTime [ '2017-12-12T08:00:09.716992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PossesiveRepeatingNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2PossesiveRepeating on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1047' ],		#self : OmReference [ '1048' ],		#time : DateAndTime [ '2017-12-12T08:00:09.717992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitRepeating: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1048' ],		#self : OmReference [ '1049' ],		#time : DateAndTime [ '2017-12-12T08:00:09.718992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tmin := 0.\r\tmax := SmallInteger maxVal.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1049' ],		#self : OmReference [ '1050' ],		#time : DateAndTime [ '2017-12-12T08:00:09.718992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #isRepeating,			#protocol : #testing,			#sourceCode : 'isRepeating\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1050' ],		#self : OmReference [ '1051' ],		#time : DateAndTime [ '2017-12-12T08:00:09.719992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #max,			#protocol : #accessing,			#sourceCode : 'max\r\t^ max',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1051' ],		#self : OmReference [ '1052' ],		#time : DateAndTime [ '2017-12-12T08:00:09.720992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #'max:',			#protocol : #accessing,			#sourceCode : 'max: anObject\r\tmax := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1052' ],		#self : OmReference [ '1053' ],		#time : DateAndTime [ '2017-12-12T08:00:09.721992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #min,			#protocol : #accessing,			#sourceCode : 'min\r\t^ min',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1053' ],		#self : OmReference [ '1054' ],		#time : DateAndTime [ '2017-12-12T08:00:09.722992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RepeatingNode,				#isMetaSide : false			},			#name : #'min:',			#protocol : #accessing,			#sourceCode : 'min: anObject\r\tmin := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1054' ],		#self : OmReference [ '1055' ],		#time : DateAndTime [ '2017-12-12T08:00:09.723992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitTrimming: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1055' ],		#self : OmReference [ '1056' ],		#time : DateAndTime [ '2017-12-12T08:00:09.724992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ Array with: trimmer with: child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1056' ],		#self : OmReference [ '1057' ],		#time : DateAndTime [ '2017-12-12T08:00:09.725992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #isTrimming,			#protocol : #testing,			#sourceCode : 'isTrimming\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1057' ],		#self : OmReference [ '1058' ],		#time : DateAndTime [ '2017-12-12T08:00:09.726992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #isTrimmingToken,			#protocol : #testing,			#sourceCode : 'isTrimmingToken\r\t^ self child isToken',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1058' ],		#self : OmReference [ '1059' ],		#time : DateAndTime [ '2017-12-12T08:00:09.727992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1059' ],		#self : OmReference [ '1060' ],		#time : DateAndTime [ '2017-12-12T08:00:09.728992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #'replace:with:',			#protocol : #transforming,			#sourceCode : 'replace: node with: anotherNode\r\tnode == child ifTrue: [ child := anotherNode ].\r\tnode == trimmer ifTrue: [ trimmer := anotherNode ].',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1060' ],		#self : OmReference [ '1061' ],		#time : DateAndTime [ '2017-12-12T08:00:09.729992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Trimming on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1061' ],		#self : OmReference [ '1062' ],		#time : DateAndTime [ '2017-12-12T08:00:09.730992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #trimmer,			#protocol : #accessing,			#sourceCode : 'trimmer\r\t^ trimmer ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1062' ],		#self : OmReference [ '1063' ],		#time : DateAndTime [ '2017-12-12T08:00:09.731992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingNode,				#isMetaSide : false			},			#name : #'trimmer:',			#protocol : #accessing,			#sourceCode : 'trimmer: aPP2arser\r\ttrimmer := aPP2arser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1063' ],		#self : OmReference [ '1064' ],		#time : DateAndTime [ '2017-12-12T08:00:09.732992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndOfInputNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitEndOfInput: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1064' ],		#self : OmReference [ '1065' ],		#time : DateAndTime [ '2017-12-12T08:00:09.733992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndOfInputNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #accessing,			#sourceCode : 'firstCharSet\r\t^ PP2CharSetPredicate empty',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1065' ],		#self : OmReference [ '1066' ],		#time : DateAndTime [ '2017-12-12T08:00:09.734992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndOfInputNode,				#isMetaSide : false			},			#name : #isEOI,			#protocol : #testing,			#sourceCode : 'isEOI\r\t^ true\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1066' ],		#self : OmReference [ '1067' ],		#time : DateAndTime [ '2017-12-12T08:00:09.735992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EndOfInputNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2EndOfInput on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1067' ],		#self : OmReference [ '1068' ],		#time : DateAndTime [ '2017-12-12T08:00:09.736992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2EpsilonNode class',				#isMetaSide : true			},			#name : #instance,			#protocol : #accessing,			#sourceCode : 'instance\r\tinstance isNil ifTrue: [ \r\t\tinstance := PP2EpsilonNode basicNew initialize\r\t].\r\tinstance resetStrategies.\r\t^ instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1068' ],		#self : OmReference [ '1069' ],		#time : DateAndTime [ '2017-12-12T08:00:09.737992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2EpsilonNode class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^ self instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1069' ],		#self : OmReference [ '1070' ],		#time : DateAndTime [ '2017-12-12T08:00:09.738992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EpsilonNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitEpsilon: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1070' ],		#self : OmReference [ '1071' ],		#time : DateAndTime [ '2017-12-12T08:00:09.739992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EpsilonNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t^ PP2CharSetPredicate any',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1071' ],		#self : OmReference [ '1072' ],		#time : DateAndTime [ '2017-12-12T08:00:09.739992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EpsilonNode,				#isMetaSide : false			},			#name : #isEpsilon,			#protocol : #testing,			#sourceCode : 'isEpsilon\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1072' ],		#self : OmReference [ '1073' ],		#time : DateAndTime [ '2017-12-12T08:00:09.740992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EpsilonNode,				#isMetaSide : false			},			#name : #nonEpsilon,			#protocol : #'as yet unclassified',			#sourceCode : 'nonEpsilon\r\t^\t#failure asPParser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1073' ],		#self : OmReference [ '1074' ],		#time : DateAndTime [ '2017-12-12T08:00:09.741992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2EpsilonNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Epsilon on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1074' ],		#self : OmReference [ '1075' ],		#time : DateAndTime [ '2017-12-12T08:00:09.742992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FailingNode class',				#isMetaSide : true			},			#name : #instance,			#protocol : #'as yet unclassified',			#sourceCode : 'instance\r\tinstance isNil ifTrue: [ \r\t\tinstance := PP2FailingNode message: \'failing\'\r\t].\r\t^ instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1075' ],		#self : OmReference [ '1076' ],		#time : DateAndTime [ '2017-12-12T08:00:09.744992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FailingNode class',				#isMetaSide : true			},			#name : #'message:',			#protocol : #'as yet unclassified',			#sourceCode : 'message: aString\r\t^ self new message: aString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1076' ],		#self : OmReference [ '1077' ],		#time : DateAndTime [ '2017-12-12T08:00:09.745992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitFailing: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1077' ],		#self : OmReference [ '1078' ],		#time : DateAndTime [ '2017-12-12T08:00:09.746992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #analysis,			#sourceCode : 'firstCharSet\r\t^ PP2CharSetPredicate empty',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1078' ],		#self : OmReference [ '1079' ],		#time : DateAndTime [ '2017-12-12T08:00:09.746992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\t^ self message = anotherNode message',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1079' ],		#self : OmReference [ '1080' ],		#time : DateAndTime [ '2017-12-12T08:00:09.747992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: message hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1080' ],		#self : OmReference [ '1081' ],		#time : DateAndTime [ '2017-12-12T08:00:09.748992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #message,			#protocol : #accessing,			#sourceCode : 'message\r\t^ message',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1081' ],		#self : OmReference [ '1082' ],		#time : DateAndTime [ '2017-12-12T08:00:09.749992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #'message:',			#protocol : #accessing,			#sourceCode : 'message: anObject\r\tmessage := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1082' ],		#self : OmReference [ '1083' ],		#time : DateAndTime [ '2017-12-12T08:00:09.750992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FailingNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Failing on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1083' ],		#self : OmReference [ '1084' ],		#time : DateAndTime [ '2017-12-12T08:00:09.751992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ChoiceNode,				#isMetaSide : false			},			#name : #/,			#protocol : #operators,			#sourceCode : '/ aRule \r\t^ self copyWith: aRule',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1084' ],		#self : OmReference [ '1085' ],		#time : DateAndTime [ '2017-12-12T08:00:09.752992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ChoiceNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitChoice: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1085' ],		#self : OmReference [ '1086' ],		#time : DateAndTime [ '2017-12-12T08:00:09.753992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ChoiceNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1086' ],		#self : OmReference [ '1087' ],		#time : DateAndTime [ '2017-12-12T08:00:09.754992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ChoiceNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Choice on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1087' ],		#self : OmReference [ '1088' ],		#time : DateAndTime [ '2017-12-12T08:00:09.755992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2ListNode class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'as yet unclassified',			#sourceCode : 'with: aParser\r\t^ self withAll: (Array with: aParser)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1088' ],		#self : OmReference [ '1089' ],		#time : DateAndTime [ '2017-12-12T08:00:09.756992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2ListNode class',				#isMetaSide : true			},			#name : #'with:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'with: aFirstParser with: aSecondParser\r\t^ self withAll: (Array with: aFirstParser with: aSecondParser)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1089' ],		#self : OmReference [ '1090' ],		#time : DateAndTime [ '2017-12-12T08:00:09.757992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2ListNode class',				#isMetaSide : true			},			#name : #'withAll:',			#protocol : #'as yet unclassified',			#sourceCode : 'withAll: aCollection\r\t^ self new\r\t\tchildren: aCollection;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1090' ],		#self : OmReference [ '1091' ],		#time : DateAndTime [ '2017-12-12T08:00:09.758992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ self subclassResponsibility',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1091' ],		#self : OmReference [ '1092' ],		#time : DateAndTime [ '2017-12-12T08:00:09.759992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ children',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1092' ],		#self : OmReference [ '1093' ],		#time : DateAndTime [ '2017-12-12T08:00:09.760992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #'children:',			#protocol : #accessing,			#sourceCode : 'children: aCollection\r\t^ children := aCollection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1093' ],		#self : OmReference [ '1094' ],		#time : DateAndTime [ '2017-12-12T08:00:09.761992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #'copyWith:',			#protocol : #copying,			#sourceCode : 'copyWith: aParser\r\t^ self species withAll: (children copyWith: aParser)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1094' ],		#self : OmReference [ '1095' ],		#time : DateAndTime [ '2017-12-12T08:00:09.761992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #firstChild,			#protocol : #accessing,			#sourceCode : 'firstChild\r\t^ self children at: 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1095' ],		#self : OmReference [ '1096' ],		#time : DateAndTime [ '2017-12-12T08:00:09.763992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself children: #()',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1096' ],		#self : OmReference [ '1097' ],		#time : DateAndTime [ '2017-12-12T08:00:09.764992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\tsuper postCopy.\r\tchildren := children copy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1097' ],		#self : OmReference [ '1098' ],		#time : DateAndTime [ '2017-12-12T08:00:09.765992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #'replace:with:',			#protocol : #transforming,			#sourceCode : 'replace: child with: anotherChild\r\tchildren keysAndValuesDo: [ :index :e |\r\t\te == child ifTrue: [ children at: index put: anotherChild ] \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1098' ],		#self : OmReference [ '1099' ],		#time : DateAndTime [ '2017-12-12T08:00:09.766992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #secondChild,			#protocol : #accessing,			#sourceCode : 'secondChild\r\t^ self children at: 2',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1099' ],		#self : OmReference [ '1100' ],		#time : DateAndTime [ '2017-12-12T08:00:09.767992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ListNode,				#isMetaSide : false			},			#name : #thirdChild,			#protocol : #accessing,			#sourceCode : 'thirdChild\r\t^ self children at: 3',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1100' ],		#self : OmReference [ '1101' ],		#time : DateAndTime [ '2017-12-12T08:00:09.768992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceNode,				#isMetaSide : false			},			#name : #',',			#protocol : #operators,			#sourceCode : ', aRule\r\t^ self copyWith: aRule',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1101' ],		#self : OmReference [ '1102' ],		#time : DateAndTime [ '2017-12-12T08:00:09.768992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitSequence: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1102' ],		#self : OmReference [ '1103' ],		#time : DateAndTime [ '2017-12-12T08:00:09.769992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceNode,				#isMetaSide : false			},			#name : #'children:',			#protocol : #accessing,			#sourceCode : 'children: newChildren\r\tsuper children: newChildren',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1103' ],		#self : OmReference [ '1104' ],		#time : DateAndTime [ '2017-12-12T08:00:09.770992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SequenceNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Sequence on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1104' ],		#self : OmReference [ '1105' ],		#time : DateAndTime [ '2017-12-12T08:00:09.771992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2LiteralNode class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: literal\r\t^ self on: literal message: \'literal \', literal printString, \' expected\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1105' ],		#self : OmReference [ '1106' ],		#time : DateAndTime [ '2017-12-12T08:00:09.773992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2LiteralNode class',				#isMetaSide : true			},			#name : #'on:message:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: literal message: message\r\t^ self new\r\t\tliteral: literal;\r\t\tmessage: message;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1106' ],		#self : OmReference [ '1107' ],		#time : DateAndTime [ '2017-12-12T08:00:09.774992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitLiteral: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1107' ],		#self : OmReference [ '1108' ],		#time : DateAndTime [ '2017-12-12T08:00:09.775992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #literal,			#protocol : #accessing,			#sourceCode : 'literal\r\t^ literal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1108' ],		#self : OmReference [ '1109' ],		#time : DateAndTime [ '2017-12-12T08:00:09.775992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #'literal:',			#protocol : #accessing,			#sourceCode : 'literal: anObject\r\tliteral := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1109' ],		#self : OmReference [ '1110' ],		#time : DateAndTime [ '2017-12-12T08:00:09.776992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\tself literal = anotherNode literal ifFalse: [ ^ false ].\r\tself message = anotherNode message ifFalse: [ ^ false ].\r\t\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1110' ],		#self : OmReference [ '1111' ],		#time : DateAndTime [ '2017-12-12T08:00:09.777992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: (self literal hash bitXor: self message hash)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1111' ],		#self : OmReference [ '1112' ],		#time : DateAndTime [ '2017-12-12T08:00:09.778992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #message,			#protocol : #accessing,			#sourceCode : 'message\r\t^ message',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1112' ],		#self : OmReference [ '1113' ],		#time : DateAndTime [ '2017-12-12T08:00:09.779992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #'message:',			#protocol : #accessing,			#sourceCode : 'message: anObject\r\tmessage := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1113' ],		#self : OmReference [ '1114' ],		#time : DateAndTime [ '2017-12-12T08:00:09.780992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralNode,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPut: $\'.\r\taStream nextPutAll: literal asString.\r\taStream nextPut: $\'.\r\t\r\tself flag: \'JK: delete?\'\r"\t\r\taStream nextPut: $(.\r\taStream nextPutAll: literal printString.\r\taStream nextPut: $).\r"',			#stamp : 'JanKurs 9/9/2017 17:25',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1114' ],		#self : OmReference [ '1115' ],		#time : DateAndTime [ '2017-12-12T08:00:09.781992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObjectNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitLiteralObject: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1115' ],		#self : OmReference [ '1116' ],		#time : DateAndTime [ '2017-12-12T08:00:09.783992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObjectNode,				#isMetaSide : false			},			#name : #caseInsensitive,			#protocol : #operators,			#sourceCode : 'caseInsensitive\r\t"Answer a parser that can parse the receiver case-insensitive."\r\t\r\tliteral asUppercase = literal asLowercase ifTrue: [ ^ self ].\r\t^ PP2PredicateObjectNode on: [ :value | literal sameAs: value ] message: message',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1116' ],		#self : OmReference [ '1117' ],		#time : DateAndTime [ '2017-12-12T08:00:09.783992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObjectNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t^ PP2CharSetPredicate on: [ :e | e = literal ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1117' ],		#self : OmReference [ '1118' ],		#time : DateAndTime [ '2017-12-12T08:00:09.784992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObjectNode,				#isMetaSide : false			},			#name : #negate,			#protocol : #operators,			#sourceCode : 'negate\r\t^ (PP2PredicateObjectNode expect: literal message: message) negate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1118' ],		#self : OmReference [ '1119' ],		#time : DateAndTime [ '2017-12-12T08:00:09.785992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObjectNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1119' ],		#self : OmReference [ '1120' ],		#time : DateAndTime [ '2017-12-12T08:00:09.786992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralObjectNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2LiteralObject on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1120' ],		#self : OmReference [ '1121' ],		#time : DateAndTime [ '2017-12-12T08:00:09.787992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequenceNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitLiteralSequence: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1121' ],		#self : OmReference [ '1122' ],		#time : DateAndTime [ '2017-12-12T08:00:09.788992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequenceNode,				#isMetaSide : false			},			#name : #caseInsensitive,			#protocol : #operators,			#sourceCode : 'caseInsensitive\r\t"Answer a parser that can parse the receiver case-insensitive."\r\t\r\tliteral asUppercase = literal asLowercase ifTrue: [ ^ self ].\r\t^ PP2PredicateSequenceNode \r\t\ton: [ :value | literal sameAs: value ] \r\t\tmessage: message\r\t\tsize: literal size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1122' ],		#self : OmReference [ '1123' ],		#time : DateAndTime [ '2017-12-12T08:00:09.789992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequenceNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t^ (literal = \'\') ifTrue: [ \r\t\tPP2CharSetPredicate any\r\t] ifFalse: [ \r\t\tPP2CharSetPredicate on: [ :e | self literal first = e ]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1123' ],		#self : OmReference [ '1124' ],		#time : DateAndTime [ '2017-12-12T08:00:09.790992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequenceNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1124' ],		#self : OmReference [ '1125' ],		#time : DateAndTime [ '2017-12-12T08:00:09.791992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequenceNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2LiteralSequence  on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1125' ],		#self : OmReference [ '1126' ],		#time : DateAndTime [ '2017-12-12T08:00:09.792992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2LiteralSequenceNode,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t^ literal size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1126' ],		#self : OmReference [ '1127' ],		#time : DateAndTime [ '2017-12-12T08:00:09.794992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NewLineNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitStartOfLine: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1127' ],		#self : OmReference [ '1128' ],		#time : DateAndTime [ '2017-12-12T08:00:09.794992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NewLineNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #accessing,			#sourceCode : 'firstCharSet\r\t^ PP2CharSetPredicate on: [ :e | e = Character cr or: [ e = Character lf ] ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1128' ],		#self : OmReference [ '1129' ],		#time : DateAndTime [ '2017-12-12T08:00:09.795992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NewLineNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2NewLine on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1129' ],		#self : OmReference [ '1130' ],		#time : DateAndTime [ '2017-12-12T08:00:09.796992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Node class',				#isMetaSide : true			},			#name : #'named:',			#protocol : #'instance creation',			#sourceCode : 'named: aString\r\t^ self new name: aString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1130' ],		#self : OmReference [ '1131' ],		#time : DateAndTime [ '2017-12-12T08:00:09.797992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Node class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t"for compatibility reasons with Smalltalk/X"\r\t^ self basicNew \r\t\tinitialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1131' ],		#self : OmReference [ '1132' ],		#time : DateAndTime [ '2017-12-12T08:00:09.798992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #',',			#protocol : #operators,			#sourceCode : ', anotherParser\r\t^ PP2SequenceNode with: self with: anotherParser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1132' ],		#self : OmReference [ '1133' ],		#time : DateAndTime [ '2017-12-12T08:00:09.799992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #/,			#protocol : #operators,			#sourceCode : '/ aParser \r\t"Answer a new parser that parses the receiver, if the receiver fails try with aParser (ordered-choice)."\r\t\r\t^ PP2ChoiceNode with: self with: aParser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1133' ],		#self : OmReference [ '1134' ],		#time : DateAndTime [ '2017-12-12T08:00:09.800992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anotherNode\r\t^ self equals: anotherNode visitedSet: IdentitySet new\r\t\r\t"\t\r\t\tNote: should not be really overriden by children, try to \r\t\t\t\toverride #equals:, unless you know what you are doing, \r\t\t\t\tof course :)\r\t"\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1134' ],		#self : OmReference [ '1135' ],		#time : DateAndTime [ '2017-12-12T08:00:09.801992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'==>',			#protocol : #operators,			#sourceCode : '==> aBlock\r\t"Answer a new parser that performs aBlock as action handler on success."\r\r\t^ PP2ActionNode on: self block: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1135' ],		#self : OmReference [ '1136' ],		#time : DateAndTime [ '2017-12-12T08:00:09.802992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'>==>',			#protocol : #operators,			#sourceCode : '>==> aBlock\r\t"\r\t\tMake sure that the block does not perform any functional changes, otherwise all the optimizations break.\r\t\r\t\tUse #>=> if you need to do functional changes.\r\t"\r\t^ (PP2WrappingNode on: self block: aBlock)\r\t\tfunctionalChanges: false;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1136' ],		#self : OmReference [ '1137' ],		#time : DateAndTime [ '2017-12-12T08:00:09.804992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'>=>',			#protocol : #operators,			#sourceCode : '>=> aBlock\r\t"Answer a new parser that performs aBlock as action handler on success."\r\r\t^ PP2WrappingNode on: self block: aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1137' ],		#self : OmReference [ '1138' ],		#time : DateAndTime [ '2017-12-12T08:00:09.804992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2ParserVisitor\r\tself subclassResponsibility ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1138' ],		#self : OmReference [ '1139' ],		#time : DateAndTime [ '2017-12-12T08:00:09.805992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'addParent:',			#protocol : #optimizations,			#sourceCode : 'addParent: value\r\tself parents add: value',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1139' ],		#self : OmReference [ '1140' ],		#time : DateAndTime [ '2017-12-12T08:00:09.806992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'addWarning:',			#protocol : #'optimizations - warnings',			#sourceCode : 'addWarning: warning\r\tself warnings add: warning.\r\t\r\t"Transcript crShow: warning"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1140' ],		#self : OmReference [ '1141' ],		#time : DateAndTime [ '2017-12-12T08:00:09.807992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #allCaches,			#protocol : #'optimizations - caching',			#sourceCode : 'allCaches\r\t^ self propertyAt: #allCaches ifAbsent: [\r\t\tself collectCaches\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1141' ],		#self : OmReference [ '1142' ],		#time : DateAndTime [ '2017-12-12T08:00:09.808992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #allNodes,			#protocol : #enumerating,			#sourceCode : 'allNodes\r"\t^ PP2ChildrenVisitor new visit: self"\r\r\t"faster version than visitor:"\r\t| result |\r\tresult := OrderedCollection new.\r\tself allNodesDo: [ :parser | result addLast: parser ].\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1142' ],		#self : OmReference [ '1143' ],		#time : DateAndTime [ '2017-12-12T08:00:09.809992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'allNodesDo:',			#protocol : #enumerating,			#sourceCode : 'allNodesDo: aBlock\r\t^ self allNodesDo: aBlock seen: IdentitySet new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1143' ],		#self : OmReference [ '1144' ],		#time : DateAndTime [ '2017-12-12T08:00:09.810992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'allNodesDo:seen:',			#protocol : #enumerating,			#sourceCode : 'allNodesDo: aBlock seen: aSet\r\t"\r\t\tIterate over all the parse nodes of the receiver, do not visit the ones contained in aSet.\r\t"\r\r\t(aSet includes: self) ifTrue: [ ^ self ].\r\taSet add: self.\r\t\r\taBlock value: self.\r\tself children do: [ :each | each allNodesDo: aBlock seen: aSet ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1144' ],		#self : OmReference [ '1145' ],		#time : DateAndTime [ '2017-12-12T08:00:09.811992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #allReparsables,			#protocol : #reparsing,			#sourceCode : 'allReparsables\r\t^ self propertyAt: #allReparsables ifAbsentPut: [\r\t\tself collectReparsables\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1145' ],		#self : OmReference [ '1146' ],		#time : DateAndTime [ '2017-12-12T08:00:09.812992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #allWarnings,			#protocol : #'optimizations - warnings',			#sourceCode : 'allWarnings\r\t| warnings |\r\twarnings := Dictionary new.\r\tself allNodesDo: [ :node | \r\t\tnode warnings do: [ :w | warnings at: node put: w ]\r\t].\r\t^ warnings',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1146' ],		#self : OmReference [ '1147' ],		#time : DateAndTime [ '2017-12-12T08:00:09.814992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #and,			#protocol : #operators,			#sourceCode : 'and\r\t^ PP2AndNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1147' ],		#self : OmReference [ '1148' ],		#time : DateAndTime [ '2017-12-12T08:00:09.815992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'applyChange:',			#protocol : #reparsing,			#sourceCode : 'applyChange: change\r\tchange updateParser: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1148' ],		#self : OmReference [ '1149' ],		#time : DateAndTime [ '2017-12-12T08:00:09.816992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #asPParser,			#protocol : #converting,			#sourceCode : 'asPParser\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1149' ],		#self : OmReference [ '1150' ],		#time : DateAndTime [ '2017-12-12T08:00:09.817992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'changeStrategy:',			#protocol : #parsing,			#sourceCode : 'changeStrategy: aPP2Strategy\r\t"\r\t\tContrary to the #strategy:, I do not assert the identity equivalence of the node.\r\t\tThis means you can you the same strategy with multiple nodes, as long as the nodes\r\t\tare equivalent (i.e. nodeOne = node2)\r\t"\r\tself assert: (aPP2Strategy node = self).\r\tstrategy := aPP2Strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1150' ],		#self : OmReference [ '1151' ],		#time : DateAndTime [ '2017-12-12T08:00:09.818992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #checkPromises,			#protocol : #reparsing,			#sourceCode : 'checkPromises\r\tself allReparsables do: [ :reparsable | \r\t\t(reparsable buffer values anySatisfy: [ :e | e isPromise ]) ifTrue: [  \r\t\t\tPP2ReparseException signal: \'Some of the promises were not resolved\'\r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1151' ],		#self : OmReference [ '1152' ],		#time : DateAndTime [ '2017-12-12T08:00:09.819992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'childAt:',			#protocol : #accessing,			#sourceCode : 'childAt: index\r\t^ self children at: index',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1152' ],		#self : OmReference [ '1153' ],		#time : DateAndTime [ '2017-12-12T08:00:09.819992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ #()',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1153' ],		#self : OmReference [ '1154' ],		#time : DateAndTime [ '2017-12-12T08:00:09.820992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'childrenEqual:visitedSet:',			#protocol : #comparing,			#sourceCode : 'childrenEqual: anotherNode visitedSet: visitedSet\r\t"\r\t\tInvokes the comparison function on all children, while passing the visited\r\t\tset to avoid infinite loops.\r\t"\r\tself children size = anotherNode children size ifFalse: [ ^ false ].\r\t\r\tself children with: anotherNode children do: [ :child :anotherChild |\r\t\t(child equals: anotherChild visitedSet: visitedSet) ifFalse: [ ^ false ]\r\t].\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1154' ],		#self : OmReference [ '1155' ],		#time : DateAndTime [ '2017-12-12T08:00:09.821992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'childrenHash:',			#protocol : #comparing,			#sourceCode : 'childrenHash: visitedSet\r\t| hash |\r\thash := \'\' hash.\r\tself children do: [ :child |\r\t\thash := hash bitXor: (child hash: visitedSet)\r\t].\r\t^ hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1155' ],		#self : OmReference [ '1156' ],		#time : DateAndTime [ '2017-12-12T08:00:09.822992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #collectCaches,			#protocol : #'optimizations - caching',			#sourceCode : 'collectCaches\r\t| caches |\r\tcaches := IdentitySet new. \r\tself allNodesDo: [ :c | c strategies do: [ :s | s isCache ifTrue: [ caches add: s ] ] ].\r\t^ caches asArray\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1156' ],		#self : OmReference [ '1157' ],		#time : DateAndTime [ '2017-12-12T08:00:09.824992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #collectReparsables,			#protocol : #reparsing,			#sourceCode : 'collectReparsables\r\t| reparsables |\r\treparsables := IdentitySet new. \r\tself allNodesDo: [ :c | c strategies do: [ :s | s isReparsable ifTrue: [ reparsables add: s ] ] ].\r\t^ reparsables asArray\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1157' ],		#self : OmReference [ '1158' ],		#time : DateAndTime [ '2017-12-12T08:00:09.825992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #contextChanges,			#protocol : #'analysis - context',			#sourceCode : 'contextChanges\r\t^ self propertyAt: #contextChanges ifAbsent: [  \r\t\tPP2ContextChangesVisitor new visit: self\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1158' ],		#self : OmReference [ '1159' ],		#time : DateAndTime [ '2017-12-12T08:00:09.826992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'contextChanges:',			#protocol : #'analysis - context',			#sourceCode : 'contextChanges: aPP2CaResult\r\tself assert: (aPP2CaResult isKindOf: PP2CcResult).\r\t^ self propertyAt: #contextChanges put: aPP2CaResult',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1159' ],		#self : OmReference [ '1160' ],		#time : DateAndTime [ '2017-12-12T08:00:09.827992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'debug:',			#protocol : #accessing,			#sourceCode : 'debug: input\r\t^ self \r\t\tenableDebug enableRecording \r\t\tparse: input withContext: PP2RecordingContext new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1160' ],		#self : OmReference [ '1161' ],		#time : DateAndTime [ '2017-12-12T08:00:09.828992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'debug:withContext:',			#protocol : #debugging,			#sourceCode : 'debug: input withContext: startContext\r\t^ self enableDebug parse: input withContext: startContext\r',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1161' ],		#self : OmReference [ '1162' ],		#time : DateAndTime [ '2017-12-12T08:00:09.829992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'debugAdaptableWithContext:',			#protocol : #debugging,			#sourceCode : 'debugAdaptableWithContext: context\r\t^ self enableDebug parseAdaptableWithContext: context',			#stamp : ' 9/3/2017 16:26:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1162' ],		#self : OmReference [ '1163' ],		#time : DateAndTime [ '2017-12-12T08:00:09.830992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'def:',			#protocol : #operators,			#sourceCode : 'def: node\r\t"Redefine the receiver as the argument \'node\'. This method is useful when defining recursive parsers: instantiate a PP2UnresolvedNode and later redefine it with another one."\r\r\t^ self becomeForward: (node name: self name)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1163' ],		#self : OmReference [ '1164' ],		#time : DateAndTime [ '2017-12-12T08:00:09.831992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'delimitedBy:',			#protocol : #'operators - convenience',			#sourceCode : 'delimitedBy: aParser\r\t"Answer a new parser that parses the receiver one or more times, separated and possibly ended by aParser."\r\t\r\t^ (self separatedBy: aParser) , (aParser optional) ==> [ :node |\r\t\tnode second isNil\r\t\t\tifTrue: [ node first ]\r\t\t\tifFalse: [ node first copyWith: node second ] ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1164' ],		#self : OmReference [ '1165' ],		#time : DateAndTime [ '2017-12-12T08:00:09.832992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #deoptimize,			#protocol : #optimizations,			#sourceCode : 'deoptimize\r\tself isOptimized ifFalse: [ ^ self ].\r\tself allNodesDo: [ :node | node resetStrategies ].\r\tself unsetOptimized.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1165' ],		#self : OmReference [ '1166' ],		#time : DateAndTime [ '2017-12-12T08:00:09.833992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #duplicate,			#protocol : #copying,			#sourceCode : 'duplicate\r\t^ self transform: [ :node | node copy ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1166' ],		#self : OmReference [ '1167' ],		#time : DateAndTime [ '2017-12-12T08:00:09.834992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #enableDebug,			#protocol : #debugging,			#sourceCode : 'enableDebug\r\tself allNodesDo: [ :child | child strategy: child strategy debug ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1167' ],		#self : OmReference [ '1168' ],		#time : DateAndTime [ '2017-12-12T08:00:09.835992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #enableRecording,			#protocol : #debugging,			#sourceCode : 'enableRecording\r\t| parent |\r\tself allNodesDo: [ :node | \r\t\tparent := node.\r\t\tnode strategies do: [ :s | \r\t\t\tparent := self switchToRecording: s parent: parent.\r\t\t]\r\t].\r\r\t"The caches has been changed to their recording equivalents, the info needs to be updated"\r\tself refreshCaches.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1168' ],		#self : OmReference [ '1169' ],		#time : DateAndTime [ '2017-12-12T08:00:09.836992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #end,			#protocol : #operators,			#sourceCode : 'end\r\t^ PP2EndNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1169' ],		#self : OmReference [ '1170' ],		#time : DateAndTime [ '2017-12-12T08:00:09.837992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'equals:visitedSet:',			#protocol : #comparing,			#sourceCode : 'equals: anotherNode visitedSet: visitedSet\r\tself == anotherNode ifTrue: [ ^ true ].\r\t\r\t"\r\t\tManages visited set in order to avoid inifinite loops, I don\'t see much reasons to\r\t\toverride this method.\r\t"\r\t(visitedSet includes: self) ifTrue: [ ^ true ].\r\t(visitedSet add: self).\r\r\t(self localEquals: anotherNode) ifFalse: [ ^ false ].\t\r\t(self childrenEqual: anotherNode visitedSet: visitedSet) ifFalse: [ ^ false ].\r\t\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1170' ],		#self : OmReference [ '1171' ],		#time : DateAndTime [ '2017-12-12T08:00:09.838992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #firstProductionSet,			#protocol : #'analysis - first',			#sourceCode : 'firstProductionSet\r\t^ self propertyAt: #firstProductionSet ifAbsent: [\r\t\tPP2FirstSetVisitor productionSet visit: self\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1171' ],		#self : OmReference [ '1172' ],		#time : DateAndTime [ '2017-12-12T08:00:09.839992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #firstSeasOrTerminalsSet,			#protocol : #'analysis - first',			#sourceCode : 'firstSeasOrTerminalsSet\r\t^ self propertyAt: #firstSeasOrTerminals ifAbsent: [\r\t\tPP2FirstSetVisitor seasOrTerminalsSet visit: self\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1172' ],		#self : OmReference [ '1173' ],		#time : DateAndTime [ '2017-12-12T08:00:09.840992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #firstSet,			#protocol : #'analysis - first',			#sourceCode : 'firstSet\r\t^ self propertyAt: #firstSet ifAbsent: [\r\t\tPP2FirstSetVisitor firstSet visit: self\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1173' ],		#self : OmReference [ '1174' ],		#time : DateAndTime [ '2017-12-12T08:00:09.841992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #flatten,			#protocol : #operators,			#sourceCode : 'flatten\r\t^ PP2FlattenNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1174' ],		#self : OmReference [ '1175' ],		#time : DateAndTime [ '2017-12-12T08:00:09.842992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #forbidCache,			#protocol : #'optimizations - caching',			#sourceCode : 'forbidCache\r\t^ self propertyAt: #cacheAllowed put: false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1175' ],		#self : OmReference [ '1176' ],		#time : DateAndTime [ '2017-12-12T08:00:09.844992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #fragment,			#protocol : #operators,			#sourceCode : 'fragment\r\t^ PP2FragmentNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1176' ],		#self : OmReference [ '1177' ],		#time : DateAndTime [ '2017-12-12T08:00:09.845992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #hasName,			#protocol : #testing,			#sourceCode : 'hasName\r\t^ self name isNil not',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1177' ],		#self : OmReference [ '1178' ],		#time : DateAndTime [ '2017-12-12T08:00:09.846992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ self hash: IdentitySet new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1178' ],		#self : OmReference [ '1179' ],		#time : DateAndTime [ '2017-12-12T08:00:09.847992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'hash:',			#protocol : #comparing,			#sourceCode : 'hash: visitedSet\r\t"\r\t\tManages visited set in order to avoid inifinite loops, I don\'t see much reasons to\r\t\toverride this method.\r\t"\r\t(visitedSet includes: self) ifTrue: [ ^ \'\' hash ].\r\t(visitedSet add: self).\r\r\t^ self localHash bitXor: (self childrenHash: visitedSet)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1179' ],		#self : OmReference [ '1180' ],		#time : DateAndTime [ '2017-12-12T08:00:09.848992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tself resetStrategies',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1180' ],		#self : OmReference [ '1181' ],		#time : DateAndTime [ '2017-12-12T08:00:09.848992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isAdaptable,			#protocol : #testing,			#sourceCode : 'isAdaptable\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1181' ],		#self : OmReference [ '1182' ],		#time : DateAndTime [ '2017-12-12T08:00:09.849992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isCacheForbidden,			#protocol : #'optimizations - caching',			#sourceCode : 'isCacheForbidden\r\t(self hasProperty: #cacheAllowed) ifTrue: [ \r\t\t^ (self propertyAt: #cacheAllowed) not\r\t].\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1182' ],		#self : OmReference [ '1183' ],		#time : DateAndTime [ '2017-12-12T08:00:09.850992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isContextFree,			#protocol : #'analysis - context',			#sourceCode : 'isContextFree\r\t^ self isContextSensitive not',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1183' ],		#self : OmReference [ '1184' ],		#time : DateAndTime [ '2017-12-12T08:00:09.851992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isContextSensitive,			#protocol : #'analysis - context',			#sourceCode : 'isContextSensitive\r\t^ self propertyAt: #isContextSensitive ifAbsent: [  \r\t\tPP2ContextSensitivityVisitor new visit: self\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1184' ],		#self : OmReference [ '1185' ],		#time : DateAndTime [ '2017-12-12T08:00:09.852992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isDebugging,			#protocol : #testing,			#sourceCode : 'isDebugging\r\t^ self strategies anySatisfy: [ :s | s isDebugging ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1185' ],		#self : OmReference [ '1186' ],		#time : DateAndTime [ '2017-12-12T08:00:09.854992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isEOI,			#protocol : #testing,			#sourceCode : 'isEOI\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1186' ],		#self : OmReference [ '1187' ],		#time : DateAndTime [ '2017-12-12T08:00:09.855992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isEpsilon,			#protocol : #testing,			#sourceCode : 'isEpsilon\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1187' ],		#self : OmReference [ '1188' ],		#time : DateAndTime [ '2017-12-12T08:00:09.856992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isFirstSetTerminal,			#protocol : #'analysis - first',			#sourceCode : 'isFirstSetTerminal\r\t^ self isTerminal',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1188' ],		#self : OmReference [ '1189' ],		#time : DateAndTime [ '2017-12-12T08:00:09.857992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isJustDelegate,			#protocol : #testing,			#sourceCode : 'isJustDelegate\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1189' ],		#self : OmReference [ '1190' ],		#time : DateAndTime [ '2017-12-12T08:00:09.858992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isMemoized,			#protocol : #testing,			#sourceCode : 'isMemoized\r\t^ self strategies anySatisfy: [ :s | s isMemoized ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1190' ],		#self : OmReference [ '1191' ],		#time : DateAndTime [ '2017-12-12T08:00:09.859992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isNullable,			#protocol : #'analysis - abstract simulation',			#sourceCode : 'isNullable\r\t"\r\t\tI return true, if parser ALWAYS can accept epsilon and I NEVER fail.\r\t\t\r\t\tUse #acceptsEpsilon if it can accept epsilon, but it can fail as well.\r\t"\r\t^ self propertyAt: #isNullable ifAbsent: [ \r\t\tPP2IsNullableVisitor new visit: self\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1191' ],		#self : OmReference [ '1192' ],		#time : DateAndTime [ '2017-12-12T08:00:09.860992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'isNullable:',			#protocol : #'analysis - abstract simulation',			#sourceCode : 'isNullable: aBoolean\r\tself propertyAt: #isNullable put: aBoolean',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1192' ],		#self : OmReference [ '1193' ],		#time : DateAndTime [ '2017-12-12T08:00:09.861992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isOptimized,			#protocol : #optimizations,			#sourceCode : 'isOptimized\r\t^ self propertyAt: #optimized ifAbsent: false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1193' ],		#self : OmReference [ '1194' ],		#time : DateAndTime [ '2017-12-12T08:00:09.862992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isPetit2Parser,			#protocol : #testing,			#sourceCode : 'isPetit2Parser\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1194' ],		#self : OmReference [ '1195' ],		#time : DateAndTime [ '2017-12-12T08:00:09.863992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isProduction,			#protocol : #testing,			#sourceCode : 'isProduction\r\t^ self name isNotNil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1195' ],		#self : OmReference [ '1196' ],		#time : DateAndTime [ '2017-12-12T08:00:09.864992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isRepeating,			#protocol : #testing,			#sourceCode : 'isRepeating\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1196' ],		#self : OmReference [ '1197' ],		#time : DateAndTime [ '2017-12-12T08:00:09.865992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isSea,			#protocol : #testing,			#sourceCode : 'isSea\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1197' ],		#self : OmReference [ '1198' ],		#time : DateAndTime [ '2017-12-12T08:00:09.866992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isTerminal,			#protocol : #testing,			#sourceCode : 'isTerminal\r\t^ self children isEmpty',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1198' ],		#self : OmReference [ '1199' ],		#time : DateAndTime [ '2017-12-12T08:00:09.867992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isToken,			#protocol : #testing,			#sourceCode : 'isToken\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1199' ],		#self : OmReference [ '1200' ],		#time : DateAndTime [ '2017-12-12T08:00:09.868992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isTrimming,			#protocol : #testing,			#sourceCode : 'isTrimming\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1200' ],		#self : OmReference [ '1201' ],		#time : DateAndTime [ '2017-12-12T08:00:09.869992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #isTrimmingToken,			#protocol : #testing,			#sourceCode : 'isTrimmingToken\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1201' ],		#self : OmReference [ '1202' ],		#time : DateAndTime [ '2017-12-12T08:00:09.870992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #islandInSea,			#protocol : #operators,			#sourceCode : 'islandInSea\r\t^ self sea ==> #second',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1202' ],		#self : OmReference [ '1203' ],		#time : DateAndTime [ '2017-12-12T08:00:09.871992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t"\r\t\tThis method is supposed to be overriden by children\r\t"\r\r\tself == anotherNode ifTrue: [ ^ true ].\r\tself class == anotherNode class ifFalse: [ ^ false ].\r\t\r\t"\r\t\tJK: properties? Most probably not, they can contain first/follow etc.\r\t\tCherrypick manually the ones you care about.\r\t"\r\tself name = anotherNode name ifFalse: [ ^ false ].\r\r\t"JK: strategy? Probably not"\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1203' ],		#self : OmReference [ '1204' ],		#time : DateAndTime [ '2017-12-12T08:00:09.872992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t"\r\t\tThis method is supposed to be overriden by children\r\t"\r\r\t^ self class hash bitXor: self name hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1204' ],		#self : OmReference [ '1205' ],		#time : DateAndTime [ '2017-12-12T08:00:09.873992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'map:',			#protocol : #operators,			#sourceCode : 'map: block\r\t^ PP2MappingNode on: self block: block',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1205' ],		#self : OmReference [ '1206' ],		#time : DateAndTime [ '2017-12-12T08:00:09.875992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #markNoRecognizer,			#protocol : #optimizations,			#sourceCode : 'markNoRecognizer\r\t((self hasProperty: #recognizer) and: [ self propertyAt: #recognizer ]) ifTrue: [  \r\t\tself warnShouldNotBeShared. \r\t].\r\tself propertyAt: #recognizer put: false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1206' ],		#self : OmReference [ '1207' ],		#time : DateAndTime [ '2017-12-12T08:00:09.876992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #markRecognizer,			#protocol : #optimizations,			#sourceCode : 'markRecognizer\r\t((self hasProperty: #recognizer) and: [ (self propertyAt: #recognizer) not ]) ifTrue: [  \r\t\tself warnShouldNotBeShared. \r\t].\r\r\tself propertyAt: #recognizer ifAbsentPut: true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1207' ],		#self : OmReference [ '1208' ],		#time : DateAndTime [ '2017-12-12T08:00:09.877992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #match,			#protocol : #'operators - context',			#sourceCode : 'match\r\t^ PP2MatchNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1208' ],		#self : OmReference [ '1209' ],		#time : DateAndTime [ '2017-12-12T08:00:09.878992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'matches:',			#protocol : #parsing,			#sourceCode : 'matches: anObject\r\t"Answer if anObject can be parsed by the receiver."\r\t\r\t^ (self parseContext: anObject) isPetit2Failure not',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1209' ],		#self : OmReference [ '1210' ],		#time : DateAndTime [ '2017-12-12T08:00:09.879992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #memoizationStrategy,			#protocol : #accessing,			#sourceCode : 'memoizationStrategy\r\t^ memoizationStrategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1210' ],		#self : OmReference [ '1211' ],		#time : DateAndTime [ '2017-12-12T08:00:09.880992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'memoizationStrategy:',			#protocol : #accessing,			#sourceCode : 'memoizationStrategy: anObject\r\tmemoizationStrategy := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1211' ],		#self : OmReference [ '1212' ],		#time : DateAndTime [ '2017-12-12T08:00:09.881992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #memoize,			#protocol : #'optimizations - caching',			#sourceCode : 'memoize\r\tself propertyAt: #memoize put: true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1212' ],		#self : OmReference [ '1213' ],		#time : DateAndTime [ '2017-12-12T08:00:09.882992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'min:max:',			#protocol : #'operators - repeating',			#sourceCode : 'min: aMinInteger max: aMaxInteger\r\t"Answer a new parser that parses the receiver at least aMinInteger and at most aMaxInteger times."\r\t\r\t^ self star \r\t\tmin: aMinInteger; \r\t\tmax: aMaxInteger;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1213' ],		#self : OmReference [ '1214' ],		#time : DateAndTime [ '2017-12-12T08:00:09.882992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t"Answer the production name of the receiver."\r\t\r\t^ self propertyAt: #name ifAbsent: [ nil ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1214' ],		#self : OmReference [ '1215' ],		#time : DateAndTime [ '2017-12-12T08:00:09.883992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: aString\r\tself propertyAt: #name put: aString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1215' ],		#self : OmReference [ '1216' ],		#time : DateAndTime [ '2017-12-12T08:00:09.885992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #negate,			#protocol : #operators,			#sourceCode : 'negate\r\t"Answer a new parser consumes any input token but the receiver."\r\t\r\t^ self not , #any asPParser ==> #second',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1216' ],		#self : OmReference [ '1217' ],		#time : DateAndTime [ '2017-12-12T08:00:09.886992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'nextSetIn:',			#protocol : #'analysis - next',			#sourceCode : 'nextSetIn: root\r\t^ root nextSets at: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1217' ],		#self : OmReference [ '1218' ],		#time : DateAndTime [ '2017-12-12T08:00:09.887992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #nextSets,			#protocol : #'analysis - next',			#sourceCode : 'nextSets\r\t^ self propertyAt: #nextSets ifAbsent: [  \r\t\t(PP2NextSetsVisitor new )\r\t\t\tvisit: self;\r\t\t\tnextSets.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1218' ],		#self : OmReference [ '1219' ],		#time : DateAndTime [ '2017-12-12T08:00:09.888992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #nonEpsilon,			#protocol : #operators,			#sourceCode : 'nonEpsilon\r\t^ PP2NonEpsilonNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1219' ],		#self : OmReference [ '1220' ],		#time : DateAndTime [ '2017-12-12T08:00:09.889992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #not,			#protocol : #operators,			#sourceCode : 'not\r\t^ PP2NotNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1220' ],		#self : OmReference [ '1221' ],		#time : DateAndTime [ '2017-12-12T08:00:09.890992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #optimize,			#protocol : #optimizations,			#sourceCode : 'optimize\r\tself isOptimized ifTrue: [ ^ self ].\r\t\r\tPP2SeaOptimizationVisitor new doPass: self.\r\t\r\tPP2SpecializingVisitor new doPass: self.\r\r\tPP2RecognizerVisitor new doPass: self.\r\r\t"\r\t\tPre-compute isNullable and firstSet properties\r\t"\r\tPP2IsNullableCache new doPass: self.\r\tPP2FirstSetCache new doPass: self.\r\r\t"\r\t\tShould be called before CommonPrefix. Both do caching, but trimming is tailored to the\r\t\twhitespace handling in PP2 and has more suitable cache.\r\t"\r\tPP2TrimmingCacheVisitor new doPass: self.\r\r\t"Use packrat parsing"\r\tPP2PackratVisitor new doPass: self.\r\r\t"Cache the intermediate results for the Guard and Common Prefix visitors"\r\tPP2AllNodesCache new doPass: self.\r\tPP2FirstProductionSetCache new doPass: self.\r\tPP2CommonPrefixVisitor new doPass: self.\r\t\r\tPP2GuardVisitor new doPass: self.\r\t\r\tPP2BypassVisitor new doPass: self.\r\t\r\tPP2ReparsableVisitor new doPass: self.\r\t\r\t"Inject CF memoizations when possible"\r\tPP2ContextChangesCache new doPass: self.\r\tPP2ContextSensitivityCache new doPass: self.\r\tPP2ContextMemoizationVisitor new doPass: self.\r\t\r\tself propertyAt: #allCaches put: self collectCaches.\r\tself setOptimized.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1221' ],		#self : OmReference [ '1222' ],		#time : DateAndTime [ '2017-12-12T08:00:09.891992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #optional,			#protocol : #operators,			#sourceCode : 'optional\r\t^ PP2OptionalNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1222' ],		#self : OmReference [ '1223' ],		#time : DateAndTime [ '2017-12-12T08:00:09.892992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parent:',			#protocol : #optimizations,			#sourceCode : 'parent: value\r\tself parents add: value',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1223' ],		#self : OmReference [ '1224' ],		#time : DateAndTime [ '2017-12-12T08:00:09.893992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #parents,			#protocol : #optimizations,			#sourceCode : 'parents\r\t^ self propertyAt: #parents ifAbsentPut: [ OrderedCollection new ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1224' ],		#self : OmReference [ '1225' ],		#time : DateAndTime [ '2017-12-12T08:00:09.894992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parse:',			#protocol : #parsing,			#sourceCode : 'parse: input\r\t^ (self parseContext: input) returnValue',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1225' ],		#self : OmReference [ '1226' ],		#time : DateAndTime [ '2017-12-12T08:00:09.896992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parse:onError:',			#protocol : #parsing,			#sourceCode : 'parse: anObject onError: aBlock\r\t"Parse anObject with the receiving parser and answer the parse-result or answer the result of evaluating aBlock. Depending on the number of arguments of the block it is simply evaluated, evaluated with the failure object, or evaluated with the error message and position."\r\t\r\t| result |\r\tresult := self parse: anObject.\r\tresult isPetit2Success ifTrue: [ ^ result ].\r\t\r\t(aBlock numArgs = 0) ifTrue: [ ^ aBlock value ].\r\t(aBlock numArgs = 1) ifTrue: [ ^ aBlock value: result ].\r\t^ aBlock value: result message value: result position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1226' ],		#self : OmReference [ '1227' ],		#time : DateAndTime [ '2017-12-12T08:00:09.897992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parse:withContext:',			#protocol : #parsing,			#sourceCode : 'parse: input withContext: startContext\r\t^ self parseAdaptable: input withContext: startContext\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1227' ],		#self : OmReference [ '1228' ],		#time : DateAndTime [ '2017-12-12T08:00:09.898992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseAdaptable:',			#protocol : #'parsing - adaptable',			#sourceCode : 'parseAdaptable: input\r\t^ self parseAdaptableWithContext: input asPetit2Stream asPetit2Context',			#stamp : 'JanKurs 8/20/2017 18:40',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1228' ],		#self : OmReference [ '1229' ],		#time : DateAndTime [ '2017-12-12T08:00:09.899992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseAdaptable:withContext:',			#protocol : #'parsing - adaptable',			#sourceCode : 'parseAdaptable: input withContext: context\r\tcontext stream: input asPetit2Stream.\r\tcontext position: 0.\r\tcontext parser: self.\r\r\t^ self parseAdaptableWithContext: context\r\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1229' ],		#self : OmReference [ '1230' ],		#time : DateAndTime [ '2017-12-12T08:00:09.900992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseAdaptableWithContext:',			#protocol : #'parsing - adaptable',			#sourceCode : 'parseAdaptableWithContext: context\r\t| returnValue |\r\tcontext parser: self.\r\tself resetCaches.\r\t\r\tcontext startMemento: context remember.\r\treturnValue := self parseOn: context.\r\r\t^ returnValue isPetit2Success ifTrue: [ \r\t\tcontext returnValue: returnValue \r\t] ifFalse: [ \r\t\treturnValue \r\t\t\tsetContext: context;\r\t\t\tyourself \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1230' ],		#self : OmReference [ '1231' ],		#time : DateAndTime [ '2017-12-12T08:00:09.901992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseContext:',			#protocol : #parsing,			#sourceCode : 'parseContext: input\r\t^ self parseAdaptable: input',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1231' ],		#self : OmReference [ '1232' ],		#time : DateAndTime [ '2017-12-12T08:00:09.902992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseInterpreted:',			#protocol : #'parsing - interpretation',			#sourceCode : 'parseInterpreted: input\r\t^ self parseInterpreted: input withContext: PP2Context new.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1232' ],		#self : OmReference [ '1233' ],		#time : DateAndTime [ '2017-12-12T08:00:09.903992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseInterpreted:withContext:',			#protocol : #'parsing - interpretation',			#sourceCode : 'parseInterpreted: input withContext: startContext\r\t^ (PP2Interpret on: self) parse: input withContext: startContext\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1233' ],		#self : OmReference [ '1234' ],		#time : DateAndTime [ '2017-12-12T08:00:09.904992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - adaptable',			#sourceCode : 'parseOn: context\r\t^ strategy parseOn: context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1234' ],		#self : OmReference [ '1235' ],		#time : DateAndTime [ '2017-12-12T08:00:09.905992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'parseWithContext:',			#protocol : #parsing,			#sourceCode : 'parseWithContext: startContext\r\t^ self parseAdaptableWithContext: startContext\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1235' ],		#self : OmReference [ '1236' ],		#time : DateAndTime [ '2017-12-12T08:00:09.907992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #plus,			#protocol : #operators,			#sourceCode : 'plus\r\t^ (PP2PossesiveRepeatingNode on: self)\r\t\tmin: 1;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1236' ],		#self : OmReference [ '1237' ],		#time : DateAndTime [ '2017-12-12T08:00:09.908992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #pop,			#protocol : #'operators - context',			#sourceCode : 'pop\r\t^ PP2PopNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1237' ],		#self : OmReference [ '1238' ],		#time : DateAndTime [ '2017-12-12T08:00:09.909992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #postCopy,			#protocol : #copying,			#sourceCode : 'postCopy\r\t"JK: I am not sure, if this works properly for optimized version!"\r\tsuper postCopy.\r\t\r\tproperties := properties copy.\r\tstrategy := strategy copy.\r\tstrategy node: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1238' ],		#self : OmReference [ '1239' ],		#time : DateAndTime [ '2017-12-12T08:00:09.910992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\t\r\tself name isNil ifFalse: [ \r\t\taStream nextPut: $(.\r\t\tself name printOn: aStream.\r\t\taStream nextPut: $).\r\t] ifTrue: [  \r\t\taStream nextPut: $#.\r\t\taStream nextPutAll: self identityHash asString\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1239' ],		#self : OmReference [ '1240' ],		#time : DateAndTime [ '2017-12-12T08:00:09.911992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1240' ],		#self : OmReference [ '1241' ],		#time : DateAndTime [ '2017-12-12T08:00:09.912992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: anObject\r\t^ properties := anObject ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1241' ],		#self : OmReference [ '1242' ],		#time : DateAndTime [ '2017-12-12T08:00:09.913992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #push,			#protocol : #'operators - context',			#sourceCode : 'push\r\t^ PP2PushNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1242' ],		#self : OmReference [ '1243' ],		#time : DateAndTime [ '2017-12-12T08:00:09.914992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #recognizer,			#protocol : #optimizations,			#sourceCode : 'recognizer\r\t^ self propertyAt: #recognizer',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1243' ],		#self : OmReference [ '1244' ],		#time : DateAndTime [ '2017-12-12T08:00:09.915992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #refreshCaches,			#protocol : #'optimizations - caching',			#sourceCode : 'refreshCaches\r\t^ self propertyAt: #allCaches put: self collectCaches',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1244' ],		#self : OmReference [ '1245' ],		#time : DateAndTime [ '2017-12-12T08:00:09.916992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #reparsable,			#protocol : #optimizations,			#sourceCode : 'reparsable\r\tself propertyAt: #reparsable put: true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1245' ],		#self : OmReference [ '1246' ],		#time : DateAndTime [ '2017-12-12T08:00:09.917992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'reparseAdaptableWithContext:',			#protocol : #'parsing - adaptable',			#sourceCode : 'reparseAdaptableWithContext: context\r\t| reparsableContext returnValue |\r\t[\r\t\treparsableContext := context asReparsableContext.\r\t\treparsableContext reset.\r\t\treparsableContext parser \r\t\t\tifNil: [ self resetCaches. reparsableContext parser: self ] \r\t\t\tifNotNil: [ self assert: reparsableContext parser == self. self resetNonReparsableCaches ].\r\t\treparsableContext restore: reparsableContext startMemento.\r\t\treturnValue := self parseOn: reparsableContext.\r\r\t\tself checkPromises.\r\r\t\t^ returnValue isPetit2Success ifTrue: [ \r\t\t\treparsableContext returnValue: returnValue \r\t\t] ifFalse: [ \r\t\t\treturnValue \r\t\t\t\tsetContext: reparsableContext;\r\t\t\t\tyourself \r\t\t]\r\t] on: PP2ReparseException do: [ \r\t\t"reparse did not worked, do the full parse instead"\r\t\treparsableContext reset.\r\t\treparsableContext restore: reparsableContext startMemento.\t\r\t\t^ self parseAdaptableWithContext: reparsableContext\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1246' ],		#self : OmReference [ '1247' ],		#time : DateAndTime [ '2017-12-12T08:00:09.918992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'reparseWithContext:',			#protocol : #reparsing,			#sourceCode : 'reparseWithContext: context\r\t^ self reparseAdaptableWithContext: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1247' ],		#self : OmReference [ '1248' ],		#time : DateAndTime [ '2017-12-12T08:00:09.919992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'replace:with:',			#protocol : #transforming,			#sourceCode : 'replace: node with: anotherNode\r\t"Replace the references of the receiver pointing to aParser with anotherParser."',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1248' ],		#self : OmReference [ '1249' ],		#time : DateAndTime [ '2017-12-12T08:00:09.920992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #resetCaches,			#protocol : #'optimizations - caching',			#sourceCode : 'resetCaches\r\tself isOptimized ifFalse: [ ^ self ].\r\tself allCaches do: [ :cache | cache reset ].\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1249' ],		#self : OmReference [ '1250' ],		#time : DateAndTime [ '2017-12-12T08:00:09.921992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #resetMemoizationStrategy,			#protocol : #initialization,			#sourceCode : 'resetMemoizationStrategy\r\tmemoizationStrategy := PP2CSMemoization new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1250' ],		#self : OmReference [ '1251' ],		#time : DateAndTime [ '2017-12-12T08:00:09.922992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #resetNonReparsableCaches,			#protocol : #'optimizations - caching',			#sourceCode : 'resetNonReparsableCaches\r\tself isOptimized ifFalse: [ ^ self ].\r\tself allCaches reject: [:e | e isReparsable ] thenDo: [ :cache | cache reset ].\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1251' ],		#self : OmReference [ '1252' ],		#time : DateAndTime [ '2017-12-12T08:00:09.923992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #resetStrategies,			#protocol : #initialization,			#sourceCode : 'resetStrategies\r\tself resetStrategy.\r\tself resetMemoizationStrategy.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1252' ],		#self : OmReference [ '1253' ],		#time : DateAndTime [ '2017-12-12T08:00:09.924992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tself subclassResponsibility',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1253' ],		#self : OmReference [ '1254' ],		#time : DateAndTime [ '2017-12-12T08:00:09.925992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #sea,			#protocol : #operators,			#sourceCode : 'sea\r\t^ PP2SeaNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1254' ],		#self : OmReference [ '1255' ],		#time : DateAndTime [ '2017-12-12T08:00:09.927992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'sea:',			#protocol : #operators,			#sourceCode : 'sea: waterToken\r\t^ (PP2SeaNode on: self)\r\t\twaterToken: waterToken;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1255' ],		#self : OmReference [ '1256' ],		#time : DateAndTime [ '2017-12-12T08:00:09.928992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #selfSkipDelegate,			#protocol : #accessing,			#sourceCode : 'selfSkipDelegate\r\t^ self isJustDelegate ifTrue: [  self child ] ifFalse: [\t^ self ]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1256' ],		#self : OmReference [ '1257' ],		#time : DateAndTime [ '2017-12-12T08:00:09.929992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'separatedBy:',			#protocol : #'operators - convenience',			#sourceCode : 'separatedBy: aParser\r\t"Answer a new parser that parses the receiver one or more times, separated by aParser."\r\t\r\t^ (PP2SequenceNode with: self with: (PP2SequenceNode with: aParser with: self) star) ==> [ :nodes |\r\t\t| result |\r\t\tresult := Array new: 2 * nodes second size + 1.\r\t\tresult at: 1 put: nodes first.\r\t\tnodes second \r\t\t\tkeysAndValuesDo: [ :index :pair | result replaceFrom: 2 * index to: 2 * index + 1 with: pair startingAt: 1 ].\r\t\tresult ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1257' ],		#self : OmReference [ '1258' ],		#time : DateAndTime [ '2017-12-12T08:00:09.930992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #setOptimized,			#protocol : #optimizations,			#sourceCode : 'setOptimized\r\t^ self allNodesDo: [ :node | node propertyAt: #optimized put: true ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1258' ],		#self : OmReference [ '1259' ],		#time : DateAndTime [ '2017-12-12T08:00:09.931992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #shouldCache,			#protocol : #'optimizations - caching',			#sourceCode : 'shouldCache\r\t^ self propertyAt: #cacheAllowed ifAbsent: [ ^ false ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1259' ],		#self : OmReference [ '1260' ],		#time : DateAndTime [ '2017-12-12T08:00:09.932992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #shouldMemoize,			#protocol : #'optimizations - caching',			#sourceCode : 'shouldMemoize\r\t^ self propertyAt: #memoize ifAbsent: false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1260' ],		#self : OmReference [ '1261' ],		#time : DateAndTime [ '2017-12-12T08:00:09.933992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #star,			#protocol : #operators,			#sourceCode : 'star\r\t^ (PP2PossesiveRepeatingNode on: self)\r\t\tmin: 0;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1261' ],		#self : OmReference [ '1262' ],		#time : DateAndTime [ '2017-12-12T08:00:09.934992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #starLazy,			#protocol : #operators,			#sourceCode : 'starLazy\r\t^ ((#epsilon asPParser sea)\r\t\twaterToken: self)\r\tmap: [:_before :_epsilon :_after | \r\t\t"return just before water, because island is nil and after water is empty"\r\t\t_before\r\t] ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1262' ],		#self : OmReference [ '1263' ],		#time : DateAndTime [ '2017-12-12T08:00:09.935992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'starLazy:',			#protocol : #operators,			#sourceCode : 'starLazy: predicate\r\t^ (predicate not, self) star',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1263' ],		#self : OmReference [ '1264' ],		#time : DateAndTime [ '2017-12-12T08:00:09.936992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #strategies,			#protocol : #accessing,			#sourceCode : 'strategies\r\t^ strategy allChildren',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1264' ],		#self : OmReference [ '1265' ],		#time : DateAndTime [ '2017-12-12T08:00:09.938992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #strategy,			#protocol : #accessing,			#sourceCode : 'strategy\r\t^ strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1265' ],		#self : OmReference [ '1266' ],		#time : DateAndTime [ '2017-12-12T08:00:09.939992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'strategy:',			#protocol : #accessing,			#sourceCode : 'strategy: aPP2Strategy\r\t(strategy == aPP2Strategy) ifTrue: [ ^ self ].\r\tself assert: aPP2Strategy node == self.\r\tstrategy := aPP2Strategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1266' ],		#self : OmReference [ '1267' ],		#time : DateAndTime [ '2017-12-12T08:00:09.940992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'switchToRecording:parent:',			#protocol : #recording,			#sourceCode : 'switchToRecording: toBeSwitched parent: nodeOrStrategy\r\t| recordingStrategy |\r\trecordingStrategy := toBeSwitched recording.\r\trecordingStrategy == toBeSwitched ifTrue: [ ^ toBeSwitched ].\r\tnodeOrStrategy strategy: recordingStrategy.\r\r\t^ recordingStrategy ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1267' ],		#self : OmReference [ '1268' ],		#time : DateAndTime [ '2017-12-12T08:00:09.941992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'times:',			#protocol : #operators,			#sourceCode : 'times: anInteger\r\t"Answer a new parser that parses the receiver exactly anInteger times."\r\t\r\t^ (PP2PossesiveRepeatingNode on: self)\r\t\tmin: anInteger;\r\t\tmax: anInteger;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1268' ],		#self : OmReference [ '1269' ],		#time : DateAndTime [ '2017-12-12T08:00:09.942992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #token,			#protocol : #operators,			#sourceCode : 'token\r\t^ PP2CreateTokenNode on: self',			#stamp : 'JanKurs 8/20/2017 17:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1269' ],		#self : OmReference [ '1270' ],		#time : DateAndTime [ '2017-12-12T08:00:09.943992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'token:',			#protocol : #operators,			#sourceCode : 'token: tokenClass\r\t^ (PP2CreateTokenNode on: self)\r\t\ttokenClass: tokenClass;\r\t\tyourself',			#stamp : 'JanKurs 8/20/2017 17:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1270' ],		#self : OmReference [ '1271' ],		#time : DateAndTime [ '2017-12-12T08:00:09.944992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'transform:',			#protocol : #transforming,			#sourceCode : 'transform: aBlock\r\t^ self transform: aBlock suchThat: [ :node | true ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1271' ],		#self : OmReference [ '1272' ],		#time : DateAndTime [ '2017-12-12T08:00:09.945992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'transform:suchThat:',			#protocol : #transforming,			#sourceCode : 'transform: aBlock suchThat: predicate\r\t^ PP2TransformVisitor new\r\t\tblock: aBlock;\r\t\tpredicate: predicate;\r\t\tvisit: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1272' ],		#self : OmReference [ '1273' ],		#time : DateAndTime [ '2017-12-12T08:00:09.946992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trim,			#protocol : #operators-trimming,			#sourceCode : 'trim\r\t"Answer a new parser that consumes spaces before and after the receiving parser."\r\t\r\t^ self trimSpaces',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1273' ],		#self : OmReference [ '1274' ],		#time : DateAndTime [ '2017-12-12T08:00:09.947992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'trim:',			#protocol : #operators-trimming,			#sourceCode : 'trim: aParser\r\t"Answer a new parser that consumes and ignores aParser repeatedly before and after the receiving parser."\r\t\r\t^ (PP2TrimmingNode on: self)\r\t\ttrimmer: aParser;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1274' ],		#self : OmReference [ '1275' ],		#time : DateAndTime [ '2017-12-12T08:00:09.949992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trimBlanks,			#protocol : #operators-trimming,			#sourceCode : 'trimBlanks\r\t"Answer a new parser that consumes spaces before and after the receiving parser."\r\t\r\t^ self trim: #blank asPParser star',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1275' ],		#self : OmReference [ '1276' ],		#time : DateAndTime [ '2017-12-12T08:00:09.950992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trimLeft,			#protocol : #operators-trimming,			#sourceCode : 'trimLeft\r\t"Answer a new parser that consumes spaces before and after the receiving parser."\r\t\r\t^ self trimSpacesLeft',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1276' ],		#self : OmReference [ '1277' ],		#time : DateAndTime [ '2017-12-12T08:00:09.951992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trimRight,			#protocol : #operators-trimming,			#sourceCode : 'trimRight\r\t"Answer a new parser that consumes spaces before and after the receiving parser."\r\t\r\t^ self trimSpacesRight',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1277' ],		#self : OmReference [ '1278' ],		#time : DateAndTime [ '2017-12-12T08:00:09.952992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trimSpaces,			#protocol : #operators-trimming,			#sourceCode : 'trimSpaces\r\t"Answer a new parser that consumes spaces before and after the receiving parser."\r\t\r\t^ self trim: #space asPParser star',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1278' ],		#self : OmReference [ '1279' ],		#time : DateAndTime [ '2017-12-12T08:00:09.953992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trimSpacesLeft,			#protocol : #operators-trimming,			#sourceCode : 'trimSpacesLeft\r\t"Answer a new parser that consumes spaces before the receiving parser."\r\t\r\t^ (#space asPParser star, self) ==> #second',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1279' ],		#self : OmReference [ '1280' ],		#time : DateAndTime [ '2017-12-12T08:00:09.954992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #trimSpacesRight,			#protocol : #operators-trimming,			#sourceCode : 'trimSpacesRight\r\t"Answer a new parser that consumes spaces after the receiving parser."\r\t\r\t^ (self, #space asPParser star) ==> #first',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1280' ],		#self : OmReference [ '1281' ],		#time : DateAndTime [ '2017-12-12T08:00:09.954992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #unsetOptimized,			#protocol : #optimizations,			#sourceCode : 'unsetOptimized\r\t^ self allNodesDo: [ :node | node propertyAt: #optimized put: false ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1281' ],		#self : OmReference [ '1282' ],		#time : DateAndTime [ '2017-12-12T08:00:09.955992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #warnActionInToken,			#protocol : #'optimizations - warnings',			#sourceCode : 'warnActionInToken\r\t"\r\t\t(($a asParser2, $b asParser2) ==> [ :e | e second ] token) optimize\r\t"\r\t| warning |\r\twarning := self asString, \' is in token, there shouldnt be actions in tokens. but it might be necessary, I admit :(\'.\r\t\r\tself addWarning: warning.\r',			#stamp : 'JanKurs 9/9/2017 17:26',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1282' ],		#self : OmReference [ '1283' ],		#time : DateAndTime [ '2017-12-12T08:00:09.957992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #warnDifferentTrimmer,			#protocol : #'optimizations - warnings',			#sourceCode : 'warnDifferentTrimmer\r\t"give user feedback about this issues"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1283' ],		#self : OmReference [ '1284' ],		#time : DateAndTime [ '2017-12-12T08:00:09.958992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #warnShouldNotBeShared,			#protocol : #'optimizations - warnings',			#sourceCode : 'warnShouldNotBeShared\r\t"give user feedback about this issues"\r\t| warning |\r\twarning := self asString, \' should not be shared, because it cannot be optimized\'.\t\r\tself addWarning: warning.\r',			#stamp : 'JanKurs 9/9/2017 17:15',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1284' ],		#self : OmReference [ '1285' ],		#time : DateAndTime [ '2017-12-12T08:00:09.959992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #warnings,			#protocol : #'optimizations - warnings',			#sourceCode : 'warnings\r\t^ self propertyAt: #warnings ifAbsentPut: [ OrderedCollection new ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1285' ],		#self : OmReference [ '1286' ],		#time : DateAndTime [ '2017-12-12T08:00:09.960992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #withoutDebugStrategy,			#protocol : #accessing,			#sourceCode : 'withoutDebugStrategy\r\t^ strategy withoutDebugStrategy',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1286' ],		#self : OmReference [ '1287' ],		#time : DateAndTime [ '2017-12-12T08:00:09.961992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #wrapped,			#protocol : #operators,			#sourceCode : 'wrapped\r\t^ PP2DelegateNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1287' ],		#self : OmReference [ '1288' ],		#time : DateAndTime [ '2017-12-12T08:00:09.962992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #'|',			#protocol : #operators,			#sourceCode : '| aParser\r\t"Answer a new parser that either parses the receiver or aParser. Fail if both pass or fail (exclusive choice, unordered choice)."\r\r\t^ (self not , aParser) / (aParser not , self) ==> #second',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1288' ],		#self : OmReference [ '1289' ],		#time : DateAndTime [ '2017-12-12T08:00:09.963992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2PluggableNode class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: block\r\t^ self new\r\t\tblock: block;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1289' ],		#self : OmReference [ '1290' ],		#time : DateAndTime [ '2017-12-12T08:00:09.964992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitPluggable: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1290' ],		#self : OmReference [ '1291' ],		#time : DateAndTime [ '2017-12-12T08:00:09.965992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #block,			#protocol : #accessing,			#sourceCode : 'block\r\t^ block',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1291' ],		#self : OmReference [ '1292' ],		#time : DateAndTime [ '2017-12-12T08:00:09.966992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #'block:',			#protocol : #accessing,			#sourceCode : 'block: anObject\r\tblock := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1292' ],		#self : OmReference [ '1293' ],		#time : DateAndTime [ '2017-12-12T08:00:09.967992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #accessing,			#sourceCode : 'firstCharSet\r\t^ PP2UnknownCharSetPredicate instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1293' ],		#self : OmReference [ '1294' ],		#time : DateAndTime [ '2017-12-12T08:00:09.968992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #isFirstSetTerminal,			#protocol : #'analysis - first',			#sourceCode : 'isFirstSetTerminal\r\t"lets be conservative here"\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1294' ],		#self : OmReference [ '1295' ],		#time : DateAndTime [ '2017-12-12T08:00:09.970992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\t^ (self block printString = anotherNode block printString)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1295' ],		#self : OmReference [ '1296' ],		#time : DateAndTime [ '2017-12-12T08:00:09.971992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: self block printString hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1296' ],		#self : OmReference [ '1297' ],		#time : DateAndTime [ '2017-12-12T08:00:09.972992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #'parsing - private',			#sourceCode : 'parseOn: aPP2Context\r\t^ strategy parseOn: aPP2Context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1297' ],		#self : OmReference [ '1298' ],		#time : DateAndTime [ '2017-12-12T08:00:09.973992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PluggableNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Pluggable on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1298' ],		#self : OmReference [ '1299' ],		#time : DateAndTime [ '2017-12-12T08:00:09.974992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2PredicateNode class',				#isMetaSide : true			},			#name : #'on:message:',			#protocol : #'instance creation',			#sourceCode : 'on: predicate message: message\r\t^ self new\r\t\tpredicate: predicate;\r\t\tpredicateMessage: message;\r\t\tnegated: [ :arg | (predicate value: arg) not ];\r\t\tnegatedMessage: \'no \', message;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1299' ],		#self : OmReference [ '1300' ],		#time : DateAndTime [ '2017-12-12T08:00:09.975992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\tself predicate printString = anotherNode predicate printString ifFalse: [ ^ false ].\r\tself predicateMessage = anotherNode predicateMessage ifFalse: [ ^ false ].\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1300' ],		#self : OmReference [ '1301' ],		#time : DateAndTime [ '2017-12-12T08:00:09.975992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: (predicate printString hash bitXor: predicateMessage hash)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1301' ],		#self : OmReference [ '1302' ],		#time : DateAndTime [ '2017-12-12T08:00:09.976992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #negate,			#protocol : #operators,			#sourceCode : 'negate\r\t"Answer a parser that is the negation of the receiving predicate parser."\r\t\r\t^ (self class new)\r\t\tpredicate: negated;\r\t\tpredicateMessage: negatedMessage;\r\t\tnegated: predicate;\r\t\tnegatedMessage: predicateMessage',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1302' ],		#self : OmReference [ '1303' ],		#time : DateAndTime [ '2017-12-12T08:00:09.977992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #negated,			#protocol : #accessing,			#sourceCode : 'negated\r\t^ negated',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1303' ],		#self : OmReference [ '1304' ],		#time : DateAndTime [ '2017-12-12T08:00:09.978992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #'negated:',			#protocol : #accessing,			#sourceCode : 'negated: anObject\r\tnegated := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1304' ],		#self : OmReference [ '1305' ],		#time : DateAndTime [ '2017-12-12T08:00:09.980992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #negatedMessage,			#protocol : #accessing,			#sourceCode : 'negatedMessage\r\t^ negatedMessage',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1305' ],		#self : OmReference [ '1306' ],		#time : DateAndTime [ '2017-12-12T08:00:09.981992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #'negatedMessage:',			#protocol : #accessing,			#sourceCode : 'negatedMessage: anObject\r\tnegatedMessage := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1306' ],		#self : OmReference [ '1307' ],		#time : DateAndTime [ '2017-12-12T08:00:09.982992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #predicate,			#protocol : #accessing,			#sourceCode : 'predicate\r\t^ predicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1307' ],		#self : OmReference [ '1308' ],		#time : DateAndTime [ '2017-12-12T08:00:09.983992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #'predicate:',			#protocol : #accessing,			#sourceCode : 'predicate: anObject\r\tpredicate := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1308' ],		#self : OmReference [ '1309' ],		#time : DateAndTime [ '2017-12-12T08:00:09.984992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #predicateMessage,			#protocol : #accessing,			#sourceCode : 'predicateMessage\r\t^ predicateMessage',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1309' ],		#self : OmReference [ '1310' ],		#time : DateAndTime [ '2017-12-12T08:00:09.984992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateNode,				#isMetaSide : false			},			#name : #'predicateMessage:',			#protocol : #accessing,			#sourceCode : 'predicateMessage: anObject\r\tpredicateMessage := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1310' ],		#self : OmReference [ '1311' ],		#time : DateAndTime [ '2017-12-12T08:00:09.986992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2PredicateObjectNode class',				#isMetaSide : true			},			#name : #'anyOf:',			#protocol : #factory-objects,			#sourceCode : 'anyOf: aCollection\r\t^ self new\r\t\tpredicate: [ :each | aCollection includes: each ];\r\t\tpredicateMessage: \'any of \' , aCollection printString , \' expected\';\r\t\tnegated: [ :each | (aCollection includes: each) not ];\r\t\tnegatedMessage: \'none of \' , aCollection printString ,  \'expected\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1311' ],		#self : OmReference [ '1312' ],		#time : DateAndTime [ '2017-12-12T08:00:09.987992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2PredicateObjectNode class',				#isMetaSide : true			},			#name : #'expect:message:',			#protocol : #factory-objects,			#sourceCode : 'expect: anObject message: aString\r\t^ (self new)\r\t\tpredicate: [ :each | each = anObject ];\r\t\tpredicateMessage: aString;\r\t\tnegated: [ :each | each ~= anObject ];\r\t\tnegatedMessage: \'no \' , aString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1312' ],		#self : OmReference [ '1313' ],		#time : DateAndTime [ '2017-12-12T08:00:09.987992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2PredicateObjectNode class',				#isMetaSide : true			},			#name : #'noneOf:',			#protocol : #factory-objects,			#sourceCode : 'noneOf: aCollection\r\t^ self new\r\t\tpredicate: [ :each | (aCollection includes: each) not ];\r\t\tpredicateMessage: \'none of \' , aCollection printString , \' expected\';\r\t\tnegated: [ :each | (aCollection includes: each) ];\r\t\tnegatedMessage: \'any of \' , aCollection printString ,  \'expected\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1313' ],		#self : OmReference [ '1314' ],		#time : DateAndTime [ '2017-12-12T08:00:09.988992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObjectNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitPredicateObject: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1314' ],		#self : OmReference [ '1315' ],		#time : DateAndTime [ '2017-12-12T08:00:09.990992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObjectNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t^ predicate asCharSetPredicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1315' ],		#self : OmReference [ '1316' ],		#time : DateAndTime [ '2017-12-12T08:00:09.991992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObjectNode,				#isMetaSide : false			},			#name : #'predicate:',			#protocol : #accessing,			#sourceCode : 'predicate: aPP2CharSetPredicateOrBlock\r\t"Using char set predicate is a performance optimization"\r\tpredicate := aPP2CharSetPredicateOrBlock asCharSetPredicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1316' ],		#self : OmReference [ '1317' ],		#time : DateAndTime [ '2017-12-12T08:00:09.992992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateObjectNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2PredicateObject on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1317' ],		#self : OmReference [ '1318' ],		#time : DateAndTime [ '2017-12-12T08:00:09.993992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2PredicateSequenceNode class',				#isMetaSide : true			},			#name : #'on:message:size:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: predicate message: message size: size\r\t^ (super on: predicate message: message)\r\t\tsize: size;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1318' ],		#self : OmReference [ '1319' ],		#time : DateAndTime [ '2017-12-12T08:00:09.994992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitPredicateSequence: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1319' ],		#self : OmReference [ '1320' ],		#time : DateAndTime [ '2017-12-12T08:00:09.995992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1320' ],		#self : OmReference [ '1321' ],		#time : DateAndTime [ '2017-12-12T08:00:09.996992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #'localEquals:',			#protocol : #comparing,			#sourceCode : 'localEquals: anotherNode\r\t(super localEquals: anotherNode) ifFalse: [ ^ false ].\r\t\r\t^ self size = anotherNode size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1321' ],		#self : OmReference [ '1322' ],		#time : DateAndTime [ '2017-12-12T08:00:09.997992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #localHash,			#protocol : #comparing,			#sourceCode : 'localHash\r\t^ super localHash bitXor: size hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1322' ],		#self : OmReference [ '1323' ],		#time : DateAndTime [ '2017-12-12T08:00:09.998992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #negate,			#protocol : #operators,			#sourceCode : 'negate\r\t"Answer a parser that is the negation of the receiving predicate parser."\r\t\r\t^ super negate\r\t\tsize: size;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1323' ],		#self : OmReference [ '1324' ],		#time : DateAndTime [ '2017-12-12T08:00:09.999992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2PredicateSequence on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1324' ],		#self : OmReference [ '1325' ],		#time : DateAndTime [ '2017-12-12T08:00:10.001992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t^ size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1325' ],		#self : OmReference [ '1326' ],		#time : DateAndTime [ '2017-12-12T08:00:10.002992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateSequenceNode,				#isMetaSide : false			},			#name : #'size:',			#protocol : #accessing,			#sourceCode : 'size: anObject\r\tsize := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1326' ],		#self : OmReference [ '1327' ],		#time : DateAndTime [ '2017-12-12T08:00:10.003992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SeaNode class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: island\r\t^ (self new)\r\t\tisland: island;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1327' ],		#self : OmReference [ '1328' ],		#time : DateAndTime [ '2017-12-12T08:00:10.004992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: aPP2Visitor\r\t^ aPP2Visitor visitSea: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1328' ],		#self : OmReference [ '1329' ],		#time : DateAndTime [ '2017-12-12T08:00:10.004992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #afterWater,			#protocol : #accessing,			#sourceCode : 'afterWater\r\t^ afterWater ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1329' ],		#self : OmReference [ '1330' ],		#time : DateAndTime [ '2017-12-12T08:00:10.005992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #beforeWater,			#protocol : #accessing,			#sourceCode : 'beforeWater\r\t^ beforeWater',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1330' ],		#self : OmReference [ '1331' ],		#time : DateAndTime [ '2017-12-12T08:00:10.006992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ Array with: beforeWater with: island with: afterWater',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1331' ],		#self : OmReference [ '1332' ],		#time : DateAndTime [ '2017-12-12T08:00:10.007992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tbeforeWater := PP2WaterNode new\r\t\twaterToken: self waterToken;\r\t\tyourself.\r\tafterWater := PP2WaterNode new\r\t\twaterToken: self waterToken;\r\t\tyourself.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1332' ],		#self : OmReference [ '1333' ],		#time : DateAndTime [ '2017-12-12T08:00:10.008992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #isMemoized,			#protocol : #testing,			#sourceCode : 'isMemoized\r\t^ self strategies anySatisfy: [ :s | s isMemoized ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1333' ],		#self : OmReference [ '1334' ],		#time : DateAndTime [ '2017-12-12T08:00:10.009992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #isSea,			#protocol : #testing,			#sourceCode : 'isSea\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1334' ],		#self : OmReference [ '1335' ],		#time : DateAndTime [ '2017-12-12T08:00:10.011992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #island,			#protocol : #accessing,			#sourceCode : 'island\r\t^ island',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1335' ],		#self : OmReference [ '1336' ],		#time : DateAndTime [ '2017-12-12T08:00:10.012992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'island:',			#protocol : #accessing,			#sourceCode : 'island: anObject\r\tisland := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1336' ],		#self : OmReference [ '1337' ],		#time : DateAndTime [ '2017-12-12T08:00:10.013992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'nonEpsilon:',			#protocol : #'private - operators',			#sourceCode : 'nonEpsilon: node\r\t^ node isNullable ifTrue: [ node nonEpsilon  ] ifFalse: [ node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1337' ],		#self : OmReference [ '1338' ],		#time : DateAndTime [ '2017-12-12T08:00:10.014992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'replace:with:',			#protocol : #transforming,			#sourceCode : 'replace: node with: anotherNode\r\tisland == node ifTrue: [ island := anotherNode ].\r\tbeforeWater == node ifTrue: [ beforeWater := anotherNode ].\r\tafterWater == node ifTrue: [ afterWater := anotherNode ]\t\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1338' ],		#self : OmReference [ '1339' ],		#time : DateAndTime [ '2017-12-12T08:00:10.014992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'reset:',			#protocol : #initialization,			#sourceCode : 'reset: newContext\r\t(root ~= newContext parser) ifTrue: [  \r\t\tself updateForRoot: newContext parser\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1339' ],		#self : OmReference [ '1340' ],		#time : DateAndTime [ '2017-12-12T08:00:10.015992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Sea on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1340' ],		#self : OmReference [ '1341' ],		#time : DateAndTime [ '2017-12-12T08:00:10.016992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'root:',			#protocol : #accessing,			#sourceCode : 'root: newRoot\r\troot := newRoot',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1341' ],		#self : OmReference [ '1342' ],		#time : DateAndTime [ '2017-12-12T08:00:10.017992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'updateAfterWater:',			#protocol : #boundaries,			#sourceCode : 'updateAfterWater: rootParser\r\t| next |\r\tself assert: rootParser isPetit2Parser.\r\t\r\tnext := self nextSetIn: rootParser.\r\tafterWater boundaryElements: (OrderedCollection withAll: next)\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1342' ],		#self : OmReference [ '1343' ],		#time : DateAndTime [ '2017-12-12T08:00:10.018992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'updateBeforeWater:',			#protocol : #boundaries,			#sourceCode : 'updateBeforeWater: rootParser\r\t| next elements |\r\tself assert: rootParser isPetit2Parser.\r\r\tnext := self nextSetIn: rootParser.\r\telements := OrderedCollection with: island.\r\telements addAll: next.\r\tbeforeWater\tboundaryElements: elements.\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1343' ],		#self : OmReference [ '1344' ],		#time : DateAndTime [ '2017-12-12T08:00:10.019992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'updateForRoot:',			#protocol : #initialization,			#sourceCode : 'updateForRoot: newRoot\r\troot := newRoot.\r\tself updateBeforeWater: root.\r\tself updateAfterWater: root',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1344' ],		#self : OmReference [ '1345' ],		#time : DateAndTime [ '2017-12-12T08:00:10.020992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #waterToken,			#protocol : #accessing,			#sourceCode : 'waterToken\r\t^ self propertyAt: #waterToken ifAbsent: [  \r\t\t#any asPParser \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1345' ],		#self : OmReference [ '1346' ],		#time : DateAndTime [ '2017-12-12T08:00:10.022992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNode,				#isMetaSide : false			},			#name : #'waterToken:',			#protocol : #accessing,			#sourceCode : 'waterToken: waterToken\r\tself propertyAt: #waterToken put: waterToken.\r\t\r\tbeforeWater waterToken: waterToken.\r\tafterWater waterToken: waterToken.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1346' ],		#self : OmReference [ '1347' ],		#time : DateAndTime [ '2017-12-12T08:00:10.023992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StartOfLineNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitStartOfLine: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1347' ],		#self : OmReference [ '1348' ],		#time : DateAndTime [ '2017-12-12T08:00:10.024992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StartOfLineNode,				#isMetaSide : false			},			#name : #firstCharSet,			#protocol : #'analysis - first',			#sourceCode : 'firstCharSet\r\t"\r\t Because the start of a line is not \'real\' character in the input stream,\r\t I don\'t know if the peek character in a stream is in my first set.\r\t"\r\t^ PP2UnknownCharSetPredicate instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1348' ],		#self : OmReference [ '1349' ],		#time : DateAndTime [ '2017-12-12T08:00:10.025992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StartOfLineNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #'as yet unclassified',			#sourceCode : 'resetStrategy\r\tstrategy := PP2StartOfLine on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1349' ],		#self : OmReference [ '1350' ],		#time : DateAndTime [ '2017-12-12T08:00:10.026992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2UnresolvedNode,				#isMetaSide : false			},			#name : #isUnresolved,			#protocol : #testing,			#sourceCode : 'isUnresolved\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1350' ],		#self : OmReference [ '1351' ],		#time : DateAndTime [ '2017-12-12T08:00:10.027992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2UnresolvedNode,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aStream\r\tself error: self printString , \' need to be resolved before execution.\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1351' ],		#self : OmReference [ '1352' ],		#time : DateAndTime [ '2017-12-12T08:00:10.027992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2UnresolvedNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\t"nothing to do here"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1352' ],		#self : OmReference [ '1353' ],		#time : DateAndTime [ '2017-12-12T08:00:10.028992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2WaterNode class',				#isMetaSide : true			},			#name : #'boundary:',			#protocol : #accessing,			#sourceCode : 'boundary: aPP2Node\r\t^ (self new) \r\t\tboundary: aPP2Node;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1353' ],		#self : OmReference [ '1354' ],		#time : DateAndTime [ '2017-12-12T08:00:10.029992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitWater: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1354' ],		#self : OmReference [ '1355' ],		#time : DateAndTime [ '2017-12-12T08:00:10.030992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #boundary,			#protocol : #accessing,			#sourceCode : 'boundary\r\t^ boundary',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1355' ],		#self : OmReference [ '1356' ],		#time : DateAndTime [ '2017-12-12T08:00:10.032992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'boundary:',			#protocol : #accessing,			#sourceCode : 'boundary: anObject\r\tself boundaryElements: (self toCollection: anObject)\r',			#stamp : 'JanKurs 9/9/2017 17:07',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1356' ],		#self : OmReference [ '1357' ],		#time : DateAndTime [ '2017-12-12T08:00:10.033992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #boundaryElements,			#protocol : #accessing,			#sourceCode : 'boundaryElements\r\t^ boundary children collect: #child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1357' ],		#self : OmReference [ '1358' ],		#time : DateAndTime [ '2017-12-12T08:00:10.034992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'boundaryElements:',			#protocol : #accessing,			#sourceCode : 'boundaryElements: collectionOrElement\r\t| elements |\r\telements := collectionOrElement isCollection ifTrue: [ collectionOrElement ] ifFalse: [ OrderedCollection with: collectionOrElement ].\r\t"\r\t\t#rejectXYZ are optimizations. \r\t\t\r\t\tThis is kind of design issue, but I need to make seas at least a bit useable\r\t\tin in non-optimized mode as well.\r\t"\r\telements := elements collect: [:e | self rejectSeas: e ].\r\telements := elements collect: [:e | self rejectPossessive: e ].\r\telements := elements collect: [:e | self nonEpsilon: e ].\r\telements := elements collect: #and.\r\t\t\r\tboundary := (PP2ChoiceNode withAll: elements).\r\t\r\tself strategy isDebugging ifTrue: [ boundary enableDebug ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1358' ],		#self : OmReference [ '1359' ],		#time : DateAndTime [ '2017-12-12T08:00:10.035992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ Array with: boundary with: waterToken ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1359' ],		#self : OmReference [ '1360' ],		#time : DateAndTime [ '2017-12-12T08:00:10.036992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\twaterToken := #any asPParser.\r\tboundary := (PP2ChoiceNode with: PP2EndOfInputNode new and).',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1360' ],		#self : OmReference [ '1361' ],		#time : DateAndTime [ '2017-12-12T08:00:10.037992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'nonEpsilon:',			#protocol : #private,			#sourceCode : 'nonEpsilon: node\r\t^ node isNullable ifTrue: [ node nonEpsilon  ] ifFalse: [ node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1361' ],		#self : OmReference [ '1362' ],		#time : DateAndTime [ '2017-12-12T08:00:10.038992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'rejectPossessive:',			#protocol : #private,			#sourceCode : 'rejectPossessive: node\r\t^ node selfSkipDelegate isRepeating ifTrue: [ node child  ] ifFalse: [ node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1362' ],		#self : OmReference [ '1363' ],		#time : DateAndTime [ '2017-12-12T08:00:10.039992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'rejectSeas:',			#protocol : #private,			#sourceCode : 'rejectSeas: nodeOrDelegate\r\t| node |\r\tnode := nodeOrDelegate selfSkipDelegate.\r\t\r\t^ node isSea ifTrue: [ node island  ] ifFalse: [ node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1363' ],		#self : OmReference [ '1364' ],		#time : DateAndTime [ '2017-12-12T08:00:10.040992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2Water on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1364' ],		#self : OmReference [ '1365' ],		#time : DateAndTime [ '2017-12-12T08:00:10.041992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'toCollection:',			#protocol : #private,			#sourceCode : 'toCollection: object\r\tobject isCollection ifTrue: [ ^ object ].\r\t\r\t^ object asOrderedCollection',			#stamp : 'JanKurs 9/9/2017 17:07',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1365' ],		#self : OmReference [ '1366' ],		#time : DateAndTime [ '2017-12-12T08:00:10.043992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #waterToken,			#protocol : #accessing,			#sourceCode : 'waterToken\r\t^ waterToken',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1366' ],		#self : OmReference [ '1367' ],		#time : DateAndTime [ '2017-12-12T08:00:10.043992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNode,				#isMetaSide : false			},			#name : #'waterToken:',			#protocol : #accessing,			#sourceCode : 'waterToken: anObject\r\twaterToken := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1367' ],		#self : OmReference [ '1368' ],		#time : DateAndTime [ '2017-12-12T08:00:10.044992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2NodeFactory class',				#isMetaSide : true			},			#name : #instance,			#protocol : #accessing,			#sourceCode : 'instance\r\tInstance isNil ifTrue: [  \r\t\tInstance := PP2NodeFactory new\r\t].\r\r\t^ Instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1368' ],		#self : OmReference [ '1369' ],		#time : DateAndTime [ '2017-12-12T08:00:10.045992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2NodeFactory class',				#isMetaSide : true			},			#name : #reset,			#protocol : #accessing,			#sourceCode : 'reset\r\tInstance := nil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1369' ],		#self : OmReference [ '1370' ],		#time : DateAndTime [ '2017-12-12T08:00:10.046992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #any,			#protocol : #predicates,			#sourceCode : 'any\r\t^ PP2PredicateObjectNode new\r\t\tpredicate: [ :each | true ];\r\t\tpredicateMessage: \'input expected\';\r\t\tnegated: [ :each | false ];\r\t\tnegatedMessage: \'no input expected\';\r\t\tyourself\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1370' ],		#self : OmReference [ '1371' ],		#time : DateAndTime [ '2017-12-12T08:00:10.047992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #blank,			#protocol : #predicates,			#sourceCode : 'blank\r\t| collection |\r\tcollection := OrderedCollection with: Character space with: Character tab.\r\t^ PP2PredicateObjectNode new \r\t\tpredicate: (PP2CharSetPredicate on: [ :char | collection includes: char ]);\r\t\tpredicateMessage: \'blank expected\';\r\t\tnegated: (PP2CharSetPredicate on: [:char | (collection includes: char) not ]);\r\t\tnegatedMessage: \'blank not expected\';\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1371' ],		#self : OmReference [ '1372' ],		#time : DateAndTime [ '2017-12-12T08:00:10.048992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #digit,			#protocol : #predicates,			#sourceCode : 'digit\r\t^ PP2PredicateObjectNode new\r\t\tpredicate: (PP2CharSetPredicate on: [ :char | char isDigit ]);\r\t\tpredicateMessage: \'digit expected\';\r\t\tnegated: (PP2CharSetPredicate on: [ :char | char isDigit not ]);\r\t\tnegatedMessage: \'digit not expected\';\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1372' ],		#self : OmReference [ '1373' ],		#time : DateAndTime [ '2017-12-12T08:00:10.049992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #eoi,			#protocol : #'instance creation',			#sourceCode : 'eoi\r\t^ PP2EndOfInputNode new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1373' ],		#self : OmReference [ '1374' ],		#time : DateAndTime [ '2017-12-12T08:00:10.050992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #epsilon,			#protocol : #'instance creation',			#sourceCode : 'epsilon\r\t^ PP2EpsilonNode instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1374' ],		#self : OmReference [ '1375' ],		#time : DateAndTime [ '2017-12-12T08:00:10.051992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #failure,			#protocol : #'instance creation',			#sourceCode : 'failure\r\t^ PP2FailingNode new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1375' ],		#self : OmReference [ '1376' ],		#time : DateAndTime [ '2017-12-12T08:00:10.053992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #hex,			#protocol : #predicates,			#sourceCode : 'hex\r\t| hexBlock |\r\thexBlock := [ :char | (char between: $0 and: $9) \r\t\t\t\t\tor: [ (char between: $a and: $f) \r\t\t\t\t\tor: [ (char between: $A and: $F) ] ]  ].\r\t\t\r\t^ PP2PredicateObjectNode new\r\t\tpredicate: (PP2CharSetPredicate on: hexBlock);\r\t\tpredicateMessage: \'hex digit expected\';\r\t\tnegated: (PP2CharSetPredicate on: [:char | (hexBlock value: char) not]);\r\t\tnegatedMessage: \'hex digit not expected\';\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1376' ],		#self : OmReference [ '1377' ],		#time : DateAndTime [ '2017-12-12T08:00:10.054992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #letter,			#protocol : #predicates,			#sourceCode : 'letter\r\t^ PP2PredicateObjectNode new\r\t\tpredicate: (PP2CharSetPredicate on: [ :char | char isLetter ]);\r\t\tpredicateMessage: \'letter expected\';\r\t\tnegated: (PP2CharSetPredicate on: [ :char | char isLetter not ]);\r\t\tnegatedMessage: \'letter not expected\';\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1377' ],		#self : OmReference [ '1378' ],		#time : DateAndTime [ '2017-12-12T08:00:10.055992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #newline,			#protocol : #'instance creation',			#sourceCode : 'newline\r\t^ PP2NewLineNode new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1378' ],		#self : OmReference [ '1379' ],		#time : DateAndTime [ '2017-12-12T08:00:10.056992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #pop,			#protocol : #context,			#sourceCode : 'pop\r\t^ nil asPParser pop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1379' ],		#self : OmReference [ '1380' ],		#time : DateAndTime [ '2017-12-12T08:00:10.057992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #space,			#protocol : #predicates,			#sourceCode : 'space\r\t^ PP2PredicateObjectNode new \r\t\tpredicate: (PP2CharSetPredicate on: [ :char | char isSeparator ]);\r\t\tpredicateMessage: \'separator expected\';\r\t\tnegated: (PP2CharSetPredicate on: [ :char | char isSeparator not ]);\r\t\tnegatedMessage: \'separator not expected\';\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1380' ],		#self : OmReference [ '1381' ],		#time : DateAndTime [ '2017-12-12T08:00:10.058992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #startOfLine,			#protocol : #'instance creation',			#sourceCode : 'startOfLine\r\t^ PP2StartOfLineNode new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1381' ],		#self : OmReference [ '1382' ],		#time : DateAndTime [ '2017-12-12T08:00:10.059992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #water,			#protocol : #seas,			#sourceCode : 'water\r\t^ nil asPParser sea flatten',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1382' ],		#self : OmReference [ '1383' ],		#time : DateAndTime [ '2017-12-12T08:00:10.059992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeFactory,				#isMetaSide : false			},			#name : #word,			#protocol : #predicates,			#sourceCode : 'word\r\t^ PP2PredicateObjectNode new\r\t\tpredicate: (PP2CharSetPredicate on: [ :char | char isAlphaNumeric ]);\r\t\tpredicateMessage: \'letter or digit expected\';\r\t\tnegated: (PP2CharSetPredicate on: [ :char | char isAlphaNumeric not ]);\r\t\tnegatedMessage: \'letter or digit not expected\';\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1383' ],		#self : OmReference [ '1384' ],		#time : DateAndTime [ '2017-12-12T08:00:10.060992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Interpret class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: aPP2Parser\r\t^ (self basicNew)\r\t\tinitializeFor: aPP2Parser;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1384' ],		#self : OmReference [ '1385' ],		#time : DateAndTime [ '2017-12-12T08:00:10.061992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #discardFailure,			#protocol : #'visiting - helpers',			#sourceCode : 'discardFailure\r\tcurrentContext :=\tcurrentContext success',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1385' ],		#self : OmReference [ '1386' ],		#time : DateAndTime [ '2017-12-12T08:00:10.063992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #intializing,			#sourceCode : 'initializeFor: aPP2Parser\r\trootParser := aPP2Parser',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1386' ],		#self : OmReference [ '1387' ],		#time : DateAndTime [ '2017-12-12T08:00:10.064992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'parse:',			#protocol : #parsing,			#sourceCode : 'parse: input\r\t| startContext |\r\tstartContext := input asPetit2Context.\r\t^ self parseWithContext: startContext\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1387' ],		#self : OmReference [ '1388' ],		#time : DateAndTime [ '2017-12-12T08:00:10.065992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'parse:withContext:',			#protocol : #parsing,			#sourceCode : 'parse: input withContext: startContext\r\tstartContext stream: input asPetit2Stream.\r\tstartContext position: 0.\r\tstartContext parser: rootParser.\r\t\r\t^ self parseWithContext: startContext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1388' ],		#self : OmReference [ '1389' ],		#time : DateAndTime [ '2017-12-12T08:00:10.066992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'parseWithContext:',			#protocol : #parsing,			#sourceCode : 'parseWithContext: startContext\r\t| retval |\r\tcurrentContext := startContext.\r\tretval := self visit: rootParser.\r\t\r\t^ retval isPetit2Failure ifTrue: [ retval ] ifFalse: [ currentContext returnValue: retval; yourself ]\r\t\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1389' ],		#self : OmReference [ '1390' ],		#time : DateAndTime [ '2017-12-12T08:00:10.067992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: parser\r\t| retval |\r\t^ (retval := self visit: parser child) isPetit2Failure \r\t\tifTrue: [ ^ retval ]\r\t\tifFalse: [ ^ parser block value: retval ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1390' ],		#self : OmReference [ '1391' ],		#time : DateAndTime [ '2017-12-12T08:00:10.068992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: parser\r\t| retval memento |\r\tmemento := currentContext remember.\r\t\r\tretval := self visit: parser child. \r\tcurrentContext restore: memento.\r\t\r\t^ retval isPetit2Success\r\t\tifTrue: [ retval ]\r\t\tifFalse: [ PP2Failure message: retval message context: currentContext ]\r\t\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1391' ],		#self : OmReference [ '1392' ],		#time : DateAndTime [ '2017-12-12T08:00:10.069992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: parser\r\t| retval |\r\t\r\t1 to: parser children size do: [ :index |\r\t\t(retval := self visit: (parser childAt: index)) isPetit2Success ifTrue: [ ^ retval ] \r\t].\r\t\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1392' ],		#self : OmReference [ '1393' ],		#time : DateAndTime [ '2017-12-12T08:00:10.070992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: node\r\t^ self visit: node child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1393' ],		#self : OmReference [ '1394' ],		#time : DateAndTime [ '2017-12-12T08:00:10.071992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: parser\r\t^ self visit: parser child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1394' ],		#self : OmReference [ '1395' ],		#time : DateAndTime [ '2017-12-12T08:00:10.072992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitEnd:',			#protocol : #visiting,			#sourceCode : 'visitEnd: parser\r\t| memento retval |\r\t\r\tmemento := currentContext remember.\r\tretval := self visit: parser child.\r\r\t^ currentContext atEnd \r\t\tifTrue: [ retval ] \r\t\tifFalse: [ \r\t\t\tretval := PP2Failure message: \'end of input expected\' context: currentContext.\r\t\t\tcurrentContext restore: memento.\r\t\t\t^ retval\r\t\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1395' ],		#self : OmReference [ '1396' ],		#time : DateAndTime [ '2017-12-12T08:00:10.074992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitEpsilon: parser\r\t^ nil',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1396' ],		#self : OmReference [ '1397' ],		#time : DateAndTime [ '2017-12-12T08:00:10.074992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitFailing:',			#protocol : #visiting,			#sourceCode : 'visitFailing: parser\r\t^ PP2Failure message: parser message context: currentContext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1397' ],		#self : OmReference [ '1398' ],		#time : DateAndTime [ '2017-12-12T08:00:10.075992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: parser\r\t| start result |\r\tstart := currentContext position.\r\t(result := self visit: parser child) isPetit2Failure ifTrue: [ ^ result ].\r\r\t^ currentContext copyFrom: start + 1 to: (currentContext position)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1398' ],		#self : OmReference [ '1399' ],		#time : DateAndTime [ '2017-12-12T08:00:10.076992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitFragment:',			#protocol : #visiting,			#sourceCode : 'visitFragment: parser\r\t| start retval |\r\tstart := currentContext remember.\r\t(retval := self visit: parser child) isPetit2Failure ifTrue: [ ^ retval ].\r\r\t^ currentContext copy \r\t\treturnValue: retval;\r\t\tstartMemento: start;\r\t\tparser: parser;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1399' ],		#self : OmReference [ '1400' ],		#time : DateAndTime [ '2017-12-12T08:00:10.077992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitLiteralObject:',			#protocol : #visiting,			#sourceCode : 'visitLiteralObject: parser\r\t^ (currentContext atEnd not and: [ parser literal = currentContext uncheckedPeek ])\r\t\tifFalse: [ PP2Failure message: parser message context: currentContext ]\r\t\tifTrue: [ currentContext uncheckedNext ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1400' ],		#self : OmReference [ '1401' ],		#time : DateAndTime [ '2017-12-12T08:00:10.078992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitLiteralSequence:',			#protocol : #visiting,			#sourceCode : 'visitLiteralSequence: parser\r\t| memento retval |\r\tmemento := currentContext remember.\r\tretval := currentContext next: parser size.\r\tparser literal = retval ifTrue: [ ^ retval ].\r\r\tcurrentContext restore: memento.\r\t^ PP2Failure message: parser message context: currentContext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1401' ],		#self : OmReference [ '1402' ],		#time : DateAndTime [ '2017-12-12T08:00:10.079992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: parser\r\t| retval |\r\t^ (retval := self visit: parser child) isPetit2Failure \r\t\tifTrue: [ ^ retval ]\r\t\tifFalse: [ ^ parser block valueWithArguments: retval asOrderedCollection ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1402' ],		#self : OmReference [ '1403' ],		#time : DateAndTime [ '2017-12-12T08:00:10.080992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: parser\r\t| retval memento |\r\tmemento := currentContext remember.\r\t\r\tretval := self visit: parser child.\r\tcurrentContext restore: memento.\r\t\r\t^ retval isPetit2Failure \r\t\tifTrue: [ nil ]\r\t\tifFalse: [ PP2Failure message: \'I was not expected to pass\' context: currentContext ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1403' ],		#self : OmReference [ '1404' ],		#time : DateAndTime [ '2017-12-12T08:00:10.081992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: parser\r\t| retval memento |\r\tmemento := currentContext remember.\r\t\r\t^ (retval := self visit: parser child) isPetit2Failure \r\t\tifTrue: [ currentContext restore: memento. nil ]\r\t\tifFalse: [ retval ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1404' ],		#self : OmReference [ '1405' ],		#time : DateAndTime [ '2017-12-12T08:00:10.082992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: aPP2Parser\r\tself error: \'should not happen\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1405' ],		#self : OmReference [ '1406' ],		#time : DateAndTime [ '2017-12-12T08:00:10.085992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitPluggable:',			#protocol : #visiting,			#sourceCode : 'visitPluggable: parser\r\t^ parser block value: currentContext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1406' ],		#self : OmReference [ '1407' ],		#time : DateAndTime [ '2017-12-12T08:00:10.086992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: parser\r\t| memento elements retval |\r\telements := OrderedCollection new.\r\tmemento := currentContext remember.\r\t\r\t[ elements size < parser min ] whileTrue: [\r\t\t(retval := self visit: parser child) isPetit2Failure ifTrue: [\r\t\t\tcurrentContext restore: memento.\r\t\t\t"^ PP2Failure message: \'not enough repetitions\' context: currentContext."\r\t\t\t^ retval\r\t\t].\r\t\telements addLast: retval \r\t].\r\t\r\t[ elements size < parser max ] whileTrue: [\r\t \t(retval := self visit: parser child) isPetit2Failure ifTrue: [ \r\t\t\t^ elements \r\t\t].\r\t\telements addLast: retval \r\t].\r\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1407' ],		#self : OmReference [ '1408' ],		#time : DateAndTime [ '2017-12-12T08:00:10.087992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitPredicateObject:',			#protocol : #visiting,			#sourceCode : 'visitPredicateObject: parser\r\t^ (currentContext atEnd not and: [ parser predicate value: currentContext uncheckedPeek ])\r\t\tifFalse: [ PP2Failure message: parser predicateMessage context: currentContext  ]\r\t\tifTrue: [ currentContext uncheckedNext ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1408' ],		#self : OmReference [ '1409' ],		#time : DateAndTime [ '2017-12-12T08:00:10.088992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitPredicateSequence:',			#protocol : #visiting,			#sourceCode : 'visitPredicateSequence: parser\r\t| retval position |\r\tposition := currentContext position.\r\tretval := currentContext next: parser size.\r\t\r\t^ (retval isNil not and: [ parser predicate value: retval ]) \r\t\tifTrue: [ retval ]\r\t\tifFalse: [ \r\t\t\tcurrentContext position: position.\r\t\t\tPP2Failure message: parser predicateMessage context: currentContext \r\t\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1409' ],		#self : OmReference [ '1410' ],		#time : DateAndTime [ '2017-12-12T08:00:10.088992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: parser\r\t| retval elements memento |\r\r\tmemento := currentContext remember.\r\telements := Array new: parser children size.\r\t\r\t1 to: elements size do: [ :index |\r\t\tretval := self visit: (parser childAt: index).\r\t\tretval isPetit2Failure ifTrue: [ \r\t\t\tcurrentContext restore: memento. \r\t\t\t^ retval\r\t\t].\r\t\telements at: index put: retval \r\t].\r\t\r\t^ elements',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1410' ],		#self : OmReference [ '1411' ],		#time : DateAndTime [ '2017-12-12T08:00:10.089992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: parser\r\t| start token retval |\r\tstart := currentContext position.\r\t(retval := self visit: parser child) isPetit2Failure ifTrue: [ ^ retval ].\r\r\ttoken :=\tcurrentContext newToken: (parser tokenClass) from: start.\r\t^ token',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1411' ],		#self : OmReference [ '1412' ],		#time : DateAndTime [ '2017-12-12T08:00:10.090992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: parser\r\t| memento retval |\r\tmemento := currentContext remember.\r\tself visit: parser trimmer.\r\t\r\t(retval := self visit: parser child) isPetit2Failure ifTrue: [ \r\t\tcurrentContext restore: memento.\r\t\t^ retval\r\t].\r\t\r\tself visit: parser trimmer.\r\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1412' ],		#self : OmReference [ '1413' ],		#time : DateAndTime [ '2017-12-12T08:00:10.091992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitWrapping:',			#protocol : #visiting,			#sourceCode : 'visitWrapping: parser\r\t^ parser block value: currentContext value: [ self visit: parser child  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1413' ],		#self : OmReference [ '1414' ],		#time : DateAndTime [ '2017-12-12T08:00:10.092992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #visiting,			#sourceCode : 'visit: aPP2Parser\r\t^ aPP2Parser accept: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1414' ],		#self : OmReference [ '1415' ],		#time : DateAndTime [ '2017-12-12T08:00:10.093992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1415' ],		#self : OmReference [ '1416' ],		#time : DateAndTime [ '2017-12-12T08:00:10.094992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitAdaptable:',			#protocol : #visiting,			#sourceCode : 'visitAdaptable: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1416' ],		#self : OmReference [ '1417' ],		#time : DateAndTime [ '2017-12-12T08:00:10.095992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1417' ],		#self : OmReference [ '1418' ],		#time : DateAndTime [ '2017-12-12T08:00:10.096992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1418' ],		#self : OmReference [ '1419' ],		#time : DateAndTime [ '2017-12-12T08:00:10.097992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1419' ],		#self : OmReference [ '1420' ],		#time : DateAndTime [ '2017-12-12T08:00:10.098992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1420' ],		#self : OmReference [ '1421' ],		#time : DateAndTime [ '2017-12-12T08:00:10.099992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitEnd:',			#protocol : #visiting,			#sourceCode : 'visitEnd: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1421' ],		#self : OmReference [ '1422' ],		#time : DateAndTime [ '2017-12-12T08:00:10.100992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitEndOfInput:',			#protocol : #visiting,			#sourceCode : 'visitEndOfInput: node\r\t^ self visitPP2Node: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1422' ],		#self : OmReference [ '1423' ],		#time : DateAndTime [ '2017-12-12T08:00:10.100992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitEpsilon: node\r\t^ self visitPP2Node: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1423' ],		#self : OmReference [ '1424' ],		#time : DateAndTime [ '2017-12-12T08:00:10.101992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitFailing:',			#protocol : #visiting,			#sourceCode : 'visitFailing: node\r\t^ self visitPP2Node: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1424' ],		#self : OmReference [ '1425' ],		#time : DateAndTime [ '2017-12-12T08:00:10.102992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1425' ],		#self : OmReference [ '1426' ],		#time : DateAndTime [ '2017-12-12T08:00:10.103992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitLiteralObject:',			#protocol : #visiting,			#sourceCode : 'visitLiteralObject: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1426' ],		#self : OmReference [ '1427' ],		#time : DateAndTime [ '2017-12-12T08:00:10.104992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitLiteralSequence:',			#protocol : #visiting,			#sourceCode : 'visitLiteralSequence: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1427' ],		#self : OmReference [ '1428' ],		#time : DateAndTime [ '2017-12-12T08:00:10.105992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1428' ],		#self : OmReference [ '1429' ],		#time : DateAndTime [ '2017-12-12T08:00:10.106992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #visiting,			#sourceCode : 'visitMatch: node\r\t^ self visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1429' ],		#self : OmReference [ '1430' ],		#time : DateAndTime [ '2017-12-12T08:00:10.107992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitNonEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitNonEpsilon: node\r\t^ self visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1430' ],		#self : OmReference [ '1431' ],		#time : DateAndTime [ '2017-12-12T08:00:10.108992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1431' ],		#self : OmReference [ '1432' ],		#time : DateAndTime [ '2017-12-12T08:00:10.109992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1432' ],		#self : OmReference [ '1433' ],		#time : DateAndTime [ '2017-12-12T08:00:10.110992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: aPP2Node\r\t"nothing to do here"\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1433' ],		#self : OmReference [ '1434' ],		#time : DateAndTime [ '2017-12-12T08:00:10.111992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPluggable:',			#protocol : #visiting,			#sourceCode : 'visitPluggable: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1434' ],		#self : OmReference [ '1435' ],		#time : DateAndTime [ '2017-12-12T08:00:10.111992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPop:',			#protocol : #visiting,			#sourceCode : 'visitPop: node\r\t^ self visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1435' ],		#self : OmReference [ '1436' ],		#time : DateAndTime [ '2017-12-12T08:00:10.113992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1436' ],		#self : OmReference [ '1437' ],		#time : DateAndTime [ '2017-12-12T08:00:10.113992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPredicateObject:',			#protocol : #visiting,			#sourceCode : 'visitPredicateObject: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1437' ],		#self : OmReference [ '1438' ],		#time : DateAndTime [ '2017-12-12T08:00:10.114992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPredicateSequence:',			#protocol : #visiting,			#sourceCode : 'visitPredicateSequence: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1438' ],		#self : OmReference [ '1439' ],		#time : DateAndTime [ '2017-12-12T08:00:10.115992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitPush:',			#protocol : #visiting,			#sourceCode : 'visitPush: node\r\t^ self visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1439' ],		#self : OmReference [ '1440' ],		#time : DateAndTime [ '2017-12-12T08:00:10.116992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\t^ self visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1440' ],		#self : OmReference [ '1441' ],		#time : DateAndTime [ '2017-12-12T08:00:10.117992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1441' ],		#self : OmReference [ '1442' ],		#time : DateAndTime [ '2017-12-12T08:00:10.118992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1442' ],		#self : OmReference [ '1443' ],		#time : DateAndTime [ '2017-12-12T08:00:10.119992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1443' ],		#self : OmReference [ '1444' ],		#time : DateAndTime [ '2017-12-12T08:00:10.120992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitTrimmingToken:',			#protocol : #visiting,			#sourceCode : 'visitTrimmingToken: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1444' ],		#self : OmReference [ '1445' ],		#time : DateAndTime [ '2017-12-12T08:00:10.121992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitUnresolved:',			#protocol : #visiting,			#sourceCode : 'visitUnresolved: node\r\t^ self visitPP2Node: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1445' ],		#self : OmReference [ '1446' ],		#time : DateAndTime [ '2017-12-12T08:00:10.122992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitWater:',			#protocol : #visiting,			#sourceCode : 'visitWater: node\r\t^ self visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1446' ],		#self : OmReference [ '1447' ],		#time : DateAndTime [ '2017-12-12T08:00:10.123992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitWrapping:',			#protocol : #visiting,			#sourceCode : 'visitWrapping: aPP2Parser\r\t^ self visitPP2Node: aPP2Parser\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1447' ],		#self : OmReference [ '1448' ],		#time : DateAndTime [ '2017-12-12T08:00:10.124992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesCache,				#isMetaSide : false			},			#name : #'afterAccept:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'afterAccept: ctx result: result\r\tctx node propertyAt: #allNodesSize ifAbsentPut: result size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1448' ],		#self : OmReference [ '1449' ],		#time : DateAndTime [ '2017-12-12T08:00:10.125992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesCache,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #'as yet unclassified',			#sourceCode : 'doPass: node\r\tself visit: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1449' ],		#self : OmReference [ '1450' ],		#time : DateAndTime [ '2017-12-12T08:00:10.125992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitor,				#isMetaSide : false			},			#name : #allNodes,			#protocol : #visiting,			#sourceCode : 'allNodes\r\t^ closeSet collect: [ :ctx | ctx node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1450' ],		#self : OmReference [ '1451' ],		#time : DateAndTime [ '2017-12-12T08:00:10.126992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitor,				#isMetaSide : false			},			#name : #children,			#protocol : #visiting,			#sourceCode : 'children\r\tself halt: \'deprecated\'.\r\t^ closeSet collect: [ :ctx | ctx node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1451' ],		#self : OmReference [ '1452' ],		#time : DateAndTime [ '2017-12-12T08:00:10.127992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\t| retval |\r\tretval := IdentitySet new.\r\tnode children do: [ :child | \r\t\tretval addAll: (self visit: child)\r\t].\r\tretval add: node.\r\t\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1452' ],		#self : OmReference [ '1453' ],		#time : DateAndTime [ '2017-12-12T08:00:10.128992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1453' ],		#self : OmReference [ '1454' ],		#time : DateAndTime [ '2017-12-12T08:00:10.129992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitor,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: node\r\tself visit: node child.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1454' ],		#self : OmReference [ '1455' ],		#time : DateAndTime [ '2017-12-12T08:00:10.130992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\t| target |\r\tnode children do: [ :child | \r\t\t(child class == PP2DelegateNode and: [ child strategy class == PP2Delegate]) ifTrue: [  \r\t\t\ttarget := child child.\r\t\t\tnode strategy bypass: child to: target\r\t\t].\r\t\tself visit: child.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1455' ],		#self : OmReference [ '1456' ],		#time : DateAndTime [ '2017-12-12T08:00:10.131992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'cache:',			#protocol : #caching,			#sourceCode : 'cache: node\r\tnode isCacheForbidden ifTrue: [ ^ self ].\r\tnode contextChanges isContextChange ifTrue: [ ^ self ].\r\tnode isMemoized ifTrue: [ ^ self ].\r\t\r\tnode strategy: node strategy cache.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1456' ],		#self : OmReference [ '1457' ],		#time : DateAndTime [ '2017-12-12T08:00:10.132992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'cache:production:',			#protocol : #'caching - choice',			#sourceCode : 'cache: node production: production\r\t| strategy |\r\tnode isCacheForbidden ifTrue: [ ^ self ].\r\t\r\tstrategy := production strategy cache.\r\tnode changeStrategy: strategy ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1457' ],		#self : OmReference [ '1458' ],		#time : DateAndTime [ '2017-12-12T08:00:10.133992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'cacheIfMakesSense:',			#protocol : #caching,			#sourceCode : 'cacheIfMakesSense: node\r\t(self cacheMakesSense: node) ifTrue: [  \r\t\tself cache: node\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1458' ],		#self : OmReference [ '1459' ],		#time : DateAndTime [ '2017-12-12T08:00:10.134992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'cacheMakesSense:',			#protocol : #support,			#sourceCode : 'cacheMakesSense: production\r\t| node target |\r\tnode := production isJustDelegate ifTrue: [ production child ] ifFalse: [ production ].\r\r\ttarget := node.\r\t"trimmers are already optimized, I care about the body"\r\tnode isTrimming ifTrue: [ target := node child ].\r\tnode isTrimmingToken ifTrue: [ target := node child child ].\r\t\r\t^ (target propertyAt: #allNodesSize ifAbsentPut: [ node allNodes size ]) > 2',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1459' ],		#self : OmReference [ '1460' ],		#time : DateAndTime [ '2017-12-12T08:00:10.135992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'cacheProductions:',			#protocol : #'caching - choice',			#sourceCode : 'cacheProductions: productions\r\t| names |\r\tnames := productions collect: [:p | p name ].\r\t\r\t"\r\t\tSmall magic alert: I take all the equivalent productions and set the same caching \r\t\tstrategy for all production that occur in the first set of more than one alternives.\r\t"\r\tnames do: [ :name |\r\t\t| occurences production |\r\t\toccurences := productions select: [ :p | p name = name ].\r\t\tproduction := occurences first.\r\t\t\r\t\t(occurences size > 1 and: [self cacheMakesSense: production ]) ifTrue: [ \r\t\t\toccurences do: [ :o |\r\t\t\t\t"note that we are sharing the same strategy over multiple productions!"\r\t\t\t\tself cache: o production: production.\r\t\t\t] \r\t\t]\r\t].\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1460' ],		#self : OmReference [ '1461' ],		#time : DateAndTime [ '2017-12-12T08:00:10.136992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1461' ],		#self : OmReference [ '1462' ],		#time : DateAndTime [ '2017-12-12T08:00:10.137992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: choice\r\t| productions |\r\tsuper visitChoice: choice.\r\tproductions := OrderedCollection new.\r\r\t(choice children do: [ :c | productions addAll: c firstProductionSet ]).\r\tself assert: (productions allSatisfy: [ :e | e isProduction ]).\r\r\tself cacheProductions: productions\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1462' ],		#self : OmReference [ '1463' ],		#time : DateAndTime [ '2017-12-12T08:00:10.138992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tnode shouldCache ifTrue: [ \r\t\tself cache: node\r\t].\r\tsuper visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1463' ],		#self : OmReference [ '1464' ],		#time : DateAndTime [ '2017-12-12T08:00:10.139992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\tself visit: node island.\r\t\r\tnode isMemoized ifFalse: [ \r\t\tself cache: node island.\r\t\tnode beforeWater boundaryElements do: [ :e | self cache: e ].\r\t\tnode afterWater boundaryElements do: [ :e | self cache: e ].\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1464' ],		#self : OmReference [ '1465' ],		#time : DateAndTime [ '2017-12-12T08:00:10.140992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: sequence\r\t| productions |\r\r\tsuper visitSequence: sequence.\r\t"First child is nullable, i.e. it cannot fail, the cache would be superfluous"\r\tsequence firstChild isNullable ifFalse: [ ^ self ].\r\r\t"so far only for the first two children"\r\tproductions := OrderedCollection new.\r\tproductions\taddAll: (sequence firstChild firstProductionSet).\r\tproductions addAll: (sequence secondChild firstProductionSet).\r\t\r\tself assert: (productions allSatisfy: [ :e | e isProduction ]).\r\t\r\tself cacheProductions: productions',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1465' ],		#self : OmReference [ '1466' ],		#time : DateAndTime [ '2017-12-12T08:00:10.141992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesCache,				#isMetaSide : false			},			#name : #propertySymbol,			#protocol : #accessing,			#sourceCode : 'propertySymbol\r\t^ #contextChanges',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1466' ],		#self : OmReference [ '1467' ],		#time : DateAndTime [ '2017-12-12T08:00:10.142992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'openedResultFor:',			#protocol : #'loop control',			#sourceCode : 'openedResultFor: context\r\t^ PP2CcResult noChange ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1467' ],		#self : OmReference [ '1468' ],		#time : DateAndTime [ '2017-12-12T08:00:10.144992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'sequenceResult:',			#protocol : #visiting,			#sourceCode : 'sequenceResult: node\r\t| childrenResult pushes pops |\r\tchildrenResult := node children collect: [ :child | self visit: child ].\r\t\r\t(childrenResult noneSatisfy: [:result | result isContextChange ]) ifTrue: [  \r\t\t^ PP2CcResult noChange\r\t].\r\r\t(childrenResult anySatisfy: [:result | result isUnknownChange ]) ifTrue: [  \r\t\t^ PP2CcResult change\r\t].\r\r\tpushes := (node children select: [ :child | (self visit: child) isContextPush ]).\r\tpops := (node children select: [ :child | (self visit: child) isContextPop ]).\r\t\r\tpushes size > 1 ifTrue: [ ^ PP2CcResult change ].\r\tpops size > 1 ifTrue: [ ^ PP2CcResult change ].\r\t\r\t((pushes size = 1) and: [ pops size = 0 ]) ifTrue: [  ^ PP2CcResult push\t].\r\t((pops size = 1) and: [ pushes size = 0 ]) ifTrue: [ ^ PP2CcResult pop ].\r\t\r\t(pushes size = 1 and: [ pops size = 1 ]) ifTrue: [ \r\t\t| pushIndex popIndex |\r\t\tpushIndex := node children indexOf: pushes first.\r\t\tpopIndex := node children indexOf: pops first.\r\t\t\r\t\tpushIndex < popIndex ifTrue: [ ^ PP2CcResult noChange  ] ifFalse: [ ^ PP2CcResult change ]\r\t].\r\r\tself error: \'should happen?\'.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1468' ],		#self : OmReference [ '1469' ],		#time : DateAndTime [ '2017-12-12T08:00:10.144992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1469' ],		#self : OmReference [ '1470' ],		#time : DateAndTime [ '2017-12-12T08:00:10.145992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitAdaptable:',			#protocol : #visiting,			#sourceCode : 'visitAdaptable: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange change\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1470' ],		#self : OmReference [ '1471' ],		#time : DateAndTime [ '2017-12-12T08:00:10.146992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1471' ],		#self : OmReference [ '1472' ],		#time : DateAndTime [ '2017-12-12T08:00:10.147992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t| results |\r\t\tresults := node children collect: [:child | self visit: child ].\r\t\tresults asSet size = 1 ifTrue: [ results anyOne ] ifFalse: [  \r\t\t\tPP2CcChange change\r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1472' ],		#self : OmReference [ '1473' ],		#time : DateAndTime [ '2017-12-12T08:00:10.148992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1473' ],		#self : OmReference [ '1474' ],		#time : DateAndTime [ '2017-12-12T08:00:10.149992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tself visit: node child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1474' ],		#self : OmReference [ '1475' ],		#time : DateAndTime [ '2017-12-12T08:00:10.150992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitEnd:',			#protocol : #visiting,			#sourceCode : 'visitEnd: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1475' ],		#self : OmReference [ '1476' ],		#time : DateAndTime [ '2017-12-12T08:00:10.151992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitEndOfInput:',			#protocol : #visiting,			#sourceCode : 'visitEndOfInput: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1476' ],		#self : OmReference [ '1477' ],		#time : DateAndTime [ '2017-12-12T08:00:10.152992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitEpsilon: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1477' ],		#self : OmReference [ '1478' ],		#time : DateAndTime [ '2017-12-12T08:00:10.153992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitFailing:',			#protocol : #visiting,			#sourceCode : 'visitFailing: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1478' ],		#self : OmReference [ '1479' ],		#time : DateAndTime [ '2017-12-12T08:00:10.154992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1479' ],		#self : OmReference [ '1480' ],		#time : DateAndTime [ '2017-12-12T08:00:10.155992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitLiteralObject:',			#protocol : #visiting,			#sourceCode : 'visitLiteralObject: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcResult noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1480' ],		#self : OmReference [ '1481' ],		#time : DateAndTime [ '2017-12-12T08:00:10.156992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitLiteralSequence:',			#protocol : #visiting,			#sourceCode : 'visitLiteralSequence: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1481' ],		#self : OmReference [ '1482' ],		#time : DateAndTime [ '2017-12-12T08:00:10.157992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1482' ],		#self : OmReference [ '1483' ],		#time : DateAndTime [ '2017-12-12T08:00:10.158992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #visiting,			#sourceCode : 'visitMatch: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1483' ],		#self : OmReference [ '1484' ],		#time : DateAndTime [ '2017-12-12T08:00:10.159992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitNonEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitNonEpsilon: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1484' ],		#self : OmReference [ '1485' ],		#time : DateAndTime [ '2017-12-12T08:00:10.160992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1485' ],		#self : OmReference [ '1486' ],		#time : DateAndTime [ '2017-12-12T08:00:10.161992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t| result |\r\t\tresult := self visit: node child.\r\t\t\r\t\tresult isContextChange ifTrue: [  \r\t\t\tPP2CcResult change\r\t\t] ifFalse: [  \r\t\t\tPP2CcResult noChange \r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1486' ],		#self : OmReference [ '1487' ],		#time : DateAndTime [ '2017-12-12T08:00:10.162992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tself error: \'should provide specific implementation, it is usually easy!\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1487' ],		#self : OmReference [ '1488' ],		#time : DateAndTime [ '2017-12-12T08:00:10.163992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitPluggable:',			#protocol : #visiting,			#sourceCode : 'visitPluggable: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t^ PP2CcChange change\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1488' ],		#self : OmReference [ '1489' ],		#time : DateAndTime [ '2017-12-12T08:00:10.164992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitPop:',			#protocol : #visiting,			#sourceCode : 'visitPop: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t(self visit: node child) isContextChange ifFalse: [\r\t\t\tPP2CcChange pop\r\t\t] ifTrue: [  \r\t\t\tPP2CcChange change\r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1489' ],		#self : OmReference [ '1490' ],		#time : DateAndTime [ '2017-12-12T08:00:10.165992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t| result |\r\t\tresult := self visit: node child.\r\t\t\r\t\tresult isContextChange ifTrue: [  \r\t\t\tPP2CcResult change\r\t\t] ifFalse: [  \r\t\t\tPP2CcResult noChange \r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1490' ],		#self : OmReference [ '1491' ],		#time : DateAndTime [ '2017-12-12T08:00:10.166992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitPredicateObject:',			#protocol : #visiting,			#sourceCode : 'visitPredicateObject: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1491' ],		#self : OmReference [ '1492' ],		#time : DateAndTime [ '2017-12-12T08:00:10.166992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitPush:',			#protocol : #visiting,			#sourceCode : 'visitPush: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t(self visit: node child) isContextChange ifFalse: [\r\t\t\tPP2CcChange push\r\t\t] ifTrue: [  \r\t\t\tPP2CcChange change\r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1492' ],		#self : OmReference [ '1493' ],		#time : DateAndTime [ '2017-12-12T08:00:10.167992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t"\r\t\t\tThese two asserts are probably not essential, but I cannot imagine the use case \r\t\t\tright now. If it is the case, the logic should be re-written.\r\t\t"\r\t\tself assert: (self visit: node beforeWater) isContextChange not.\r\t\tself assert: (self visit: node afterWater) isContextChange not.\r\t\t^ self visit: node island\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1493' ],		#self : OmReference [ '1494' ],		#time : DateAndTime [ '2017-12-12T08:00:10.168992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tself sequenceResult: node\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1494' ],		#self : OmReference [ '1495' ],		#time : DateAndTime [ '2017-12-12T08:00:10.169992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1495' ],		#self : OmReference [ '1496' ],		#time : DateAndTime [ '2017-12-12T08:00:10.171992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tself assert: (self visit: node trimmer) isContextChange not.\r\t\tself visit: node child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1496' ],		#self : OmReference [ '1497' ],		#time : DateAndTime [ '2017-12-12T08:00:10.171992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitWater:',			#protocol : #visiting,			#sourceCode : 'visitWater: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\tself assert: (self visit: node waterToken) isContextChange not.\r\t\tself assert: (self visit: node boundary) isContextChange not.\r\t\tPP2CcChange noChange \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1497' ],		#self : OmReference [ '1498' ],		#time : DateAndTime [ '2017-12-12T08:00:10.172992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitWrapping:',			#protocol : #visiting,			#sourceCode : 'visitWrapping: node\r\t^ node propertyAt: #contextChanges ifAbsent: [ \r\t\t^ PP2CcChange change\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1498' ],		#self : OmReference [ '1499' ],		#time : DateAndTime [ '2017-12-12T08:00:10.173992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1499' ],		#self : OmReference [ '1500' ],		#time : DateAndTime [ '2017-12-12T08:00:10.174992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: node\r\tnode child contextChanges isNotContextChange ifTrue: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new.\r\t\t^ \tsuper visitAnd: node.\r\t].\r\r\tnode child contextChanges isContextPop ifTrue: [ \r\t\tnode memoizationStrategy: PP2PopMemoization new.\r\t\t^ \tsuper visitAnd: node.\r\t].\r\r\tnode child contextChanges isContextPush ifTrue: [ \r\t\tnode memoizationStrategy: PP2PushMemoization new.\r\t\t^ \tsuper visitAnd: node.\r\t].\r\r\t^ \tsuper visitAnd: node.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1500' ],		#self : OmReference [ '1501' ],		#time : DateAndTime [ '2017-12-12T08:00:10.175992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: node\r\tnode contextChanges isContextChange ifFalse: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new\r\t].\r\tsuper visitFlatten: node.\r\t\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1501' ],		#self : OmReference [ '1502' ],		#time : DateAndTime [ '2017-12-12T08:00:10.176992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #visiting,			#sourceCode : 'visitMatch: node\r\tnode child contextChanges isNotContextChange ifTrue: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new\r\t].\r\r\t^ \tsuper visitWater: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1502' ],		#self : OmReference [ '1503' ],		#time : DateAndTime [ '2017-12-12T08:00:10.177992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitNonEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitNonEpsilon: node\r\tnode child contextChanges isNotContextChange ifTrue: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new.\r\t\t^ \tsuper visitAnd: node.\r\t].\r\r\t^ \tsuper visitAnd: node.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1503' ],		#self : OmReference [ '1504' ],		#time : DateAndTime [ '2017-12-12T08:00:10.178992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\tnode contextChanges isContextChange ifFalse: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new\r\t].\r\r\t^ \tsuper visitSea: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1504' ],		#self : OmReference [ '1505' ],		#time : DateAndTime [ '2017-12-12T08:00:10.179992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\t(node children noneSatisfy: [:child | child contextChanges isContextChange ]) ifTrue: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new.\r\t\t^ \tsuper visitSequence: node\r\t].\r\r\tnode contextChanges isContextPop ifTrue: [ \r\t\tnode memoizationStrategy: PP2PopMemoization new.\r\t\t^ \tsuper visitSequence: node\r\t].\r\r\tnode contextChanges isContextPush ifTrue: [ \r\t\tnode memoizationStrategy: PP2PushMemoization new.\r\t\t^ \tsuper visitSequence: node\r\t].\r\r\t((node children anySatisfy: [ :child | child contextChanges isContextChange  ]) and: [\r\t  node contextChanges isNotContextChange ]) ifTrue: [ \r\t\t\t"JK: PUSH-POP case, can be handled by the PushMemoization, let me know if not :)"\r\t\t\tnode memoizationStrategy: PP2PushMemoization new.\r\t\t\t^ \tsuper visitSequence: node\r\t].\r\r\r\t^ \tsuper visitSequence: node\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1505' ],		#self : OmReference [ '1506' ],		#time : DateAndTime [ '2017-12-12T08:00:10.181992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitor,				#isMetaSide : false			},			#name : #'visitWater:',			#protocol : #visiting,			#sourceCode : 'visitWater: node\r\tnode waterToken contextChanges isContextChange ifFalse: [ \r\t\tnode memoizationStrategy: PP2CFMemoization new\r\t].\r\r\t^ \tsuper visitWater: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1506' ],		#self : OmReference [ '1507' ],		#time : DateAndTime [ '2017-12-12T08:00:10.182992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityCache,				#isMetaSide : false			},			#name : #propertySymbol,			#protocol : #accessing,			#sourceCode : 'propertySymbol\r\t^ #isContextSensitive',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1507' ],		#self : OmReference [ '1508' ],		#time : DateAndTime [ '2017-12-12T08:00:10.183992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitor,				#isMetaSide : false			},			#name : #'openedResultFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'openedResultFor: context\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1508' ],		#self : OmReference [ '1509' ],		#time : DateAndTime [ '2017-12-12T08:00:10.184992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitor,				#isMetaSide : false			},			#name : #'sequenceResult:',			#protocol : #'as yet unclassified',			#sourceCode : 'sequenceResult: node\r\t| pushes matches pushIndex matchIndices childrenResult |\r\tchildrenResult := node children collect: [ :child | child -> (self  visit: child) ].\r\t\r\tpushes := node children select: [ :child | child contextChanges isContextPush ].\r\tmatches := childrenResult select: [ :assoc | assoc value ] thenCollect: #key.\r\t\r\tmatches isEmpty ifTrue: [ ^ false ].\r\tpushes isEmpty ifTrue: [ ^ true ].\r\t"probably can better here"\r\tpushes size > 1 ifTrue: [ ^ true ].\r\r\t"\t\r\t\tJK: The idea here is, if there is a match after push, the result of the whole sequence \r\t\tdoes not depend on the stacks, because the match will be compared to the value from push.\r\t\t\r\t\tE.g.  \r\t\tself assert: (#letter asPParser push, #letter asPParser match) isContextFree\r\t"\t\r\tmatchIndices := matches collect: [ :match | node children indexOf: match ].\r\tpushIndex := node children indexOf: pushes anyOne.\r\t\r\t^ matchIndices anySatisfy: [ :i | i < pushIndex ].\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1509' ],		#self : OmReference [ '1510' ],		#time : DateAndTime [ '2017-12-12T08:00:10.185992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #'as yet unclassified',			#sourceCode : 'visitMatch: node\r\t^ node propertyAt: #isContextSensitive ifAbsent: [ \r\t\ttrue\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1510' ],		#self : OmReference [ '1511' ],		#time : DateAndTime [ '2017-12-12T08:00:10.186992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #'as yet unclassified',			#sourceCode : 'visitPP2Node: node\r\t^ node propertyAt: #isContextSensitive ifAbsent: [ \r\t\tnode children anySatisfy: [:child | self visit: child ]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1511' ],		#self : OmReference [ '1512' ],		#time : DateAndTime [ '2017-12-12T08:00:10.187992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #'as yet unclassified',			#sourceCode : 'visitSequence: node\r\t^ node propertyAt: #isContextSensitive ifAbsent: [ \r\t\tsuper visitSequence: node.\r\t\tself sequenceResult: node\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1512' ],		#self : OmReference [ '1513' ],		#time : DateAndTime [ '2017-12-12T08:00:10.188992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitor,				#isMetaSide : false			},			#name : #'visitTerminal:',			#protocol : #'as yet unclassified',			#sourceCode : 'visitTerminal: node\r\t^ node propertyAt: #isContextSensitive ifAbsent: [ \r\t\tfalse\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1513' ],		#self : OmReference [ '1514' ],		#time : DateAndTime [ '2017-12-12T08:00:10.189992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstProductionSetCache,				#isMetaSide : false			},			#name : #'afterAccept:result:',			#protocol : #hooks,			#sourceCode : 'afterAccept: ctx result: result\r\tctx node propertyAt: #firstProductionSet ifAbsentPut: result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1514' ],		#self : OmReference [ '1515' ],		#time : DateAndTime [ '2017-12-12T08:00:10.190992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstProductionSetCache,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t| allNodes child |\r\tself visit: node.\r\tallNodes := node allNodes.\r\t\r\t[child := allNodes detect: [ :e | (e hasProperty: #firstProductionSet) not ] \r\t\t\t\t\t\t\tifNone: [ nil ] ] whileNotNil: [ \t\t\r\t\tself visit: child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1515' ],		#self : OmReference [ '1516' ],		#time : DateAndTime [ '2017-12-12T08:00:10.191992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstProductionSetCache,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tpredicateBlock := [ :e | e isProduction  ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1516' ],		#self : OmReference [ '1517' ],		#time : DateAndTime [ '2017-12-12T08:00:10.192992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetCache,				#isMetaSide : false			},			#name : #propertySymbol,			#protocol : #'as yet unclassified',			#sourceCode : 'propertySymbol\r\t^ #firstSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1517' ],		#self : OmReference [ '1518' ],		#time : DateAndTime [ '2017-12-12T08:00:10.193992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #firstSet,			#protocol : #'instance creation',			#sourceCode : 'firstSet\r\t^ self on: [ :e | e isFirstSetTerminal ] on: [ :e | e isFirstSetTerminal ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1518' ],		#self : OmReference [ '1519' ],		#time : DateAndTime [ '2017-12-12T08:00:10.194992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^ self firstSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1519' ],		#self : OmReference [ '1520' ],		#time : DateAndTime [ '2017-12-12T08:00:10.195992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aBlock\r\t^ self basicNew initialize \r\t\tterminalBlock: aBlock;\r\t\tpredicateBlock: aBlock;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1520' ],		#self : OmReference [ '1521' ],		#time : DateAndTime [ '2017-12-12T08:00:10.196992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #'on:on:',			#protocol : #'instance creation',			#sourceCode : 'on: terminalBlock on: predicateBlock\r\t^ self basicNew \r\t\tterminalBlock: terminalBlock;\r\t\tpredicateBlock: predicateBlock;\r\t\tinitialize;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1521' ],		#self : OmReference [ '1522' ],		#time : DateAndTime [ '2017-12-12T08:00:10.197992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #productionSet,			#protocol : #'instance creation',			#sourceCode : 'productionSet\r\t^ self on: [ :e | e isFirstSetTerminal ] on: [ :e | e isProduction ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1522' ],		#self : OmReference [ '1523' ],		#time : DateAndTime [ '2017-12-12T08:00:10.198992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #seasOrTerminalsSet,			#protocol : #'instance creation',			#sourceCode : 'seasOrTerminalsSet\r\t^ self \r\t\ton: [ :e | e isSea or: [ e isFirstSetTerminal ] ] \r\t\ton: [ :e | e isSea or: [ e isFirstSetTerminal ] ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1523' ],		#self : OmReference [ '1524' ],		#time : DateAndTime [ '2017-12-12T08:00:10.199992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2FirstSetVisitor class',				#isMetaSide : true			},			#name : #tokenSet,			#protocol : #'instance creation',			#sourceCode : 'tokenSet\r\t^ self on: [ :e | e isToken or: [ e isFirstSetTerminal  ] ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1524' ],		#self : OmReference [ '1525' ],		#time : DateAndTime [ '2017-12-12T08:00:10.200992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'addIfPossible:to:',			#protocol : #support,			#sourceCode : 'addIfPossible: node to: collection\r\tHalt if: [ node isKindOf: PP2CompositeNode  ].\r\t(predicateBlock value: node) ifTrue: [ collection add: node ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1525' ],		#self : OmReference [ '1526' ],		#time : DateAndTime [ '2017-12-12T08:00:10.201992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tleftRecursionAllowed := false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1526' ],		#self : OmReference [ '1527' ],		#time : DateAndTime [ '2017-12-12T08:00:10.202992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'isTerminal:',			#protocol : #testing,			#sourceCode : 'isTerminal: node\r\t^ terminalBlock value: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1527' ],		#self : OmReference [ '1528' ],		#time : DateAndTime [ '2017-12-12T08:00:10.203992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'openedResultFor:',			#protocol : #'loop control',			#sourceCode : 'openedResultFor: context\r\tleftRecursionAllowed ifTrue: [ \r\t\t^ super openedResultFor: context\r\t].\r\r\r\t"\r\t\tJK: I am not 100% sure, but this should never happen. If this happens, the grammar\r\t\t    contains an infinite loop.\r\t"\r\tself error: \'There seems to be a left recursive loop in your grammar!\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1528' ],		#self : OmReference [ '1529' ],		#time : DateAndTime [ '2017-12-12T08:00:10.204992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #predicateBlock,			#protocol : #accessing,			#sourceCode : 'predicateBlock\r\t^ predicateBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1529' ],		#self : OmReference [ '1530' ],		#time : DateAndTime [ '2017-12-12T08:00:10.205992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'predicateBlock:',			#protocol : #accessing,			#sourceCode : 'predicateBlock: anObject\r\tpredicateBlock := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1530' ],		#self : OmReference [ '1531' ],		#time : DateAndTime [ '2017-12-12T08:00:10.206992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'setWithPossible:',			#protocol : #support,			#sourceCode : 'setWithPossible: node \r\t^ self setWithPossible: node withAll: #()',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1531' ],		#self : OmReference [ '1532' ],		#time : DateAndTime [ '2017-12-12T08:00:10.207992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'setWithPossible:withAll:',			#protocol : #support,			#sourceCode : 'setWithPossible: node withAll: aCollection\r\t| set |\r\tset := IdentitySet withAll: aCollection.\r\t\r\t(predicateBlock value: node) ifTrue: [ \r\t\tset add: node\r\t].\r\r\t^ set',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1532' ],		#self : OmReference [ '1533' ],		#time : DateAndTime [ '2017-12-12T08:00:10.207992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #terminalBlock,			#protocol : #accessing,			#sourceCode : 'terminalBlock\r\t^ terminalBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1533' ],		#self : OmReference [ '1534' ],		#time : DateAndTime [ '2017-12-12T08:00:10.208992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'terminalBlock:',			#protocol : #accessing,			#sourceCode : 'terminalBlock: aBlock\r\tterminalBlock := aBlock',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1534' ],		#self : OmReference [ '1535' ],		#time : DateAndTime [ '2017-12-12T08:00:10.209992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1535' ],		#self : OmReference [ '1536' ],		#time : DateAndTime [ '2017-12-12T08:00:10.210992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitAdaptable:',			#protocol : #visiting,			#sourceCode : 'visitAdaptable: node\r\t| set |\r\tset := (self setWithPossible: node).\r\r\t"Node can be adpated to anything"\r\tself addIfPossible: #any asPParser to: set.\r\t"We don\'t know if Epsilon is possible or not so we rather add it"\r\tself addIfPossible: PP2EpsilonNode instance to: set.\r\t\r\t^ set',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1536' ],		#self : OmReference [ '1537' ],		#time : DateAndTime [ '2017-12-12T08:00:10.212992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1537' ],		#self : OmReference [ '1538' ],		#time : DateAndTime [ '2017-12-12T08:00:10.212992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: node\r\t| returnSet |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\t\r\treturnSet := self setWithPossible: node.\r\tnode children do: [ :child | \r\t\treturnSet addAll: (self visit: child).\r\t].\r\r\t^ returnSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1538' ],		#self : OmReference [ '1539' ],		#time : DateAndTime [ '2017-12-12T08:00:10.213992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: node\r\t^ self visitDelegate: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1539' ],		#self : OmReference [ '1540' ],		#time : DateAndTime [ '2017-12-12T08:00:10.214992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\t^ self setWithPossible: node withAll: (self visit: node child) \r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1540' ],		#self : OmReference [ '1541' ],		#time : DateAndTime [ '2017-12-12T08:00:10.215992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitEnd:',			#protocol : #visiting,			#sourceCode : 'visitEnd: node\r\t^ self visitDelegate: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1541' ],		#self : OmReference [ '1542' ],		#time : DateAndTime [ '2017-12-12T08:00:10.216992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitEndOfInput:',			#protocol : #visiting,			#sourceCode : 'visitEndOfInput: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tself warn: \'guess you have some issues with your terminal block\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1542' ],		#self : OmReference [ '1543' ],		#time : DateAndTime [ '2017-12-12T08:00:10.217992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitEpsilon: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tself warn: \'guess you have some issues with your terminal block\'\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1543' ],		#self : OmReference [ '1544' ],		#time : DateAndTime [ '2017-12-12T08:00:10.218992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitFailing:',			#protocol : #visiting,			#sourceCode : 'visitFailing: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tself warn: \'guess you have some issues with your terminal block\'\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1544' ],		#self : OmReference [ '1545' ],		#time : DateAndTime [ '2017-12-12T08:00:10.219992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\t^ self setWithPossible: node withAll: (self visit: node child) \r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1545' ],		#self : OmReference [ '1546' ],		#time : DateAndTime [ '2017-12-12T08:00:10.220992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitLiteralObject:',			#protocol : #visiting,			#sourceCode : 'visitLiteralObject: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tself warn: \'guess you have some issues with your terminal block\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1546' ],		#self : OmReference [ '1547' ],		#time : DateAndTime [ '2017-12-12T08:00:10.221992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitLiteralSequence:',			#protocol : #visiting,			#sourceCode : 'visitLiteralSequence: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tself warn: \'guess you have some issues with your terminal block\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1547' ],		#self : OmReference [ '1548' ],		#time : DateAndTime [ '2017-12-12T08:00:10.222992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\t^ self setWithPossible: node withAll: (self visit: node child) \r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1548' ],		#self : OmReference [ '1549' ],		#time : DateAndTime [ '2017-12-12T08:00:10.223992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #visiting,			#sourceCode : 'visitMatch: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1549' ],		#self : OmReference [ '1550' ],		#time : DateAndTime [ '2017-12-12T08:00:10.224992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitNonEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitNonEpsilon: node\r\t| set |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tset := (self setWithPossible: node).\r\tset addAll: (self visit: node child).\r\tset remove: PP2EpsilonNode instance ifAbsent: nil.\r\t\r\t^ set',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1550' ],		#self : OmReference [ '1551' ],		#time : DateAndTime [ '2017-12-12T08:00:10.225992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: node\r\t^ self visitDelegate: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1551' ],		#self : OmReference [ '1552' ],		#time : DateAndTime [ '2017-12-12T08:00:10.226992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: node\r\t| set |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tset := (self setWithPossible: node).\r\tset addAll: (self visit: node child).\r\tself addIfPossible: PP2EpsilonNode instance to: set.\r\t\r\t^ set',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1552' ],		#self : OmReference [ '1553' ],		#time : DateAndTime [ '2017-12-12T08:00:10.227992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tself error: \'should provide specific implementation\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1553' ],		#self : OmReference [ '1554' ],		#time : DateAndTime [ '2017-12-12T08:00:10.228992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitPluggable:',			#protocol : #visiting,			#sourceCode : 'visitPluggable: node\r\t^ self visitDelegate: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1554' ],		#self : OmReference [ '1555' ],		#time : DateAndTime [ '2017-12-12T08:00:10.228992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitPop:',			#protocol : #visiting,			#sourceCode : 'visitPop: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1555' ],		#self : OmReference [ '1556' ],		#time : DateAndTime [ '2017-12-12T08:00:10.229992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: node\r\t| set |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tset := self setWithPossible: node withAll: (self visit: node child).\r\r\t(node min = 0) ifTrue: [ \r\t\tself addIfPossible: PP2EpsilonNode instance to: set.\r\t].\r\r\t^ set',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1556' ],		#self : OmReference [ '1557' ],		#time : DateAndTime [ '2017-12-12T08:00:10.231992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitPredicateObject:',			#protocol : #visiting,			#sourceCode : 'visitPredicateObject: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tself warn: \'guess you have some issues with your terminal block\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1557' ],		#self : OmReference [ '1558' ],		#time : DateAndTime [ '2017-12-12T08:00:10.232992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitPush:',			#protocol : #visiting,			#sourceCode : 'visitPush: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1558' ],		#self : OmReference [ '1559' ],		#time : DateAndTime [ '2017-12-12T08:00:10.233992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\t| returnSet |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\treturnSet := (self setWithPossible: node).\r\treturnSet addAll: (self visit: node beforeWater).\r\treturnSet removeAllSuchThat: [ :e | e = #eoi asPParser ].\r\treturnSet addAll: (self visit: node island).\r\tnode island isNullable ifTrue: [ \r\t\treturnSet addAll: (self visit: node afterWater).\r\t].\r\t\t\r\t^ returnSet reject: [ :e | e isEpsilon ] ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1559' ],		#self : OmReference [ '1560' ],		#time : DateAndTime [ '2017-12-12T08:00:10.234992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\t| returnSet |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\treturnSet := self setWithPossible: node.\r\tnode children do: [ :child | \r\t\treturnSet addAll: (self visit: child).\r\t\tchild isNullable ifFalse: [ ^ returnSet reject: [ :e | e isEpsilon ] ]\r\t].\r\r\tself addIfPossible: PP2EpsilonNode instance to: returnSet.\r\t^ returnSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1560' ],		#self : OmReference [ '1561' ],		#time : DateAndTime [ '2017-12-12T08:00:10.235992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitStartOfLine:',			#protocol : #visiting,			#sourceCode : 'visitStartOfLine: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\t\r\tself warn: \'guess you have some issues with your terminal block\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1561' ],		#self : OmReference [ '1562' ],		#time : DateAndTime [ '2017-12-12T08:00:10.235992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: node\r\t^ self visitDelegate: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1562' ],		#self : OmReference [ '1563' ],		#time : DateAndTime [ '2017-12-12T08:00:10.236992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\t^ (self setWithPossible: node) \r\t\taddAll: ((self visit: node trimmer) reject: [ :e | e isEpsilon ]);\r\t\taddAll: (self visit: node child);\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1563' ],		#self : OmReference [ '1564' ],		#time : DateAndTime [ '2017-12-12T08:00:10.237992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitWater:',			#protocol : #visiting,			#sourceCode : 'visitWater: node\r\t| retval lrStatus |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\tlrStatus := leftRecursionAllowed.\r\tleftRecursionAllowed := true.\r\r\tretval := (self setWithPossible: node) \r\t\taddAll: (self visit: node waterToken);\r\t\taddAll: (self visit: node boundary);\r\t\tyourself.\r\t\t\r\tleftRecursionAllowed := lrStatus.\t\r\t\t\r\t^ retval',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1564' ],		#self : OmReference [ '1565' ],		#time : DateAndTime [ '2017-12-12T08:00:10.238992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitWrapping:',			#protocol : #visiting,			#sourceCode : 'visitWrapping: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1565' ],		#self : OmReference [ '1566' ],		#time : DateAndTime [ '2017-12-12T08:00:10.239992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'warn:',			#protocol : #warnings,			#sourceCode : 'warn: aMessage\r\tTranscript crShow: aMessage.\r\tself error: \'this should not really happen.\'.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1566' ],		#self : OmReference [ '1567' ],		#time : DateAndTime [ '2017-12-12T08:00:10.241992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'classificationFor:',			#protocol : #support,			#sourceCode : 'classificationFor: node\r\t| classification charSet firstSet |\r\tclassification := Array new: 255 withAll: false.\r\r\tfirstSet := node firstSet.\r\tfirstSet do: [ :first |  \r\t\tcharSet := first firstCharSet.\r\t\t\r\t\tcharSet isUnknown ifTrue: [ ^ anythingClassification  ].\r\t\t\r\t\tcharSet classification withIndexDo: [ :value :index |  \r\t\t\tvalue ifTrue: [ classification at: index put: true ]\r\t\t]\r\t].\r\r\t^ classification',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1567' ],		#self : OmReference [ '1568' ],		#time : DateAndTime [ '2017-12-12T08:00:10.241992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\tself visit: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1568' ],		#self : OmReference [ '1569' ],		#time : DateAndTime [ '2017-12-12T08:00:10.242992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'guardOf:makesSenseFor:',			#protocol : #support,			#sourceCode : 'guardOf: classification makesSenseFor: node\r\t| size allNodesSize |\r\tallNodesSize := node propertyAt: #allNodesSize ifAbsentPut: [ node allNodes size ].\r\t\r\t"if there are too little children, the overhead of a guard is too high"\r\t(allNodesSize < 4) ifTrue: [ ^ false ].\r\r\tsize := ((1 to: 255) \tcollect: [ :index | classification at: index ]\r\t\t\t\t\t\t\t  \tthenSelect: [ :e | e ]) size.\r\r\t"if guard passes for so many characters, it is probably(!!!) better not to guard"\r\t(size > 250) ifTrue: [ ^ false ].\r\t\t\t\t\t\t\t\t\r\t"for small parsers"\r\t(allNodesSize < 20 and: [size > 128 ]) ifTrue: [ ^ false ].\r\t\r\t\r\t"It is already guarded"\r\t(self isWellGuarded: classification) ifTrue: [ ^ false ].\r\t\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1569' ],		#self : OmReference [ '1570' ],		#time : DateAndTime [ '2017-12-12T08:00:10.243992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tanythingClassification := (Array new: 255 withAll: true).\r\tguarded := Stack with: anythingClassification.\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1570' ],		#self : OmReference [ '1571' ],		#time : DateAndTime [ '2017-12-12T08:00:10.244992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #isGuarded,			#protocol : #testing,			#sourceCode : 'isGuarded\r\t^ guarded isEmpty',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1571' ],		#self : OmReference [ '1572' ],		#time : DateAndTime [ '2017-12-12T08:00:10.245992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'isWellGuarded:',			#protocol : #testing,			#sourceCode : 'isWellGuarded: classification\r\t| topClassification changes |\r\ttopClassification := guarded top.\r\tchanges := 0.\r\t\r\ttopClassification with: classification do: [ :topC :localC |\r\t\tlocalC ifTrue: [ self assert: topC ].\r\r\t\t"is single change enough?"\t\t\r\t\t(topC and: localC not) ifTrue: [  \r\t\t\tchanges := changes + 1.\r\t\t].\t\r\t].\r\r\r\t^ changes == 0\r\t"\r\t\t(DiffMorph \r\t\tfrom: (topClassification joinUsing: Character lf) \r\t\tto: (classification joinUsing: Character lf)) openInWindow\r\t"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1572' ],		#self : OmReference [ '1573' ],		#time : DateAndTime [ '2017-12-12T08:00:10.246992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visit:guardedWith:',			#protocol : #support,			#sourceCode : 'visit: node guardedWith: classification\r\tguarded push: classification.\r\tself visit: node.\r\tguarded pop.\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1573' ],		#self : OmReference [ '1574' ],		#time : DateAndTime [ '2017-12-12T08:00:10.247992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: node\r\t| alternatives classification |\r\r\talternatives := node children.\r\r\talternatives do: [ :alternative | \r\t\tclassification := self classificationFor: alternative.\r\t\t(self guardOf: classification makesSenseFor: alternative) ifTrue: [  \r\t\t\talternative strategy: (alternative strategy parsingGuard: classification).\r\t\t\tself visit: alternative guardedWith: classification\r\t\t] ifFalse: [  \r\t\t\tself visit: alternative\r\t\t]\r\t].\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1574' ],		#self : OmReference [ '1575' ],		#time : DateAndTime [ '2017-12-12T08:00:10.248992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: node\r\t| classification |\r\t(node children size = 1) ifFalse: [ ^ super visitDelegate: node ].\r\t\r\tclassification := self classificationFor: node.\r\t(self guardOf: classification makesSenseFor: node) ifTrue: [  \r\t\tnode strategy: (node strategy parsingGuard: classification).\r\t\tself visit: node child guardedWith: classification\r\t] ifFalse: [  \r\t\tself visit: node child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1575' ],		#self : OmReference [ '1576' ],		#time : DateAndTime [ '2017-12-12T08:00:10.249992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: node\r\t| classification |\r\r\t"we get classification for the child, because classification for myself contains contains only \'true\'"\r\tclassification := self classificationFor: node child.\r\t(self guardOf: classification makesSenseFor: node) ifTrue: [  \r\t\tnode strategy: (node strategy parsingGuard: classification).\r\t\tself visit: node child guardedWith: classification\r\t] ifFalse: [\r\t\tself visit: node child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1576' ],		#self : OmReference [ '1577' ],		#time : DateAndTime [ '2017-12-12T08:00:10.250992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: node\r\t| classification |\r\t\r\tclassification := self classificationFor: node child.\r\t(self guardOf: classification makesSenseFor: node) ifTrue: [ \r\t\tnode strategy: (node strategy parsingGuard: classification).\r\t].\r\t\r\t"repetition is kind of sequence, so all but first are not really guarded"\r\tself visitUnguarded: node child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1577' ],		#self : OmReference [ '1578' ],		#time : DateAndTime [ '2017-12-12T08:00:10.251992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\tself visit: node firstChild.\r\t\r\tnode children allButFirst do: [ :child |\r\t\tself visitUnguarded: child.\r\t].\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1578' ],		#self : OmReference [ '1579' ],		#time : DateAndTime [ '2017-12-12T08:00:10.252992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\t| trimmerClassification topClassification childClassification |\r\ttrimmerClassification := self classificationFor: node trimmer.\r\tchildClassification := self classificationFor: node child. \r\r\ttopClassification := guarded top copy.\r\t\r\t1 to: 255 do: [ :index |\r\t\t| topC trimC childC |\r\t\ttopC := topClassification at: index.\r\t\ttrimC := trimmerClassification at: index.\r\t\tchildC := childClassification at: index.\r\t\t\r\t\t"child is not, but top is"\r\t\t(childC not and: topC) ifTrue: [  \r\t\t\t"actually, caused by trimmer"\r\t\t\ttrimC ifTrue: [ topClassification at: index put: false ]\r\t\t]\r\t].\r\t"visit the child without the classification caused by trimmer"\r\tself visit: node child guardedWith: topClassification',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1579' ],		#self : OmReference [ '1580' ],		#time : DateAndTime [ '2017-12-12T08:00:10.253992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitor,				#isMetaSide : false			},			#name : #'visitUnguarded:',			#protocol : #support,			#sourceCode : 'visitUnguarded: node\r\t^ self visit: node guardedWith: anythingClassification ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1580' ],		#self : OmReference [ '1581' ],		#time : DateAndTime [ '2017-12-12T08:00:10.254992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableCache,				#isMetaSide : false			},			#name : #propertySymbol,			#protocol : #optimizations,			#sourceCode : 'propertySymbol\r\t^ #isNullable',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1581' ],		#self : OmReference [ '1582' ],		#time : DateAndTime [ '2017-12-12T08:00:10.255992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'openedResultFor:',			#protocol : #'loop control',			#sourceCode : 'openedResultFor: node\r\t"\r\t\tJK: I am not sure, but this should never happen. If this happens, the grammar \r\t\t\t contains an infinite loop.\r\t\t\t\r\t\t\tIf you think I am wrong, you probably also know what to return (I don\'t).\r\t"\r\tself error: \'There seems to be a left recursive loop in your grammar!\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1582' ],		#self : OmReference [ '1583' ],		#time : DateAndTime [ '2017-12-12T08:00:10.256992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tself visit: node child \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1583' ],		#self : OmReference [ '1584' ],		#time : DateAndTime [ '2017-12-12T08:00:10.257992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitAdaptable:',			#protocol : #visiting,			#sourceCode : 'visitAdaptable: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\t"Be conservative, we don\'t know for sure, so it is safer to report false"\r\t\tfalse\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1584' ],		#self : OmReference [ '1585' ],		#time : DateAndTime [ '2017-12-12T08:00:10.258992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tself visit: node child \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1585' ],		#self : OmReference [ '1586' ],		#time : DateAndTime [ '2017-12-12T08:00:10.259992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tnode children anySatisfy: [ :child | self visit: child  ]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1586' ],		#self : OmReference [ '1587' ],		#time : DateAndTime [ '2017-12-12T08:00:10.260992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tself visit: node child \r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1587' ],		#self : OmReference [ '1588' ],		#time : DateAndTime [ '2017-12-12T08:00:10.261992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tself visit: node child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1588' ],		#self : OmReference [ '1589' ],		#time : DateAndTime [ '2017-12-12T08:00:10.262992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitEnd:',			#protocol : #visiting,			#sourceCode : 'visitEnd: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tself visit: node child\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1589' ],		#self : OmReference [ '1590' ],		#time : DateAndTime [ '2017-12-12T08:00:10.263992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitEndOfInput:',			#protocol : #visiting,			#sourceCode : 'visitEndOfInput: node\r\t^ false\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1590' ],		#self : OmReference [ '1591' ],		#time : DateAndTime [ '2017-12-12T08:00:10.264992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitEpsilon: node\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1591' ],		#self : OmReference [ '1592' ],		#time : DateAndTime [ '2017-12-12T08:00:10.265992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitFailing:',			#protocol : #visiting,			#sourceCode : 'visitFailing: node\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1592' ],		#self : OmReference [ '1593' ],		#time : DateAndTime [ '2017-12-12T08:00:10.266992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1593' ],		#self : OmReference [ '1594' ],		#time : DateAndTime [ '2017-12-12T08:00:10.267992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitLiteralObject:',			#protocol : #visiting,			#sourceCode : 'visitLiteralObject: node\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1594' ],		#self : OmReference [ '1595' ],		#time : DateAndTime [ '2017-12-12T08:00:10.268992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitLiteralSequence:',			#protocol : #visiting,			#sourceCode : 'visitLiteralSequence: node\r\t^ node literal isEmpty',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1595' ],		#self : OmReference [ '1596' ],		#time : DateAndTime [ '2017-12-12T08:00:10.268992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1596' ],		#self : OmReference [ '1597' ],		#time : DateAndTime [ '2017-12-12T08:00:10.270992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #visiting,			#sourceCode : 'visitMatch: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1597' ],		#self : OmReference [ '1598' ],		#time : DateAndTime [ '2017-12-12T08:00:10.271992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitNonEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitNonEpsilon: node\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1598' ],		#self : OmReference [ '1599' ],		#time : DateAndTime [ '2017-12-12T08:00:10.272992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tfalse\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1599' ],		#self : OmReference [ '1600' ],		#time : DateAndTime [ '2017-12-12T08:00:10.272992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: node\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1600' ],		#self : OmReference [ '1601' ],		#time : DateAndTime [ '2017-12-12T08:00:10.273992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tself error: \'should provide specific implementation\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1601' ],		#self : OmReference [ '1602' ],		#time : DateAndTime [ '2017-12-12T08:00:10.274992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitPluggable:',			#protocol : #visiting,			#sourceCode : 'visitPluggable: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\t"Be conservative, we dont know for sure, so it is safer to report true"\r\t\tfalse\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1602' ],		#self : OmReference [ '1603' ],		#time : DateAndTime [ '2017-12-12T08:00:10.275992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitPop:',			#protocol : #visiting,			#sourceCode : 'visitPop: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1603' ],		#self : OmReference [ '1604' ],		#time : DateAndTime [ '2017-12-12T08:00:10.276992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\t(node min == 0) ifTrue: [\r\t\t\ttrue\r\t\t] ifFalse: [ \r\t\t\tself visit: node child\r\t\t]\r\t]\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1604' ],		#self : OmReference [ '1605' ],		#time : DateAndTime [ '2017-12-12T08:00:10.277992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitPredicateObject:',			#protocol : #visiting,			#sourceCode : 'visitPredicateObject: node\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1605' ],		#self : OmReference [ '1606' ],		#time : DateAndTime [ '2017-12-12T08:00:10.278992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitPush:',			#protocol : #visiting,			#sourceCode : 'visitPush: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1606' ],		#self : OmReference [ '1607' ],		#time : DateAndTime [ '2017-12-12T08:00:10.279992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\t^ self visit: node island',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1607' ],		#self : OmReference [ '1608' ],		#time : DateAndTime [ '2017-12-12T08:00:10.280992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\tnode children allSatisfy: [ :child | self visit: child  ]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1608' ],		#self : OmReference [ '1609' ],		#time : DateAndTime [ '2017-12-12T08:00:10.281992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitStartOfLine:',			#protocol : #visiting,			#sourceCode : 'visitStartOfLine: node\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1609' ],		#self : OmReference [ '1610' ],		#time : DateAndTime [ '2017-12-12T08:00:10.282992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1610' ],		#self : OmReference [ '1611' ],		#time : DateAndTime [ '2017-12-12T08:00:10.283992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1611' ],		#self : OmReference [ '1612' ],		#time : DateAndTime [ '2017-12-12T08:00:10.284992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitWater:',			#protocol : #visiting,			#sourceCode : 'visitWater: node\r\t^ self visit: node boundary',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1612' ],		#self : OmReference [ '1613' ],		#time : DateAndTime [ '2017-12-12T08:00:10.285992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitWrapping:',			#protocol : #visiting,			#sourceCode : 'visitWrapping: node\r\t^ node propertyAt: #isNullable ifAbsent: [ \r\t\t"Be conservative, we don\'t know for sure, so it is safer to report false"\r\t\tnode doesFunctionalChanges ifTrue: [ false ] ifFalse: [ \r\t\t\tself visit: node child.\r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1613' ],		#self : OmReference [ '1614' ],		#time : DateAndTime [ '2017-12-12T08:00:10.286992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'add:to:',			#protocol : #accessing,			#sourceCode : 'add: aPP2Node to: node\r\t| nextSet |\r\tnextSet := nextSets at: node ifAbsentPut: [ IdentitySet new ].\r\t(nextSets at: node) add: aPP2Node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1614' ],		#self : OmReference [ '1615' ],		#time : DateAndTime [ '2017-12-12T08:00:10.287992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'addAll:to:',			#protocol : #accessing,			#sourceCode : 'addAll: aCollection to: node\r\t| nextSet |\r\tnextSet := nextSets at: node ifAbsentPut: [ IdentitySet new ].\r\t(nextSets at: node) addAll: aCollection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1615' ],		#self : OmReference [ '1616' ],		#time : DateAndTime [ '2017-12-12T08:00:10.288992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'context:',			#protocol : #caching,			#sourceCode : 'context: node\r\t^ PP2NextSetsContext new\r\t\tnode: node;\r\t\tcurrentNext: currentNext;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1616' ],		#self : OmReference [ '1617' ],		#time : DateAndTime [ '2017-12-12T08:00:10.289992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\teoi := PP2EndOfInputNode new.\r\tnextSets := IdentityDictionary new.\r\t\r\t"make sure the current next is immutable, otherwise you will have a non-deterministic behaviour"\r\tcurrentNext := IdentitySet with: eoi.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1617' ],		#self : OmReference [ '1618' ],		#time : DateAndTime [ '2017-12-12T08:00:10.290992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'nextSetFor:',			#protocol : #accessing,			#sourceCode : 'nextSetFor: node\r\t^ nextSets at: node ifAbsentPut: [ IdentitySet new ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1618' ],		#self : OmReference [ '1619' ],		#time : DateAndTime [ '2017-12-12T08:00:10.291992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #nextSets,			#protocol : #accessing,			#sourceCode : 'nextSets\r\t^ nextSets',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1619' ],		#self : OmReference [ '1620' ],		#time : DateAndTime [ '2017-12-12T08:00:10.292992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #parentNextSet,			#protocol : #accessing,			#sourceCode : 'parentNextSet\r\tself isRoot ifTrue: [  \r\t\t^ IdentitySet with: eoi\r\t].\r\r\t^ nextSets at: self parentContext node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1620' ],		#self : OmReference [ '1621' ],		#time : DateAndTime [ '2017-12-12T08:00:10.293992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1621' ],		#self : OmReference [ '1622' ],		#time : DateAndTime [ '2017-12-12T08:00:10.293992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitAdaptable:',			#protocol : #visiting,			#sourceCode : 'visitAdaptable: node\r\tself addAll: currentNext to: node.\r\t"should I visit children or not?"\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1622' ],		#self : OmReference [ '1623' ],		#time : DateAndTime [ '2017-12-12T08:00:10.294992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1623' ],		#self : OmReference [ '1624' ],		#time : DateAndTime [ '2017-12-12T08:00:10.295992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitChildrenOf:',			#protocol : #visiting,			#sourceCode : 'visitChildrenOf: node\r\tnode children do: [ :child | self visit: child ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1624' ],		#self : OmReference [ '1625' ],		#time : DateAndTime [ '2017-12-12T08:00:10.296992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitChoice:',			#protocol : #visiting,			#sourceCode : 'visitChoice: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1625' ],		#self : OmReference [ '1626' ],		#time : DateAndTime [ '2017-12-12T08:00:10.297992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitComposite:',			#protocol : #visiting,			#sourceCode : 'visitComposite: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1626' ],		#self : OmReference [ '1627' ],		#time : DateAndTime [ '2017-12-12T08:00:10.298992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitDelegate:',			#protocol : #visiting,			#sourceCode : 'visitDelegate: node\r\tself addAll: currentNext to: node.\r\tself visitChildrenOf: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1627' ],		#self : OmReference [ '1628' ],		#time : DateAndTime [ '2017-12-12T08:00:10.299992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitEnd:',			#protocol : #visiting,			#sourceCode : 'visitEnd: node\r\tself addAll: currentNext to: node.\r\t"TODO JK: not sure if to add #eoi asPParser"\r\tself visitChildrenOf: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1628' ],		#self : OmReference [ '1629' ],		#time : DateAndTime [ '2017-12-12T08:00:10.300992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitEndOfInput:',			#protocol : #visiting,			#sourceCode : 'visitEndOfInput: node\r\tself addAll: currentNext to: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1629' ],		#self : OmReference [ '1630' ],		#time : DateAndTime [ '2017-12-12T08:00:10.301992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitEpsilon: node\r\tself addAll: currentNext to: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1630' ],		#self : OmReference [ '1631' ],		#time : DateAndTime [ '2017-12-12T08:00:10.302992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitFailing:',			#protocol : #visiting,			#sourceCode : 'visitFailing: node\r\tself addAll: currentNext to: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1631' ],		#self : OmReference [ '1632' ],		#time : DateAndTime [ '2017-12-12T08:00:10.303992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1632' ],		#self : OmReference [ '1633' ],		#time : DateAndTime [ '2017-12-12T08:00:10.304992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitLiteralObject:',			#protocol : #visiting,			#sourceCode : 'visitLiteralObject: node\r\tself addAll: currentNext to: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1633' ],		#self : OmReference [ '1634' ],		#time : DateAndTime [ '2017-12-12T08:00:10.305992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitLiteralSequence:',			#protocol : #visiting,			#sourceCode : 'visitLiteralSequence: node\r\tself addAll: currentNext to: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1634' ],		#self : OmReference [ '1635' ],		#time : DateAndTime [ '2017-12-12T08:00:10.306992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1635' ],		#self : OmReference [ '1636' ],		#time : DateAndTime [ '2017-12-12T08:00:10.307992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitMatch:',			#protocol : #visiting,			#sourceCode : 'visitMatch: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1636' ],		#self : OmReference [ '1637' ],		#time : DateAndTime [ '2017-12-12T08:00:10.308992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitNonEpsilon:',			#protocol : #visiting,			#sourceCode : 'visitNonEpsilon: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1637' ],		#self : OmReference [ '1638' ],		#time : DateAndTime [ '2017-12-12T08:00:10.309992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1638' ],		#self : OmReference [ '1639' ],		#time : DateAndTime [ '2017-12-12T08:00:10.310992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1639' ],		#self : OmReference [ '1640' ],		#time : DateAndTime [ '2017-12-12T08:00:10.311992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tself error: \'should provide specific implementation\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1640' ],		#self : OmReference [ '1641' ],		#time : DateAndTime [ '2017-12-12T08:00:10.312992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitPop:',			#protocol : #visiting,			#sourceCode : 'visitPop: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1641' ],		#self : OmReference [ '1642' ],		#time : DateAndTime [ '2017-12-12T08:00:10.313992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: node\r\t| oldNext |\r\tself addAll: currentNext to: node.\r\toldNext := currentNext.\r\tcurrentNext := IdentitySet with: node.\r\tcurrentNext addAll: oldNext.\r\t\r\tself visitChildrenOf: node.\r\t\r\tcurrentNext := oldNext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1642' ],		#self : OmReference [ '1643' ],		#time : DateAndTime [ '2017-12-12T08:00:10.313992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitPredicateObject:',			#protocol : #visiting,			#sourceCode : 'visitPredicateObject: node\r\tself addAll: currentNext to: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1643' ],		#self : OmReference [ '1644' ],		#time : DateAndTime [ '2017-12-12T08:00:10.314992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitPush:',			#protocol : #visiting,			#sourceCode : 'visitPush: node\r\t^ self visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1644' ],		#self : OmReference [ '1645' ],		#time : DateAndTime [ '2017-12-12T08:00:10.315992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1645' ],		#self : OmReference [ '1646' ],		#time : DateAndTime [ '2017-12-12T08:00:10.316992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\t| oldNext |\r\tself addAll: currentNext to: node.\r\toldNext := currentNext.\r\t\t\r\tnode children reversed do: [ :child |\r\t\tself visit: child.\r\t\tchild isNullable ifFalse: [ currentNext := IdentitySet new ].\r\t\tcurrentNext := currentNext copy add: child; yourself\r\t].\r\r\tcurrentNext := oldNext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1646' ],		#self : OmReference [ '1647' ],		#time : DateAndTime [ '2017-12-12T08:00:10.317992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: node\r\tself visitDelegate: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1647' ],		#self : OmReference [ '1648' ],		#time : DateAndTime [ '2017-12-12T08:00:10.319992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\tself addAll: currentNext to: node.\r\tself visit: node child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1648' ],		#self : OmReference [ '1649' ],		#time : DateAndTime [ '2017-12-12T08:00:10.320992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitor,				#isMetaSide : false			},			#name : #'visitWater:',			#protocol : #visiting,			#sourceCode : 'visitWater: node\r\tself addAll: currentNext to: node.\r\tself visitChildrenOf: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1649' ],		#self : OmReference [ '1650' ],		#time : DateAndTime [ '2017-12-12T08:00:10.321992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'afterAccept:result:',			#protocol : #hooks,			#sourceCode : 'afterAccept: context result: result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1650' ],		#self : OmReference [ '1651' ],		#time : DateAndTime [ '2017-12-12T08:00:10.321992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'beforeAccept:',			#protocol : #hooks,			#sourceCode : 'beforeAccept: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1651' ],		#self : OmReference [ '1652' ],		#time : DateAndTime [ '2017-12-12T08:00:10.322992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'cacheResult:for:',			#protocol : #caching,			#sourceCode : 'cacheResult: anObject for: context\r\tcache at: context ifPresent: [ self error: \'already cached\' ].\r\t\r\tcache at: context put: anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1652' ],		#self : OmReference [ '1653' ],		#time : DateAndTime [ '2017-12-12T08:00:10.323992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'cachedResultFor:',			#protocol : #caching,			#sourceCode : 'cachedResultFor: context\r\t^ cache at: context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1653' ],		#self : OmReference [ '1654' ],		#time : DateAndTime [ '2017-12-12T08:00:10.324992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'close:',			#protocol : #'visiting - utilities',			#sourceCode : 'close: context\r\tself assert: (self isOpened: context).\r\tself assert: (self isClosed: context) not.\r\tself assert: (openStack top == context).\r\t\r\topenSet remove: context.\r\topenStack pop.\r\tcloseSet add: context.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1654' ],		#self : OmReference [ '1655' ],		#time : DateAndTime [ '2017-12-12T08:00:10.325992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #closedSet,			#protocol : #accessing,			#sourceCode : 'closedSet\r\t^ closeSet ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1655' ],		#self : OmReference [ '1656' ],		#time : DateAndTime [ '2017-12-12T08:00:10.326992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'context:',			#protocol : #caching,			#sourceCode : 'context: node\r\t^ PP2NoopContext new\r\t\tnode: node;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1656' ],		#self : OmReference [ '1657' ],		#time : DateAndTime [ '2017-12-12T08:00:10.327992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #currentContext,			#protocol : #accessing,			#sourceCode : 'currentContext\r\t^ openStack top',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1657' ],		#self : OmReference [ '1658' ],		#time : DateAndTime [ '2017-12-12T08:00:10.328992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcache := Dictionary new.\r\topenSet := Set new.\r\tcloseSet := Set new.\r\t\r\t"to manage parents"\r\topenStack := Stack with: self rootContext.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1658' ],		#self : OmReference [ '1659' ],		#time : DateAndTime [ '2017-12-12T08:00:10.329992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'isClosed:',			#protocol : #'visiting - utilities',			#sourceCode : 'isClosed: context\r\t^ closeSet includes: context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1659' ],		#self : OmReference [ '1660' ],		#time : DateAndTime [ '2017-12-12T08:00:10.330992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'isOpened:',			#protocol : #'visiting - utilities',			#sourceCode : 'isOpened: context\r\t^ openSet includes: context ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1660' ],		#self : OmReference [ '1661' ],		#time : DateAndTime [ '2017-12-12T08:00:10.331992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #isRoot,			#protocol : #accessing,			#sourceCode : 'isRoot\r\t"(rootContext : currentContext)"\r\t^ openStack size = 2',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1661' ],		#self : OmReference [ '1662' ],		#time : DateAndTime [ '2017-12-12T08:00:10.333992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'nodeClosed:',			#protocol : #'visiting - utilities',			#sourceCode : 'nodeClosed: aPP2Parser\r\t"nothing to do"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1662' ],		#self : OmReference [ '1663' ],		#time : DateAndTime [ '2017-12-12T08:00:10.334992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'nodeOpened:',			#protocol : #'visiting - utilities',			#sourceCode : 'nodeOpened: aPP2Parser\r\t"nothing to do"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1663' ],		#self : OmReference [ '1664' ],		#time : DateAndTime [ '2017-12-12T08:00:10.334992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'open:',			#protocol : #'visiting - utilities',			#sourceCode : 'open: context\r\tself assert: (self isOpened: context) not.\r\topenSet add: context.\r\topenStack push: context',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1664' ],		#self : OmReference [ '1665' ],		#time : DateAndTime [ '2017-12-12T08:00:10.335992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #openSet,			#protocol : #accessing,			#sourceCode : 'openSet\r\t^ openSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1665' ],		#self : OmReference [ '1666' ],		#time : DateAndTime [ '2017-12-12T08:00:10.336992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'openedResultFor:',			#protocol : #'loop control',			#sourceCode : 'openedResultFor: context\r\t^ #()',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1666' ],		#self : OmReference [ '1667' ],		#time : DateAndTime [ '2017-12-12T08:00:10.337992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #parentContext,			#protocol : #accessing,			#sourceCode : 'parentContext\t\r\t\r\t"(rootContext : ... : parentContext : currentContext)"\r\t^ openStack at: 2',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1667' ],		#self : OmReference [ '1668' ],		#time : DateAndTime [ '2017-12-12T08:00:10.339992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #rootContext,			#protocol : #caching,			#sourceCode : 'rootContext\r\t^ PP2NoopContext new\r\t\tnode: nil;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1668' ],		#self : OmReference [ '1669' ],		#time : DateAndTime [ '2017-12-12T08:00:10.340992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #visiting,			#sourceCode : 'visit: node\r\t| result context |\r\tcontext := self context: node.\r\t\r\t(self isClosed: context) ifTrue: [ \r\t\tself nodeClosed: node.\r\t\t^ self cachedResultFor: context\r\t].\r\r\t(self isOpened: context) ifTrue: [\r\t\tself nodeOpened: node.\r\t\t^ self openedResultFor: context\r\t].\r\r\tself open: context.\r\tself beforeAccept: context.\r\tresult := node accept: self.\r\tself afterAccept: context result: result.\r\tself cacheResult: result for: context.\r\tself close: context.\r\r\t^ result',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1669' ],		#self : OmReference [ '1670' ],		#time : DateAndTime [ '2017-12-12T08:00:10.340992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tnode children do: [ :child | self visit: child ]\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1670' ],		#self : OmReference [ '1671' ],		#time : DateAndTime [ '2017-12-12T08:00:10.341992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #'as yet unclassified',			#sourceCode : 'doPass: node\r\t^ self visit: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1671' ],		#self : OmReference [ '1672' ],		#time : DateAndTime [ '2017-12-12T08:00:10.342992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\t(node shouldMemoize) ifTrue: [  \r\t\t(node contextChanges isContextChange) ifTrue: [  \r\t\t\tnode addWarning: \'cannot memoize a node that changes context!\'\r\t\t] ifFalse: [ \r\t\t\tnode strategy: node strategy memoize\r\t\t]\r\t].\r\t^ super visitPP2Node: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1672' ],		#self : OmReference [ '1673' ],		#time : DateAndTime [ '2017-12-12T08:00:10.343992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1673' ],		#self : OmReference [ '1674' ],		#time : DateAndTime [ '2017-12-12T08:00:10.344992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitor,				#isMetaSide : false			},			#name : #'nodeClosed:',			#protocol : #'visiting - utilities',			#sourceCode : 'nodeClosed: node\r\tself assert: parent isNil not.\r\t\r\tnode addParent: parent',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1674' ],		#self : OmReference [ '1675' ],		#time : DateAndTime [ '2017-12-12T08:00:10.345992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitor,				#isMetaSide : false			},			#name : #'nodeOpened:',			#protocol : #'visiting - utilities',			#sourceCode : 'nodeOpened: node\r\tself assert: parent isNil not.\r\t\r\tnode addParent: parent',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1675' ],		#self : OmReference [ '1676' ],		#time : DateAndTime [ '2017-12-12T08:00:10.346992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\t| tmpParent |\r\tparent isNil ifFalse: [ node addParent: parent ].\r\r\ttmpParent := parent.\r\tparent := node.\r\tsuper visitPP2Node: node.\r\tparent := tmpParent.\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1676' ],		#self : OmReference [ '1677' ],		#time : DateAndTime [ '2017-12-12T08:00:10.347992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'changeStrategies:',			#protocol : #support,			#sourceCode : 'changeStrategies: node\r\tnode allNodesDo: [ :child | \r\t\tself assert: (child hasProperty: #recognizer).\r\t\tchild recognizer ifTrue: [  \r\t\t\tchild strategy: child strategy recognizer\r\t\t]\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1677' ],		#self : OmReference [ '1678' ],		#time : DateAndTime [ '2017-12-12T08:00:10.349992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'context:',			#protocol : #caching,			#sourceCode : 'context: node\r\t^ PP2RecognizerContext new\r\t\tnode: node;\r\t\tinToken: self inToken;\r\t\tparent: self currentContext node;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1678' ],		#self : OmReference [ '1679' ],		#time : DateAndTime [ '2017-12-12T08:00:10.350992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\tself visit: node.\r\tself changeStrategies: node\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1679' ],		#self : OmReference [ '1680' ],		#time : DateAndTime [ '2017-12-12T08:00:10.351992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #inToken,			#protocol : #initialization,			#sourceCode : 'inToken\r\t^ inToken top',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1680' ],		#self : OmReference [ '1681' ],		#time : DateAndTime [ '2017-12-12T08:00:10.351992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tinToken := Stack with: false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1681' ],		#self : OmReference [ '1682' ],		#time : DateAndTime [ '2017-12-12T08:00:10.352992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'markNode:',			#protocol : #visiting,			#sourceCode : 'markNode: node\r\tself inToken ifTrue: [  \r\t\tnode markRecognizer.\r\t] ifFalse: [ \r\t\tnode markNoRecognizer.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1682' ],		#self : OmReference [ '1683' ],		#time : DateAndTime [ '2017-12-12T08:00:10.353992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'parentsFor:',			#protocol : #accessing,			#sourceCode : 'parentsFor: node\r\t^ parents at: node ifAbsentPut: [ IdentitySet new ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1683' ],		#self : OmReference [ '1684' ],		#time : DateAndTime [ '2017-12-12T08:00:10.354992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #rootContext,			#protocol : #caching,			#sourceCode : 'rootContext\r\t^ PP2RecognizerContext new',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1684' ],		#self : OmReference [ '1685' ],		#time : DateAndTime [ '2017-12-12T08:00:10.355992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'visitAction:',			#protocol : #visiting,			#sourceCode : 'visitAction: node\r\tself inToken ifTrue: [  \r\t\tnode warnActionInToken.\r\t\tinToken push: false.\r\t\tsuper visitAction: node.\r\t\tinToken pop.\r\t] ifFalse: [ \r\t\tsuper visitAction: node\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1685' ],		#self : OmReference [ '1686' ],		#time : DateAndTime [ '2017-12-12T08:00:10.356992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'visitFlatten:',			#protocol : #visiting,			#sourceCode : 'visitFlatten: node\r\tself markNode: node.\r\tself visitRecognizer: node child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1686' ],		#self : OmReference [ '1687' ],		#time : DateAndTime [ '2017-12-12T08:00:10.357992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\tself markNode: node.\r\t\r\tsuper visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1687' ],		#self : OmReference [ '1688' ],		#time : DateAndTime [ '2017-12-12T08:00:10.359992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'visitRecognizer:',			#protocol : #visiting,			#sourceCode : 'visitRecognizer: node\r\r\tinToken push: true.\r\tself visit: node.\r\tinToken pop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1688' ],		#self : OmReference [ '1689' ],		#time : DateAndTime [ '2017-12-12T08:00:10.360992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'visitToken:',			#protocol : #visiting,			#sourceCode : 'visitToken: node\r\tself markNode: node.\r\tself visitRecognizer: node child',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1689' ],		#self : OmReference [ '1690' ],		#time : DateAndTime [ '2017-12-12T08:00:10.361992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\tself markNode: node.\r\tself visitRecognizer: node trimmer.\r\tself visit: node child.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1690' ],		#self : OmReference [ '1691' ],		#time : DateAndTime [ '2017-12-12T08:00:10.361992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1691' ],		#self : OmReference [ '1692' ],		#time : DateAndTime [ '2017-12-12T08:00:10.362992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableVisitor,				#isMetaSide : false			},			#name : #'shouldMemoize:',			#protocol : #asserting,			#sourceCode : 'shouldMemoize: node\r\t^ node propertyAt: #reparsable ifAbsent: [ false ]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1692' ],		#self : OmReference [ '1693' ],		#time : DateAndTime [ '2017-12-12T08:00:10.363992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\t(self shouldMemoize: node) ifTrue: [  \r\t\tnode strategy: node strategy reparsable\r\t].\r\t\r\t^ super visitPP2Node: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1693' ],		#self : OmReference [ '1694' ],		#time : DateAndTime [ '2017-12-12T08:00:10.364992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'beforeAccept:',			#protocol : #visiting,			#sourceCode : 'beforeAccept: context\r\tself isRoot ifTrue: [ rootNode := context node ].\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1694' ],		#self : OmReference [ '1695' ],		#time : DateAndTime [ '2017-12-12T08:00:10.365992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1695' ],		#self : OmReference [ '1696' ],		#time : DateAndTime [ '2017-12-12T08:00:10.366992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'nextSet:',			#protocol : #'seas optimizations',			#sourceCode : 'nextSet: node\r\t^ rootNode nextSets at: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1696' ],		#self : OmReference [ '1697' ],		#time : DateAndTime [ '2017-12-12T08:00:10.367992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'optimizedNextSet:',			#protocol : #'seas optimizations',			#sourceCode : 'optimizedNextSet: node\r\t| nextSet |\r\tnextSet := self nextSet: node.\r\tnextSet := self removeSeas: nextSet.\r\tnextSet := self removeRepetitions: nextSet.\r\tnextSet := Set withAll: nextSet.\r\t\r\t^ nextSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1697' ],		#self : OmReference [ '1698' ],		#time : DateAndTime [ '2017-12-12T08:00:10.369992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'removeRepetitions:',			#protocol : #'seas optimizations',			#sourceCode : 'removeRepetitions: nextSet\r\t"\r\t\tfinds standalne seas and replaces them with islands.\r\t\tThis helps the performance, because seas are not nested\r\t"\r\t| newNextSet |\r\tnewNextSet := IdentitySet new.\r\t\r\tnextSet do: [ :node | \r\t\t(node isRepeating and: [ node min <= 1 ]) ifTrue: [ \r\t\t\tnewNextSet add: node child \r\t\t] ifFalse: [  \r\t\t\tnewNextSet add: node\r\t\t]\r\t].\r\r\t^ newNextSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1698' ],		#self : OmReference [ '1699' ],		#time : DateAndTime [ '2017-12-12T08:00:10.370992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'removeSeas:',			#protocol : #'seas optimizations',			#sourceCode : 'removeSeas: nextSet\r\t"\r\t\tfinds standalne seas and replaces them with islands.\r\t\tThis helps the performance, because seas are not nested\r\t"\r\t| newNextSet |\r\tnewNextSet := IdentitySet new.\r\t\r\tnextSet do: [ :node | \r\t\t| firstSet |\r\t\tfirstSet := node firstSeasOrTerminalsSet.\r\t\tself seaCanBeRemoved: firstSet ifTrue:  [ :sea |\r\t\t\tnewNextSet add: sea island\r\t\t] ifFalse: [  \r\t\t\tnewNextSet add: node\r\t\t]\r\t].\r\r\t^ newNextSet',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1699' ],		#self : OmReference [ '1700' ],		#time : DateAndTime [ '2017-12-12T08:00:10.371992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'seaCanBeRemoved:ifTrue:ifFalse:',			#protocol : #'seas optimizations',			#sourceCode : 'seaCanBeRemoved: firstSet ifTrue: oneArgBlock ifFalse: aBlock\r\t"Single sea"\r\t(( firstSet size = 1) and: [ \r\t\tfirstSet anyOne isSea \r\t]) ifTrue: [ ^ oneArgBlock value: firstSet anyOne ].\r\t\r\t"sea / epsilon"\r\t(((firstSet size = 2) and: [ \r\t\tfirstSet contains: [ :n | n isSea ] ]) and: [ \r\t\tfirstSet contains: [ :n | n isEpsilon \r\t]]) ifTrue: [ ^ oneArgBlock value: (firstSet detect: [ :n | n isSea ]) ].\r\r\t"sea / #eoi"\r\t(((firstSet size = 2) and: [ \r\t\tfirstSet contains: [ :n | n isSea ] ]) and: [ \r\t\tfirstSet contains: [ :n | n isEOI\r\t]]) ifTrue: [ ^ oneArgBlock value: (firstSet detect: [ :n | n isSea ]) ].\r\r\t\r\t^ aBlock value\r\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1700' ],		#self : OmReference [ '1701' ],		#time : DateAndTime [ '2017-12-12T08:00:10.372992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'updateNode:',			#protocol : #'seas optimizations',			#sourceCode : 'updateNode: node\r\t| nextSet |\r\tnextSet := self optimizedNextSet: node.\r\t\r\tnode beforeWater boundaryElements: ((OrderedCollection with: node island) addAll: nextSet; yourself).\r\tnode afterWater boundaryElements: (OrderedCollection withAll: nextSet).\r\tnode root: rootNode.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1701' ],		#self : OmReference [ '1702' ],		#time : DateAndTime [ '2017-12-12T08:00:10.373992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitor,				#isMetaSide : false			},			#name : #'visitSea:',			#protocol : #visiting,			#sourceCode : 'visitSea: node\r\r\tsuper visitSea: node.\r\tself updateNode: node.\r\t\t\r\t"memoize, if there are seas in water"\r\tnode afterWater allNodes select: [ :n | n isSea ] thenDo: [ :sea |\r\t\tsea isContextFree ifTrue: [ \r\t\t\tsea strategy: sea strategy memoize\r\t\t]\r\t].\r\r\t^ node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1702' ],		#self : OmReference [ '1703' ],		#time : DateAndTime [ '2017-12-12T08:00:10.374992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\t^ self visit: node\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1703' ],		#self : OmReference [ '1704' ],		#time : DateAndTime [ '2017-12-12T08:00:10.375992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isAndLiteralObject:',			#protocol : #testing,			#sourceCode : 'isAndLiteralObject: node \r\tself assert: (node isKindOf: PP2AndNode).\r\t^ (node child isKindOf: PP2LiteralObjectNode) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1704' ],		#self : OmReference [ '1705' ],		#time : DateAndTime [ '2017-12-12T08:00:10.376992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isAndPredicateObject:',			#protocol : #testing,			#sourceCode : 'isAndPredicateObject: node \r\tself assert: (node isKindOf: PP2AndNode).\r\t^ (node child isKindOf: PP2PredicateObjectNode) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1705' ],		#self : OmReference [ '1706' ],		#time : DateAndTime [ '2017-12-12T08:00:10.377992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isAny:',			#protocol : #testing,			#sourceCode : 'isAny: node\r\t(node isKindOf: PP2PredicateNode) ifFalse: [ ^ false ].\r\t\r\t(node predicate classification allSatisfy: [ :e | e ]) ifFalse: [ ^ false ].\r\t\r\tself assert: node predicateMessage = \'input expected\'.\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1706' ],		#self : OmReference [ '1707' ],		#time : DateAndTime [ '2017-12-12T08:00:10.378992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isAnyStarLazyLiteralObject:',			#protocol : #testing,			#sourceCode : 'isAnyStarLazyLiteralObject: node \r\t(self isAnyStarLazyObject: node) ifFalse: [ ^ false ].\r\t\t\r\t((node child afterWater boundaryElements anyOne) isKindOf: PP2LiteralObjectNode) ifFalse: [ ^false ].\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1707' ],		#self : OmReference [ '1708' ],		#time : DateAndTime [ '2017-12-12T08:00:10.379992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isAnyStarLazyObject:',			#protocol : #testing,			#sourceCode : 'isAnyStarLazyObject: node \r\t| sea |\r\tnode class = PP2MappingNode ifFalse: [ ^ false ].\r\tnode child class = PP2SeaNode ifFalse: [ ^ false ].\r\t\r\tsea := node child.\r\t\r\tsea island isEpsilon ifFalse: [ ^ false ].\r\t(self isAny: sea waterToken) ifFalse: [ ^ false ].\r\t(sea beforeWater boundaryElements size = 2) ifFalse: [ ^ false ].\r\t(sea afterWater boundaryElements size = 1) ifFalse: [ ^ false ].\r\t\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1708' ],		#self : OmReference [ '1709' ],		#time : DateAndTime [ '2017-12-12T08:00:10.380992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isAnyStarLazyPredicateObject:',			#protocol : #testing,			#sourceCode : 'isAnyStarLazyPredicateObject: node \r\t(self isAnyStarLazyObject: node) ifFalse: [ ^ false ].\r\t\r\t((node child afterWater boundaryElements anyOne) isKindOf: PP2PredicateObjectNode) ifFalse: [ ^false ].\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1709' ],		#self : OmReference [ '1710' ],		#time : DateAndTime [ '2017-12-12T08:00:10.381992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isMappingOfThree:',			#protocol : #testing,			#sourceCode : 'isMappingOfThree: node \r\tself assert: (node isKindOf: PP2MappingNode).\r\t^ (node child children size = 3) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1710' ],		#self : OmReference [ '1711' ],		#time : DateAndTime [ '2017-12-12T08:00:10.382992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isMappingOfTwo:',			#protocol : #testing,			#sourceCode : 'isMappingOfTwo: node \r\tself assert: (node isKindOf: PP2MappingNode).\r\t^ (node child children size = 2) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1711' ],		#self : OmReference [ '1712' ],		#time : DateAndTime [ '2017-12-12T08:00:10.383992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isNotLiteralObject:',			#protocol : #testing,			#sourceCode : 'isNotLiteralObject: node \r\tself assert: (node isKindOf: PP2NotNode).\r\t^ (node child isKindOf: PP2LiteralObjectNode) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1712' ],		#self : OmReference [ '1713' ],		#time : DateAndTime [ '2017-12-12T08:00:10.384992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isNotPredicateObject:',			#protocol : #testing,			#sourceCode : 'isNotPredicateObject: node \r\tself assert: (node isKindOf: PP2NotNode).\r\t^ (node child isKindOf: PP2PredicateObjectNode) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1713' ],		#self : OmReference [ '1714' ],		#time : DateAndTime [ '2017-12-12T08:00:10.385992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isOptionalCharacter:',			#protocol : #testing,			#sourceCode : 'isOptionalCharacter: node \r\t^ (node child isKindOf: PP2LiteralObjectNode) ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1714' ],		#self : OmReference [ '1715' ],		#time : DateAndTime [ '2017-12-12T08:00:10.386992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isPlus:',			#protocol : #testing,			#sourceCode : 'isPlus: node \r\t^ node min = 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1715' ],		#self : OmReference [ '1716' ],		#time : DateAndTime [ '2017-12-12T08:00:10.387992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isPlusPredicateObject:',			#protocol : #testing,			#sourceCode : 'isPlusPredicateObject: node \r\t^ (node min = 1) and: [ \r\t  (node max = SmallInteger maxVal) and: [ \r\t  node child isKindOf: PP2PredicateObjectNode \r\t]]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1716' ],		#self : OmReference [ '1717' ],		#time : DateAndTime [ '2017-12-12T08:00:10.388992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isStar:',			#protocol : #testing,			#sourceCode : 'isStar: node \r\t^ node min = 0',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1717' ],		#self : OmReference [ '1718' ],		#time : DateAndTime [ '2017-12-12T08:00:10.390992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isStarPredicateObject:',			#protocol : #testing,			#sourceCode : 'isStarPredicateObject: node \r\t^ (node min = 0) and: [ \r\t  (node max = SmallInteger maxVal) and: [ \r\t  node child isKindOf: PP2PredicateObjectNode \r\t]]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1718' ],		#self : OmReference [ '1719' ],		#time : DateAndTime [ '2017-12-12T08:00:10.391992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isTrimmingLiteralObjectToken:',			#protocol : #testing,			#sourceCode : 'isTrimmingLiteralObjectToken: node \r\tself assert: (node isKindOf: PP2TrimmingNode).\r\t\r\t(node child isKindOf: PP2CreateTokenNode) ifFalse: [ ^ false ].\r\t^ (node child childSkipDelegate isKindOf: PP2LiteralObjectNode) \r\t\r\t"\r\t\tself new isTrimmingLiteralObjectToken: $a asPParser token trim.\r\t"',			#stamp : 'JanKurs 8/20/2017 17:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1719' ],		#self : OmReference [ '1720' ],		#time : DateAndTime [ '2017-12-12T08:00:10.392992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'isTrimmingToken:',			#protocol : #testing,			#sourceCode : 'isTrimmingToken: node \r\tself assert: (node isKindOf: PP2TrimmingNode).\r\r\t^ node child isKindOf: PP2CreateTokenNode\r\t\r\t"\r\t\tself new isTrimmingToken: \'foo\' asPParser token trim.\r\t"',			#stamp : 'JanKurs 8/20/2017 17:18',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1720' ],		#self : OmReference [ '1721' ],		#time : DateAndTime [ '2017-12-12T08:00:10.393992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitAdaptable:',			#protocol : #visiting,			#sourceCode : 'visitAdaptable: node\r\t"do not visit beyond this point"',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1721' ],		#self : OmReference [ '1722' ],		#time : DateAndTime [ '2017-12-12T08:00:10.394992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitAnd:',			#protocol : #visiting,			#sourceCode : 'visitAnd: node\r\t(self isAndLiteralObject: node) ifTrue: [  \r\t\tnode strategy: (PP2AndLiteralObject on: node)\r\t].\r\r\t(self isAndPredicateObject: node) ifTrue: [  \r\t\tnode strategy: (PP2AndPredicateObject on: node)\r\t].\r\r\t^ super visitOptional: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1722' ],		#self : OmReference [ '1723' ],		#time : DateAndTime [ '2017-12-12T08:00:10.395992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitMapping:',			#protocol : #visiting,			#sourceCode : 'visitMapping: node\r\tsuper visitMapping: node.\r\t\r\t(self isAnyStarLazyPredicateObject: node) ifTrue: [  \r\t\tnode strategy: (PP2AnyStarLazyPredicateObject on: node \r\t\t\tpredicate: node child afterWater boundaryElements anyOne predicate).\r\t\t^ self.\r\t].\r\r\t(self isAnyStarLazyLiteralObject: node) ifTrue: [  \r\t\tnode strategy: (PP2AnyStarLazyLiteralObject on: node \r\t\t\tliteral: node child afterWater boundaryElements anyOne literal).\r\t\t^ self.\r\t].\r\r\r\t(self isMappingOfTwo: node) ifTrue: [  \r\t\tnode strategy: (PP2MappingOfTwo on: node).\r\t\t^ self\r\t].\r\r\t(self isMappingOfThree: node) ifTrue: [  \r\t\tnode strategy: (PP2MappingOfThree on: node).\r\t\t^ self\r\t].\r\r\r\t^ super visitMapping: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1723' ],		#self : OmReference [ '1724' ],		#time : DateAndTime [ '2017-12-12T08:00:10.396992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitNot:',			#protocol : #visiting,			#sourceCode : 'visitNot: node\r\t(self isNotLiteralObject: node) ifTrue: [  \r\t\tnode strategy: (PP2NotLiteralObject on: node)\r\t].\r\r\t(self isNotPredicateObject: node) ifTrue: [  \r\t\tnode strategy: (PP2NotPredicateObject on: node)\r\t].\r\r\t^ super visitOptional: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1724' ],		#self : OmReference [ '1725' ],		#time : DateAndTime [ '2017-12-12T08:00:10.397992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitOptional:',			#protocol : #visiting,			#sourceCode : 'visitOptional: node\r\t(self isOptionalCharacter: node) ifTrue: [  \r\t\tnode strategy: (PP2OptionalLiteralObject on: node)\r\t].\r\r\t^ super visitOptional: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1725' ],		#self : OmReference [ '1726' ],		#time : DateAndTime [ '2017-12-12T08:00:10.398992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitPossesiveRepeating:',			#protocol : #visiting,			#sourceCode : 'visitPossesiveRepeating: node\r\t(self isStar: node) ifTrue: [  \r\t\tnode strategy: (PP2Star on: node)\r\t].\r\r\t(self isStarPredicateObject: node) ifTrue: [  \r\t\tnode strategy: (PP2StarPredicateObject \r\t\t\ton: node \r\t\t\tpredicate: node child predicate)\r\t].\r\r\t(self isPlus: node) ifTrue: [  \r\t\tnode strategy: (PP2Plus on: node)\r\t].\r\r\t(self isPlusPredicateObject: node) ifTrue: [  \r\t\tnode strategy: (PP2PlusPredicateObject on: node)\r\t].\r\r\t^ super visitPossesiveRepeating: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1726' ],		#self : OmReference [ '1727' ],		#time : DateAndTime [ '2017-12-12T08:00:10.400992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitSequence:',			#protocol : #visiting,			#sourceCode : 'visitSequence: node\r\t(node children size = 2) ifTrue: [  \r\t\tnode strategy: (PP2SequenceOfTwo on: node)\r\t].\r\r\t(node children size = 3) ifTrue: [  \r\t\tnode strategy: (PP2SequenceOfThree on: node)\r\t].\r\r\t^ super visitSequence: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1727' ],		#self : OmReference [ '1728' ],		#time : DateAndTime [ '2017-12-12T08:00:10.401992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\t(self isTrimmingToken: node) ifTrue: [  \r\t\tnode strategy: (PP2TrimmingToken on: node)\r\t].\r\r\t(self isTrimmingLiteralObjectToken: node) ifTrue: [  \r\t\tnode strategy: (PP2TrimmingLiteralObjectToken on: node)\r\t].\r\r\t^ super visitTrimming: node\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1728' ],		#self : OmReference [ '1729' ],		#time : DateAndTime [ '2017-12-12T08:00:10.402992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #block,			#protocol : #accessing,			#sourceCode : 'block\r\t^ block',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1729' ],		#self : OmReference [ '1730' ],		#time : DateAndTime [ '2017-12-12T08:00:10.403992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #'block:',			#protocol : #accessing,			#sourceCode : 'block: anObject\r\tblock := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1730' ],		#self : OmReference [ '1731' ],		#time : DateAndTime [ '2017-12-12T08:00:10.404992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\r\tpredicate := [ :node | true ].\r\tblock := [ :node | node ].\r\t\r\tmapping := IdentityDictionary new.',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1731' ],		#self : OmReference [ '1732' ],		#time : DateAndTime [ '2017-12-12T08:00:10.405992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #'initializeMapping:',			#protocol : #visiting,			#sourceCode : 'initializeMapping: rootNode\r\t| transformed |\r\t\r\trootNode allNodesDo: [ :node |\r\t\ttransformed := node copy. \r\t\t(predicate value: node) ifTrue: [  \r\t\t\ttransformed := block value: transformed\r\t\t].\r\t\tmapping at: node put: transformed.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1732' ],		#self : OmReference [ '1733' ],		#time : DateAndTime [ '2017-12-12T08:00:10.406992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #'openedResultFor:',			#protocol : #visiting,			#sourceCode : 'openedResultFor: context\r\t"when visiting opened node, return the transformed value"\r\t^ self transformed: context node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1733' ],		#self : OmReference [ '1734' ],		#time : DateAndTime [ '2017-12-12T08:00:10.407992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #predicate,			#protocol : #accessing,			#sourceCode : 'predicate\r\t^ predicate',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1734' ],		#self : OmReference [ '1735' ],		#time : DateAndTime [ '2017-12-12T08:00:10.408992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #'predicate:',			#protocol : #accessing,			#sourceCode : 'predicate: anObject\r\tpredicate := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1735' ],		#self : OmReference [ '1736' ],		#time : DateAndTime [ '2017-12-12T08:00:10.409992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #'transformed:',			#protocol : #visiting,			#sourceCode : 'transformed: node\r\t^ mapping at: node ifAbsent: [ node ].\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1736' ],		#self : OmReference [ '1737' ],		#time : DateAndTime [ '2017-12-12T08:00:10.410992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: node\r\t| transformed transformedChild |\r\tself isRoot ifTrue: [ self initializeMapping: node ].\r\t\t\r\ttransformed := self transformed: node.\r\ttransformed children do: [ :child |\r\t\ttransformedChild := self visit: child.\r\t\ttransformed replace: child with: transformedChild.\r\t].\r\r\t^ transformed\r',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1737' ],		#self : OmReference [ '1738' ],		#time : DateAndTime [ '2017-12-12T08:00:10.412992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitor,				#isMetaSide : false			},			#name : #'doPass:',			#protocol : #optimizations,			#sourceCode : 'doPass: node\r\tself flag: \'should add a trimming guard for the equivalent trimmers\'.\r\t(self usingSameTrimmer: node) ifTrue: [ \r\t\tself visit: node.\r\t] ifFalse: [  \r\t\tnode warnDifferentTrimmer.\r\t]',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1738' ],		#self : OmReference [ '1739' ],		#time : DateAndTime [ '2017-12-12T08:00:10.413992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitor,				#isMetaSide : false			},			#name : #'usingSameTrimmer:',			#protocol : #optimizations,			#sourceCode : 'usingSameTrimmer: node\r\t| trimmings trimmers |\r\ttrimmings := node allNodes select: [ :c | c isTrimming ].\r\t\r\ttrimmers := trimmings collect: [ :e | e trimmer ].\r\r\t^ (Set withAll: trimmers) size = 1',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1739' ],		#self : OmReference [ '1740' ],		#time : DateAndTime [ '2017-12-12T08:00:10.414992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitor,				#isMetaSide : false			},			#name : #'visitTrimming:',			#protocol : #visiting,			#sourceCode : 'visitTrimming: node\r\tnode trimmer strategy: node trimmer strategy trimmingCache.\r\t\r\tsuper visitTrimming: node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1740' ],		#self : OmReference [ '1741' ],		#time : DateAndTime [ '2017-12-12T08:00:10.415992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContext,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anotherContext\r\tsuper = anotherContext ifFalse: [ ^ false ].\r\t\r\t(self currentNext size = anotherContext currentNext size) ifFalse: [ ^ false ].\r\tself currentNext do: [ :value |\r\t\t(anotherContext currentNext includes: value) ifFalse: [ ^ false ]\r\t].\r\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1741' ],		#self : OmReference [ '1742' ],		#time : DateAndTime [ '2017-12-12T08:00:10.416992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContext,				#isMetaSide : false			},			#name : #currentNext,			#protocol : #accessing,			#sourceCode : 'currentNext\r\t^ currentNext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1742' ],		#self : OmReference [ '1743' ],		#time : DateAndTime [ '2017-12-12T08:00:10.417992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContext,				#isMetaSide : false			},			#name : #'currentNext:',			#protocol : #accessing,			#sourceCode : 'currentNext: anObject\r\tself assert: [ anObject class == IdentitySet ] description: \'if not, override the #hash and #=\'.\r\tcurrentNext := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1743' ],		#self : OmReference [ '1744' ],		#time : DateAndTime [ '2017-12-12T08:00:10.418992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContext,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t| hash |\r\thash := super hash.\r\r\tcurrentNext size <= 10 ifTrue: [  \r\t\tcurrentNext do: [ :e | e identityHash ].\r\t].\r\r\t^ hash bitXor: currentNext size hash',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1744' ],		#self : OmReference [ '1745' ],		#time : DateAndTime [ '2017-12-12T08:00:10.419992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2NoopContext class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: node\r\t^ (self new)\r\t\tnode: node;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1745' ],		#self : OmReference [ '1746' ],		#time : DateAndTime [ '2017-12-12T08:00:10.420992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anotherContext\r\tself class == anotherContext class ifFalse: [ ^ false ].\r\tself node == anotherContext node ifFalse: [ ^ false ].\r\t\r\t^ self properties = anotherContext properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1746' ],		#self : OmReference [ '1747' ],		#time : DateAndTime [ '2017-12-12T08:00:10.421992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ self node identityHash bitXor: (self properties hash)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1747' ],		#self : OmReference [ '1748' ],		#time : DateAndTime [ '2017-12-12T08:00:10.423992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1748' ],		#self : OmReference [ '1749' ],		#time : DateAndTime [ '2017-12-12T08:00:10.424992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ node',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1749' ],		#self : OmReference [ '1750' ],		#time : DateAndTime [ '2017-12-12T08:00:10.424992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #'node:',			#protocol : #accessing,			#sourceCode : 'node: anObject\r\tnode := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1750' ],		#self : OmReference [ '1751' ],		#time : DateAndTime [ '2017-12-12T08:00:10.425992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1751' ],		#self : OmReference [ '1752' ],		#time : DateAndTime [ '2017-12-12T08:00:10.427992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopContext,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: anObject\r\t^ properties := anObject ',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1752' ],		#self : OmReference [ '1753' ],		#time : DateAndTime [ '2017-12-12T08:00:10.428992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerContext,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anotherContext\r\tsuper = anotherContext ifFalse: [ ^ false ]\t.\r\r\t(self inToken == anotherContext inToken) ifFalse: [ ^ false ].\r\t(self parent == anotherContext parent) ifFalse: [ ^ false ].\r\t\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1753' ],		#self : OmReference [ '1754' ],		#time : DateAndTime [ '2017-12-12T08:00:10.429992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerContext,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ super hash bitXor: (self inToken hash bitXor: self parent identityHash)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1754' ],		#self : OmReference [ '1755' ],		#time : DateAndTime [ '2017-12-12T08:00:10.430992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerContext,				#isMetaSide : false			},			#name : #inToken,			#protocol : #accessing,			#sourceCode : 'inToken\r\t^ inToken',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1755' ],		#self : OmReference [ '1756' ],		#time : DateAndTime [ '2017-12-12T08:00:10.431992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerContext,				#isMetaSide : false			},			#name : #'inToken:',			#protocol : #accessing,			#sourceCode : 'inToken: anObject\r\tinToken := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1756' ],		#self : OmReference [ '1757' ],		#time : DateAndTime [ '2017-12-12T08:00:10.432992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerContext,				#isMetaSide : false			},			#name : #parent,			#protocol : #accessing,			#sourceCode : 'parent\r\t^ parent',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1757' ],		#self : OmReference [ '1758' ],		#time : DateAndTime [ '2017-12-12T08:00:10.433992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerContext,				#isMetaSide : false			},			#name : #'parent:',			#protocol : #accessing,			#sourceCode : 'parent: anObject\r\tparent := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1758' ],		#self : OmReference [ '1759' ],		#time : DateAndTime [ '2017-12-12T08:00:10.434992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemento,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1759' ],		#self : OmReference [ '1760' ],		#time : DateAndTime [ '2017-12-12T08:00:10.435992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemento,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1760' ],		#self : OmReference [ '1761' ],		#time : DateAndTime [ '2017-12-12T08:00:10.436992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemento,				#isMetaSide : false			},			#name : #stackSize,			#protocol : #accessing,			#sourceCode : 'stackSize\r\t^ stackSize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1761' ],		#self : OmReference [ '1762' ],		#time : DateAndTime [ '2017-12-12T08:00:10.437992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemento,				#isMetaSide : false			},			#name : #'stackSize:',			#protocol : #accessing,			#sourceCode : 'stackSize: anObject\r\tstackSize := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1762' ],		#self : OmReference [ '1763' ],		#time : DateAndTime [ '2017-12-12T08:00:10.438992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemento,				#isMetaSide : false			},			#name : #stackTop,			#protocol : #accessing,			#sourceCode : 'stackTop\r\t^ top',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1763' ],		#self : OmReference [ '1764' ],		#time : DateAndTime [ '2017-12-12T08:00:10.439992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PopMemento,				#isMetaSide : false			},			#name : #'stackTop:',			#protocol : #accessing,			#sourceCode : 'stackTop: anObject\r\ttop := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1764' ],		#self : OmReference [ '1765' ],		#time : DateAndTime [ '2017-12-12T08:00:10.440992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushMemento,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1765' ],		#self : OmReference [ '1766' ],		#time : DateAndTime [ '2017-12-12T08:00:10.441992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushMemento,				#isMetaSide : false			},			#name : #'position:',			#protocol : #accessing,			#sourceCode : 'position: anObject\r\tposition := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1766' ],		#self : OmReference [ '1767' ],		#time : DateAndTime [ '2017-12-12T08:00:10.442992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushMemento,				#isMetaSide : false			},			#name : #stackSize,			#protocol : #accessing,			#sourceCode : 'stackSize\r\t^ stackSize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1767' ],		#self : OmReference [ '1768' ],		#time : DateAndTime [ '2017-12-12T08:00:10.444992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PushMemento,				#isMetaSide : false			},			#name : #'stackSize:',			#protocol : #accessing,			#sourceCode : 'stackSize: anObject\r\tstackSize := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1768' ],		#self : OmReference [ '1769' ],		#time : DateAndTime [ '2017-12-12T08:00:10.445992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Stream class',				#isMetaSide : true			},			#name : #new,			#protocol : #'as yet unclassified',			#sourceCode : 'new\r\t"for compatibility reasons"\r\t^ self basicNew\r\t\tinitialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1769' ],		#self : OmReference [ '1770' ],		#time : DateAndTime [ '2017-12-12T08:00:10.446992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Stream class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: collection\r\t^ self new\r\t\tcollection: collection;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1770' ],		#self : OmReference [ '1771' ],		#time : DateAndTime [ '2017-12-12T08:00:10.447992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'adoptString:',			#protocol : #'as yet unclassified',			#sourceCode : 'adoptString: newString\r\tcollection := newString',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1771' ],		#self : OmReference [ '1772' ],		#time : DateAndTime [ '2017-12-12T08:00:10.448992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #asPetit2Context,			#protocol : #converting,			#sourceCode : 'asPetit2Context\r\t^ PP2InMemoryContext on: self\tcollection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1772' ],		#self : OmReference [ '1773' ],		#time : DateAndTime [ '2017-12-12T08:00:10.448992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #asPetit2Stream,			#protocol : #converting,			#sourceCode : 'asPetit2Stream\r\t^ self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1773' ],		#self : OmReference [ '1774' ],		#time : DateAndTime [ '2017-12-12T08:00:10.449992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'atEnd:',			#protocol : #'context interface',			#sourceCode : 'atEnd: position\r\t^ collection size <= position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1774' ],		#self : OmReference [ '1775' ],		#time : DateAndTime [ '2017-12-12T08:00:10.450992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'atPosition:',			#protocol : #'context interface',			#sourceCode : 'atPosition: position\r\t^ collection at: position',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1775' ],		#self : OmReference [ '1776' ],		#time : DateAndTime [ '2017-12-12T08:00:10.451992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #collection,			#protocol : #accessing,			#sourceCode : 'collection\r\t^ collection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1776' ],		#self : OmReference [ '1777' ],		#time : DateAndTime [ '2017-12-12T08:00:10.452992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'collection:',			#protocol : #accessing,			#sourceCode : 'collection: aCollection\r\tcollection := aCollection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1777' ],		#self : OmReference [ '1778' ],		#time : DateAndTime [ '2017-12-12T08:00:10.454992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ collection copyFrom: 1 to: collection size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1778' ],		#self : OmReference [ '1779' ],		#time : DateAndTime [ '2017-12-12T08:00:10.455992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'copyFrom:to:',			#protocol : #'context interface',			#sourceCode : 'copyFrom: start to: end\r\t"start - end should be in range <1, collection size> "\r\t^ collection copyFrom: start to: end',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1779' ],		#self : OmReference [ '1780' ],		#time : DateAndTime [ '2017-12-12T08:00:10.456992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1780' ],		#self : OmReference [ '1781' ],		#time : DateAndTime [ '2017-12-12T08:00:10.457992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #isBuffered,			#protocol : #testing,			#sourceCode : 'isBuffered\r\t^ false',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1781' ],		#self : OmReference [ '1782' ],		#time : DateAndTime [ '2017-12-12T08:00:10.458992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'newToken:from:to:',			#protocol : #tokenization,			#sourceCode : 'newToken: tokenClass from: start to: stop\r\t^ tokenClass \r\t\ton: collection \r\t\tstart:  start\r\t\tstop: \tstop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1782' ],		#self : OmReference [ '1783' ],		#time : DateAndTime [ '2017-12-12T08:00:10.459992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #'printOn:position:',			#protocol : #printing,			#sourceCode : 'printOn: writeStream position: position\r\twriteStream\r\t\tnextPutAll: (collection copyFrom: 1 to: position);\r\t\tnextPutAll: \'·\';\r\t\tnextPutAll: (collection copyFrom: position + 1 to: collection size)',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1783' ],		#self : OmReference [ '1784' ],		#time : DateAndTime [ '2017-12-12T08:00:10.460992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stream,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialization,			#sourceCode : 'reset\r\t',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1784' ],		#self : OmReference [ '1785' ],		#time : DateAndTime [ '2017-12-12T08:00:10.461992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Token class',				#isMetaSide : true			},			#name : #'on:start:stop:',			#protocol : #'instance creation',			#sourceCode : 'on: collection start: start stop: stop\r\t^ self new\r\t\tcollection: collection;\r\t\tstart: start;\r\t\tstop: stop;\r\t\tyourself',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1785' ],		#self : OmReference [ '1786' ],		#time : DateAndTime [ '2017-12-12T08:00:10.462992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #collection,			#protocol : #accessing,			#sourceCode : 'collection\r\t^ collection',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1786' ],		#self : OmReference [ '1787' ],		#time : DateAndTime [ '2017-12-12T08:00:10.463992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #'collection:',			#protocol : #accessing,			#sourceCode : 'collection: anObject\r\tcollection := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1787' ],		#self : OmReference [ '1788' ],		#time : DateAndTime [ '2017-12-12T08:00:10.465992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #isToken,			#protocol : #testing,			#sourceCode : 'isToken\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1788' ],		#self : OmReference [ '1789' ],		#time : DateAndTime [ '2017-12-12T08:00:10.466992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tself value printOn: aStream.\r\taStream nextPut: $[.\r\tstart printOn: aStream.\r\taStream nextPut: $,.\r\tstop printOn: aStream.\r\taStream nextPut: $].',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1789' ],		#self : OmReference [ '1790' ],		#time : DateAndTime [ '2017-12-12T08:00:10.466992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1790' ],		#self : OmReference [ '1791' ],		#time : DateAndTime [ '2017-12-12T08:00:10.468992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: newProperties\r\t^ properties := newProperties',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1791' ],		#self : OmReference [ '1792' ],		#time : DateAndTime [ '2017-12-12T08:00:10.469992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ start',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1792' ],		#self : OmReference [ '1793' ],		#time : DateAndTime [ '2017-12-12T08:00:10.470992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #'start:',			#protocol : #accessing,			#sourceCode : 'start: anObject\r\tstart := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1793' ],		#self : OmReference [ '1794' ],		#time : DateAndTime [ '2017-12-12T08:00:10.470992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #stop,			#protocol : #accessing,			#sourceCode : 'stop\r\t^ stop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1794' ],		#self : OmReference [ '1795' ],		#time : DateAndTime [ '2017-12-12T08:00:10.471992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #'stop:',			#protocol : #accessing,			#sourceCode : 'stop: anObject\r\tstop := anObject',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1795' ],		#self : OmReference [ '1796' ],		#time : DateAndTime [ '2017-12-12T08:00:10.472992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #toString,			#protocol : #printing,			#sourceCode : 'toString\r\t^ self value, \'[\', start, \',\', stop ,\']\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1796' ],		#self : OmReference [ '1797' ],		#time : DateAndTime [ '2017-12-12T08:00:10.473992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Token,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t^ collection copyFrom: start to: stop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1797' ],		#self : OmReference [ '1798' ],		#time : DateAndTime [ '2017-12-12T08:00:10.474992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2UnknownCharSetPredicate class',				#isMetaSide : true			},			#name : #instance,			#protocol : #'as yet unclassified',			#sourceCode : 'instance\r\tinstance isNil ifTrue: [ \r\t\tinstance := PP2UnknownCharSetPredicate new\r\t].\r\t^ instance',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1798' ],		#self : OmReference [ '1799' ],		#time : DateAndTime [ '2017-12-12T08:00:10.476992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2UnknownCharSetPredicate,				#isMetaSide : false			},			#name : #isUnknown,			#protocol : #testing,			#sourceCode : 'isUnknown\r\t^ true',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1799' ],		#self : OmReference [ '1800' ],		#time : DateAndTime [ '2017-12-12T08:00:10.477992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2UnknownCharSetPredicate,				#isMetaSide : false			},			#name : #'value:',			#protocol : #accessing,			#sourceCode : 'value: aCharacter\r\tself error: \'I don\'\'t know, sorry man :(\'',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1800' ],		#self : OmReference [ '1801' ],		#time : DateAndTime [ '2017-12-12T08:00:10.478992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stack,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tsize := 0',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1801' ],		#self : OmReference [ '1802' ],		#time : DateAndTime [ '2017-12-12T08:00:10.479992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stack,				#isMetaSide : false			},			#name : #pop,			#protocol : #removing,			#sourceCode : 'pop\r\tsize := size - 1.\r\tsuper pop',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1802' ],		#self : OmReference [ '1803' ],		#time : DateAndTime [ '2017-12-12T08:00:10.480992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stack,				#isMetaSide : false			},			#name : #'push:',			#protocol : #adding,			#sourceCode : 'push: element\r\tsize := size + 1.\r\tsuper push: element',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1803' ],		#self : OmReference [ '1804' ],		#time : DateAndTime [ '2017-12-12T08:00:10.481992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Stack,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t^ size',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1804' ],		#self : OmReference [ '1805' ],		#time : DateAndTime [ '2017-12-12T08:00:10.482992+08:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #asPParser,			#protocol : #'*petitparser2',			#sourceCode : 'asPParser\r\t"Answer a parser that accepts the receiving string."\r\r\t^ PP2LiteralSequenceNode on: self',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:00:10.585992+08:00' ],		#prior : OmReference [ '1805' ],		#self : OmReference [ '1806' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Tests-JanKurs.1480316189'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1806' ],		#self : OmReference [ '1807' ],		#time : DateAndTime [ '2017-12-12T08:00:10.706992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Examples,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1807' ],		#self : OmReference [ '1808' ],		#time : DateAndTime [ '2017-12-12T08:00:10.708992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AdaptableGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2AdaptableGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AdaptableGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2AdaptableGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AdaptableGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1808' ],		#self : OmReference [ '1809' ],		#time : DateAndTime [ '2017-12-12T08:00:10.742992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AdaptableGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2AdaptableGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AdaptableGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2AdaptableGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AdaptableGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : 'TestSuite for PP2AdaptableGrammar',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		},		#oldComment : '',		#newComment : 'TestSuite for PP2AdaptableGrammar',		#newStamp : 'JanKurs 9/6/2016 14:04'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1809' ],		#self : OmReference [ '1810' ],		#time : DateAndTime [ '2017-12-12T08:00:10.750992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Reparsing,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1810' ],		#self : OmReference [ '1811' ],		#time : DateAndTime [ '2017-12-12T08:00:10.753992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ChangeAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #TPP2ChangeAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ChangeAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2ChangeAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ChangeAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1811' ],		#self : OmReference [ '1812' ],		#time : DateAndTime [ '2017-12-12T08:00:10.761992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Core,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1812' ],		#self : OmReference [ '1813' ],		#time : DateAndTime [ '2017-12-12T08:00:10.762992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2CollectionAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2CollectionAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2CollectionAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2CollectionAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2CollectionAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1813' ],		#self : OmReference [ '1814' ],		#time : DateAndTime [ '2017-12-12T08:00:10.771992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ContextTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2ContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ContextTest classTrait\r\tuses: {}'				},				#name : #'TPP2ContextTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1814' ],		#self : OmReference [ '1815' ],		#time : DateAndTime [ '2017-12-12T08:00:10.778992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2DebuggableTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2DebuggableTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2DebuggableTest classTrait\r\tuses: {}'				},				#name : #'TPP2DebuggableTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2DebuggableTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1815' ],		#self : OmReference [ '1816' ],		#time : DateAndTime [ '2017-12-12T08:00:10.785992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1816' ],		#self : OmReference [ '1817' ],		#time : DateAndTime [ '2017-12-12T08:00:10.808992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : 'TestSuite for PP2ExpressionGrammar',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		},		#oldComment : '',		#newComment : 'TestSuite for PP2ExpressionGrammar',		#newStamp : 'JanKurs 9/6/2016 14:04'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1817' ],		#self : OmReference [ '1818' ],		#time : DateAndTime [ '2017-12-12T08:00:10.817992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionParserTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1818' ],		#self : OmReference [ '1819' ],		#time : DateAndTime [ '2017-12-12T08:00:10.824992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Parsing,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1819' ],		#self : OmReference [ '1820' ],		#time : DateAndTime [ '2017-12-12T08:00:10.825992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ParseTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Parsing\''			},			#name : #TPP2ParseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ParseTest classTrait\r\tuses: {}'				},				#name : #'TPP2ParseTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ParseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Parsing,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1820' ],		#self : OmReference [ '1821' ],		#time : DateAndTime [ '2017-12-12T08:00:10.835992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ReparsableAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #TPP2ReparsableAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ReparsableAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2ReparsableAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ReparsableAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1821' ],		#self : OmReference [ '1822' ],		#time : DateAndTime [ '2017-12-12T08:00:10.843992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Seas,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1822' ],		#self : OmReference [ '1823' ],		#time : DateAndTime [ '2017-12-12T08:00:10.845992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SeaParserTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Seas\''			},			#name : #TPP2SeaParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SeaParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2SeaParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SeaParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Seas,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1823' ],		#self : OmReference [ '1824' ],		#time : DateAndTime [ '2017-12-12T08:00:10.852992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Streams,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1824' ],		#self : OmReference [ '1825' ],		#time : DateAndTime [ '2017-12-12T08:00:10.854992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2StreamContextInterface\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #TPP2StreamContextInterface,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2StreamContextInterface classTrait\r\tuses: {}'				},				#name : #'TPP2StreamContextInterface classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2StreamContextInterface,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1825' ],		#self : OmReference [ '1826' ],		#time : DateAndTime [ '2017-12-12T08:00:10.861992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Optimizations,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1826' ],		#self : OmReference [ '1827' ],		#time : DateAndTime [ '2017-12-12T08:00:10.863992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2TypeAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #TPP2TypeAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2TypeAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2TypeAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2TypeAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1827' ],		#self : OmReference [ '1828' ],		#time : DateAndTime [ '2017-12-12T08:00:10.885992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParserTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ManifestPetitParserTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParserTests class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParserTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParserTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1828' ],		#self : OmReference [ '1829' ],		#time : DateAndTime [ '2017-12-12T08:00:10.886992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1829' ],		#self : OmReference [ '1830' ],		#time : DateAndTime [ '2017-12-12T08:00:10.888992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParserTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests\''			},			#name : #ManifestPetitParserTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParserTests class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParserTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParserTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1830' ],		#self : OmReference [ '1831' ],		#time : DateAndTime [ '2017-12-12T08:00:10.892992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2AbstractParserTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2AbstractParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AbstractParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AbstractParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AbstractParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1831' ],		#self : OmReference [ '1832' ],		#time : DateAndTime [ '2017-12-12T08:00:10.899992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2AdaptableParseTest\r\tinstanceVariableNames: \'context\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Parsing\''			},			#name : #PP2AdaptableParseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableParseTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableParseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableParseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableParseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Parsing,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1832' ],		#self : OmReference [ '1833' ],		#time : DateAndTime [ '2017-12-12T08:00:10.905992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2AdaptableReparseTest\r\tinstanceVariableNames: \'token1 token2 parser context\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #PP2AdaptableReparseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableReparseTest,						#isMetaSide : false					},					#name : #token1,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableReparseTest,						#isMetaSide : false					},					#name : #token2,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableReparseTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AdaptableReparseTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableReparseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableReparseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableReparseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1833' ],		#self : OmReference [ '1834' ],		#time : DateAndTime [ '2017-12-12T08:00:10.909992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2BufferStreamIntegrationTest\r\tinstanceVariableNames: \'parser stream tokens\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #PP2BufferStreamIntegrationTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStreamIntegrationTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStreamIntegrationTest,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStreamIntegrationTest,						#isMetaSide : false					},					#name : #tokens,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BufferStreamIntegrationTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BufferStreamIntegrationTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BufferStreamIntegrationTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1834' ],		#self : OmReference [ '1835' ],		#time : DateAndTime [ '2017-12-12T08:00:10.914992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2CompositeNodeTest\r\tinstanceVariableNames: \'result parser resultContext\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2CompositeNodeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CompositeNodeTest,						#isMetaSide : false					},					#name : #result,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CompositeNodeTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CompositeNodeTest,						#isMetaSide : false					},					#name : #resultContext,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CompositeNodeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CompositeNodeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CompositeNodeTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1835' ],		#self : OmReference [ '1836' ],		#time : DateAndTime [ '2017-12-12T08:00:10.919992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2AdaptableGrammarTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #PP2AdaptableGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableGrammarTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableGrammarTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1836' ],		#self : OmReference [ '1837' ],		#time : DateAndTime [ '2017-12-12T08:00:10.923992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2AdaptableGrammarTest_Optimized\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #PP2AdaptableGrammarTest_Optimized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AdaptableGrammarTest_Optimized class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AdaptableGrammarTest_Optimized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AdaptableGrammarTest_Optimized,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1837' ],		#self : OmReference [ '1838' ],		#time : DateAndTime [ '2017-12-12T08:00:10.930992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2ExpressionGrammarTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #PP2ExpressionGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionGrammarTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionGrammarTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1838' ],		#self : OmReference [ '1839' ],		#time : DateAndTime [ '2017-12-12T08:00:10.935992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2ExpressionGrammarTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2ExpressionGrammarTest subclass: #PP2ExpressionParserTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #PP2ExpressionParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1839' ],		#self : OmReference [ '1840' ],		#time : DateAndTime [ '2017-12-12T08:00:10.939992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2ExpressionGrammarTest_Optimized\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #PP2ExpressionGrammarTest_Optimized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionGrammarTest_Optimized class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionGrammarTest_Optimized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionGrammarTest_Optimized,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1840' ],		#self : OmReference [ '1841' ],		#time : DateAndTime [ '2017-12-12T08:00:10.943992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2HtmlHeaderGrammarTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #PP2HtmlHeaderGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2HtmlHeaderGrammarTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2HtmlHeaderGrammarTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2HtmlHeaderGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1841' ],		#self : OmReference [ '1842' ],		#time : DateAndTime [ '2017-12-12T08:00:10.946992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Nodes,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1842' ],		#self : OmReference [ '1843' ],		#time : DateAndTime [ '2017-12-12T08:00:10.949992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2CsNodeTest\r\tinstanceVariableNames: \'node context\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2CsNodeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CsNodeTest,						#isMetaSide : false					},					#name : #node,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CsNodeTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CsNodeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CsNodeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CsNodeTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1843' ],		#self : OmReference [ '1844' ],		#time : DateAndTime [ '2017-12-12T08:00:10.953992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2InterpetParseTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Parsing\''			},			#name : #PP2InterpetParseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InterpetParseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InterpetParseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InterpetParseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Parsing,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1844' ],		#self : OmReference [ '1845' ],		#time : DateAndTime [ '2017-12-12T08:00:10.960992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2OptimizationParserTest\r\tinstanceVariableNames: \'context\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2OptimizationParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2OptimizationParserTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2OptimizationParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2OptimizationParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2OptimizationParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1845' ],		#self : OmReference [ '1846' ],		#time : DateAndTime [ '2017-12-12T08:00:10.964992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2PredicateTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2PredicateTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PredicateTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PredicateTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PredicateTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1846' ],		#self : OmReference [ '1847' ],		#time : DateAndTime [ '2017-12-12T08:00:10.968992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2SeaOptimizationParserTest\r\tinstanceVariableNames: \'result\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Seas\''			},			#name : #PP2SeaOptimizationParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaOptimizationParserTest,						#isMetaSide : false					},					#name : #result,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SeaOptimizationParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SeaOptimizationParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SeaOptimizationParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Seas,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1847' ],		#self : OmReference [ '1848' ],		#time : DateAndTime [ '2017-12-12T08:00:10.973992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2SeaParserTest\r\tinstanceVariableNames: \'result\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Seas\''			},			#name : #PP2SeaParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaParserTest,						#isMetaSide : false					},					#name : #result,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SeaParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SeaParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SeaParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Seas,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1848' ],		#self : OmReference [ '1849' ],		#time : DateAndTime [ '2017-12-12T08:00:10.980992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2AbstractParserTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2AbstractParserTest subclass: #PP2WaterNodeTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2WaterNodeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WaterNodeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WaterNodeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WaterNodeTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1849' ],		#self : OmReference [ '1850' ],		#time : DateAndTime [ '2017-12-12T08:00:10.984992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2AllNodesCacheTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2AllNodesCacheTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AllNodesCacheTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AllNodesCacheTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AllNodesCacheTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1850' ],		#self : OmReference [ '1851' ],		#time : DateAndTime [ '2017-12-12T08:00:10.989992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Analysis,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1851' ],		#self : OmReference [ '1852' ],		#time : DateAndTime [ '2017-12-12T08:00:10.990992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2AllNodesVisitorTest\r\tinstanceVariableNames: \'children parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2AllNodesVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AllNodesVisitorTest,						#isMetaSide : false					},					#name : #children,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AllNodesVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2AllNodesVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2AllNodesVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2AllNodesVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2AllNodesVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1852' ],		#self : OmReference [ '1853' ],		#time : DateAndTime [ '2017-12-12T08:00:10.994992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2BufferStreamTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #PP2BufferStreamTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BufferStreamTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BufferStreamTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BufferStreamTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1853' ],		#self : OmReference [ '1854' ],		#time : DateAndTime [ '2017-12-12T08:00:11.000992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2BypassVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2BypassVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BypassVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BypassVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BypassVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BypassVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BypassVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1854' ],		#self : OmReference [ '1855' ],		#time : DateAndTime [ '2017-12-12T08:00:11.005992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2CommonPrefixVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2CommonPrefixVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CommonPrefixVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2CommonPrefixVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2CommonPrefixVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2CommonPrefixVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2CommonPrefixVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1855' ],		#self : OmReference [ '1856' ],		#time : DateAndTime [ '2017-12-12T08:00:11.009992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ContextChangesVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2ContextChangesVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextChangesVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextChangesVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextChangesVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextChangesVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextChangesVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1856' ],		#self : OmReference [ '1857' ],		#time : DateAndTime [ '2017-12-12T08:00:11.013992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ContextMementoTest\r\tinstanceVariableNames: \'memento\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2ContextMementoTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextMementoTest,						#isMetaSide : false					},					#name : #memento,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextMementoTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextMementoTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextMementoTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1857' ],		#self : OmReference [ '1858' ],		#time : DateAndTime [ '2017-12-12T08:00:11.019992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ContextMemoizationVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2ContextMemoizationVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextMemoizationVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextMemoizationVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextMemoizationVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextMemoizationVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextMemoizationVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1858' ],		#self : OmReference [ '1859' ],		#time : DateAndTime [ '2017-12-12T08:00:11.024992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ContextSensitivityVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2ContextSensitivityVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextSensitivityVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ContextSensitivityVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextSensitivityVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextSensitivityVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextSensitivityVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1859' ],		#self : OmReference [ '1860' ],		#time : DateAndTime [ '2017-12-12T08:00:11.028992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ContextTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2ContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ContextTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ContextTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1860' ],		#self : OmReference [ '1861' ],		#time : DateAndTime [ '2017-12-12T08:00:11.032992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Debug,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1861' ],		#self : OmReference [ '1862' ],		#time : DateAndTime [ '2017-12-12T08:00:11.034992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2DebugResultIntegrationTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Debug\''			},			#name : #PP2DebugResultIntegrationTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DebugResultIntegrationTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DebugResultIntegrationTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DebugResultIntegrationTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Debug,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1862' ],		#self : OmReference [ '1863' ],		#time : DateAndTime [ '2017-12-12T08:00:11.037992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2DebugResultTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Debug\''			},			#name : #PP2DebugResultTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DebugResultTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DebugResultTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DebugResultTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Debug,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1863' ],		#self : OmReference [ '1864' ],		#time : DateAndTime [ '2017-12-12T08:00:11.043992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2DebuggingStrategyTest\r\tinstanceVariableNames: \'strategy node\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Debug\''			},			#name : #PP2DebuggingStrategyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebuggingStrategyTest,						#isMetaSide : false					},					#name : #strategy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DebuggingStrategyTest,						#isMetaSide : false					},					#name : #node,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DebuggingStrategyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DebuggingStrategyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DebuggingStrategyTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Debug,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1864' ],		#self : OmReference [ '1865' ],		#time : DateAndTime [ '2017-12-12T08:00:11.049992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2DeleteCharacterTest\r\tinstanceVariableNames: \'key change context memento buffer newBuffer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #PP2DeleteCharacterTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DeleteCharacterTest,						#isMetaSide : false					},					#name : #key,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DeleteCharacterTest,						#isMetaSide : false					},					#name : #change,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DeleteCharacterTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DeleteCharacterTest,						#isMetaSide : false					},					#name : #memento,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DeleteCharacterTest,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2DeleteCharacterTest,						#isMetaSide : false					},					#name : #newBuffer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2DeleteCharacterTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2DeleteCharacterTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2DeleteCharacterTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1865' ],		#self : OmReference [ '1866' ],		#time : DateAndTime [ '2017-12-12T08:00:11.053992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2FirstCharSetTest\r\tinstanceVariableNames: \'firstCharSet\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2FirstCharSetTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstCharSetTest,						#isMetaSide : false					},					#name : #firstCharSet,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstCharSetTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstCharSetTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstCharSetTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1866' ],		#self : OmReference [ '1867' ],		#time : DateAndTime [ '2017-12-12T08:00:11.057992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2FirstProductionSetCacheTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2FirstProductionSetCacheTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstProductionSetCacheTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstProductionSetCacheTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstProductionSetCacheTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1867' ],		#self : OmReference [ '1868' ],		#time : DateAndTime [ '2017-12-12T08:00:11.061992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2FirstSetCacheTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2FirstSetCacheTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstSetCacheTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstSetCacheTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstSetCacheTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1868' ],		#self : OmReference [ '1869' ],		#time : DateAndTime [ '2017-12-12T08:00:11.065992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2FirstSetVisitorTest\r\tinstanceVariableNames: \'parser visitor firstSet\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2FirstSetVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstSetVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstSetVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2FirstSetVisitorTest,						#isMetaSide : false					},					#name : #firstSet,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2FirstSetVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2FirstSetVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2FirstSetVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1869' ],		#self : OmReference [ '1870' ],		#time : DateAndTime [ '2017-12-12T08:00:11.070992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2GuardVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2GuardVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2GuardVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2GuardVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2GuardVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2GuardVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2GuardVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1870' ],		#self : OmReference [ '1871' ],		#time : DateAndTime [ '2017-12-12T08:00:11.076992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2InMemoryContextTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2InMemoryContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InMemoryContextTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InMemoryContextTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InMemoryContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1871' ],		#self : OmReference [ '1872' ],		#time : DateAndTime [ '2017-12-12T08:00:11.081992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2InsertCharacterTest\r\tinstanceVariableNames: \'key change context memento buffer newBuffer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #PP2InsertCharacterTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacterTest,						#isMetaSide : false					},					#name : #key,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacterTest,						#isMetaSide : false					},					#name : #change,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacterTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacterTest,						#isMetaSide : false					},					#name : #memento,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacterTest,						#isMetaSide : false					},					#name : #buffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2InsertCharacterTest,						#isMetaSide : false					},					#name : #newBuffer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2InsertCharacterTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2InsertCharacterTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2InsertCharacterTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1872' ],		#self : OmReference [ '1873' ],		#time : DateAndTime [ '2017-12-12T08:00:11.085992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2IsNullableCacheTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2IsNullableCacheTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2IsNullableCacheTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2IsNullableCacheTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2IsNullableCacheTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1873' ],		#self : OmReference [ '1874' ],		#time : DateAndTime [ '2017-12-12T08:00:11.090992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2IsNullableVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2IsNullableVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2IsNullableVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2IsNullableVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2IsNullableVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2IsNullableVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2IsNullableVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1874' ],		#self : OmReference [ '1875' ],		#time : DateAndTime [ '2017-12-12T08:00:11.095992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NextSetsContextTest\r\tinstanceVariableNames: \'o1 o2 context1 context2 o3\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2NextSetsContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsContextTest,						#isMetaSide : false					},					#name : #o1,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsContextTest,						#isMetaSide : false					},					#name : #o2,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsContextTest,						#isMetaSide : false					},					#name : #context1,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsContextTest,						#isMetaSide : false					},					#name : #context2,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsContextTest,						#isMetaSide : false					},					#name : #o3,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NextSetsContextTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NextSetsContextTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NextSetsContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1875' ],		#self : OmReference [ '1876' ],		#time : DateAndTime [ '2017-12-12T08:00:11.100992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NextSetsVisitorTest\r\tinstanceVariableNames: \'parser visitor nextSet eoi nextParser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Analysis\''			},			#name : #PP2NextSetsVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitorTest,						#isMetaSide : false					},					#name : #nextSet,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitorTest,						#isMetaSide : false					},					#name : #eoi,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NextSetsVisitorTest,						#isMetaSide : false					},					#name : #nextParser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NextSetsVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NextSetsVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NextSetsVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Analysis,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1876' ],		#self : OmReference [ '1877' ],		#time : DateAndTime [ '2017-12-12T08:00:11.103992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NodeCopyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2NodeCopyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeCopyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NodeCopyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeCopyTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1877' ],		#self : OmReference [ '1878' ],		#time : DateAndTime [ '2017-12-12T08:00:11.108992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NodeDebugTest\r\tinstanceVariableNames: \'parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2NodeDebugTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NodeDebugTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeDebugTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NodeDebugTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeDebugTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1878' ],		#self : OmReference [ '1879' ],		#time : DateAndTime [ '2017-12-12T08:00:11.114992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NodeEqualityTest\r\tinstanceVariableNames: \'parserOne parserTwo\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2NodeEqualityTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NodeEqualityTest,						#isMetaSide : false					},					#name : #parserOne,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NodeEqualityTest,						#isMetaSide : false					},					#name : #parserTwo,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeEqualityTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NodeEqualityTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeEqualityTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1879' ],		#self : OmReference [ '1880' ],		#time : DateAndTime [ '2017-12-12T08:00:11.118992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NodeTransformationTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2NodeTransformationTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NodeTransformationTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NodeTransformationTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NodeTransformationTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1880' ],		#self : OmReference [ '1881' ],		#time : DateAndTime [ '2017-12-12T08:00:11.122992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2NoopVisitorTest\r\tinstanceVariableNames: \'parser visitor result\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2NoopVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2NoopVisitorTest,						#isMetaSide : false					},					#name : #result,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2NoopVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2NoopVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2NoopVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1881' ],		#self : OmReference [ '1882' ],		#time : DateAndTime [ '2017-12-12T08:00:11.128992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2OptimizationIntegrationTest\r\tinstanceVariableNames: \'parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2OptimizationIntegrationTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2OptimizationIntegrationTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2OptimizationIntegrationTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2OptimizationIntegrationTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2OptimizationIntegrationTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1882' ],		#self : OmReference [ '1883' ],		#time : DateAndTime [ '2017-12-12T08:00:11.132992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2PackratVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2PackratVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PackratVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2PackratVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2PackratVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2PackratVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2PackratVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1883' ],		#self : OmReference [ '1884' ],		#time : DateAndTime [ '2017-12-12T08:00:11.137992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ParentAnalysisVisitorTest\r\tinstanceVariableNames: \'parser visitor parent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2ParentAnalysisVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParentAnalysisVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParentAnalysisVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParentAnalysisVisitorTest,						#isMetaSide : false					},					#name : #parent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ParentAnalysisVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ParentAnalysisVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ParentAnalysisVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1884' ],		#self : OmReference [ '1885' ],		#time : DateAndTime [ '2017-12-12T08:00:11.140992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Strategies,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1885' ],		#self : OmReference [ '1886' ],		#time : DateAndTime [ '2017-12-12T08:00:11.142992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ParsingGuardTest\r\tinstanceVariableNames: \'classification retval\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Strategies\''			},			#name : #PP2ParsingGuardTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParsingGuardTest,						#isMetaSide : false					},					#name : #classification,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParsingGuardTest,						#isMetaSide : false					},					#name : #retval,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ParsingGuardTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ParsingGuardTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ParsingGuardTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Strategies,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1886' ],		#self : OmReference [ '1887' ],		#time : DateAndTime [ '2017-12-12T08:00:11.146992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2RecognizerVisitorTest\r\tinstanceVariableNames: \'parser visitor token sequence\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2RecognizerVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerVisitorTest,						#isMetaSide : false					},					#name : #token,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2RecognizerVisitorTest,						#isMetaSide : false					},					#name : #sequence,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecognizerVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecognizerVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecognizerVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1887' ],		#self : OmReference [ '1888' ],		#time : DateAndTime [ '2017-12-12T08:00:11.150992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tests-Profiling,		#affectedPackageName : #PetitParser2-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1888' ],		#self : OmReference [ '1889' ],		#time : DateAndTime [ '2017-12-12T08:00:11.151992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2RecordingCacheTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Profiling\''			},			#name : #PP2RecordingCacheTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingCacheTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingCacheTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingCacheTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Profiling,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1889' ],		#self : OmReference [ '1890' ],		#time : DateAndTime [ '2017-12-12T08:00:11.158992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2RecordingContextTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Profiling\''			},			#name : #PP2RecordingContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2RecordingContextTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2RecordingContextTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2RecordingContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Profiling,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1890' ],		#self : OmReference [ '1891' ],		#time : DateAndTime [ '2017-12-12T08:00:11.163992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ReparsableContextTest\r\tinstanceVariableNames: \'context parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #PP2ReparsableContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableContextTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableContextTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparsableContextTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparsableContextTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparsableContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1891' ],		#self : OmReference [ '1892' ],		#time : DateAndTime [ '2017-12-12T08:00:11.168992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ReparsableTest\r\tinstanceVariableNames: \'context memoized parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Strategies\''			},			#name : #PP2ReparsableTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableTest,						#isMetaSide : false					},					#name : #memoized,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparsableTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparsableTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparsableTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Strategies,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1892' ],		#self : OmReference [ '1893' ],		#time : DateAndTime [ '2017-12-12T08:00:11.172992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ReparsableVisitorTest\r\tinstanceVariableNames: \'reparsable parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2ReparsableVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableVisitorTest,						#isMetaSide : false					},					#name : #reparsable,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ReparsableVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ReparsableVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ReparsableVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ReparsableVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1893' ],		#self : OmReference [ '1894' ],		#time : DateAndTime [ '2017-12-12T08:00:11.177992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2SeaNodeTest\r\tinstanceVariableNames: \'parser sea\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Nodes\''			},			#name : #PP2SeaNodeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaNodeTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaNodeTest,						#isMetaSide : false					},					#name : #sea,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SeaNodeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SeaNodeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SeaNodeTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Nodes,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1894' ],		#self : OmReference [ '1895' ],		#time : DateAndTime [ '2017-12-12T08:00:11.182992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2SeaOptimizationVisitorTest\r\tinstanceVariableNames: \'sea parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2SeaOptimizationVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaOptimizationVisitorTest,						#isMetaSide : false					},					#name : #sea,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SeaOptimizationVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SeaOptimizationVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SeaOptimizationVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SeaOptimizationVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1895' ],		#self : OmReference [ '1896' ],		#time : DateAndTime [ '2017-12-12T08:00:11.194992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2SpecializingVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2SpecializingVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SpecializingVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SpecializingVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SpecializingVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SpecializingVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SpecializingVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1896' ],		#self : OmReference [ '1897' ],		#time : DateAndTime [ '2017-12-12T08:00:11.199992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2StreamTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #PP2StreamTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2StreamTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2StreamTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2StreamTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1897' ],		#self : OmReference [ '1898' ],		#time : DateAndTime [ '2017-12-12T08:00:11.204992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2TransformVisitorTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2TransformVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TransformVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TransformVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TransformVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1898' ],		#self : OmReference [ '1899' ],		#time : DateAndTime [ '2017-12-12T08:00:11.209992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2TrimmingCacheVisitorTest\r\tinstanceVariableNames: \'parser visitor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #PP2TrimmingCacheVisitorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingCacheVisitorTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2TrimmingCacheVisitorTest,						#isMetaSide : false					},					#name : #visitor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2TrimmingCacheVisitorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2TrimmingCacheVisitorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2TrimmingCacheVisitorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1899' ],		#self : OmReference [ '1900' ],		#time : DateAndTime [ '2017-12-12T08:00:11.243992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #PP2MinimalStream\r\tinstanceVariableNames: \'values position\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2MinimalStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MinimalStream,						#isMetaSide : false					},					#name : #values,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MinimalStream,						#isMetaSide : false					},					#name : #position,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MinimalStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MinimalStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MinimalStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide a bare minimum of methods required by PP2 to be parsed:\r- atEnd\r- next\r\rI can be converted to PP2Stream using the #asPetit2Stream',				#stamp : 'JanKurs 9/3/2016 11:55'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide a bare minimum of methods required by PP2 to be parsed:\r- atEnd\r- next\r\rI can be converted to PP2Stream using the #asPetit2Stream',		#newStamp : 'JanKurs 9/3/2016 11:55'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1900' ],		#self : OmReference [ '1901' ],		#time : DateAndTime [ '2017-12-12T08:00:11.245992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #PP2MinimalStream\r\tinstanceVariableNames: \'values position\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #PP2MinimalStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MinimalStream,						#isMetaSide : false					},					#name : #values,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MinimalStream,						#isMetaSide : false					},					#name : #position,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MinimalStream class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MinimalStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MinimalStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide a bare minimum of methods required by PP2 to be parsed:\r- atEnd\r- next\r\rI can be converted to PP2Stream using the #asPetit2Stream',				#stamp : 'JanKurs 9/3/2016 11:55'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1901' ],		#self : OmReference [ '1902' ],		#time : DateAndTime [ '2017-12-12T08:00:11.252992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2NoopVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'PP2NoopVisitor subclass: #PP2MockNoopVisitor\r\tinstanceVariableNames: \'visitOrder\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2MockNoopVisitor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2MockNoopVisitor,						#isMetaSide : false					},					#name : #visitOrder,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2MockNoopVisitor class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2MockNoopVisitor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2MockNoopVisitor,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1902' ],		#self : OmReference [ '1903' ],		#time : DateAndTime [ '2017-12-12T08:00:11.256992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestResource',				#traitCompositionSource : '{}',				#definitionSource : 'TestResource subclass: #PP2ParserResource\r\tinstanceVariableNames: \'parsers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #PP2ParserResource,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ParserResource,						#isMetaSide : false					},					#name : #parsers,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ParserResource class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ParserResource class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ParserResource,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1903' ],		#self : OmReference [ '1904' ],		#time : DateAndTime [ '2017-12-12T08:00:11.270992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AdaptableGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2AdaptableGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AdaptableGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2AdaptableGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AdaptableGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : 'TestSuite for PP2AdaptableGrammar',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2AdaptableGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2AdaptableGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2AdaptableGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2AdaptableGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2AdaptableGrammarTest,					#isMetaSide : false				},				#parent : @18,				#content : 'TestSuite for PP2AdaptableGrammar',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1904' ],		#self : OmReference [ '1905' ],		#time : DateAndTime [ '2017-12-12T08:00:11.518992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ChangeAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #TPP2ChangeAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ChangeAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2ChangeAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ChangeAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ChangeAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #TPP2ChangeAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ChangeAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2ChangeAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ChangeAssertions,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1905' ],		#self : OmReference [ '1906' ],		#time : DateAndTime [ '2017-12-12T08:00:11.520992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2CollectionAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2CollectionAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2CollectionAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2CollectionAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2CollectionAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2CollectionAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2CollectionAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2CollectionAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2CollectionAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2CollectionAssertions,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1906' ],		#self : OmReference [ '1907' ],		#time : DateAndTime [ '2017-12-12T08:00:11.717992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ContextTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2ContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ContextTest classTrait\r\tuses: {}'				},				#name : #'TPP2ContextTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ContextTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ContextTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2ContextTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ContextTest classTrait\r\tuses: {}'				},				#name : #'TPP2ContextTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ContextTest,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1907' ],		#self : OmReference [ '1908' ],		#time : DateAndTime [ '2017-12-12T08:00:12.593992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2DebuggableTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2DebuggableTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2DebuggableTest classTrait\r\tuses: {}'				},				#name : #'TPP2DebuggableTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2DebuggableTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2DebuggableTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Core\''			},			#name : #TPP2DebuggableTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2DebuggableTest classTrait\r\tuses: {}'				},				#name : #'TPP2DebuggableTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2DebuggableTest,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Core,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1908' ],		#self : OmReference [ '1909' ],		#time : DateAndTime [ '2017-12-12T08:00:12.904992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : 'TestSuite for PP2ExpressionGrammar',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionGrammarTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionGrammarTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionGrammarTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionGrammarTest,					#isMetaSide : false				},				#parent : @18,				#content : 'TestSuite for PP2ExpressionGrammar',				#stamp : 'JanKurs 9/6/2016 14:04'			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1909' ],		#self : OmReference [ '1910' ],		#time : DateAndTime [ '2017-12-12T08:00:13.375992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionParserTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ExpressionParserTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Examples\''			},			#name : #TPP2ExpressionParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ExpressionParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2ExpressionParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ExpressionParserTest,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Examples,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1910' ],		#self : OmReference [ '1911' ],		#time : DateAndTime [ '2017-12-12T08:00:13.418992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ParseTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Parsing\''			},			#name : #TPP2ParseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ParseTest classTrait\r\tuses: {}'				},				#name : #'TPP2ParseTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ParseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Parsing,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ParseTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Parsing\''			},			#name : #TPP2ParseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ParseTest classTrait\r\tuses: {}'				},				#name : #'TPP2ParseTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ParseTest,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Parsing,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1911' ],		#self : OmReference [ '1912' ],		#time : DateAndTime [ '2017-12-12T08:00:15.203992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ReparsableAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #TPP2ReparsableAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ReparsableAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2ReparsableAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ReparsableAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2ReparsableAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Reparsing\''			},			#name : #TPP2ReparsableAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2ReparsableAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2ReparsableAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2ReparsableAssertions,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Reparsing,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1912' ],		#self : OmReference [ '1913' ],		#time : DateAndTime [ '2017-12-12T08:00:15.361992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SeaParserTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Seas\''			},			#name : #TPP2SeaParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SeaParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2SeaParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SeaParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Seas,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SeaParserTest\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Seas\''			},			#name : #TPP2SeaParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SeaParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2SeaParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SeaParserTest,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Seas,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1913' ],		#self : OmReference [ '1914' ],		#time : DateAndTime [ '2017-12-12T08:00:16.134992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2StreamContextInterface\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #TPP2StreamContextInterface,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2StreamContextInterface classTrait\r\tuses: {}'				},				#name : #'TPP2StreamContextInterface classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2StreamContextInterface,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2StreamContextInterface\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Streams\''			},			#name : #TPP2StreamContextInterface,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2StreamContextInterface classTrait\r\tuses: {}'				},				#name : #'TPP2StreamContextInterface classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2StreamContextInterface,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Streams,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1914' ],		#self : OmReference [ '1915' ],		#time : DateAndTime [ '2017-12-12T08:00:16.342992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2TypeAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #TPP2TypeAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2TypeAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2TypeAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2TypeAssertions,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2TypeAssertions\r\tuses: {}\r\tcategory: \'PetitParser2-Tests-Optimizations\''			},			#name : #TPP2TypeAssertions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2TypeAssertions classTrait\r\tuses: {}'				},				#name : #'TPP2TypeAssertions classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2TypeAssertions,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Tests-Optimizations,			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1915' ],		#self : OmReference [ '1916' ],		#time : DateAndTime [ '2017-12-12T08:01:00.986992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AdaptableGrammarTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2AdaptableGrammar',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1916' ],		#self : OmReference [ '1917' ],		#time : DateAndTime [ '2017-12-12T08:01:00.988992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AdaptableGrammarTest,				#isMetaSide : false			},			#name : #testContent,			#protocol : #tests,			#sourceCode : 'testContent\r\tself parse: \'1_2__3___\' rule: #content.\r\tself fail: \'1_2\' rule: #content.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1917' ],		#self : OmReference [ '1918' ],		#time : DateAndTime [ '2017-12-12T08:01:00.990992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AdaptableGrammarTest,				#isMetaSide : false			},			#name : #testElement,			#protocol : #tests,			#sourceCode : 'testElement\r\tself parse: \'1a\' rule: #element.\r\tself parse: \'2aa\' rule: #element.\r\tself fail: \'2a\' rule: #element.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1918' ],		#self : OmReference [ '1919' ],		#time : DateAndTime [ '2017-12-12T08:01:00.991992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AdaptableGrammarTest,				#isMetaSide : false			},			#name : #testElementNumberInBody,			#protocol : #tests,			#sourceCode : 'testElementNumberInBody\r\tself parse: \'10___4______\' rule: #content.\r\tself fail: \'1_2\' rule: #content.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1919' ],		#self : OmReference [ '1920' ],		#time : DateAndTime [ '2017-12-12T08:01:00.992992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2AdaptableGrammarTest,				#isMetaSide : false			},			#name : #testHead,			#protocol : #tests,			#sourceCode : 'testHead\r\tself parse: \'1\' rule: #head',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1920' ],		#self : OmReference [ '1921' ],		#time : DateAndTime [ '2017-12-12T08:01:00.993992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2CollectionAssertions,				#isMetaSide : false			},			#name : #'assert:allSatisfy:',			#protocol : #assertions,			#sourceCode : 'assert: aCollection allSatisfy: aBlock\r\tself assert: (aCollection allSatisfy: aBlock)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1921' ],		#self : OmReference [ '1922' ],		#time : DateAndTime [ '2017-12-12T08:01:00.994992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2CollectionAssertions,				#isMetaSide : false			},			#name : #'assert:anySatisfy:',			#protocol : #assertions,			#sourceCode : 'assert: aCollection anySatisfy: aBlock\r\tself assert: (aCollection anySatisfy: aBlock)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1922' ],		#self : OmReference [ '1923' ],		#time : DateAndTime [ '2017-12-12T08:01:00.996992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2CollectionAssertions,				#isMetaSide : false			},			#name : #'assert:includes:',			#protocol : #assertions,			#sourceCode : 'assert: aCollection includes: aBlock\r\tself assert: (aCollection includes: aBlock)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1923' ],		#self : OmReference [ '1924' ],		#time : DateAndTime [ '2017-12-12T08:01:00.998992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2CollectionAssertions,				#isMetaSide : false			},			#name : #'assert:noneSatisfy:',			#protocol : #assertions,			#sourceCode : 'assert: aCollection noneSatisfy: aBlock\r\tself assert: (aCollection noneSatisfy: aBlock)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1924' ],		#self : OmReference [ '1925' ],		#time : DateAndTime [ '2017-12-12T08:01:00.999992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #'contextOn:',			#protocol : #requirements,			#sourceCode : 'contextOn: aString\r\tself explicitRequirement',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1925' ],		#self : OmReference [ '1926' ],		#time : DateAndTime [ '2017-12-12T08:01:01.001992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testAdoptString,			#protocol : #tests,			#sourceCode : 'testAdoptString\r\t| context |\r\tcontext := self contextOn: \'foo\'.\r\t\r\tself assert: context contents equals: \'foo\'.\r\t\r\tcontext adoptString: \'bar\'.\r\tself assert: context contents equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1926' ],		#self : OmReference [ '1927' ],		#time : DateAndTime [ '2017-12-12T08:01:01.002992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testAtEnd,			#protocol : #tests,			#sourceCode : 'testAtEnd\r\t| context |\r\tcontext := self contextOn: \'foo\'.\r\t\r\tself deny: context atEnd.\r\tcontext next: 3.\r\tself assert: context atEnd.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1927' ],		#self : OmReference [ '1928' ],		#time : DateAndTime [ '2017-12-12T08:01:01.003992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testContents,			#protocol : #tests,			#sourceCode : 'testContents\r\t| context |\r\tcontext := self contextOn: \'foo\'.\r\t\r\tself assert: (context respondsTo: #contents).\r\tself assert: context contents equals: \'foo\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1928' ],		#self : OmReference [ '1929' ],		#time : DateAndTime [ '2017-12-12T08:01:01.004992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testCopyGlobals,			#protocol : #tests,			#sourceCode : 'testCopyGlobals\r\t| context contextCopy |\r\tcontext := self contextOn: \'foo\'.\r\tcontext globals: (IdentityDictionary newFromPairs: { #a . #b }).\r\t\r\tcontextCopy := context copy.\r\t\r\tself assert: context globals equals: contextCopy globals.\r\tself assert: context globals ~~ contextCopy globals.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1929' ],		#self : OmReference [ '1930' ],		#time : DateAndTime [ '2017-12-12T08:01:01.005992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testMemo,			#protocol : #tests,			#sourceCode : 'testMemo\r\t| context memento |\r\tcontext := self contextOn: \'foobar\'.\r\tcontext propertyAt: #foo put: #bar.\r\tmemento := context remember.\r\r\tcontext next.\r\tcontext propertyAt: #bar put: #baz.\r\tcontext propertyAt: #foo put: #bark.\r\r\tcontext restore: memento.\r\tself assert: context position equals: 0.\r\tself deny: (context hasProperty: #bar).\r\tself assert: (context propertyAt: #foo) equals: #bar.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1930' ],		#self : OmReference [ '1931' ],		#time : DateAndTime [ '2017-12-12T08:01:01.006992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testNext,			#protocol : #tests,			#sourceCode : 'testNext\r\t| retval context |\r\tcontext := self contextOn: \'foo\'.\r\t\r\tretval := context next: 3.\r\tself assert: retval isPetit2Success.\r\tself assert: retval equals: \'foo\'.\r\t\r\tretval := context next: 1.\r\tself assert: retval isNil.\r\t\r\tcontext position: 0.\r\tretval := context next: 3.\r\tself assert: retval isPetit2Success.\r\tself assert: retval = \'foo\'.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1931' ],		#self : OmReference [ '1932' ],		#time : DateAndTime [ '2017-12-12T08:01:01.007992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testNextAtEnd,			#protocol : #tests,			#sourceCode : 'testNextAtEnd\r\t| context retval |\r\tcontext := self contextOn: \'foo\'.\r\t\r\tcontext position: 3.\r\t\r\tretval := context next.\r\tself assert: retval isNil.\t\r\tself assert: context position equals: 3.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1932' ],		#self : OmReference [ '1933' ],		#time : DateAndTime [ '2017-12-12T08:01:01.010992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testParser,			#protocol : #tests,			#sourceCode : 'testParser\r\t| context parser |\r\tparser := $a asPParser.\r\t\r\tcontext := (self contextOn: \'bar\')\r\t\tparser: parser;\r\t\tyourself.\r\t\r\tself assert: context parser equals: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1933' ],		#self : OmReference [ '1934' ],		#time : DateAndTime [ '2017-12-12T08:01:01.011992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testRemember,			#protocol : #tests,			#sourceCode : 'testRemember\r\t| context memento |\r\tcontext := self contextOn: \'foobar\'.\r\tcontext propertyAt: #foo put: #bar.\r\tmemento := context remember.\r\r\tself assert: memento position equals: context position.\r\tself assert: memento properties equals: context properties.\r\r\tcontext propertyAt: #foo put: #baz.\r\tself assert: (memento propertyAt: #foo) equals: #bar.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1934' ],		#self : OmReference [ '1935' ],		#time : DateAndTime [ '2017-12-12T08:01:01.012992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testRestore,			#protocol : #tests,			#sourceCode : 'testRestore\r\t| context memento |\r\tcontext := self contextOn: \'foobar\'.\r\tcontext propertyAt: #foo put: #bar.\r\tmemento := context remember.\r\r\tcontext next.\r\tcontext propertyAt: #foo put: #baz.\r\tcontext propertyAt: #bar put: #baq.\r\r\tcontext restore: memento.\r\tself deny: (context hasProperty: #bar).\r\tself assert: (context propertyAt: #foo) equals: #bar.\r\tself assert: context position equals: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1935' ],		#self : OmReference [ '1936' ],		#time : DateAndTime [ '2017-12-12T08:01:01.013992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testSuccess,			#protocol : #tests,			#sourceCode : 'testSuccess\r\t| context |\r\tcontext := (self contextOn: \'bar\')\r\t\tposition: 1;\r\t\treturnValue: #foo;\r\t\tyourself.\r\t\r\tself assert: context isPetit2Success.\r\tself assert: context value == #foo.\r\tself assert: context returnValue == #foo.\r\tself assert: context atEnd not.\r\tself assert: context uncheckedPeek == $a.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1936' ],		#self : OmReference [ '1937' ],		#time : DateAndTime [ '2017-12-12T08:01:01.014992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUncheckedNext,			#protocol : #tests,			#sourceCode : 'testUncheckedNext\r\t| context retval |\r\tcontext := self contextOn: \'foo\'.\r\t\r\tself assert: context position equals: 0.\r\t\r\tretval := context uncheckedNext.\r\tself assert: retval isPetit2Success.\r\tself assert: retval equals: $f.\r\tself assert: context position equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1937' ],		#self : OmReference [ '1938' ],		#time : DateAndTime [ '2017-12-12T08:01:01.015992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUncheckedPeek,			#protocol : #tests,			#sourceCode : 'testUncheckedPeek\r\t| context |\r\tcontext := self contextOn: \'foo\'.\r\t\t\r\tself assert: context uncheckedPeek == $f.\r\t\r\tcontext position: 3.\r\tself should: [context uncheckedPeek] raise: Error.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1938' ],		#self : OmReference [ '1939' ],		#time : DateAndTime [ '2017-12-12T08:01:01.016992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUpTo,			#protocol : #tests,			#sourceCode : 'testUpTo\r\t| context retval |\r\tcontext := self contextOn: \'foobar\'.\r\r\tself assert: context position equals: 0.\r\t\t\r\tretval := context upTo: $f.\r\r\tself assert: context position equals: 1.\r\tself assert: retval equals: \'f\'.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1939' ],		#self : OmReference [ '1940' ],		#time : DateAndTime [ '2017-12-12T08:01:01.017992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUpTo2,			#protocol : #tests,			#sourceCode : 'testUpTo2\r\t| context retval |\r\tcontext := self contextOn: \'foobar\'.\r\r\tself assert: context position equals: 0.\r\t\t\r\tretval := context upTo: $r.\r\r\tself assert: context position equals: 6.\r\tself assert: retval equals: \'foobar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1940' ],		#self : OmReference [ '1941' ],		#time : DateAndTime [ '2017-12-12T08:01:01.020992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUpTo3,			#protocol : #tests,			#sourceCode : 'testUpTo3\r\t| context retval |\r\tcontext := self contextOn: \'foobar\'.\r\r\tself assert: context position equals: 0.\r\t\t\r\tretval := context upTo: $x.\r\r\tself assert: context position equals: 6.\r\tself assert: retval equals: \'foobar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1941' ],		#self : OmReference [ '1942' ],		#time : DateAndTime [ '2017-12-12T08:01:01.021992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUpTo4,			#protocol : #tests,			#sourceCode : 'testUpTo4\r\t| context retval |\r\tcontext := self contextOn: \'foof\'.\r\r\tcontext next.\r\tself assert: context position equals: 1.\r\t\t\r\tretval := context upTo: $f.\r\r\tself assert: context position equals: 4.\r\tself assert: retval equals: \'oof\'.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1942' ],		#self : OmReference [ '1943' ],		#time : DateAndTime [ '2017-12-12T08:01:01.022992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ContextTest,				#isMetaSide : false			},			#name : #testUpToEnd,			#protocol : #tests,			#sourceCode : 'testUpToEnd\r\t| context retval |\r\tcontext := self contextOn: \'foobar\'.\r\r\tself assert: context position equals: 0.\r\t\t\r\tretval := context upToEnd.\r\r\tself assert: context position equals: 6.\r\tself assert: retval equals: \'foobar\'.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1943' ],		#self : OmReference [ '1944' ],		#time : DateAndTime [ '2017-12-12T08:01:01.023992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2ExpressionGrammar ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1944' ],		#self : OmReference [ '1945' ],		#time : DateAndTime [ '2017-12-12T08:01:01.024992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #testAddition,			#protocol : #testing,			#sourceCode : 'testAddition\r\tself parse: \'1 + 2\' rule: #addition.\r\tself parse: \'1 + (2 + 3)\' rule: #addition.\t\r\tself parse: \'1 + (2 * 3)\' rule: #addition.\t\t\r\t\t\r\tself fail: \'1 * 2\' rule: #addition.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1945' ],		#self : OmReference [ '1946' ],		#time : DateAndTime [ '2017-12-12T08:01:01.025992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #testMultiplication,			#protocol : #testing,			#sourceCode : 'testMultiplication\r\tself parse: \'1 * 2\' rule: #multiplication.\r\tself parse: \'1 * (2 + 3)\' rule: #multiplication.\t\r\tself parse: \'1 * (2 * 3)\' rule: #multiplication.\t\t\r\t\t\r\tself fail: \'1 + 2\' rule: #multiplication.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1946' ],		#self : OmReference [ '1947' ],		#time : DateAndTime [ '2017-12-12T08:01:01.026992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #testing,			#sourceCode : 'testNumber\r\tself parse: \'1\' rule: #number.\r\tself parse: \'10\' rule: #number.\r\tself parse: \'10.3\' rule: #number.\r\t\r\tself fail: \'foo\' rule: #number.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1947' ],		#self : OmReference [ '1948' ],		#time : DateAndTime [ '2017-12-12T08:01:01.027992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #testParentheses,			#protocol : #testing,			#sourceCode : 'testParentheses\r\tself parse: \'(1)\' rule: #parentheses.\r\tself parse: \'(1.2)\' rule: #parentheses.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1948' ],		#self : OmReference [ '1949' ],		#time : DateAndTime [ '2017-12-12T08:01:01.028992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #testPrimary,			#protocol : #testing,			#sourceCode : 'testPrimary\r\tself parse: \'10.3\' rule: #primary.\r\tself parse: \'(10.3)\' rule: #primary.\r\r\tself parse: \'(1 * 2 + 3)\' rule: #primary.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1949' ],		#self : OmReference [ '1950' ],		#time : DateAndTime [ '2017-12-12T08:01:01.030992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #testTerms,			#protocol : #testing,			#sourceCode : 'testTerms\r\tself parse: \'1\' rule: #terms.\r\tself parse: \'1 + 1\' rule: #terms.\r\tself parse: \'1 * 1\' rule: #terms.\r\tself parse: \'((1) * (2 + (3 + 4)))\' rule: #terms.\r\t\r\tself fail: \'1 ^ 1\' rule: #terms.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1950' ],		#self : OmReference [ '1951' ],		#time : DateAndTime [ '2017-12-12T08:01:01.031992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ExpressionParserTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #tests,			#sourceCode : 'testNumber\r\tself parse: \'1\' rule: #number to: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1951' ],		#self : OmReference [ '1952' ],		#time : DateAndTime [ '2017-12-12T08:01:01.032992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testAction,			#protocol : #test,			#sourceCode : 'testAction\r\t| parser |\r\tparser := #any asPParser ==> [:e | e asUppercase ].\r\r\tself assert: parser parse: \'a\' to: $A.\r\tself assert: parser parse: \'b\' to: $B',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1952' ],		#self : OmReference [ '1953' ],		#time : DateAndTime [ '2017-12-12T08:01:01.033992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testAnd,			#protocol : #test,			#sourceCode : 'testAnd\r\t| parser |\r\tparser := \'foo\' asPParser, \'bar\' asPParser and.\r\tself\r\t\tassert: parser\r\t\tparse: \'foobar\'\r\t\tto: #(\'foo\' \'bar\')\r\t\tend: 3.\r\r\tself assert: parser fail: \'foobaz\' end: 3.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1953' ],		#self : OmReference [ '1954' ],		#time : DateAndTime [ '2017-12-12T08:01:01.034992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testBlock,			#protocol : #test,			#sourceCode : 'testBlock\r\t| parser |\r\tparser := [ :ctx | \r\t\tself assert: (ctx isPetit2Context).\r\t\tctx next \r\t] asPParser.\r\t\r\tself assert: parser parse: \'ab\' to: $a end: 1.\r\tself assert: parser parse: \'b\' to: $b.\r\tself assert: parser parse: \'\' to: nil',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1954' ],		#self : OmReference [ '1955' ],		#time : DateAndTime [ '2017-12-12T08:01:01.035992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #test,			#sourceCode : 'testChoice\r\t| parser |\r\tparser := $a asPParser / $b asPParser.\r\t\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'b\' to: $b.\r\r\tself assert: parser parse: \'ab\' to: $a end: 1.\r\tself assert: parser parse: \'ba\' to: $b end: 1.\r\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'c\'.\r\tself assert: parser fail: \'ca\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1955' ],		#self : OmReference [ '1956' ],		#time : DateAndTime [ '2017-12-12T08:01:01.036992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testDelimitedBy,			#protocol : #'test - operators',			#sourceCode : 'testDelimitedBy\r\t| parser |\r\tparser := $a asPParser delimitedBy: $b asPParser.\r\t\r\tself assert: parser parse: \'a\' to: #($a).\r\tself assert: parser parse: \'aba\' to: #($a $b $a).\r\tself assert: parser parse: \'ababa\' to: #($a $b $a $b $a).\r\r\tself assert: parser parse: \'ab\' to: #($a $b).\r\tself assert: parser parse: \'abab\' to: #($a $b $a $b).\r\tself assert: parser parse: \'ababab\' to: #($a $b $a $b $a $b).\r\t\r\tself assert: parser parse: \'ac\' to: #($a) end: 1.\r\tself assert: parser parse: \'abc\' to: #($a $b) end: 2.\r\tself assert: parser parse: \'abac\' to: #($a $b $a) end: 3.\r\tself assert: parser parse: \'ababc\' to: #($a $b $a $b) end: 4.\r\t\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'b\'.\r\tself assert: parser fail: \'c\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1956' ],		#self : OmReference [ '1957' ],		#time : DateAndTime [ '2017-12-12T08:01:01.037992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testEnd,			#protocol : #test,			#sourceCode : 'testEnd\r\t| parser |\r\tparser := $a asPParser end.\r\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'aa\' end: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1957' ],		#self : OmReference [ '1958' ],		#time : DateAndTime [ '2017-12-12T08:01:01.038992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testEndLiteral,			#protocol : #test,			#sourceCode : 'testEndLiteral\r\t| parser |\r\tparser := \'stuff\' asPParser end.\r\r\tself assert: parser parse: \'stuff\' to: \'stuff\'.\r\tself assert: parser fail: \'stufff\' end: 5.\r\tself assert: parser fail: \'fluff\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1958' ],		#self : OmReference [ '1959' ],		#time : DateAndTime [ '2017-12-12T08:01:01.039992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testEpsilon,			#protocol : #test,			#sourceCode : 'testEpsilon\r\t| parser |\r\tparser := nil asPParser.\r\t\r\tself assert: parser parse: \'\' to: nil.\r\t\r\tself assert: parser parse: \'a\' to: nil end: 0.\r\tself assert: parser parse: \'ab\' to: nil end: 0',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1959' ],		#self : OmReference [ '1960' ],		#time : DateAndTime [ '2017-12-12T08:01:01.042992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testFailing,			#protocol : #test,			#sourceCode : 'testFailing\r\t| parser |\r\tparser := PP2FailingNode message: \'Plonk\'.\r\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'a\'.\r\tself assert: parser fail: \'aa\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1960' ],		#self : OmReference [ '1961' ],		#time : DateAndTime [ '2017-12-12T08:01:01.043992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testFlattenSequence,			#protocol : #test,			#sourceCode : 'testFlattenSequence\r\t| parser |\r\tparser := ($a asPParser, $b asPParser) flatten.\r\t\r\tself assert: parser parse: \'ab\' to: \'ab\'.\r\t\r\tself assert: parser fail: \'ac\' end: 1.\r\tself assert: parser fail: \'bc\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1961' ],		#self : OmReference [ '1962' ],		#time : DateAndTime [ '2017-12-12T08:01:01.044992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testFragment,			#protocol : #test,			#sourceCode : 'testFragment\r\t| fragment parser result |\r\tfragment := $a asPParser plus fragment.\r\tparser := fragment wrapped.\r\t\r\tresult := (self assert: parser parse: \'aa\') returnValue.\r\r\tself assert: result isPetit2Context.\r\tself assert: result start equals: 0.\r\tself assert: result stop equals: 2.\r\tself assert: result parsedValue size equals: 2.\r\tself assert: result parsedValue first equals: $a.\t\r\tself assert: result parsedValue second equals: $a.\r\tself assert: result parser == fragment.\t\r\t\r\tself assert: parser fail: \'b\'.\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1962' ],		#self : OmReference [ '1963' ],		#time : DateAndTime [ '2017-12-12T08:01:01.045992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #test,			#sourceCode : 'testLiteralObject\r\t| parser |\r\tparser := $a asPParser.\r\t\r\tself assert: parser literal equals: $a.\r\tself assert: parser message equals: \'literal $a expected\'.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser fail: \'b\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1963' ],		#self : OmReference [ '1964' ],		#time : DateAndTime [ '2017-12-12T08:01:01.046992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testLiteralObjectCaseInsensitive,			#protocol : #test,			#sourceCode : 'testLiteralObjectCaseInsensitive\r\t| parser |\r\tparser := $a asPParser caseInsensitive.\r\t\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'A\' to: $A.\r\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'b\'.\r\tself assert: parser fail: \'B\'\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1964' ],		#self : OmReference [ '1965' ],		#time : DateAndTime [ '2017-12-12T08:01:01.047992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testLiteralSequence,			#protocol : #test,			#sourceCode : 'testLiteralSequence\r\t| parser |\r\tparser := \'abc\' asPParser.\r\t\r\tself assert: parser parse: \'abc\' to: \'abc\'.\r\tself assert: parser parse: \'abcd\' to: \'abc\' end: 3.\r\r\tself assert: parser fail: \'ab\'.\r\tself assert: parser fail: \'abd\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1965' ],		#self : OmReference [ '1966' ],		#time : DateAndTime [ '2017-12-12T08:01:01.048992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testLiteralSequenceCaseInsensitive,			#protocol : #test,			#sourceCode : 'testLiteralSequenceCaseInsensitive\r\t| parser |\r\tparser := \'abc\' asPParser caseInsensitive.\r\t\r\tself assert: parser parse: \'abc\' to: \'abc\'.\r\tself assert: parser parse: \'ABC\' to: \'ABC\'.\r\tself assert: parser parse: \'abC\' to: \'abC\'.\r\tself assert: parser parse: \'AbC\' to: \'AbC\'.\r\t\r\tself assert: parser fail: \'ab\'.\r\tself assert: parser fail: \'abd\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1966' ],		#self : OmReference [ '1967' ],		#time : DateAndTime [ '2017-12-12T08:01:01.049992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testMap,			#protocol : #test,			#sourceCode : 'testMap\r\t| parser |\r\tparser := #any asPParser\r\t\tmap: [ :a | Array with: a ].\r\r\tself assert: parser parse: \'a\' to: #($a).\r\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1967' ],		#self : OmReference [ '1968' ],		#time : DateAndTime [ '2017-12-12T08:01:01.050992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testMapSequence,			#protocol : #test,			#sourceCode : 'testMapSequence\r\t| parser |\r\tparser := #any asPParser, #any asPParser\r\t\tmap: [ :a :b | Array with: b with: a ].\r\r\tself assert: parser parse: \'ab\' to: #($b $a)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1968' ],		#self : OmReference [ '1969' ],		#time : DateAndTime [ '2017-12-12T08:01:01.053992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testMapWrappedSequence,			#protocol : #test,			#sourceCode : 'testMapWrappedSequence\r\t| parser |\r\tparser := (#any asPParser, #any asPParser) wrapped\r\t\tmap: [ :a :b | Array with: b with: a ].\r\r\tself assert: parser parse: \'ab\' to: #($b $a)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1969' ],		#self : OmReference [ '1970' ],		#time : DateAndTime [ '2017-12-12T08:01:01.054992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testNot,			#protocol : #test,			#sourceCode : 'testNot\r\t| parser |\r\tparser := \'foo\' asPParser, \'bar\' asPParser  not.\r\t\r\tself assert: parser parse: \'foobaz\' to: #(\'foo\' nil) end: 3.\r\tself assert: parser fail: \'foobar\' end: 3',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1970' ],		#self : OmReference [ '1971' ],		#time : DateAndTime [ '2017-12-12T08:01:01.055992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testOptional,			#protocol : #test,			#sourceCode : 'testOptional\r\t| parser |\r\tparser := $a asPParser optional.\r\t\r\tself assert: parser parse: \'\' to: nil.\r\tself assert: parser parse: \'a\' to: $a.\r\t\r\tself assert: parser parse: \'aa\' to: $a end: 1.\r\tself assert: parser parse: \'ab\' to: $a end: 1.\r\tself assert: parser parse: \'b\' to: nil end: 0.\r\tself assert: parser parse: \'bb\' to: nil end: 0.\r\tself assert: parser parse: \'ba\' to: nil end: 0',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1971' ],		#self : OmReference [ '1972' ],		#time : DateAndTime [ '2017-12-12T08:01:01.056992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #test,			#sourceCode : 'testPlus\r\t| parser |\r\tparser := $a asPParser plus.\r\r\tself assert: parser parse: \'a\' to: #($a).\r\tself assert: parser parse: \'aa\' to: #($a $a).\r\tself assert: parser parse: \'aaa\' to: #($a $a $a).\r\tself assert: parser parse: \'ab\' to: #($a) end: 1.\r\tself assert: parser parse: \'aab\' to: #($a $a) end: 2.\r\tself assert: parser parse: \'aaab\' to: #($a $a $a) end: 3.\r\t\t\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'b\'.\r\tself assert: parser fail: \'ba\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1972' ],		#self : OmReference [ '1973' ],		#time : DateAndTime [ '2017-12-12T08:01:01.057992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testPlus2,			#protocol : #test,			#sourceCode : 'testPlus2\r\t| parser |\r\tparser := ($a asPParser, $b asPParser) plus.\r\t\r\tself assert: parser parse: \'ab\' to: #(#($a $b)).\r\tself assert: parser fail: \'a\' end: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1973' ],		#self : OmReference [ '1974' ],		#time : DateAndTime [ '2017-12-12T08:01:01.058992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testPredicateAny,			#protocol : #test,			#sourceCode : 'testPredicateAny\r\t|  parser |\r\t\r\tparser := #any asPParser.\r\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: Character null asString to: Character null.\r\t\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1974' ],		#self : OmReference [ '1975' ],		#time : DateAndTime [ '2017-12-12T08:01:01.059992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testPredicateDigit,			#protocol : #test,			#sourceCode : 'testPredicateDigit\r\t|  parser |\r\t\r\tparser := #digit asPParser.\r\r\tself assert: parser parse: \'1\' to: $1.\r\tself assert: parser parse: \'0\' to: $0.\r\tself assert: parser parse: \'9\' to: $9.\r\tself assert: parser fail: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1975' ],		#self : OmReference [ '1976' ],		#time : DateAndTime [ '2017-12-12T08:01:01.060992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testPredicateLetter,			#protocol : #test,			#sourceCode : 'testPredicateLetter\r\t|  parser |\r\t\r\tparser := #letter asPParser.\r\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'b\' to: $b.\r\tself assert: parser parse: \'z\' to: $z.\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1976' ],		#self : OmReference [ '1977' ],		#time : DateAndTime [ '2017-12-12T08:01:01.061992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testRepetitions,			#protocol : #test,			#sourceCode : 'testRepetitions\r\t| parser result |\r\tparser := (\'foo\' asPParser, \':=\' asPParser) plus.\r\t\r\tresult := (self assert: parser parse: \'foo:=\').\r\t\r\tself assert: result value size equals: 1.\r\tself assert: result value first equals: #(\'foo\' \':=\').\r\t\r\tself assert: parser fail: \'foo\' end: 3.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1977' ],		#self : OmReference [ '1978' ],		#time : DateAndTime [ '2017-12-12T08:01:01.064992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testSeparatedBy,			#protocol : #'test - operators',			#sourceCode : 'testSeparatedBy\r\t| parser |\r\tparser := $a asPParser separatedBy: $b asPParser.\r\t\r\tself assert: parser parse: \'a\' to: #($a).\r\tself assert: parser parse: \'aba\' to: #($a $b $a).\r\tself assert: parser parse: \'ababa\' to: #($a $b $a $b $a).\r\t\r\tself assert: parser parse: \'ab\' to: #($a) end: 1.\r\tself assert: parser parse: \'abab\' to: #($a $b $a) end: 3.\r\tself assert: parser parse: \'ac\' to: #($a) end: 1.\r\tself assert: parser parse: \'abac\' to: #($a $b $a) end: 3.\r\t\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'c\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1978' ],		#self : OmReference [ '1979' ],		#time : DateAndTime [ '2017-12-12T08:01:01.065992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #test,			#sourceCode : 'testSequence\r\t| parser |\r\tparser := $a asPParser , $b asPParser.\r\t\r\tself assert: parser parse: \'ab\' to: #($a $b).\r\t\r\tself assert: parser parse: \'aba\' to: #($a $b) end: 2.\r\tself assert: parser parse: \'abb\' to: #($a $b) end: 2.\r\t\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'a\' end: 1.\r\tself assert: parser fail: \'aa\' end: 1.\r\tself assert: parser fail: \'ba\' end: 0.\r\tself assert: parser fail: \'bab\' end: 0',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1979' ],		#self : OmReference [ '1980' ],		#time : DateAndTime [ '2017-12-12T08:01:01.066992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testSequence2,			#protocol : #test,			#sourceCode : 'testSequence2\r\t| parser |\r\tparser := ($a asPParser , $b asPParser) star, $a asPParser.\r\r\tself assert: parser parse: \'a\' to: (Array with: OrderedCollection new with: $a).\r\r\tself assert: parser fail: \'ab\' end: 2.\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1980' ],		#self : OmReference [ '1981' ],		#time : DateAndTime [ '2017-12-12T08:01:01.067992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testSequenceOfThree,			#protocol : #test,			#sourceCode : 'testSequenceOfThree\r\t| parser |\r\tparser := $a asPParser , $b asPParser, $c asPParser.\r\t\r\tself assert: parser parse: \'abc\' to: #($a $b $c).\r\tself assert: parser fail: \'ab\' end: 2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1981' ],		#self : OmReference [ '1982' ],		#time : DateAndTime [ '2017-12-12T08:01:01.068992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testStar,			#protocol : #test,			#sourceCode : 'testStar\r\t| parser |\r\tparser := $a asPParser star.\r\r\tself assert: parser parse: \'\' to: #().\r\tself assert: parser parse: \'a\' to: #($a).\r\tself assert: parser parse: \'aa\' to: #($a $a).\r\tself assert: parser parse: \'aaa\' to: #($a $a $a).\r\tself\r\t\tassert: parser\r\t\tparse: \'b\'\r\t\tto: #()\r\t\tend: 0.\r\tself\r\t\tassert: parser\r\t\tparse: \'ab\'\r\t\tto: #($a)\r\t\tend: 1.\r\tself\r\t\tassert: parser\r\t\tparse: \'aab\'\r\t\tto: #($a $a)\r\t\tend: 2.\r\tself\r\t\tassert: parser\r\t\tparse: \'aaab\'\r\t\tto: #($a $a $a)\r\t\tend: 3',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1982' ],		#self : OmReference [ '1983' ],		#time : DateAndTime [ '2017-12-12T08:01:01.069992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testTimes,			#protocol : #test,			#sourceCode : 'testTimes\r\t| parser |\r\tparser := $a asPParser times: 2.\r\t\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'a\' end: 1.\r\tself assert: parser parse: \'aa\' to: #($a $a).\r\tself assert: parser parse: \'aaa\' to: #($a $a) end: 2',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1983' ],		#self : OmReference [ '1984' ],		#time : DateAndTime [ '2017-12-12T08:01:01.070992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testToken,			#protocol : #test,			#sourceCode : 'testToken\r\t| parser |\r\tparser := $a asPParser token.\r\r\tself assert: parser parse: \'a\'\ttoTokenValue: \'a\'.\r\t\t\r\tself assert: parser fail: \'b\'.\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1984' ],		#self : OmReference [ '1985' ],		#time : DateAndTime [ '2017-12-12T08:01:01.071992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testTokenLiteral,			#protocol : #test,			#sourceCode : 'testTokenLiteral\r\t| parser |\r\tparser := \'foo\' asPParser token.\r\r\tself assert: parser parse: \'foo\' toTokenValue: \'foo\'.\r\t\t\r\tself assert: parser fail: \'bar\'.\r\tself assert: parser fail: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1985' ],		#self : OmReference [ '1986' ],		#time : DateAndTime [ '2017-12-12T08:01:01.072992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testTokenTrim,			#protocol : #test,			#sourceCode : 'testTokenTrim\r\t| parser |\r\tparser := $a asPParser token trim.\r\t\r\tself assert: parser parse: \'a\' toTokenValue: \'a\'.\r\tself assert: parser parse: \' a\' toTokenValue: \'a\'.\r\tself assert: parser parse: \'a \' toTokenValue: \'a\' end: 2.\r\tself assert: parser parse: \' a \' toTokenValue: \'a\' end: 3.\r\tself assert: parser parse: \'  a  \' toTokenValue: \'a\' end: 5.\r\r\tself assert: parser fail: \'b\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1986' ],		#self : OmReference [ '1987' ],		#time : DateAndTime [ '2017-12-12T08:01:01.075992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testTrim,			#protocol : #test,			#sourceCode : 'testTrim\r\t| parser |\r\tparser := \'a\' asPParser trim.\r\t\r\tself assert: parser parse: \'a\' to: \'a\'.\r\tself assert: parser parse: \' a\' to: \'a\'.\r\tself assert: parser parse: \'a \' to: \'a\' end: 2.\r\tself assert: parser parse: \' a \' to: \'a\' end: 3.\r\tself assert: parser parse: \'  a  \' to: \'a\' end: 5.\r\r\tself assert: parser fail: \'b\'.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1987' ],		#self : OmReference [ '1988' ],		#time : DateAndTime [ '2017-12-12T08:01:01.076992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testWrapped,			#protocol : #test,			#sourceCode : 'testWrapped\r\t| parser |\r\tparser := $a asPParser wrapped.\r\t\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser fail: \'b\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1988' ],		#self : OmReference [ '1989' ],		#time : DateAndTime [ '2017-12-12T08:01:01.077992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testWrappedSequence,			#protocol : #test,			#sourceCode : 'testWrappedSequence\r\t| parser |\r\r\tparser := (($a asPParser , $b asPParser ) wrapped , $c asPParser).\r\tself assert: parser parse: \'abc\' to: #(#($a $b) $c)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1989' ],		#self : OmReference [ '1990' ],		#time : DateAndTime [ '2017-12-12T08:01:01.078992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ParseTest,				#isMetaSide : false			},			#name : #testWrapping,			#protocol : #test,			#sourceCode : 'testWrapping\r\t| parser |\r\tparser := $a asPParser >=> [:c :cc | cc value].\r\t\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser fail: \'b\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1990' ],		#self : OmReference [ '1991' ],		#time : DateAndTime [ '2017-12-12T08:01:01.079992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ReparsableAssertions,				#isMetaSide : false			},			#name : #'assert:reparseWithContext:',			#protocol : #'as yet unclassified',			#sourceCode : 'assert: aPP2Parser reparseWithContext: startContext\r\t| resultContext |\r\tresultContext := self parser optimize enableDebug reparseAdaptableWithContext: startContext.\r\t\r\tself assert: resultContext isPetit2Success.\r\tself assert: resultContext atEnd.\r\t\r\t^ resultContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1991' ],		#self : OmReference [ '1992' ],		#time : DateAndTime [ '2017-12-12T08:01:01.080992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ReparsableAssertions,				#isMetaSide : false			},			#name : #'fail:reparseWithContext:',			#protocol : #'as yet unclassified',			#sourceCode : 'fail: aPP2Parser reparseWithContext: startContext\r\t| resultContext |\r\tresultContext := self parser optimize enableDebug reparseAdaptableWithContext: startContext.\r\t\r\tself assert: resultContext isPetit2Failure.\r\t\r\t^ resultContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1992' ],		#self : OmReference [ '1993' ],		#time : DateAndTime [ '2017-12-12T08:01:01.081992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2ReparsableAssertions,				#isMetaSide : false			},			#name : #parser,			#protocol : #'as yet unclassified',			#sourceCode : 'parser\r\tself explicitRequirement',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1993' ],		#self : OmReference [ '1994' ],		#time : DateAndTime [ '2017-12-12T08:01:01.082992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #emptySea,			#protocol : #'parse support',			#sourceCode : 'emptySea\r\t| nilSea |\r\tnilSea := self seaInstance.\r\tnilSea island: nil asPParser.\r\tnilSea name: \'nil sea\'.\r\t^ nilSea',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1994' ],		#self : OmReference [ '1995' ],		#time : DateAndTime [ '2017-12-12T08:01:01.083992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #nestedBlock,			#protocol : #'parse support',			#sourceCode : 'nestedBlock\r\t| blockSea block nilIsland |\r\tblockSea := self seaInstance.\r\tnilIsland := (self emptySea ==> #first).\r\t\r\tblock := PP2DelegateNode new.\r\tblock child: (${ asPParser,  (blockSea plus / nilIsland), $} asPParser).\r\tblock name: \'block\'.\r\t\r\tblockSea island: block.\r\tblockSea name: \'block island\'.\r\t^ block',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1995' ],		#self : OmReference [ '1996' ],		#time : DateAndTime [ '2017-12-12T08:01:01.086992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #result,			#protocol : #'parse support',			#sourceCode : 'result\r\tself explicitRequirement',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1996' ],		#self : OmReference [ '1997' ],		#time : DateAndTime [ '2017-12-12T08:01:01.087992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #seaInstance,			#protocol : #'parse support',			#sourceCode : 'seaInstance\r\t^ self explicitRequirement',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1997' ],		#self : OmReference [ '1998' ],		#time : DateAndTime [ '2017-12-12T08:01:01.088992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testEOFBoundary,			#protocol : #tests,			#sourceCode : 'testEOFBoundary\r\t| sea |\r\r\tsea := self seaInstance island: $a asPParser.\r\t\r\tself assert: sea parse: \'..a..\'.\r\tself assert: self result second equals: $a.\r\r\tself assert: sea fail: \'..\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1998' ],		#self : OmReference [ '1999' ],		#time : DateAndTime [ '2017-12-12T08:01:01.089992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNestedBlockDeepNested,			#protocol : #tests,			#sourceCode : 'testNestedBlockDeepNested\r\t| block |\r\r\tblock := self nestedBlock.\r\t\r\tself assert: block parse: \'{ {} { {  } } }\'.\r\tself assert: self result size equals: 3.\r\tself assert: self result first equals: ${.\r\tself assert: self result second size equals: 2.\r\tself assert: self result second first size equals: 3.\r\tself assert: self result second second size equals: 3.\r\tself assert: self result third equals: $}.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1999' ],		#self : OmReference [ '2000' ],		#time : DateAndTime [ '2017-12-12T08:01:01.090992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNestedBlockEmpty,			#protocol : #tests,			#sourceCode : 'testNestedBlockEmpty\r\t| block |\r\r\tblock := self nestedBlock.\r\t\r\tself assert: block parse: \'{}\'.\r\tself assert: self result size equals: 3.\r\tself assert: self result first equals: ${.\r\tself assert: self result second equals: #() asOrderedCollection.\r\tself assert: self result third equals: $}.',			#stamp : 'JanKurs 11/27/2016 19:21',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2000' ],		#self : OmReference [ '2001' ],		#time : DateAndTime [ '2017-12-12T08:01:01.092992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNestedBlockNested,			#protocol : #tests,			#sourceCode : 'testNestedBlockNested\r\t| block |\r\r\tblock := self nestedBlock.\r\t\r\tself assert: block parse: \'{ {} }\'.\r\tself assert: self result size equals: 3.\r\tself assert: self result first equals: ${.\r\tself assert: self result second size equals: 1.\r\tself assert: self result second first size equals: 3.\r\tself assert: self result third equals: $}.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2001' ],		#self : OmReference [ '2002' ],		#time : DateAndTime [ '2017-12-12T08:01:01.093992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNestedBlockSpace,			#protocol : #tests,			#sourceCode : 'testNestedBlockSpace\r\t| block |\r\r\tblock := self nestedBlock.\r\t\r\tself assert: block parse: \'{ }\'.\r\tself assert: self result size equals: 3.\r\tself assert: self result first equals: ${.\r\tself assert: self result second equals: #( $ ) asOrderedCollection.\r\tself assert: self result third equals: $}.',			#stamp : 'JanKurs 11/27/2016 19:21',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2002' ],		#self : OmReference [ '2003' ],		#time : DateAndTime [ '2017-12-12T08:01:01.093992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNilSea,			#protocol : #tests,			#sourceCode : 'testNilSea\r\t| parser |\r\tparser := self emptySea.\r\t\r\tself assert: parser parse: \'\'.\r\tself assert: self result first equals: #() asOrderedCollection.\t\r\r\tself assert: parser parse: \'...\'.\r\tself assert: self result first equals: #($. $. $.) asOrderedCollection.\r\r',			#stamp : 'JanKurs 11/27/2016 19:19',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2003' ],		#self : OmReference [ '2004' ],		#time : DateAndTime [ '2017-12-12T08:01:01.094992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNilSeaPlus,			#protocol : #tests,			#sourceCode : 'testNilSeaPlus\r\t| sea parser |\r\r\tsea := self seaInstance island: nil asPParser.\r\tparser := sea flatten nonEpsilon plus.\r\t\r\tself assert: parser fail: \'\'.\r\r\r\tself assert: parser parse: \'...\'.\r\tself assert: self result size equals: 1.\r\tself assert: self result first equals: \'...\'.\r\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2004' ],		#self : OmReference [ '2005' ],		#time : DateAndTime [ '2017-12-12T08:01:01.097992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNilSeaSequence,			#protocol : #tests,			#sourceCode : 'testNilSeaSequence\r\t| sea sea2 parser |\r\r\tsea := self seaInstance island: nil asPParser.\r\tsea2 := self seaInstance island: nil asPParser.\r\tparser := sea flatten, sea2 flatten.\r\t\r\tself assert: parser parse: \'\'.\r\tself assert: self result first equals: \'\'.\t\r\tself assert: self result second equals: \'\'.\t\r\r\tself assert: parser parse: \'...\'.\r\tself assert: self result first equals: \'...\'.\r\tself assert: self result second equals: \'\'.\t\r\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2005' ],		#self : OmReference [ '2006' ],		#time : DateAndTime [ '2017-12-12T08:01:01.098992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNilSeaStar,			#protocol : #tests,			#sourceCode : 'testNilSeaStar\r\t| sea parser |\r\r\tsea := self seaInstance island: #epsilon asPParser.\r\tparser := sea flatten nonEpsilon star.\r\t\r\tself assert: parser parse: \'\'.\r\tself assert: self result isEmpty.\r\r\tself assert: parser parse: \'...\'.\r\tself assert: self result size equals: 1.\r\tself assert: self result first equals: \'...\'.\r\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2006' ],		#self : OmReference [ '2007' ],		#time : DateAndTime [ '2017-12-12T08:01:01.099992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNullableBoundary,			#protocol : #tests,			#sourceCode : 'testNullableBoundary\r\t| parser sea |\r\r\tsea := self seaInstance island: $a asPParser.\r\tparser := sea, $b asPParser optional.\r\t\r\tself assert: parser parse: \'..a..\'.\r\tself assert: self result first second equals: $a.\r\r\tself assert: parser parse: \'..a..b\'.\r\tself assert: self result first second equals: $a.\r\r\tself assert: parser fail: \'..b\'.\r\tself assert: parser fail: \'..\'\t.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2007' ],		#self : OmReference [ '2008' ],		#time : DateAndTime [ '2017-12-12T08:01:01.101992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testNullableIsland,			#protocol : #tests,			#sourceCode : 'testNullableIsland\r\t| parser sea |\r\r\tsea := self seaInstance island: nil asPParser.\r\tparser := sea.\r\t\r\tself assert: parser parse: \'..\'.\r\tself assert: self result first equals: #($. $.) asOrderedCollection.\r\tself assert: self result second equals: nil.\r\tself assert: self result third equals: #() asOrderedCollection.\r\r\r\tself assert: parser parse: \'\'.',			#stamp : 'JanKurs 11/27/2016 19:20',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2008' ],		#self : OmReference [ '2009' ],		#time : DateAndTime [ '2017-12-12T08:01:01.102992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testOverlappingSeas,			#protocol : #tests,			#sourceCode : 'testOverlappingSeas\r\t| seas seaOne seaTwo |\r\r\tseaOne := self seaInstance island: $a asPParser.\r\tseaTwo := self seaInstance island: $b asPParser.\r\t\r\tseas := seaOne, seaTwo.\r\t\r\tself assert: seas parse: \'..a..b..\'.\r\tself assert: self result first second equals: $a.\r\tself assert: self result second second equals: $b.\r\t\r\tself assert: seas fail: \'..b..a..b..\'.\r\tself assert: seas fail: \'..a..\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2009' ],		#self : OmReference [ '2010' ],		#time : DateAndTime [ '2017-12-12T08:01:01.103992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testSeaPlus,			#protocol : #tests,			#sourceCode : 'testSeaPlus\r\t| sea parser |\r\r\tsea := self seaInstance island: $a asPParser.\r\tparser := sea plus.\r\r\tself assert: parser parse: \'..a..a..a...\'.\r\tself assert: self result size equals: 3.\t\r\r\tself assert: parser fail: \'...\'.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2010' ],		#self : OmReference [ '2011' ],		#time : DateAndTime [ '2017-12-12T08:01:01.104992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SeaParserTest,				#isMetaSide : false			},			#name : #testSeaStar,			#protocol : #tests,			#sourceCode : 'testSeaStar\r\t| sea parser |\r\r\tsea := self seaInstance island: $a asPParser.\r\tparser := sea star.\r\t\r\tself assert: parser parse: \'..a..a..a...\'.\r\tself assert: self result size equals: 3.\t\r\r\tself assert: parser parse: \'\'.\r\tself assert: self result size equals: 0.\t\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2011' ],		#self : OmReference [ '2012' ],		#time : DateAndTime [ '2017-12-12T08:01:01.105992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2StreamContextInterface,				#isMetaSide : false			},			#name : #testAtEnd,			#protocol : #'tests - context interface',			#sourceCode : 'testAtEnd\r\t| stream |\r\tstream := self streamOn: \'\'. \r\tself assert: (stream atEnd: 0).\r\tself assert: (stream atEnd: 1).\r\r\r\tstream := self streamOn: \'f\'. \r\tself assert: (stream atEnd: 0) not.\r\tself assert: (stream atEnd: 1).\r\tself assert: (stream atEnd: 2).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2012' ],		#self : OmReference [ '2013' ],		#time : DateAndTime [ '2017-12-12T08:01:01.106992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2StreamContextInterface,				#isMetaSide : false			},			#name : #testAtPosition,			#protocol : #'tests - context interface',			#sourceCode : 'testAtPosition\r\t| stream |\r\tstream := self streamOn: \'bar\'. \r\t\r\tself assert: (stream atPosition: 1) = $b.\r\tself assert: (stream atPosition: 2) = $a.\r\tself assert: (stream atPosition: 3) = $r.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2013' ],		#self : OmReference [ '2014' ],		#time : DateAndTime [ '2017-12-12T08:01:01.109992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2StreamContextInterface,				#isMetaSide : false			},			#name : #testAtPositionReversedOrder,			#protocol : #'tests - context interface',			#sourceCode : 'testAtPositionReversedOrder\r\t| stream |\r\tstream := self streamOn: \'bar\'. \r\t\r\tself assert: (stream atPosition: 3) = $r.\r\tself assert: (stream atPosition: 2) = $a.\r\tself assert: (stream atPosition: 1) = $b.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2014' ],		#self : OmReference [ '2015' ],		#time : DateAndTime [ '2017-12-12T08:01:01.110992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2StreamContextInterface,				#isMetaSide : false			},			#name : #testCopyFromTo,			#protocol : #'tests - context interface',			#sourceCode : 'testCopyFromTo\r\t| stream |\r\tstream := self streamOn: \'bar\'.\r\r\tself assert: (stream copyFrom: 1 to: 1) = \'b\'.\r\tself assert: (stream copyFrom: 1 to: 3) = \'bar\'.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2015' ],		#self : OmReference [ '2016' ],		#time : DateAndTime [ '2017-12-12T08:01:01.111992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2StreamContextInterface,				#isMetaSide : false			},			#name : #testNewTokenFromTo,			#protocol : #'tests - context interface',			#sourceCode : 'testNewTokenFromTo\r\t| stream |\r\tstream := self streamOn: \'foo\'. \r\t\r\tself assert: (stream newToken: PP2Token from: 1 to: 3) value equals: \'foo\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2016' ],		#self : OmReference [ '2017' ],		#time : DateAndTime [ '2017-12-12T08:01:01.112992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2TypeAssertions,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #assertions,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2017' ],		#self : OmReference [ '2018' ],		#time : DateAndTime [ '2017-12-12T08:01:01.114992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2TypeAssertions,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #assertions,			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2018' ],		#self : OmReference [ '2019' ],		#time : DateAndTime [ '2017-12-12T08:01:01.115992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParserTests class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #(#(#(#RGClassDefinition #(#PP2BufferStreamTest)) #\'2016-04-02T11:47:21.362841+02:00\') #(#(#RGClassDefinition #(#PP2DirectParseTest)) #\'2016-04-03T14:06:27.898033+02:00\') )',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2019' ],		#self : OmReference [ '2020' ],		#time : DateAndTime [ '2017-12-12T08:01:01.116992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2AbstractParserTest class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t^ self name = #PP2AbstractParserTest',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2020' ],		#self : OmReference [ '2021' ],		#time : DateAndTime [ '2017-12-12T08:01:01.117992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2AbstractParserTest class',				#isMetaSide : true			},			#name : #packageNamesUnderTest,			#protocol : #accessing,			#sourceCode : 'packageNamesUnderTest\r\t^ #(\'PetitParser\' \'PetitTests\')',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2021' ],		#self : OmReference [ '2022' ],		#time : DateAndTime [ '2017-12-12T08:01:01.120992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:fail:',			#protocol : #utilities,			#sourceCode : 'assert: aParser fail: aCollection\r\t^ self assert: aParser fail: aCollection end: 0',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2022' ],		#self : OmReference [ '2023' ],		#time : DateAndTime [ '2017-12-12T08:01:01.121992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:fail:end:',			#protocol : #utilities,			#sourceCode : 'assert: aParser fail: aCollection end: anInteger\r\t| stream result context |\r\tself \r\t\tassert: aParser isPetit2Parser\r\t\tdescription: \'Parser invalid\'.\r\tstream := aCollection asPetit2Stream.\r\tcontext := self context.\r\t\r\t\r\tresult := self parse: stream withParser: aParser withContext: context.\r\t\r\tself \r\t\tassert: result isPetit2Failure\r\t\tdescription: \'Parser did not fail\'.\r\tself\r\t\tassert: result position = anInteger\r\t\tdescription: \'Parser failed at wrong position\'.\r\t^ result',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2023' ],		#self : OmReference [ '2024' ],		#time : DateAndTime [ '2017-12-12T08:01:01.122992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:includesSubstring:',			#protocol : #utilities,			#sourceCode : 'assert: string1 includesSubstring: string2\r\t"Support portability by using ANSI search method"\r\r\tself assert: (string1 notEmpty and: [string2 notEmpty and: [0 < (string1 indexOfSubCollection: string2 startingAt: 1)]])',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2024' ],		#self : OmReference [ '2025' ],		#time : DateAndTime [ '2017-12-12T08:01:01.123992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:parse:',			#protocol : #utilities,			#sourceCode : 'assert: aParser parse: aCollection\r\t^ self assert: aParser parse: aCollection to: nil end: aCollection size ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2025' ],		#self : OmReference [ '2026' ],		#time : DateAndTime [ '2017-12-12T08:01:01.124992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:parse:end:',			#protocol : #utilities,			#sourceCode : 'assert: aParser parse: aCollection end: anInteger\r\t^ self assert: aParser parse: aCollection to: nil end: anInteger',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2026' ],		#self : OmReference [ '2027' ],		#time : DateAndTime [ '2017-12-12T08:01:01.125992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:parse:to:',			#protocol : #utilities,			#sourceCode : 'assert: aParser parse: aCollection to: anObject\r\t^ self assert: aParser parse: aCollection to: anObject end: aCollection size ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2027' ],		#self : OmReference [ '2028' ],		#time : DateAndTime [ '2017-12-12T08:01:01.126992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:parse:to:end:',			#protocol : #utilities,			#sourceCode : 'assert: aParser parse: aCollection to: aTargetObject end: anInteger\r\t| stream result ctx |\r\r\tself assert: aParser isPetit2Parser description: \'Parser invalid\'.\r\tstream := aCollection asPetit2Stream.\r\tctx := self context.\r\t\r\tresult := self parse: stream withParser: aParser withContext: ctx.\r\t\r\taTargetObject isNil\r\t\tifTrue: [ self deny: result isPetit2Failure ]\r\t\tifFalse: [ self assert: result value asArray equals: aTargetObject asArray ].\r\tself assert: result position = anInteger description: \'Parser accepted at wrong position\'.\r\t^ result',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2028' ],		#self : OmReference [ '2029' ],		#time : DateAndTime [ '2017-12-12T08:01:01.127992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:parse:toTokenValue:',			#protocol : #utilities,			#sourceCode : 'assert: aParser parse: aCollection toTokenValue: value\r\t^ self assert: aParser parse: aCollection toTokenValue: value end: aCollection size',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2029' ],		#self : OmReference [ '2030' ],		#time : DateAndTime [ '2017-12-12T08:01:01.128992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'assert:parse:toTokenValue:end:',			#protocol : #utilities,			#sourceCode : 'assert: aParser parse: aCollection toTokenValue: value end: end\r\t| result |\r\tresult := self\r\t\tassert: aParser\r\t\tparse: aCollection\r\t\tto: nil\r\t\tend: end.\r\tself assert: (result value isKindOf: PP2Token).\r\tself assert: result value value equals: value.\r\t^ result',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2030' ],		#self : OmReference [ '2031' ],		#time : DateAndTime [ '2017-12-12T08:01:01.129992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #context,			#protocol : #context,			#sourceCode : 'context\r\t^ PP2Context new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2031' ],		#self : OmReference [ '2032' ],		#time : DateAndTime [ '2017-12-12T08:01:01.132992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2032' ],		#self : OmReference [ '2033' ],		#time : DateAndTime [ '2017-12-12T08:01:01.133992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AbstractParserTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\tself subclassResponsibility',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2033' ],		#self : OmReference [ '2034' ],		#time : DateAndTime [ '2017-12-12T08:01:01.135992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\tcontext isNil ifTrue: [ \r\t\tcontext := super context\r\t].\r\r\t^ context',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2034' ],		#self : OmReference [ '2035' ],		#time : DateAndTime [ '2017-12-12T08:01:01.136992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parseAdaptable: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2035' ],		#self : OmReference [ '2036' ],		#time : DateAndTime [ '2017-12-12T08:01:01.137992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testMatch,			#protocol : #'test - context',			#sourceCode : 'testMatch\r\t| node |\r\tnode := $a asPParser match.\r\t\r\tself context defaultStack push: $a.\r\tself assert: node parse: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2036' ],		#self : OmReference [ '2037' ],		#time : DateAndTime [ '2017-12-12T08:01:01.138992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testMatchEmpty,			#protocol : #'test - context',			#sourceCode : 'testMatchEmpty\r\t| node |\r\tnode := $a asPParser match.\r\t\r\tself assert: node fail: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2037' ],		#self : OmReference [ '2038' ],		#time : DateAndTime [ '2017-12-12T08:01:01.139992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testMatchFailure,			#protocol : #'test - context',			#sourceCode : 'testMatchFailure\r\t| node |\r\tnode := $a asPParser match.\r\t\r\tself context defaultStack push: $b.\r\tself assert: node fail: \'b\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2038' ],		#self : OmReference [ '2039' ],		#time : DateAndTime [ '2017-12-12T08:01:01.140992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testMatchNoMatch,			#protocol : #'test - context',			#sourceCode : 'testMatchNoMatch\r\t| node |\r\tnode := $a asPParser match.\r\t\r\tself context defaultStack push: $b.\r\tself assert: node fail: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2039' ],		#self : OmReference [ '2040' ],		#time : DateAndTime [ '2017-12-12T08:01:01.142992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testNonEpsilon,			#protocol : #test,			#sourceCode : 'testNonEpsilon\r\t|  parser |\r\tparser := $a asPParser optional nonEpsilon.\r\t\r\tself assert: parser fail: \'\'.\r\tself assert: parser parse: \'a\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2040' ],		#self : OmReference [ '2041' ],		#time : DateAndTime [ '2017-12-12T08:01:01.144992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPop,			#protocol : #'test - context',			#sourceCode : 'testPop\r\t| node |\r\tnode := nil asPParser pop.\r\t\r\tself context defaultStack push: $a.\r\tself assert: node parse: \'\'.\r\tself assert: context defaultStack isEmpty.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2041' ],		#self : OmReference [ '2042' ],		#time : DateAndTime [ '2017-12-12T08:01:01.146992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPopStarOne,			#protocol : #'test - context',			#sourceCode : 'testPopStarOne\r\t| node |\r\tnode := $a asPParser pop star.\r\t\r\tself context defaultStack push: $a.\r\tself assert: node parse: \'a\'.\r\tself assert: context defaultStack size equals: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2042' ],		#self : OmReference [ '2043' ],		#time : DateAndTime [ '2017-12-12T08:01:01.147992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPopStarTwo,			#protocol : #'test - context',			#sourceCode : 'testPopStarTwo\r\t| node |\r\tnode := $a asPParser pop star.\r\t\r\tself context defaultStack push: $a.\r\tself context defaultStack push: $a.\r\tself assert: node parse: \'aa\'.\r\tself assert: context defaultStack size equals: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2043' ],		#self : OmReference [ '2044' ],		#time : DateAndTime [ '2017-12-12T08:01:01.148992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPopStarZero,			#protocol : #'test - context',			#sourceCode : 'testPopStarZero\r\t| node |\r\tnode := $a asPParser pop star.\r\t\r\tself context defaultStack push: $a.\r\tself assert: node parse: \'\'.\r\tself assert: context defaultStack size equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2044' ],		#self : OmReference [ '2045' ],		#time : DateAndTime [ '2017-12-12T08:01:01.149992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPush,			#protocol : #'test - context',			#sourceCode : 'testPush\r\t| node |\r\tnode := $a asPParser push.\r\t\r\tself assert: node parse: \'a\'.\r\tself assert: context defaultStack size equals: 1.\r\tself assert: context defaultStack top equals: $a.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2045' ],		#self : OmReference [ '2046' ],		#time : DateAndTime [ '2017-12-12T08:01:01.151992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPushStarOne,			#protocol : #'test - context',			#sourceCode : 'testPushStarOne\r\t| node |\r\tnode := $a asPParser push star.\r\t\r\tself assert: node parse: \'a\'.\r\tself assert: context defaultStack size equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2046' ],		#self : OmReference [ '2047' ],		#time : DateAndTime [ '2017-12-12T08:01:01.152992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPushStarTwo,			#protocol : #'test - context',			#sourceCode : 'testPushStarTwo\r\t| node |\r\tnode := $a asPParser push star.\r\t\r\tself assert: node parse: \'aa\'.\r\tself assert: self context defaultStack size equals: 2.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2047' ],		#self : OmReference [ '2048' ],		#time : DateAndTime [ '2017-12-12T08:01:01.153992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testPushStarZero,			#protocol : #'test - context',			#sourceCode : 'testPushStarZero\r\t| node |\r\tnode := $a asPParser push star.\r\t\r\tself assert: node parse: \'\'.\r\tself assert: self context defaultStack size equals: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2048' ],		#self : OmReference [ '2049' ],		#time : DateAndTime [ '2017-12-12T08:01:01.156992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testWaterBoundary,			#protocol : #'test - water',			#sourceCode : 'testWaterBoundary\r\t| water |\r\twater := PP2WaterNode new\r\t\tboundaryElements: \'foo\' asPParser;\r\t\tyourself.\r\t\r\tself assert: water parse: \'foobar\' to: \'\' end: 0.\r\tself assert: water parse: \'barfoo\' to: \'bar\' end: 3.\r\t\r\tself assert: water fail: \'\'.\r\tself assert: water fail: \'barbar\'.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2049' ],		#self : OmReference [ '2050' ],		#time : DateAndTime [ '2017-12-12T08:01:01.157992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testWaterDefault,			#protocol : #'test - water',			#sourceCode : 'testWaterDefault\r\t| water |\r\twater := PP2WaterNode new.\r\t\r\tself assert: water parse: \'foobar\' to: \'foobar\'.\r\tself assert: water parse: \'\' to: \'\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2050' ],		#self : OmReference [ '2051' ],		#time : DateAndTime [ '2017-12-12T08:01:01.159992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testWaterRecursive,			#protocol : #'test - water',			#sourceCode : 'testWaterRecursive\r\t| water |\r\twater := PP2WaterNode new\r\t\tyourself.\r\r\twater boundary: water.\r\tself assert: water parse: \'foobar\' to: \'\' end: 0',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2051' ],		#self : OmReference [ '2052' ],		#time : DateAndTime [ '2017-12-12T08:01:01.160992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableParseTest,				#isMetaSide : false			},			#name : #testWaterRecursive2,			#protocol : #'test - water',			#sourceCode : 'testWaterRecursive2\r\t| water eof |\r\twater := PP2WaterNode new\r\t\tyourself.\r\teof := PP2EndOfInputNode new.\r\r\twater boundary: (water, eof) / eof.\r\tself assert: water parse: \'foobar\' to: \'foobar\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2052' ],		#self : OmReference [ '2053' ],		#time : DateAndTime [ '2017-12-12T08:01:01.161992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #'assert:reparseWithContext:',			#protocol : #asserting,			#sourceCode : 'assert: aPP2Parser reparseWithContext: startContext\r\t| resultContext |\r\tresultContext := aPP2Parser optimize enableDebug reparseAdaptableWithContext: startContext.\r\t\r\tself assert: resultContext isPetit2Success.\r\tself assert: resultContext atEnd.\r\t\r\t^ resultContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2053' ],		#self : OmReference [ '2054' ],		#time : DateAndTime [ '2017-12-12T08:01:01.162992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #context,			#protocol : #asserting,			#sourceCode : 'context\r\t^ PP2ReparsableContext new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2054' ],		#self : OmReference [ '2055' ],		#time : DateAndTime [ '2017-12-12T08:01:01.163992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser optimize enableDebug parseAdaptable: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2055' ],		#self : OmReference [ '2056' ],		#time : DateAndTime [ '2017-12-12T08:01:01.164992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseAndReparse,			#protocol : #tests,			#sourceCode : 'testReparseAndReparse\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser plus ==> #first.\r\t\r\tcontext := \'aa  \' asReparsableContext. \r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 2.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext := \'aaa \' asReparsableContext.\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aaa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 3.\r\tself assert: context debugResult steps equals: 10.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2056' ],		#self : OmReference [ '2057' ],		#time : DateAndTime [ '2017-12-12T08:01:01.165992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseDeleteAfter,			#protocol : #tests,			#sourceCode : 'testReparseDeleteAfter\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser star ==> #first.\r\t\r\tcontext := self assert: parser parse: \'aa  \'.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 2.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext applyChange: (PP2DeleteCharacter on: \'aa \' at: 4).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 2.\r\tself assert: context debugResult steps equals: 5.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2057' ],		#self : OmReference [ '2058' ],		#time : DateAndTime [ '2017-12-12T08:01:01.169992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseDeleteBefore,			#protocol : #tests,			#sourceCode : 'testReparseDeleteBefore\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1 ==> #second.\r\t\r\tcontext := self assert: parser parse: \' aa\'.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 2.\r\tself assert: context returnValue stop = 3.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext applyChange: (PP2DeleteCharacter on: \'aa\' at: 1).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 2.\r\t\r\tself assert: context debugResult steps equals: 5.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2058' ],		#self : OmReference [ '2059' ],		#time : DateAndTime [ '2017-12-12T08:01:01.170992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseDeleteHighBoundary,			#protocol : #tests,			#sourceCode : 'testReparseDeleteHighBoundary\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser star ==> #first.\r\tcontext := self assert: parser parse: \'a  \'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2DeleteCharacter on: \'a \' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2059' ],		#self : OmReference [ '2060' ],		#time : DateAndTime [ '2017-12-12T08:01:01.171992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseDeleteHighBoundaryError,			#protocol : #tests,			#sourceCode : 'testReparseDeleteHighBoundaryError\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser star ==> #first.\r\tcontext := self assert: parser parse: \'a a\' end: 2.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2DeleteCharacter on: \'aa\' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value equals: \'aa\'.\r\tself assert: context returnValue start equals: 1.\r\tself assert: context debugResult steps equals: 9.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2060' ],		#self : OmReference [ '2061' ],		#time : DateAndTime [ '2017-12-12T08:01:01.172992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseDeleteInRange,			#protocol : #tests,			#sourceCode : 'testReparseDeleteInRange\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1, #space asPParser star ==> #second.\r\tcontext := self assert: parser parse: \'aaa\'.\r\tself assert: context returnValue value = \'aaa\'.\r\tself assert: context debugResult steps equals: 11.\r\t\r\tcontext applyChange: (PP2DeleteCharacter on: \'aa\' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 2.\r\tself assert: context debugResult steps equals: 10.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2061' ],		#self : OmReference [ '2062' ],		#time : DateAndTime [ '2017-12-12T08:01:01.174992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseDeleteLowBoundary,			#protocol : #tests,			#sourceCode : 'testReparseDeleteLowBoundary\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1 ==> #second.\r\tcontext := self assert: parser parse: \' a\'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \' aa\' at: 1).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context debugResult steps equals: 9.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2062' ],		#self : OmReference [ '2063' ],		#time : DateAndTime [ '2017-12-12T08:01:01.175992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertAfter,			#protocol : #tests,			#sourceCode : 'testReparseInsertAfter\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser star ==> #first.\r\t\r\tcontext := self assert: parser parse: \'a \'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 1.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'a  \' at: 3).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 1.\r\tself assert: context debugResult steps equals: 5.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2063' ],		#self : OmReference [ '2064' ],		#time : DateAndTime [ '2017-12-12T08:01:01.176992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertBefore,			#protocol : #tests,			#sourceCode : 'testReparseInsertBefore\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1 ==> #second.\r\t\r\tcontext := self assert: parser parse: \' a\'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context returnValue start = 2.\r\tself assert: context returnValue stop = 2.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'  a\' at: 1).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context returnValue start = 3.\r\tself assert: context returnValue stop = 3.\r\t\r\tself assert: context debugResult steps equals: 5.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2064' ],		#self : OmReference [ '2065' ],		#time : DateAndTime [ '2017-12-12T08:01:01.177992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertHighBoundary,			#protocol : #tests,			#sourceCode : 'testReparseInsertHighBoundary\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser star ==> #first.\r\tcontext := self assert: parser parse: \'a \'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'aa \' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context debugResult steps equals: 9.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2065' ],		#self : OmReference [ '2066' ],		#time : DateAndTime [ '2017-12-12T08:01:01.180992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertHighBoundaryError,			#protocol : #tests,			#sourceCode : 'testReparseInsertHighBoundaryError\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := token1, #space asPParser star ==> #first.\r\tcontext := self assert: parser parse: \'aa a\' end: 3.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'a  \' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2066' ],		#self : OmReference [ '2067' ],		#time : DateAndTime [ '2017-12-12T08:01:01.181992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertInRange,			#protocol : #tests,			#sourceCode : 'testReparseInsertInRange\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1, #space asPParser star ==> #second.\r\tcontext := self assert: parser parse: \'aa\'.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context debugResult steps equals: 10.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'aaa\' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aaa\'.\r\tself assert: context returnValue start = 1.\r\tself assert: context returnValue stop = 3.\r\tself assert: context debugResult steps equals: 11.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2067' ],		#self : OmReference [ '2068' ],		#time : DateAndTime [ '2017-12-12T08:01:01.183992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertLowBoundary,			#protocol : #tests,			#sourceCode : 'testReparseInsertLowBoundary\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1 ==> #second.\r\tcontext := self assert: parser parse: \' a\'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \' aa\' at: 1).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context debugResult steps equals: 9.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2068' ],		#self : OmReference [ '2069' ],		#time : DateAndTime [ '2017-12-12T08:01:01.184992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseInsertLowBoundaryError,			#protocol : #tests,			#sourceCode : 'testReparseInsertLowBoundaryError\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser star, token1 ==> #second.\r\tcontext := self assert: parser parse: \' a\'.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'  a\' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'a\'.\r\tself assert: context debugResult steps equals: 8.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2069' ],		#self : OmReference [ '2070' ],		#time : DateAndTime [ '2017-12-12T08:01:01.185992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseMultipleChanges,			#protocol : #tests,			#sourceCode : 'testReparseMultipleChanges\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser plus, token1 ==> #second.\r\t\r\tcontext := \'  aa\' asReparsableContext. \r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 3.\r\tself assert: context returnValue stop = 4.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'   aa\' at: 1).\r\tcontext applyChange: (PP2InsertCharacter on: \'    aa\' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 5.\r\tself assert: context returnValue stop = 6.\r\t\r\tself assert: context debugResult steps equals: 5.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2070' ],		#self : OmReference [ '2071' ],		#time : DateAndTime [ '2017-12-12T08:01:01.186992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseMultipleChangesAtEnd,			#protocol : #tests,			#sourceCode : 'testReparseMultipleChangesAtEnd\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := #space asPParser plus, token1 ==> #second.\r\t\r\tcontext := \'  aa\' asReparsableContext. \r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 3.\r\tself assert: context returnValue stop = 4.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'  aaa\' at: 4).\r\tcontext applyChange: (PP2InsertCharacter on: \'  aaaa\' at: 5).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context returnValue value = \'aaaa\'.\r\tself assert: context returnValue start = 3.\r\tself assert: context returnValue stop = 6.\r\t\r\tself assert: context debugResult steps equals: 11.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2071' ],		#self : OmReference [ '2072' ],		#time : DateAndTime [ '2017-12-12T08:01:01.187992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableReparseTest,				#isMetaSide : false			},			#name : #testReparseNested,			#protocol : #tests,			#sourceCode : 'testReparseNested\r\ttoken1 := $a asPParser plus token reparsable.\r\t\r\tparser := (#space asPParser plus, token1) reparsable ==> #second.\r\t\r\tcontext := self assert: parser parse: \'  aa\'.\r\tself assert: context returnValue value = \'aa\'.\r\tself assert: context returnValue start = 3.\r\tself assert: context returnValue stop = 4.\r\tself assert: context debugResult steps equals: 9.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'   aa\' at: 1).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context debugResult steps equals: 5.\r\t\r\tcontext applyChange: (PP2InsertCharacter on: \'    aa\' at: 2).\r\tcontext := self assert: parser reparseWithContext: context.\r\tself assert: context debugResult steps equals: 5.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2072' ],		#self : OmReference [ '2073' ],		#time : DateAndTime [ '2017-12-12T08:01:01.189992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #tests,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parse: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2073' ],		#self : OmReference [ '2074' ],		#time : DateAndTime [ '2017-12-12T08:01:01.191992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #'streamOn:',			#protocol : #tests,			#sourceCode : 'streamOn: aString\r\t^ PP2BufferStream on: (PP2MinimalStream on: aString)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2074' ],		#self : OmReference [ '2075' ],		#time : DateAndTime [ '2017-12-12T08:01:01.192992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #'streamOn:bufferSize:',			#protocol : #tests,			#sourceCode : 'streamOn: aString bufferSize: size\r\t^ PP2BufferStream on: (PP2MinimalStream on: aString) bufferSize: size',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2075' ],		#self : OmReference [ '2076' ],		#time : DateAndTime [ '2017-12-12T08:01:01.193992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testIdentifier,			#protocol : #tests,			#sourceCode : 'testIdentifier\r\t"Test with stream that provides only atEnd and next:"\r\r\tparser := (#letter asPParser, #word asPParser plus) flatten.\r\tstream := self streamOn: \'hi123\'.\r\t\r\tself assert: parser parse: \'hi123\' to: \'hi123\' end: 5.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2076' ],		#self : OmReference [ '2077' ],		#time : DateAndTime [ '2017-12-12T08:01:01.194992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testIdentifierSmallBuffer,			#protocol : #tests,			#sourceCode : 'testIdentifierSmallBuffer\r\t"Test with stream that provides only atEnd and next:"\r\r\tparser := #letter asPParser, #word asPParser plus.\r\tstream := self streamOn: \'hi123\' bufferSize: 1.\r\t\r\tself assert: parser parse: stream to: nil end: 5',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2077' ],		#self : OmReference [ '2078' ],		#time : DateAndTime [ '2017-12-12T08:01:01.195992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testIdentifierSmallBufferError,			#protocol : #tests,			#sourceCode : 'testIdentifierSmallBufferError\r\t"Test with stream that provides only atEnd and next:"\r\r\tparser := (#letter asPParser, #word asPParser plus) flatten.\r\tstream := self streamOn: \'hi123\' bufferSize: 1.\r\t\r\tself should: [ self assert: parser parse: stream to: \'hi123\' end: 5 ] raise: SubscriptOutOfBounds ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2078' ],		#self : OmReference [ '2079' ],		#time : DateAndTime [ '2017-12-12T08:01:01.196992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testPredicate,			#protocol : #tests,			#sourceCode : 'testPredicate\r\t"Test with stream that provides only atEnd and next:"\r\r\tparser := #letter asPParser.\r\tstream := self streamOn: \'a\'.\r\t\r\tself assert: parser parse: stream to: $a end: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2079' ],		#self : OmReference [ '2080' ],		#time : DateAndTime [ '2017-12-12T08:01:01.197992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\t"Test with stream that provides only atEnd and next:"\r\r\tparser := $a asPParser, $a asPParser.\r\tstream := self streamOn: \'aa\'.\r\t\r\tself assert: parser parse: stream to: #($a $a) end: 2',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2080' ],		#self : OmReference [ '2081' ],		#time : DateAndTime [ '2017-12-12T08:01:01.198992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testStreamBacktrack,			#protocol : #tests,			#sourceCode : 'testStreamBacktrack\r\tparser := (\'aa\' asPParser, \'a\' asPParser) / \'aa\' asPParser.\r\tstream := self streamOn: \'aa\'.\r\t\r\tself assert: parser parse: stream to: \'aa\' end: 2.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2081' ],		#self : OmReference [ '2082' ],		#time : DateAndTime [ '2017-12-12T08:01:01.199992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testStreamBacktrackBufferSmall,			#protocol : #tests,			#sourceCode : 'testStreamBacktrackBufferSmall\r\tparser := \'aa\' asPParser.\r\tstream := self streamOn: \'aa\' bufferSize: 2.\r\t\r\tparser := (\'aa\' asPParser, \'aa\' asPParser) / \'aa\' asPParser.\r\t\r\tself assert: parser parse: stream to: \'aa\' end: 2.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2082' ],		#self : OmReference [ '2083' ],		#time : DateAndTime [ '2017-12-12T08:01:01.201992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testStreamBacktrackBufferTooSmall,			#protocol : #tests,			#sourceCode : 'testStreamBacktrackBufferTooSmall\r\tparser := \'aa\' asPParser.\r\tstream := self streamOn: \'aa\' bufferSize: 1.\r\t\r\tparser := (\'aa\' asPParser, \'aa\' asPParser) / \'aa\' asPParser.\r\t\r\tself should: [ self assert: parser parse: stream to: \'aa\' end: 2 ] raise: SubscriptOutOfBounds \r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2083' ],		#self : OmReference [ '2084' ],		#time : DateAndTime [ '2017-12-12T08:01:01.204992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testStreamBufferTooSmall,			#protocol : #tests,			#sourceCode : 'testStreamBufferTooSmall\r\tparser := \'aa\' asPParser.\r\tstream := self streamOn: \'aa\' bufferSize: 1.\r\tself should: [ self assert: parser parse: stream to: \'aa\' end: 2 ] raise: SubscriptOutOfBounds.\t\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2084' ],		#self : OmReference [ '2085' ],		#time : DateAndTime [ '2017-12-12T08:01:01.205992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamIntegrationTest,				#isMetaSide : false			},			#name : #testToken,			#protocol : #tests,			#sourceCode : 'testToken\r\tparser := \'aa\' asPParser token.\r\tstream := self streamOn: \'aa\'.\r\t\r\tself assert: parser parse: stream toTokenValue: \'aa\' end: 2',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2085' ],		#self : OmReference [ '2086' ],		#time : DateAndTime [ '2017-12-12T08:01:01.206992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammarTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2AdaptableGrammar',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2086' ],		#self : OmReference [ '2087' ],		#time : DateAndTime [ '2017-12-12T08:01:01.207992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AdaptableGrammarTest_Optimized,				#isMetaSide : false			},			#name : #parserInstance,			#protocol : #accessing,			#sourceCode : 'parserInstance\r\t^ super parserInstance optimize',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2087' ],		#self : OmReference [ '2088' ],		#time : DateAndTime [ '2017-12-12T08:01:01.208992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNodeTest class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t^ self name = #PP2CompositeNodeTest',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2088' ],		#self : OmReference [ '2089' ],		#time : DateAndTime [ '2017-12-12T08:01:01.209992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2CompositeNodeTest class',				#isMetaSide : true			},			#name : #resources,			#protocol : #'as yet unclassified',			#sourceCode : 'resources\r\t^ Array with: PP2ParserResource',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2089' ],		#self : OmReference [ '2090' ],		#time : DateAndTime [ '2017-12-12T08:01:01.210992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'assert:is:',			#protocol : #utilities,			#sourceCode : 'assert: aCollection is: anObject\r\tself parse: aCollection.\r\tself\r\t\tassert: result = anObject\r\t\tdescription: \'Got: \' , result printString , \'; Expected: \' , anObject printString\r\t\tresumable: true',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2090' ],		#self : OmReference [ '2091' ],		#time : DateAndTime [ '2017-12-12T08:01:01.211992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'fail:rule:',			#protocol : #parsing,			#sourceCode : 'fail: aString rule: aSymbol \r\t| production context |\r\tproduction := self parserInstanceFor: aSymbol.\r\tcontext := self context.\r\t\r\tresult := production parse: aString withContext: context.\r\t\r\tself\r\t\tassert: (result isPetit2Failure or: [context atEnd not])\r\t\tdescription: \'Able to parse \' , aString printString.\r\t^ result',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2091' ],		#self : OmReference [ '2092' ],		#time : DateAndTime [ '2017-12-12T08:01:01.212992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:',			#protocol : #parsing,			#sourceCode : 'parse: aString \r\t^ self parse: aString rule: #start',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2092' ],		#self : OmReference [ '2093' ],		#time : DateAndTime [ '2017-12-12T08:01:01.215992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:production:to:end:checkResult:',			#protocol : #parsing,			#sourceCode : 'parse: aString production: production to: expectedResult end: end checkResult: aBoolean\r\t| ctx |\r\tctx := self context.\r\tresultContext := self parse: aString withParser: production withContext: ctx.\r\tresult := resultContext value.\r\t\r\tself\r\t\tdeny: resultContext isPetit2Failure\r\t\tdescription: \'Unable to parse \' , aString printString.\r\t\r\tself assert: resultContext position equals: end.\r\taBoolean ifTrue: [ self assert: expectedResult equals: result ].\r\t^ result',			#stamp : 'JanKurs 8/20/2017 18:36',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2093' ],		#self : OmReference [ '2094' ],		#time : DateAndTime [ '2017-12-12T08:01:01.216992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:rule:',			#protocol : #parsing,			#sourceCode : 'parse: aString rule: aSymbol\r\t^ self parse: aString rule: aSymbol end: aString size',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2094' ],		#self : OmReference [ '2095' ],		#time : DateAndTime [ '2017-12-12T08:01:01.217992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:rule:end:',			#protocol : #parsing,			#sourceCode : 'parse: aString rule: aSymbol end: end\r\t^ self parse: aString rule: aSymbol to: nil end: end checkResult: false',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2095' ],		#self : OmReference [ '2096' ],		#time : DateAndTime [ '2017-12-12T08:01:01.219992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:rule:to:',			#protocol : #parsing,			#sourceCode : 'parse: aString rule: aSymbol to: expectedResult\r\t^ self parse: aString rule: aSymbol to: expectedResult end: aString size checkResult: true',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2096' ],		#self : OmReference [ '2097' ],		#time : DateAndTime [ '2017-12-12T08:01:01.220992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:rule:to:end:',			#protocol : #parsing,			#sourceCode : 'parse: aString rule: aSymbol to: expectedResult end: end\r\t^ self parse: aString rule: aSymbol  to:  expectedResult  end: end checkResult:  true',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2097' ],		#self : OmReference [ '2098' ],		#time : DateAndTime [ '2017-12-12T08:01:01.221992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:rule:to:end:checkResult:',			#protocol : #parsing,			#sourceCode : 'parse: aString rule: aSymbol to: expectedResult end: end checkResult: aBoolean\r\t| production |\r\tproduction := self parserInstanceFor: aSymbol.\r\t^ self parse: aString production: production to: expectedResult end: end checkResult: aBoolean \t',			#stamp : 'JanKurs 8/20/2017 18:37',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2098' ],		#self : OmReference [ '2099' ],		#time : DateAndTime [ '2017-12-12T08:01:01.222992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parse: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2099' ],		#self : OmReference [ '2100' ],		#time : DateAndTime [ '2017-12-12T08:01:01.223992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\tself subclassResponsibility',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2100' ],		#self : OmReference [ '2101' ],		#time : DateAndTime [ '2017-12-12T08:01:01.224992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #parserInstance,			#protocol : #accessing,			#sourceCode : 'parserInstance\r\t^ PP2ParserResource current parserAt: self parserClass',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2101' ],		#self : OmReference [ '2102' ],		#time : DateAndTime [ '2017-12-12T08:01:01.227992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #'parserInstanceFor:',			#protocol : #accessing,			#sourceCode : 'parserInstanceFor: aSymbol\r\t^ aSymbol = #start\r\t\tifTrue: [ self parserInstance ]\r\t\tifFalse: [\r\t\t\tself parserInstance\r\t\t\t\tproductionAt: aSymbol \r\t\t\t\tifAbsent: [ self error: \'Production \' , self parserClass name , \'>>\' , aSymbol printString , \' not found.\' ] ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2102' ],		#self : OmReference [ '2103' ],		#time : DateAndTime [ '2017-12-12T08:01:01.228992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tparser := self parserInstance',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2103' ],		#self : OmReference [ '2104' ],		#time : DateAndTime [ '2017-12-12T08:01:01.229992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CompositeNodeTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tsuper tearDown.\r\tparser := result := nil',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2104' ],		#self : OmReference [ '2105' ],		#time : DateAndTime [ '2017-12-12T08:01:01.231992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2ExpressionGrammarTest class',				#isMetaSide : true			},			#name : #shouldInheritSelectors,			#protocol : #testing,			#sourceCode : 'shouldInheritSelectors\r\t^ true',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2105' ],		#self : OmReference [ '2106' ],		#time : DateAndTime [ '2017-12-12T08:01:01.232992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parse: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2106' ],		#self : OmReference [ '2107' ],		#time : DateAndTime [ '2017-12-12T08:01:01.233992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionParserTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #'as yet unclassified',			#sourceCode : 'parserClass\r\t^ PP2ExpressionParser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2107' ],		#self : OmReference [ '2108' ],		#time : DateAndTime [ '2017-12-12T08:01:01.234992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarTest_Optimized,				#isMetaSide : false			},			#name : #context,			#protocol : #context,			#sourceCode : 'context\r\t^ PP2InMemoryContext new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2108' ],		#self : OmReference [ '2109' ],		#time : DateAndTime [ '2017-12-12T08:01:01.235992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarTest_Optimized,				#isMetaSide : false			},			#name : #parserInstance,			#protocol : #accessing,			#sourceCode : 'parserInstance\r\t^ super parserInstance optimize',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2109' ],		#self : OmReference [ '2110' ],		#time : DateAndTime [ '2017-12-12T08:01:01.237992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammarTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2HtmlHeaderGrammar ',			#stamp : 'JanKurs 11/28/2016 07:46',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2110' ],		#self : OmReference [ '2111' ],		#time : DateAndTime [ '2017-12-12T08:01:01.239992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammarTest,				#isMetaSide : false			},			#name : #testHeader,			#protocol : #tests,			#sourceCode : 'testHeader\r\tself parse: \'<head>foobar</head>\' rule: #header to: \'foobar\'',			#stamp : 'JanKurs 11/28/2016 07:47',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2111' ],		#self : OmReference [ '2112' ],		#time : DateAndTime [ '2017-12-12T08:01:01.240992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammarTest,				#isMetaSide : false			},			#name : #testHtmlFragment,			#protocol : #tests,			#sourceCode : 'testHtmlFragment\r\tself parse: \'<html><head>foobar</head></html>\' rule: #htmlFragment to: \'foobar\' end: 25',			#stamp : 'JanKurs 11/28/2016 07:48',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2112' ],		#self : OmReference [ '2113' ],		#time : DateAndTime [ '2017-12-12T08:01:01.241992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammarTest,				#isMetaSide : false			},			#name : #testHtmlFragmentNoHeader,			#protocol : #tests,			#sourceCode : 'testHtmlFragmentNoHeader\r\tself fail: \'<html><body>foobar</body></html>\' rule: #htmlFragment',			#stamp : 'JanKurs 11/28/2016 07:49',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2113' ],		#self : OmReference [ '2114' ],		#time : DateAndTime [ '2017-12-12T08:01:01.243992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlHeaderGrammarTest,				#isMetaSide : false			},			#name : #testZincClientIntegration,			#protocol : #tests-integration,			#sourceCode : 'testZincClientIntegration\r\t| byteStream stream |\r\tbyteStream := ZnClient new\r \t\turl: \'http://pharo.org\';\r  \t\tstreaming: true;\r  \t\tget.\r\tstream := PP2CharacterStream on: byteStream encoder: ZnUTF8Encoder new.\r\r\tresult := PP2HtmlHeaderGrammar new parse: stream.\r\t\r\tself assert: stream atEnd not.\r\tself assert: (result includesSubstring: \'Pharo\')',			#stamp : 'JanKurs 11/28/2016 07:55',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2114' ],		#self : OmReference [ '2115' ],		#time : DateAndTime [ '2017-12-12T08:01:01.244992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNodeTest,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\tcontext isNil ifTrue: [ \r\t\tcontext := super context\r\t].\r\r\t^ context',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2115' ],		#self : OmReference [ '2116' ],		#time : DateAndTime [ '2017-12-12T08:01:01.245992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNodeTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ context := aParser parse: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2116' ],		#self : OmReference [ '2117' ],		#time : DateAndTime [ '2017-12-12T08:01:01.246992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CsNodeTest,				#isMetaSide : false			},			#name : #testStackId,			#protocol : #tests,			#sourceCode : 'testStackId\r\tself assert: $a asPParser push stackId equals: #defaultStack.\r\tself assert: $a asPParser pop stackId equals: #defaultStack.\t\r\tself assert: $a asPParser match stackId equals: #defaultStack.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2117' ],		#self : OmReference [ '2118' ],		#time : DateAndTime [ '2017-12-12T08:01:01.247992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InterpetParseTest,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\t^ PP2Context new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2118' ],		#self : OmReference [ '2119' ],		#time : DateAndTime [ '2017-12-12T08:01:01.248992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InterpetParseTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ (PP2Interpret  on: aParser) parse: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2119' ],		#self : OmReference [ '2120' ],		#time : DateAndTime [ '2017-12-12T08:01:01.252992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InterpetParseTest,				#isMetaSide : false			},			#name : #testPredicateDigit,			#protocol : #test,			#sourceCode : 'testPredicateDigit\r\t|  parser |\r\t\r\tparser := #digit asPParser.\r\r\tself assert: parser parse: \'1\' to: $1.\r\tself assert: parser parse: \'0\' to: $0.\r\tself assert: parser parse: \'9\' to: $9.\r\tself assert: parser fail: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2120' ],		#self : OmReference [ '2121' ],		#time : DateAndTime [ '2017-12-12T08:01:01.253992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\tcontext isNil ifTrue: [\r\t\tcontext := PP2RecordingContext new\r\t].\r\r\t^ context',			#stamp : 'JanKurs 11/22/2016 07:25',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2121' ],		#self : OmReference [ '2122' ],		#time : DateAndTime [ '2017-12-12T08:01:01.254992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parseAdaptable: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2122' ],		#self : OmReference [ '2123' ],		#time : DateAndTime [ '2017-12-12T08:01:01.255992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAndLiteralObject,			#protocol : #tests,			#sourceCode : 'testAndLiteralObject\r\tself assert: $a asPParser and parse: \'a\' to: $a end: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2123' ],		#self : OmReference [ '2124' ],		#time : DateAndTime [ '2017-12-12T08:01:01.256992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAndPop,			#protocol : #tests,			#sourceCode : 'testAndPop\r\t| parser |\r\tself context defaultStack push: $a.\r\tparser := $a asPParser pop and.\r\tparser optimize.\r\t\r\tself assert: parser parse: \'a\' to: $a end: 0.\r\tself assert: self context defaultStack top equals: $a.\r\tself assert: self context defaultStack size equals: 1.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2124' ],		#self : OmReference [ '2125' ],		#time : DateAndTime [ '2017-12-12T08:01:01.258992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAndPopFailure,			#protocol : #tests,			#sourceCode : 'testAndPopFailure\r\t| parser |\r\tself context defaultStack push: $a.\r\tparser := $a asPParser pop and.\r\tparser optimize.\r\t\r\tself assert: parser fail: \'b\'.\r\tself assert: self context defaultStack top equals: $a.\r\tself assert: self context defaultStack size equals: 1.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2125' ],		#self : OmReference [ '2126' ],		#time : DateAndTime [ '2017-12-12T08:01:01.259992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAndPredicateObject,			#protocol : #tests,			#sourceCode : 'testAndPredicateObject\r\tself assert: #letter asPParser and parse: \'a\' to: $a end: 0.\r\tself assert: #letter asPParser and parse: \'z\' to: $z end: 0.\t\r\tself assert: #letter asPParser and fail: \'1\' end: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2126' ],		#self : OmReference [ '2127' ],		#time : DateAndTime [ '2017-12-12T08:01:01.260992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAndPush,			#protocol : #tests,			#sourceCode : 'testAndPush\r\t| parser |\r\tself context defaultStack push: $b.\r\tparser := $a asPParser push and.\r\tparser optimize.\r\t\r\tself assert: parser parse: \'a\' to: $a end: 0.\r\tself assert: self context defaultStack top equals: $b.\r\tself assert: self context defaultStack size equals: 1.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2127' ],		#self : OmReference [ '2128' ],		#time : DateAndTime [ '2017-12-12T08:01:01.261992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAndPushFailure,			#protocol : #tests,			#sourceCode : 'testAndPushFailure\r\t| parser |\r\tself context defaultStack push: $b.\r\tparser := $a asPParser push and.\r\tparser optimize.\r\t\r\tself assert: parser fail: \'b\'.\r\tself assert: self context defaultStack top equals: $b.\r\tself assert: self context defaultStack size equals: 1.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2128' ],		#self : OmReference [ '2129' ],		#time : DateAndTime [ '2017-12-12T08:01:01.262992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAnyStarLazyLiteralObject,			#protocol : #'tests - seas',			#sourceCode : 'testAnyStarLazyLiteralObject\r\t| parser ctx |\r\tparser := #any asPParser starLazy, $x asPParser.\r\tparser optimize.\r\tparser enableDebug.\r\r\tctx := self assert: parser parse: \'..x\'.\r\tself assert: ctx returnValue first asArray equals: #($. $.).\r\tself assert: ctx debugResult steps equals: 4.\r\t\r\tctx := self assert: parser parse: \'x\'.\r\tself assert: ctx returnValue first isEmpty.\r\t\r\tself assert: parser fail: \'...\'.\r\tself assert: parser fail: \'..a\'',			#stamp : 'JanKurs 12/27/2016 16:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2129' ],		#self : OmReference [ '2130' ],		#time : DateAndTime [ '2017-12-12T08:01:01.263992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testAnyStarLazyPredicateObject,			#protocol : #'tests - seas',			#sourceCode : 'testAnyStarLazyPredicateObject\r\t| parser ctx |\r\tparser := #any asPParser starLazy, #letter asPParser.\r\tparser optimize.\r\tparser enableDebug.\r\t\r\tctx := self assert: parser parse: \'..a\'.\r\tself assert: ctx returnValue first asArray equals: #($. $.).\r\tself assert: ctx debugResult steps equals: 4.\r\r\tctx := self assert: parser parse: \'a\'.\r\tself assert: ctx returnValue first isEmpty.\r\r\tself assert: parser fail: \'...\'.\r\tself assert: parser fail: \'...1\'',			#stamp : 'JanKurs 12/27/2016 16:27',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2130' ],		#self : OmReference [ '2131' ],		#time : DateAndTime [ '2017-12-12T08:01:01.265992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testCache,			#protocol : #tests,			#sourceCode : 'testCache\r\t| counter parser contextOne contextTwo |\r\tcounter := 0.\r\r\tparser := [ :ctx | counter := counter + 1. #foo ] asPParser.\r\tparser strategy: parser strategy cache.\r\tparser setOptimized.\r\r\tcontextOne := \'foo\' asPetit2Context.\r\tcontextTwo := \'bar\' asPetit2Context.\r\t\r\tparser parseAdaptableWithContext: contextOne.\r\tself assert: counter equals: 1.\r\t\r\tparser parseAdaptableWithContext: contextOne.\r\tself assert: counter equals: 2.\r\t\r\tcontextOne next.\r\tparser parseAdaptableWithContext: contextOne.\r\tself assert: counter equals: 3.\r\r\tparser parseAdaptableWithContext: contextTwo.\r\tself assert: counter equals: 4.\r\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2131' ],		#self : OmReference [ '2132' ],		#time : DateAndTime [ '2017-12-12T08:01:01.266992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testCache2,			#protocol : #tests,			#sourceCode : 'testCache2\r\t| parser context result |\r\tparser := $a asPParser star.\r\tparser strategy: parser strategy cache.\r\tparser setOptimized.\r\t\r\tcontext := \'aaa\' asPetit2Context.\r\r\tresult := parser parseAdaptableWithContext: context.\r\tself assert: result position equals: 3.\r\t\r\tcontext := \'aabb\' asPetit2Context.\r\r\tresult := parser parseAdaptableWithContext: context.\r\tself assert: result position equals: 2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2132' ],		#self : OmReference [ '2133' ],		#time : DateAndTime [ '2017-12-12T08:01:01.267992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardChoiceFailure,			#protocol : #'tests - guards',			#sourceCode : 'testGuardChoiceFailure\r\t| parserOne parserTwo wrappedOne wrappedTwo result parser |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\r\twrappedOne := parserOne wrapped trim flatten. \r\twrappedTwo := parserTwo wrapped trim flatten.\r\tparser := wrappedOne / wrappedTwo.\r\tparser optimize.\r\tparser enableDebug.\r\t\t\r\tresult := self assert: parser fail: \'c\'.\r\tself assert: result debugResult steps equals: 4',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2133' ],		#self : OmReference [ '2134' ],		#time : DateAndTime [ '2017-12-12T08:01:01.268992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardChoiceOptionOne,			#protocol : #'tests - guards',			#sourceCode : 'testGuardChoiceOptionOne\r\t| parserOne parserTwo wrappedOne wrappedTwo parser result |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\r\twrappedOne := parserOne wrapped trim flatten. \r\twrappedTwo := parserTwo wrapped trim flatten.\r\tparser := wrappedOne / wrappedTwo.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'a \' to: \'a \'.\r\tself assert: result debugResult steps equals: 8',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2134' ],		#self : OmReference [ '2135' ],		#time : DateAndTime [ '2017-12-12T08:01:01.269992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardChoiceOptionTwo,			#protocol : #'tests - guards',			#sourceCode : 'testGuardChoiceOptionTwo\r\t| parserOne parserTwo wrappedOne wrappedTwo parser result |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\r\twrappedOne := parserOne wrapped trim flatten. \r\twrappedTwo := parserTwo wrapped trim flatten.\r\tparser := wrappedOne / wrappedTwo.\r\tparser optimize.\r\tparser enableDebug.\r\t\r\tresult := self assert: parser parse: \'b \' to: \'b \'.\r\tself assert: result debugResult steps equals: 9',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2135' ],		#self : OmReference [ '2136' ],		#time : DateAndTime [ '2017-12-12T08:01:01.271992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardOptional,			#protocol : #'tests - guards',			#sourceCode : 'testGuardOptional\r\t|  wrappedOne parser result |\r\r\twrappedOne := $a asPParser wrapped trim flatten.\r\tparser := wrappedOne optional.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'a\' to: \'a\' end: 1.\r\tself assert: result debugResult steps equals: 8',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2136' ],		#self : OmReference [ '2137' ],		#time : DateAndTime [ '2017-12-12T08:01:01.272992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardOptionalFailure,			#protocol : #'tests - guards',			#sourceCode : 'testGuardOptionalFailure\r\t|  wrappedOne parser result |\r\r\twrappedOne := $a asPParser wrapped trim flatten.\r\tparser := wrappedOne optional.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'c\' to: nil end: 0.\r\tself assert: result debugResult steps equals: 2',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2137' ],		#self : OmReference [ '2138' ],		#time : DateAndTime [ '2017-12-12T08:01:01.273992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardPlus,			#protocol : #'tests - guards',			#sourceCode : 'testGuardPlus\r\t| parserOne wrappedOne result parser |\r\tparserOne := $a asPParser.\r\twrappedOne := parserOne wrapped trim flatten. \r\tparser := wrappedOne plus.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'a\' to: #(\'a\') end: 1.\r\tself assert: result debugResult steps equals: 13',			#stamp : 'JanKurs 11/23/2016 07:59',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2138' ],		#self : OmReference [ '2139' ],		#time : DateAndTime [ '2017-12-12T08:01:01.274992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardPlusFailure,			#protocol : #'tests - guards',			#sourceCode : 'testGuardPlusFailure\r\t| result parser parserOne wrappedOne |\r\tparserOne := $a asPParser.\r\twrappedOne := parserOne wrapped trim flatten. \r\tparser := wrappedOne plus.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser fail: \'c\'.\r\tself assert: result debugResult steps equals: 2',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2139' ],		#self : OmReference [ '2140' ],		#time : DateAndTime [ '2017-12-12T08:01:01.276992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardPlusTwo,			#protocol : #'tests - guards',			#sourceCode : 'testGuardPlusTwo\r\t| parserOne wrappedOne parser result |\r\tparserOne := $a asPParser.\r\twrappedOne := parserOne wrapped trim flatten. \r\tparser := wrappedOne plus.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'aa\' to: #(\'a\' \'a\') end: 2.\r\tself assert: result debugResult steps equals: 19',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2140' ],		#self : OmReference [ '2141' ],		#time : DateAndTime [ '2017-12-12T08:01:01.277992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardStar,			#protocol : #'tests - guards',			#sourceCode : 'testGuardStar\r\t| parser wrappedOne result |\r\r\twrappedOne := $a asPParser wrapped trim flatten. \r\tparser := wrappedOne star.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'a\' to: #(\'a\') end: 1.\r\tself assert: result debugResult steps equals: 13.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2141' ],		#self : OmReference [ '2142' ],		#time : DateAndTime [ '2017-12-12T08:01:01.278992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testGuardStarEmpty,			#protocol : #'tests - guards',			#sourceCode : 'testGuardStarEmpty\r\t| parser wrappedOne result |\r\r\twrappedOne := $a asPParser wrapped trim flatten. \r\tparser := wrappedOne star.\r\tparser optimize.\r\tparser enableDebug.\r\r\tresult := self assert: parser parse: \'c\' to: #() end: 0.\r\tself assert: result debugResult steps equals: 2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2142' ],		#self : OmReference [ '2143' ],		#time : DateAndTime [ '2017-12-12T08:01:01.279992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #tests,			#sourceCode : 'testLiteralObject\r\t\r\tself assert: $a asPParser flatten parse: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2143' ],		#self : OmReference [ '2144' ],		#time : DateAndTime [ '2017-12-12T08:01:01.280992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testLiteralObjectTrimmingToken,			#protocol : #tests,			#sourceCode : 'testLiteralObjectTrimmingToken\r\t\r\tself assert: $a asPParser wrapped token trim parse: \'   a   \' toTokenValue: \'a\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2144' ],		#self : OmReference [ '2145' ],		#time : DateAndTime [ '2017-12-12T08:01:01.281992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testNotLiteral,			#protocol : #tests,			#sourceCode : 'testNotLiteral\r\tself assert: $a asPParser not parse: \'b\' to: nil end: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2145' ],		#self : OmReference [ '2146' ],		#time : DateAndTime [ '2017-12-12T08:01:01.283992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testNotPredicateObject,			#protocol : #tests,			#sourceCode : 'testNotPredicateObject\r\tself assert: #letter asPParser not parse: \'0\' to: nil end: 0.\r\tself assert: #letter asPParser not parse: \'_\' to: nil end: 0.\t\r\tself assert: #letter asPParser not fail: \'a\' end: 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2146' ],		#self : OmReference [ '2147' ],		#time : DateAndTime [ '2017-12-12T08:01:01.284992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testPackrat,			#protocol : #'tests - packrat',			#sourceCode : 'testPackrat\r\t| packrat parser result |\r\r\tpackrat := $a asPParser trim memoize.\r\tparser := packrat and, packrat.\r\t\r\tparser optimize.\r\tparser enableDebug.\r\t\r\tresult := self assert: parser parse: \' a\'.\r\tself assert: result debugResult steps equals: 8.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2147' ],		#self : OmReference [ '2148' ],		#time : DateAndTime [ '2017-12-12T08:01:01.285992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testPackratContextSensitive,			#protocol : #'tests - packrat',			#sourceCode : 'testPackratContextSensitive\r\t| packrat parser result |\r\r\tpackrat := #letter asPParser match memoize.\r\tparser := (#letter asPParser push, packrat) and, #letter asPParser push, packrat.\r\t\r\tparser optimize.\r\tparser enableDebug.\r\t\r\tresult := self assert: parser parse: \'aa\'.\r\tself assert: result debugResult steps equals: 11',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2148' ],		#self : OmReference [ '2149' ],		#time : DateAndTime [ '2017-12-12T08:01:01.286992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testPackratContextSensitiveFailure,			#protocol : #'tests - packrat',			#sourceCode : 'testPackratContextSensitiveFailure\r\t| packrat parser result |\r\r\tpackrat := #letter asPParser match memoize.\r\tparser := (#letter asPParser push, packrat) and, #letter asPParser, packrat.\r\t\r\tparser optimize.\r\tparser enableDebug.\r\t\r\tresult := self assert: parser fail: \'aa\' end: 1',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2149' ],		#self : OmReference [ '2150' ],		#time : DateAndTime [ '2017-12-12T08:01:01.287992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testSea,			#protocol : #tests,			#sourceCode : 'testSea\r\t|  parser island result |\r\t\r\tisland := $a asPParser plus flatten.\r\tparser := island sea.\r\r\tparser optimize.\r\tresult := parser debug: \'..aa..\'.\r\tself assert: result debugResult steps equals: 33.\t\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2150' ],		#self : OmReference [ '2151' ],		#time : DateAndTime [ '2017-12-12T08:01:01.288992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testSequenceWithPush,			#protocol : #tests,			#sourceCode : 'testSequenceWithPush\r\t| parser |\r\tself context defaultStack push: $x.\r\tparser := $a asPParser, $b asPParser push, $c asPParser.\r\tparser optimize.\r\t\r\tself assert: parser parse: \'abc\'.\r\tself assert: self context defaultStack top equals: $b.\r\tself assert: self context defaultStack size equals: 2.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2151' ],		#self : OmReference [ '2152' ],		#time : DateAndTime [ '2017-12-12T08:01:01.290992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testSequenceWithPushFailureFirst,			#protocol : #tests,			#sourceCode : 'testSequenceWithPushFailureFirst\r\t| parser |\r\tself context defaultStack push: $x.\r\tparser := $a asPParser, $b asPParser push, $c asPParser.\r\tparser optimize.\r\t\r\tself assert: parser fail: \'xbc\'.\r\tself assert: self context defaultStack top equals: $x.\r\tself assert: self context defaultStack size equals: 1.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2152' ],		#self : OmReference [ '2153' ],		#time : DateAndTime [ '2017-12-12T08:01:01.291992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testSequenceWithPushFailureLast,			#protocol : #tests,			#sourceCode : 'testSequenceWithPushFailureLast\r\t| parser |\r\tself context defaultStack push: $x.\r\tparser := $a asPParser, $b asPParser push, $c asPParser.\r\tparser optimize.\r\t\r\tself assert: parser fail: \'abx\' end: 2.\r\tself assert: self context defaultStack top equals: $x.\r\tself assert: self context defaultStack size equals: 1.\r\tself assert: (self context countFor: #remember) equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2153' ],		#self : OmReference [ '2154' ],		#time : DateAndTime [ '2017-12-12T08:01:01.292992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationParserTest,				#isMetaSide : false			},			#name : #testTrimming,			#protocol : #tests,			#sourceCode : 'testTrimming\r\t\r\tself assert: $a asPParser trim parse: \'   a   \'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2154' ],		#self : OmReference [ '2155' ],		#time : DateAndTime [ '2017-12-12T08:01:01.293992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #'assertCharacterSets:',			#protocol : #utilities,			#sourceCode : 'assertCharacterSets: aParser\r\t"Assert the character set of aParser does not overlap with the character set with the negated parser, and that they both cover the complete character space."\r\r\t| positives negatives |\r\tpositives := self parsedCharacterSet: aParser.\r\tnegatives := self parsedCharacterSet: aParser negate.\r\tself charactersDo: [ :char | \r\t\t| positive negative |\r\t\tpositive := positives includes: char.\r\t\tnegative := negatives includes: char.\r\t\tself \r\t\t\tassert: ((positive and: [ negative not ])\r\t\t\t\tor: [ positive not and: [ negative ] ])\r\t\t\tdescription: char printString , \' should be in exactly one set\' ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2155' ],		#self : OmReference [ '2156' ],		#time : DateAndTime [ '2017-12-12T08:01:01.294992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #'charactersDo:',			#protocol : #private,			#sourceCode : 'charactersDo: aBlock\r\t1 to: 256 do: [ :index | aBlock value: (Character codePoint: index) ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2156' ],		#self : OmReference [ '2157' ],		#time : DateAndTime [ '2017-12-12T08:01:01.295992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parse: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2157' ],		#self : OmReference [ '2158' ],		#time : DateAndTime [ '2017-12-12T08:01:01.296992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #'parsedCharacterSet:',			#protocol : #utilities,			#sourceCode : 'parsedCharacterSet: aParser\r\t| result |\r\tresult := WriteStream on: String new.\r\tself charactersDo: [ :char |\r\t\t(aParser matches: (char asString))\r\t\t\tifTrue: [ result nextPut: char ] ].\r\t^ result contents',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2158' ],		#self : OmReference [ '2159' ],		#time : DateAndTime [ '2017-12-12T08:01:01.297992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testAny,			#protocol : #testing-objects,			#sourceCode : 'testAny\r\t| parser |\r\tparser := #any asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \' \' to: $ .\r\tself assert: parser parse: \'1\' to: $1.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser fail: \'\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2159' ],		#self : OmReference [ '2160' ],		#time : DateAndTime [ '2017-12-12T08:01:01.299992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testAnyExceptAnyOf,			#protocol : #testing-objects,			#sourceCode : 'testAnyExceptAnyOf\r\t| parser |\r\tparser := PP2PredicateObjectNode noneOf: #($: $,).\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'z\' to: $z.\r\tself assert: parser fail: \':\'.\r\tself assert: parser fail: \',\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2160' ],		#self : OmReference [ '2161' ],		#time : DateAndTime [ '2017-12-12T08:01:01.300992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testAnyOf,			#protocol : #testing-objects,			#sourceCode : 'testAnyOf\r\t| parser |\r\tparser := PP2PredicateObjectNode anyOf: #($a $z).\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'z\' to: $z.\r\tself assert: parser fail: \'x\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2161' ],		#self : OmReference [ '2162' ],		#time : DateAndTime [ '2017-12-12T08:01:01.301992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testBlank,			#protocol : #testing-chars,			#sourceCode : 'testBlank\r\t| parser |\r\tparser := #blank asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: (String with: Character space) to: Character space.\r\tself assert: parser parse: (String with: Character tab) to: Character tab.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'1\'.\r\tself assert: parser fail: (String with: Character cr)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2162' ],		#self : OmReference [ '2163' ],		#time : DateAndTime [ '2017-12-12T08:01:01.303992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testChar,			#protocol : #testing-chars,			#sourceCode : 'testChar\r\t| parser |\r\tparser := $* asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'*\' to: $*.\r\tself assert: parser parse: \'**\' to: $* end: 1.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'1\'.\r\tself assert: parser fail: \'a\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2163' ],		#self : OmReference [ '2164' ],		#time : DateAndTime [ '2017-12-12T08:01:01.304992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testDigit,			#protocol : #testing-chars,			#sourceCode : 'testDigit\r\t| parser |\r\tparser := #digit asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'0\' to: $0.\r\tself assert: parser parse: \'9\' to: $9.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'a\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2164' ],		#self : OmReference [ '2165' ],		#time : DateAndTime [ '2017-12-12T08:01:01.305992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testExpect,			#protocol : #testing-objects,			#sourceCode : 'testExpect\r\t| parser |\r\tparser := PP2PredicateObjectNode expect: $a message: \'$a expected\'.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser fail: \'b\'.\r\tself assert: parser fail: \'\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2165' ],		#self : OmReference [ '2166' ],		#time : DateAndTime [ '2017-12-12T08:01:01.306992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testHex,			#protocol : #testing-chars,			#sourceCode : 'testHex\r\t| parser |\r\tparser := #hex asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'0\' to: $0.\r\tself assert: parser parse: \'5\' to: $5.\r\tself assert: parser parse: \'9\' to: $9.\r\tself assert: parser parse: \'A\' to: $A.\r\tself assert: parser parse: \'D\' to: $D.\r\tself assert: parser parse: \'F\' to: $F.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'e\' to: $e.\r\tself assert: parser parse: \'f\' to: $f.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'g\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2166' ],		#self : OmReference [ '2167' ],		#time : DateAndTime [ '2017-12-12T08:01:01.307992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testLetter,			#protocol : #testing-chars,			#sourceCode : 'testLetter\r\t| parser |\r\tparser := #letter asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'Z\' to: $Z.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'0\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2167' ],		#self : OmReference [ '2168' ],		#time : DateAndTime [ '2017-12-12T08:01:01.308992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testNewline,			#protocol : #testing-chars,			#sourceCode : 'testNewline\r\t| parser |\r\tparser := #newline asPParser.\r\r\tself assert: parser parse: String cr to: String cr.\r\tself assert: parser parse: String lf to: String lf.\r\tself assert: parser parse: String crlf to: String  crlf.\r\tself assert: parser fail: \' \'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2168' ],		#self : OmReference [ '2169' ],		#time : DateAndTime [ '2017-12-12T08:01:01.310992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testSequenceParser,			#protocol : #testing-sequence,			#sourceCode : 'testSequenceParser\r\t| parser |\r\tparser := PP2PredicateSequenceNode\r\t\ton: [ :value | value first isUppercase ]\r\t\tmessage: \'uppercase 3 letter words\'\r\t\tsize: 3.\r\tself assert: parser size equals: 3.\r\tself assert: parser parse: \'Abc\'.\r\tself assert: parser parse: \'ABc\'.\r\tself assert: parser parse: \'ABC\'.\r\tself assert: parser fail: \'abc\'.\r\tself assert: parser fail: \'aBC\'.\r\tself assert: parser fail: \'Ab\'.\r\tparser := parser negate.\r\tself assert: parser size equals: 3.\r\tself assert: parser fail: \'Abc\'.\r\tself assert: parser fail: \'ABc\'.\r\tself assert: parser fail: \'ABC\'.\r\tself assert: parser parse: \'abc\'.\r\tself assert: parser parse: \'aBC\'.\r\tself assert: parser fail: \'Ab\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2169' ],		#self : OmReference [ '2170' ],		#time : DateAndTime [ '2017-12-12T08:01:01.311992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testSpace,			#protocol : #testing-chars,			#sourceCode : 'testSpace\r\t| parser |\r\tparser := #space asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: (String with: Character tab) to: Character tab.\r\tself assert: parser parse: \' \' to: Character space.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'a\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2170' ],		#self : OmReference [ '2171' ],		#time : DateAndTime [ '2017-12-12T08:01:01.312992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PredicateTest,				#isMetaSide : false			},			#name : #testWord,			#protocol : #testing-chars,			#sourceCode : 'testWord\r\t| parser |\r\tparser := #word asPParser.\r\tself assertCharacterSets: parser.\r\tself assert: parser parse: \'a\' to: $a.\r\tself assert: parser parse: \'A\' to: $A.\r\tself assert: parser parse: \'0\' to: $0.\r\tself assert: parser fail: \'\'.\r\tself assert: parser fail: \'-\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2171' ],		#self : OmReference [ '2172' ],		#time : DateAndTime [ '2017-12-12T08:01:01.313992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationParserTest,				#isMetaSide : false			},			#name : #'assert:parse:',			#protocol : #'parse support',			#sourceCode : 'assert: parser parse: input\r\tparser optimize.\r\tresult := (super assert: parser parse: input) value',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2172' ],		#self : OmReference [ '2173' ],		#time : DateAndTime [ '2017-12-12T08:01:01.315992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationParserTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #parsing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parseAdaptable: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2173' ],		#self : OmReference [ '2174' ],		#time : DateAndTime [ '2017-12-12T08:01:01.316992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationParserTest,				#isMetaSide : false			},			#name : #result,			#protocol : #'parse support',			#sourceCode : 'result\r\t^ result',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2174' ],		#self : OmReference [ '2175' ],		#time : DateAndTime [ '2017-12-12T08:01:01.317992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationParserTest,				#isMetaSide : false			},			#name : #seaInstance,			#protocol : #'parse support',			#sourceCode : 'seaInstance\r\t^ PP2SeaNode new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2175' ],		#self : OmReference [ '2176' ],		#time : DateAndTime [ '2017-12-12T08:01:01.318992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaParserTest,				#isMetaSide : false			},			#name : #'assert:parse:',			#protocol : #utilities,			#sourceCode : 'assert: parser parse: input\r\tresult := (super assert: parser parse: input) value',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2176' ],		#self : OmReference [ '2177' ],		#time : DateAndTime [ '2017-12-12T08:01:01.319992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaParserTest,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #accessing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parseAdaptable: aStream withContext: aContext',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2177' ],		#self : OmReference [ '2178' ],		#time : DateAndTime [ '2017-12-12T08:01:01.320992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaParserTest,				#isMetaSide : false			},			#name : #result,			#protocol : #'parse support',			#sourceCode : 'result\r\t^ result',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2178' ],		#self : OmReference [ '2179' ],		#time : DateAndTime [ '2017-12-12T08:01:01.321992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaParserTest,				#isMetaSide : false			},			#name : #seaInstance,			#protocol : #'parse support',			#sourceCode : 'seaInstance\r\t^ PP2SeaNode new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2179' ],		#self : OmReference [ '2180' ],		#time : DateAndTime [ '2017-12-12T08:01:01.323992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaParserTest,				#isMetaSide : false			},			#name : #testNestedBlockDeepNested,			#protocol : #tests,			#sourceCode : 'testNestedBlockDeepNested\r\t| block |\r\r\tblock := self nestedBlock.\r\t\r\tself assert: block parse: \'{ {} { {  } } }\'.\r\tself assert: self result size equals: 3.\r\tself assert: self result first equals: ${.\r\tself assert: self result second size equals: 2.\r\tself assert: self result second first size equals: 3.\r\tself assert: self result second second size equals: 3.\r\tself assert: self result third equals: $}.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2180' ],		#self : OmReference [ '2181' ],		#time : DateAndTime [ '2017-12-12T08:01:01.324992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WaterNodeTest,				#isMetaSide : false			},			#name : #testBoundaryElements,			#protocol : #tests,			#sourceCode : 'testBoundaryElements\r\t| water boundary |\r\twater := PP2WaterNode new.\r\tboundary := $a asPParser.\r\t\r\twater boundaryElements: boundary asOrderedCollection.\r\t\r\tself assert: water boundary isKindOf: PP2ChoiceNode.\r\tself assert: water boundary firstChild isKindOf: PP2AndNode.\r\tself assert: water boundaryElements first  == boundary',			#stamp : 'JanKurs 9/9/2017 17:21',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2181' ],		#self : OmReference [ '2182' ],		#time : DateAndTime [ '2017-12-12T08:01:01.325992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesCacheTest,				#isMetaSide : false			},			#name : #'assert:hasProperty:withValue:',			#protocol : #tests,			#sourceCode : 'assert: node hasProperty: propertyName withValue: propertyValue\r\tself assert: (node propertyAt: propertyName) equals: propertyValue',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2182' ],		#self : OmReference [ '2183' ],		#time : DateAndTime [ '2017-12-12T08:01:01.326992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesCacheTest,				#isMetaSide : false			},			#name : #testSanity,			#protocol : #tests,			#sourceCode : 'testSanity\r\t| parser |\r\tparser := PP2ExpressionGrammar new.\r\tPP2AllNodesCache new doPass: parser.\r\t\r\tparser allNodesDo: [ :child | \r\t\tself assert: (child hasProperty: #allNodesSize).\r\t].\r\r\tself assert: (parser productionAt: #number) hasProperty: #allNodesSize withValue: 12.\r\tself assert: parser hasProperty: #allNodesSize withValue: parser allNodes size.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2183' ],		#self : OmReference [ '2184' ],		#time : DateAndTime [ '2017-12-12T08:01:01.327992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2AllNodesVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2184' ],		#self : OmReference [ '2185' ],		#time : DateAndTime [ '2017-12-12T08:01:01.328992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #tests,			#sourceCode : 'testChoice\r\tparser := $a asPParser / $b asPParser.\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size = 3.\r\tself assert: (children includes: parser).\r\tself assert: (children includes: parser firstChild).\r\tself assert: (children includes: parser secondChild).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2185' ],		#self : OmReference [ '2186' ],		#time : DateAndTime [ '2017-12-12T08:01:01.329992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testCycle,			#protocol : #tests,			#sourceCode : 'testCycle\r\t| delegate |\r\tdelegate := PP2DelegateNode new.\r\tparser := delegate, delegate.\r\tdelegate child: parser.\r\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size equals: 2.\r\tself assert: (children includes: parser).\r\tself assert: (children includes: delegate).\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2186' ],		#self : OmReference [ '2187' ],		#time : DateAndTime [ '2017-12-12T08:01:01.330992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testLiteral,			#protocol : #tests,			#sourceCode : 'testLiteral\r\tparser := $a asPParser.\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size = 1.\r\tself assert: children anyOne = parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2187' ],		#self : OmReference [ '2188' ],		#time : DateAndTime [ '2017-12-12T08:01:01.332992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\tparser := $a asPParser, $b asPParser.\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size = 3.\r\tself assert: (children includes: parser).\r\tself assert: (children includes: parser firstChild).\r\tself assert: (children includes: parser secondChild).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2188' ],		#self : OmReference [ '2189' ],		#time : DateAndTime [ '2017-12-12T08:01:01.333992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testTokenParser,			#protocol : #tests,			#sourceCode : 'testTokenParser\r\tparser := $a asPParser token.\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size = 2.\r\tself assert: (children includes: parser child).\r\tself assert: (children includes: parser).\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2189' ],		#self : OmReference [ '2190' ],		#time : DateAndTime [ '2017-12-12T08:01:01.335992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testTrimParser,			#protocol : #tests,			#sourceCode : 'testTrimParser\r\t| trimmer |\r\ttrimmer := PP2FailingNode instance.\r\tparser := $a asPParser trim: trimmer.\r\t\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size = 3.\r\tself assert: (children includes: parser child).\r\tself assert: (children includes: parser).\r\tself assert: (children includes: trimmer).\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2190' ],		#self : OmReference [ '2191' ],		#time : DateAndTime [ '2017-12-12T08:01:01.336992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #testWrapping,			#protocol : #tests,			#sourceCode : 'testWrapping\r\tparser := $a asPParser wrapped.\r\tchildren := self visit: parser.\r\t\r\tself assert: children isCollection.\r\tself assert: children size = 2.\r\tself assert: (children includes: parser child).\r\tself assert: (children includes: parser).\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2191' ],		#self : OmReference [ '2192' ],		#time : DateAndTime [ '2017-12-12T08:01:01.337992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2AllNodesVisitorTest,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #running,			#sourceCode : 'visit: node\r\t^ visitor visit: node.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2192' ],		#self : OmReference [ '2193' ],		#time : DateAndTime [ '2017-12-12T08:01:01.338992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2193' ],		#self : OmReference [ '2194' ],		#time : DateAndTime [ '2017-12-12T08:01:01.339992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #'streamOn:',			#protocol : #running,			#sourceCode : 'streamOn: collection\r\t^ PP2BufferStream on: (PP2MinimalStream on: collection)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2194' ],		#self : OmReference [ '2195' ],		#time : DateAndTime [ '2017-12-12T08:01:01.340992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #'streamOn:bufferSize:',			#protocol : #running,			#sourceCode : 'streamOn: collection bufferSize: size\r\t^ PP2BufferStream on: (PP2MinimalStream on: collection) bufferSize: size',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2195' ],		#self : OmReference [ '2196' ],		#time : DateAndTime [ '2017-12-12T08:01:01.341992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testAtEndDifferentPosition,			#protocol : #'tests - context interface',			#sourceCode : 'testAtEndDifferentPosition\r\t| stream |\r\tstream := self streamOn: \'f\'.\r\tstream upToPosition: 1.\r\tself assert: (stream atEnd: 0) not.\r\tself assert: (stream atEnd: 1).\r\t\r\tself assert: (stream atEnd: 2).\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2196' ],		#self : OmReference [ '2197' ],		#time : DateAndTime [ '2017-12-12T08:01:01.343992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testContents,			#protocol : #tests,			#sourceCode : 'testContents\r\t| stream |\r\tstream := self streamOn: \'bar\'. \r\t\r\tself assert: (stream contents) equals: \'\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2197' ],		#self : OmReference [ '2198' ],		#time : DateAndTime [ '2017-12-12T08:01:01.344992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testContentsAfterRead,			#protocol : #tests,			#sourceCode : 'testContentsAfterRead\r\t| stream |\r\tstream := self streamOn: \'bar\'. \r\tstream upToPosition: 3.\t\r\tself assert: (stream contents) equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2198' ],		#self : OmReference [ '2199' ],		#time : DateAndTime [ '2017-12-12T08:01:01.345992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testCopyFromToBufferOverflow,			#protocol : #'tests - context interface',			#sourceCode : 'testCopyFromToBufferOverflow\r\t| stream |\r\r\tstream := self streamOn: \'bar\' bufferSize:2.\r\r\tself assert: (stream copyFrom: 2 to: 3) equals: \'ar\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2199' ],		#self : OmReference [ '2200' ],		#time : DateAndTime [ '2017-12-12T08:01:01.346992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testCopyFromToOOB,			#protocol : #tests,			#sourceCode : 'testCopyFromToOOB\r\t| stream |\r\tstream := self streamOn: \'bar\'.\r\r\tself should: [ stream copyFrom: 4 to: 4 ] raise: SubscriptOutOfBounds.\r\tself should: [ stream copyFrom: 1 to: 4 ] raise: SubscriptOutOfBounds.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2200' ],		#self : OmReference [ '2201' ],		#time : DateAndTime [ '2017-12-12T08:01:01.347992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testCopyFromToSmallBuffer,			#protocol : #tests,			#sourceCode : 'testCopyFromToSmallBuffer\r\t| stream |\r\tstream :=  self streamOn: \'foobar\' bufferSize: 3. \r\r\tself assert: (stream copyFrom: 1 to: 3) = \'foo\'.\r\tself assert: (stream copyFrom: 2 to: 4) = \'oob\'.\r\r\tself should: [ stream copyFrom: 1 to: 3 ] raise: Exception description: \'too much backtrack\'.\r\tself should: [ stream copyFrom: 2 to: 5 ] raise: Exception description: \'range too big\'.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2201' ],		#self : OmReference [ '2202' ],		#time : DateAndTime [ '2017-12-12T08:01:01.348992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testInstanceCreation,			#protocol : #tests,			#sourceCode : 'testInstanceCreation\r\t| stream |\r\tstream := self streamOn: \'\'.\r\tself assert: (stream buffer isKindOf: String).\r\tself assert: (stream buffer size = stream bufferSize).\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2202' ],		#self : OmReference [ '2203' ],		#time : DateAndTime [ '2017-12-12T08:01:01.349992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testInstanceCreationSize,			#protocol : #tests,			#sourceCode : 'testInstanceCreationSize\r\t| stream |\r\tstream := self streamOn: \'\' bufferSize: 2. \r\tself assert: (stream buffer isKindOf: String).\r\tself assert: (stream buffer size = stream bufferSize).\r\tself assert: (stream bufferSize = 2).\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2203' ],		#self : OmReference [ '2204' ],		#time : DateAndTime [ '2017-12-12T08:01:01.351992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testRandomAccessTooMuchBacktrack,			#protocol : #'tests - context interface',			#sourceCode : 'testRandomAccessTooMuchBacktrack\r\t| stream |\r\tstream := self streamOn: \'bar\' bufferSize: 2. \r\t\r\tself assert: (stream atPosition: 3) = $r.\t\r\tself assert: (stream atPosition: 2) = $a.\r\tself should: [ stream atPosition: 1 ] raise: SubscriptOutOfBounds description: \'too much backtrack\'.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2204' ],		#self : OmReference [ '2205' ],		#time : DateAndTime [ '2017-12-12T08:01:01.352992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testRandomAccessTwoPasses,			#protocol : #'tests - context interface',			#sourceCode : 'testRandomAccessTwoPasses\r\t| stream |\r\tstream := self streamOn: \'foobar\' bufferSize: 2. \r\t\r\tself assert: (stream atPosition: 1) = $f.\t\r\tself assert: (stream atPosition: 2) = $o.\r\tself assert: (stream atPosition: 3) = $o.\t\r\tself assert: (stream atPosition: 4) = $b.\r\tself assert: (stream atPosition: 5) = $a.\r\tself assert: (stream atPosition: 6) = $r.\r\t\r\tself should: [(stream atPosition: 1) ] raise: Exception.\r\tself should: [(stream atPosition: 2) ] raise: Exception.\r\tself should: [(stream atPosition: 3) ] raise: Exception.\r\tself should: [(stream atPosition: 4) ] raise: Exception.\r\tself assert: (stream atPosition: 5) = $a.\r\tself assert: (stream atPosition: 6) = $r.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2205' ],		#self : OmReference [ '2206' ],		#time : DateAndTime [ '2017-12-12T08:01:01.354992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamTest,				#isMetaSide : false			},			#name : #testUncheckedNext,			#protocol : #tests,			#sourceCode : 'testUncheckedNext\r\t| stream |\r\tstream := self streamOn: \'foo\'. \r\t\r\tself assert: stream uncheckedNext = $f.\r\tself assert: stream uncheckedNext = $o.\r\tself assert: stream uncheckedNext = $o.\r\tself should: [ stream uncheckedNext ] raise: Exception.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2206' ],		#self : OmReference [ '2207' ],		#time : DateAndTime [ '2017-12-12T08:01:01.355992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2207' ],		#self : OmReference [ '2208' ],		#time : DateAndTime [ '2017-12-12T08:01:01.356992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\tvisitor := PP2BypassVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2208' ],		#self : OmReference [ '2209' ],		#time : DateAndTime [ '2017-12-12T08:01:01.357992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #testBypassCache,			#protocol : #'as yet unclassified',			#sourceCode : 'testBypassCache\r\r\t| cache |\r\tcache := $a asPParser wrapped.\r\tcache strategy: cache strategy cache.\r\t\r\tparser := cache plus.\r\tparser strategy: (PP2Plus on: parser).\r\t\r\tself visit: parser.\r\t\r\tself assert: parser strategy child isKindOf: PP2DelegateNode.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2209' ],		#self : OmReference [ '2210' ],		#time : DateAndTime [ '2017-12-12T08:01:01.358992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #'as yet unclassified',			#sourceCode : 'testPlus\r\r\tparser := $a asPParser wrapped plus.\r\tparser strategy: (PP2Plus on: parser).\r\t\r\tself visit: parser.\r\t\r\tself assert: parser strategy child isKindOf: PP2LiteralObjectNode.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2210' ],		#self : OmReference [ '2211' ],		#time : DateAndTime [ '2017-12-12T08:01:01.359992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfTwo,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequenceOfTwo\r\r\tparser := $a asPParser wrapped, $b asPParser wrapped.\r\tparser strategy: (PP2SequenceOfTwo on: parser).\r\t\r\tself visit: parser.\r\t\r\tself assert: parser strategy firstChild isKindOf: PP2LiteralObjectNode.\r\tself assert: parser strategy secondChild isKindOf: PP2LiteralObjectNode.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2211' ],		#self : OmReference [ '2212' ],		#time : DateAndTime [ '2017-12-12T08:01:01.360992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfTwoRecognizer,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequenceOfTwoRecognizer\r\r\tparser := $a asPParser wrapped, $b asPParser wrapped.\r\tparser strategy: (PP2SequenceOfTwoRecognizer on: parser).\r\t\r\tself visit: parser.\r\t\r\tself assert: parser strategy firstChild isKindOf: PP2LiteralObjectNode.\r\tself assert: parser strategy secondChild isKindOf: PP2LiteralObjectNode.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2212' ],		#self : OmReference [ '2213' ],		#time : DateAndTime [ '2017-12-12T08:01:01.361992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #testStar,			#protocol : #'as yet unclassified',			#sourceCode : 'testStar\r\r\tparser := $a asPParser wrapped star.\r\tparser strategy: (PP2Star on: parser).\r\t\r\tself visit: parser.\r\t\r\tself assert: parser strategy child isKindOf: PP2LiteralObjectNode.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2213' ],		#self : OmReference [ '2214' ],		#time : DateAndTime [ '2017-12-12T08:01:01.363992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BypassVisitorTest,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #'as yet unclassified',			#sourceCode : 'visit: node\r\tvisitor visit: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2214' ],		#self : OmReference [ '2215' ],		#time : DateAndTime [ '2017-12-12T08:01:01.364992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\t\r\tvisitor := PP2CommonPrefixVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2215' ],		#self : OmReference [ '2216' ],		#time : DateAndTime [ '2017-12-12T08:01:01.365992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #tests,			#sourceCode : 'testChoice\r\t| production |\r\tproduction := \'foo\' asPParser plus wrapped trim ==> [ :foo | foo ]\r\t\tname: \'production\';\r\t\tyourself.\r\t\r\tparser := production / ($a asPParser optional, production wrapped).\r\t\r\tself visit: parser.\r\t\r\tself assert: production strategy isKindOf: PP2Cache.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2216' ],		#self : OmReference [ '2217' ],		#time : DateAndTime [ '2017-12-12T08:01:01.366992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #testChoiceNonIdentical,			#protocol : #tests,			#sourceCode : 'testChoiceNonIdentical\r\t| productionOne productionTwo |\r\tproductionOne := \'foo\' asPParser plus wrapped trim ==> [ :foo | foo ]\r\t\tname: \'production\';\r\t\tyourself.\r\tproductionTwo := \'foo\' asPParser plus wrapped trim ==> [ :foo | foo ]\r\t\tname: \'production\';\r\t\tyourself.\r\t\r\tparser := productionOne / ($a asPParser optional, productionTwo wrapped).\r\t\r\tself visit: parser.\r\t\r\tself assert: productionOne strategy isKindOf: PP2Cache.\r\tself assert: productionOne strategy isKindOf: PP2Cache.\r\tself assert: productionOne strategy == productionTwo strategy.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2217' ],		#self : OmReference [ '2218' ],		#time : DateAndTime [ '2017-12-12T08:01:01.368992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #testSea,			#protocol : #tests,			#sourceCode : 'testSea\r\t| island |\r\tisland := \'foo\' asPParser plus wrapped trim ==> [ :foo | foo ]\r\t\tname: \'production\';\r\t\tyourself.\r\t\r\tparser := island sea.\r\t\r\tself visit: parser.\r\t\r\tself assert: island strategy isKindOf: PP2Cache.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2218' ],		#self : OmReference [ '2219' ],		#time : DateAndTime [ '2017-12-12T08:01:01.369992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #testSeaBoundary,			#protocol : #tests,			#sourceCode : 'testSeaBoundary\r\t| sea |\r\tsea := $a asPParser star trim flatten wrapped sea.\r\t\r\tparser := $b asPParser plus trim wrapped flatten.\r\tsea beforeWater boundaryElements: parser.\r\tsea afterWater boundary: parser.\r\t\r\tself visit: sea.\r\tself assert: sea beforeWater boundaryElements allSatisfy: [:e | e strategy isKindOf: PP2Cache ].\r\tself assert: sea afterWater boundaryElements allSatisfy: [:e | e strategy isKindOf: PP2Cache ].\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2219' ],		#self : OmReference [ '2220' ],		#time : DateAndTime [ '2017-12-12T08:01:01.370992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #testSeaNested,			#protocol : #tests,			#sourceCode : 'testSeaNested\r\t| sea |\r\tsea := $a asPParser sea.\r\t\r\tparser := (sea ==> #second) sea.\r\tsea beforeWater boundary: $b asPParser plus flatten trim.\r\tsea afterWater boundary: $c asPParser plus flatten trim.\r\tself visit: parser.\r\t\r\tself assert: sea beforeWater boundaryElements allSatisfy: [ :e | e strategy isKindOf: PP2Cache ].\r\tself assert: sea afterWater boundaryElements allSatisfy: [ :e | e strategy isKindOf: PP2Cache ].\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2220' ],		#self : OmReference [ '2221' ],		#time : DateAndTime [ '2017-12-12T08:01:01.372992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\t| production |\r\tproduction := \'foo\' asPParser plus wrapped trim ==> [ :foo | foo ]\r\t\tname: \'production\';\r\t\tyourself.\r\t\r\tparser := (production, $a asPParser) star, production wrapped.\r\t\r\tself visit: parser.\r\t\r\tself assert: production strategy isKindOf: PP2Cache.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2221' ],		#self : OmReference [ '2222' ],		#time : DateAndTime [ '2017-12-12T08:01:01.373992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2CommonPrefixVisitorTest,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #visiting,			#sourceCode : 'visit: node\r\tvisitor visit: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2222' ],		#self : OmReference [ '2223' ],		#time : DateAndTime [ '2017-12-12T08:01:01.374992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #'assertChangesContext:',			#protocol : #asserting,			#sourceCode : 'assertChangesContext: node\r\tself assert: (visitor visit: node) isContextChange',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2223' ],		#self : OmReference [ '2224' ],		#time : DateAndTime [ '2017-12-12T08:01:01.375992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #'assertPop:',			#protocol : #asserting,			#sourceCode : 'assertPop: node\r\tself assert: (visitor visit: node) isContextPop',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2224' ],		#self : OmReference [ '2225' ],		#time : DateAndTime [ '2017-12-12T08:01:01.376992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #'assertPush:',			#protocol : #asserting,			#sourceCode : 'assertPush: node\r\tself assert: (visitor visit: node) isContextPush',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2225' ],		#self : OmReference [ '2226' ],		#time : DateAndTime [ '2017-12-12T08:01:01.377992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #'denyChangesContext:',			#protocol : #asserting,			#sourceCode : 'denyChangesContext: node\r\tself deny: (visitor visit: node) isContextChange',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2226' ],		#self : OmReference [ '2227' ],		#time : DateAndTime [ '2017-12-12T08:01:01.378992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #'denyPop:',			#protocol : #asserting,			#sourceCode : 'denyPop: node\r\tself deny: (visitor visit: node) isContextPop',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2227' ],		#self : OmReference [ '2228' ],		#time : DateAndTime [ '2017-12-12T08:01:01.379992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #'denyPush:',			#protocol : #asserting,			#sourceCode : 'denyPush: node\r\tself deny: (visitor visit: node) isContextPush',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2228' ],		#self : OmReference [ '2229' ],		#time : DateAndTime [ '2017-12-12T08:01:01.380992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2ContextChangesVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2229' ],		#self : OmReference [ '2230' ],		#time : DateAndTime [ '2017-12-12T08:01:01.381992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testAnd,			#protocol : #tests,			#sourceCode : 'testAnd\r\tparser := $a asPParser and.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2230' ],		#self : OmReference [ '2231' ],		#time : DateAndTime [ '2017-12-12T08:01:01.382992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testAndPush,			#protocol : #tests,			#sourceCode : 'testAndPush\r\tparser := $a asPParser push and.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2231' ],		#self : OmReference [ '2232' ],		#time : DateAndTime [ '2017-12-12T08:01:01.384992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #tests,			#sourceCode : 'testChoice\r\tparser := $a asPParser / $b asPParser.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2232' ],		#self : OmReference [ '2233' ],		#time : DateAndTime [ '2017-12-12T08:01:01.385992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testChoicePopPop,			#protocol : #tests,			#sourceCode : 'testChoicePopPop\r\tparser := $a asPParser pop / $b asPParser pop.\r\t\r\tself assertChangesContext: parser.\r\tself assertPop: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2233' ],		#self : OmReference [ '2234' ],		#time : DateAndTime [ '2017-12-12T08:01:01.386992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testChoicePushPop,			#protocol : #tests,			#sourceCode : 'testChoicePushPop\r\tparser := $a asPParser push / $b asPParser pop.\r\t\r\tself assertChangesContext: parser.\r\tself denyPush: parser.\r\tself denyPop: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2234' ],		#self : OmReference [ '2235' ],		#time : DateAndTime [ '2017-12-12T08:01:01.387992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testChoicePushPush,			#protocol : #tests,			#sourceCode : 'testChoicePushPush\r\tparser := $a asPParser push / $b asPParser push.\r\t\r\tself assertChangesContext: parser.\r\tself assertPush: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2235' ],		#self : OmReference [ '2236' ],		#time : DateAndTime [ '2017-12-12T08:01:01.388992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testChoiceWithPop,			#protocol : #tests,			#sourceCode : 'testChoiceWithPop\r\tparser := $a asPParser / $b asPParser pop.\r\t\r\tself assertChangesContext: parser.\r\tself denyPop: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2236' ],		#self : OmReference [ '2237' ],		#time : DateAndTime [ '2017-12-12T08:01:01.389992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testDelegate,			#protocol : #tests,			#sourceCode : 'testDelegate\r\tparser := $a asPParser wrapped.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2237' ],		#self : OmReference [ '2238' ],		#time : DateAndTime [ '2017-12-12T08:01:01.390992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testDelegatePop,			#protocol : #tests,			#sourceCode : 'testDelegatePop\r\tparser := $a asPParser pop wrapped.\r\t\r\tself assertPop: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2238' ],		#self : OmReference [ '2239' ],		#time : DateAndTime [ '2017-12-12T08:01:01.391992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testDelegatePush,			#protocol : #tests,			#sourceCode : 'testDelegatePush\r\tparser := $a asPParser push wrapped.\r\t\r\tself assertPush: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2239' ],		#self : OmReference [ '2240' ],		#time : DateAndTime [ '2017-12-12T08:01:01.393992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testEpsilon,			#protocol : #tests,			#sourceCode : 'testEpsilon\r\tparser := #epsilon asPParser.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2240' ],		#self : OmReference [ '2241' ],		#time : DateAndTime [ '2017-12-12T08:01:01.394992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #tests,			#sourceCode : 'testLiteralObject\r\tparser := $a asPParser.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2241' ],		#self : OmReference [ '2242' ],		#time : DateAndTime [ '2017-12-12T08:01:01.395992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testMatch,			#protocol : #tests,			#sourceCode : 'testMatch\r\tparser := $a asPParser match.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2242' ],		#self : OmReference [ '2243' ],		#time : DateAndTime [ '2017-12-12T08:01:01.396992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testOptional,			#protocol : #tests,			#sourceCode : 'testOptional\r\tparser := $a asPParser optional.\r\t\r\tself denyChangesContext: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2243' ],		#self : OmReference [ '2244' ],		#time : DateAndTime [ '2017-12-12T08:01:01.397992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testOptionalPop,			#protocol : #tests,			#sourceCode : 'testOptionalPop\r\tparser := $a asPParser pop optional.\r\t\r\tself assertChangesContext: parser.\r\tself denyPop: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2244' ],		#self : OmReference [ '2245' ],		#time : DateAndTime [ '2017-12-12T08:01:01.398992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testOptionalPush,			#protocol : #tests,			#sourceCode : 'testOptionalPush\r\tparser := $a asPParser push optional.\r\t\r\tself assertChangesContext: parser.\r\tself denyPush: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2245' ],		#self : OmReference [ '2246' ],		#time : DateAndTime [ '2017-12-12T08:01:01.400992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testPop,			#protocol : #tests,			#sourceCode : 'testPop\r\tparser := $a asPParser pop.\r\t\r\tself assertChangesContext: parser.\r\tself assertPop: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2246' ],		#self : OmReference [ '2247' ],		#time : DateAndTime [ '2017-12-12T08:01:01.401992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testPopOfPop,			#protocol : #tests,			#sourceCode : 'testPopOfPop\r\tparser := $a asPParser pop pop.\r\t\r\tself assertChangesContext: parser.\r\tself denyPop: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2247' ],		#self : OmReference [ '2248' ],		#time : DateAndTime [ '2017-12-12T08:01:01.402992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testPush,			#protocol : #tests,			#sourceCode : 'testPush\r\tparser := $a asPParser push.\r\t\r\tself assertChangesContext: parser.\r\tself assertPush: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2248' ],		#self : OmReference [ '2249' ],		#time : DateAndTime [ '2017-12-12T08:01:01.403992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testPushOfPush,			#protocol : #tests,			#sourceCode : 'testPushOfPush\r\tparser := $a asPParser push push.\r\t\r\tself assertChangesContext: parser.\r\tself denyPush: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2249' ],		#self : OmReference [ '2250' ],		#time : DateAndTime [ '2017-12-12T08:01:01.405992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testRepetition,			#protocol : #tests,			#sourceCode : 'testRepetition\r\tparser := $a asPParser star.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2250' ],		#self : OmReference [ '2251' ],		#time : DateAndTime [ '2017-12-12T08:01:01.406992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testRepetitionPop,			#protocol : #tests,			#sourceCode : 'testRepetitionPop\r\tparser := $a asPParser pop star.\r\t\r\tself assertChangesContext: parser.\r\tself denyPush: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2251' ],		#self : OmReference [ '2252' ],		#time : DateAndTime [ '2017-12-12T08:01:01.407992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testRepetitionPush,			#protocol : #tests,			#sourceCode : 'testRepetitionPush\r\tparser := $a asPParser push star.\r\t\r\tself assertChangesContext: parser.\r\tself denyPush: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2252' ],		#self : OmReference [ '2253' ],		#time : DateAndTime [ '2017-12-12T08:01:01.408992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\tparser := $a asPParser, $b asPParser.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2253' ],		#self : OmReference [ '2254' ],		#time : DateAndTime [ '2017-12-12T08:01:01.409992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPop,			#protocol : #tests,			#sourceCode : 'testSequenceWithPop\r\tparser := $a asPParser, ($b asPParser pop).\r\t\r\tself assertChangesContext: parser.\r\tself assertPop: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2254' ],		#self : OmReference [ '2255' ],		#time : DateAndTime [ '2017-12-12T08:01:01.410992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPopPush,			#protocol : #tests,			#sourceCode : 'testSequenceWithPopPush\r\tparser := $a asPParser pop, $b asPParser push.\r\t\r\tself assertChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2255' ],		#self : OmReference [ '2256' ],		#time : DateAndTime [ '2017-12-12T08:01:01.411992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPush,			#protocol : #tests,			#sourceCode : 'testSequenceWithPush\r\tparser := $a asPParser, $b asPParser push.\r\t\r\tself assertChangesContext: parser.\r\tself assertPush: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2256' ],		#self : OmReference [ '2257' ],		#time : DateAndTime [ '2017-12-12T08:01:01.412992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPushPop,			#protocol : #tests,			#sourceCode : 'testSequenceWithPushPop\r\tparser := $a asPParser push, $b asPParser pop.\r\t\r\tself denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2257' ],		#self : OmReference [ '2258' ],		#time : DateAndTime [ '2017-12-12T08:01:01.414992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testWrapping,			#protocol : #tests,			#sourceCode : 'testWrapping\r\tparser := $a asPParser >=> [ :ctx :cc | cc value ].\r\t\r\tself assertChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2258' ],		#self : OmReference [ '2259' ],		#time : DateAndTime [ '2017-12-12T08:01:01.415992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitorTest,				#isMetaSide : false			},			#name : #testWrappingSetProperty,			#protocol : #tests,			#sourceCode : 'testWrappingSetProperty\r\tparser := $a asPParser >=> [ :ctx :cc | cc value ]\r\t\tcontextChanges: PP2CcChange noChange;\r\t\tyourself.\r\t\r\t self denyChangesContext: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2259' ],		#self : OmReference [ '2260' ],		#time : DateAndTime [ '2017-12-12T08:01:01.416992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMementoTest,				#isMetaSide : false			},			#name : #testEquals,			#protocol : #tests,			#sourceCode : 'testEquals\r\t| anotherMemento |\r\tmemento := PP2ContextMemento new.\r\tmemento position: 1.\r\tmemento propertyAt: #foo put: #bar.\r\r\tanotherMemento := PP2ContextMemento new.\r\tanotherMemento position: 1.\r\tanotherMemento propertyAt: #foo put: #bar.\r\t\r\tself assert: memento ~~ anotherMemento.\r\tself assert: memento = anotherMemento.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2260' ],		#self : OmReference [ '2261' ],		#time : DateAndTime [ '2017-12-12T08:01:01.418992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMementoTest,				#isMetaSide : false			},			#name : #testEqualsWithStack,			#protocol : #tests,			#sourceCode : 'testEqualsWithStack\r\t| anotherMemento |\r\tmemento := PP2ContextMemento new.\r\tmemento position: 1.\r\tmemento propertyAt: #foo put: Stack new.\r\r\tanotherMemento := PP2ContextMemento new.\r\tanotherMemento position: 1.\r\tanotherMemento propertyAt: #foo put: Stack new.\r\t\r\tself assert: memento ~~ anotherMemento.\r\tself assert: memento = anotherMemento.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2261' ],		#self : OmReference [ '2262' ],		#time : DateAndTime [ '2017-12-12T08:01:01.418992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMementoTest,				#isMetaSide : false			},			#name : #testHash,			#protocol : #tests,			#sourceCode : 'testHash\r\t| anotherMemento |\r\tmemento := PP2ContextMemento new.\r\tmemento position: 1.\r\tmemento propertyAt: #foo put: #bar.\r\r\tanotherMemento := PP2ContextMemento new.\r\tanotherMemento position: 1.\r\tanotherMemento propertyAt: #foo put: #bar.\r\t\r\tself assert: memento hash = anotherMemento hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2262' ],		#self : OmReference [ '2263' ],		#time : DateAndTime [ '2017-12-12T08:01:01.419992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMementoTest,				#isMetaSide : false			},			#name : #testMinus,			#protocol : #tests,			#sourceCode : 'testMinus\r\t| anotherMemento |\r\tmemento := PP2ContextMemento new.\r\tmemento position: 1.\r\t\r\r\tanotherMemento := memento - 1.\r\t\r\tself assert: memento ~~ anotherMemento.\r\tself assert: anotherMemento position equals: 0.\r\tself assert: memento position equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2263' ],		#self : OmReference [ '2264' ],		#time : DateAndTime [ '2017-12-12T08:01:01.420992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMementoTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #tests,			#sourceCode : 'testPlus\r\t| anotherMemento |\r\tmemento := PP2ContextMemento new.\r\tmemento position: 1.\r\t\r\r\tanotherMemento := memento + 1.\r\t\r\tself assert: memento ~~ anotherMemento.\r\tself assert: anotherMemento position equals: 2.\r\tself assert: memento position equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2264' ],		#self : OmReference [ '2265' ],		#time : DateAndTime [ '2017-12-12T08:01:01.421992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #'assertCFMemoization:',			#protocol : #'as yet unclassified',			#sourceCode : 'assertCFMemoization: node\r\r\tvisitor visit: node.\r\t\r\tself assert: (node memoizationStrategy isKindOf: PP2CFMemoization).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2265' ],		#self : OmReference [ '2266' ],		#time : DateAndTime [ '2017-12-12T08:01:01.422992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #'assertMemoized:',			#protocol : #'as yet unclassified',			#sourceCode : 'assertMemoized: node\r\r\tvisitor visit: node.\r\t\r\tself assert: (node isMemoized).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2266' ],		#self : OmReference [ '2267' ],		#time : DateAndTime [ '2017-12-12T08:01:01.424992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #'assertPopMemoization:',			#protocol : #'as yet unclassified',			#sourceCode : 'assertPopMemoization: node\r\r\tvisitor visit: node.\r\t\r\tself assert: (node memoizationStrategy isKindOf: PP2PopMemoization).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2267' ],		#self : OmReference [ '2268' ],		#time : DateAndTime [ '2017-12-12T08:01:01.425992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #'assertPushMemoization:',			#protocol : #'as yet unclassified',			#sourceCode : 'assertPushMemoization: node\r\r\tvisitor visit: node.\r\t\r\tself assert: (node memoizationStrategy isKindOf: PP2PushMemoization).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2268' ],		#self : OmReference [ '2269' ],		#time : DateAndTime [ '2017-12-12T08:01:01.426992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #'denyCFMemoization:',			#protocol : #'as yet unclassified',			#sourceCode : 'denyCFMemoization: node\r\r\tvisitor visit: node.\r\t\r\tself deny: (node memoizationStrategy isKindOf: PP2CFMemoization).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2269' ],		#self : OmReference [ '2270' ],		#time : DateAndTime [ '2017-12-12T08:01:01.427992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\tvisitor := PP2ContextMemoizationVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2270' ],		#self : OmReference [ '2271' ],		#time : DateAndTime [ '2017-12-12T08:01:01.428992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testAnd,			#protocol : #'as yet unclassified',			#sourceCode : 'testAnd\r\tparser := $a asPParser and.\r\t\r\tself assertCFMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2271' ],		#self : OmReference [ '2272' ],		#time : DateAndTime [ '2017-12-12T08:01:01.429992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testAndCS,			#protocol : #'as yet unclassified',			#sourceCode : 'testAndCS\r\tparser := $a asPParser push and.\r\t\r\tself denyCFMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2272' ],		#self : OmReference [ '2273' ],		#time : DateAndTime [ '2017-12-12T08:01:01.430992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testAndPop,			#protocol : #'as yet unclassified',			#sourceCode : 'testAndPop\r\tparser := $a asPParser pop and.\r\t\r\tself assertPopMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2273' ],		#self : OmReference [ '2274' ],		#time : DateAndTime [ '2017-12-12T08:01:01.432992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testAndPush,			#protocol : #'as yet unclassified',			#sourceCode : 'testAndPush\r\tparser := $a asPParser push and.\r\t\r\tself assertPushMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2274' ],		#self : OmReference [ '2275' ],		#time : DateAndTime [ '2017-12-12T08:01:01.433992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testNonEpsilon,			#protocol : #'as yet unclassified',			#sourceCode : 'testNonEpsilon\r\tparser := $a asPParser nonEpsilon.\r\t\r\tself assertCFMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2275' ],		#self : OmReference [ '2276' ],		#time : DateAndTime [ '2017-12-12T08:01:01.434992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequence\r\tparser := $a asPParser, $b asPParser match, $c asPParser.\r\t\r\tself assertCFMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2276' ],		#self : OmReference [ '2277' ],		#time : DateAndTime [ '2017-12-12T08:01:01.435992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testSequencePop,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequencePop\r\tparser := $a asPParser, $b asPParser pop, $c asPParser.\r\t\r\tself assertPopMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2277' ],		#self : OmReference [ '2278' ],		#time : DateAndTime [ '2017-12-12T08:01:01.437992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testSequencePush,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequencePush\r\tparser := $a asPParser, $b asPParser push, $c asPParser.\r\t\r\tself assertPushMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2278' ],		#self : OmReference [ '2279' ],		#time : DateAndTime [ '2017-12-12T08:01:01.438992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextMemoizationVisitorTest,				#isMetaSide : false			},			#name : #testSequencePushPop,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequencePushPop\r\tparser := $a asPParser push, #letter asPParser match, $a asPParser pop.\r\t\r\tself denyCFMemoization: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2279' ],		#self : OmReference [ '2280' ],		#time : DateAndTime [ '2017-12-12T08:01:01.439992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #'assertIsContextSensitive:',			#protocol : #asserting,			#sourceCode : 'assertIsContextSensitive: node\r\tself assert: (visitor visit: node) description: \'should be context sensitive\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2280' ],		#self : OmReference [ '2281' ],		#time : DateAndTime [ '2017-12-12T08:01:01.440992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #'denyIsContextSensitive:',			#protocol : #asserting,			#sourceCode : 'denyIsContextSensitive: node\r\tself deny: (visitor visit: node) description: \'should not be context sensitive\'',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2281' ],		#self : OmReference [ '2282' ],		#time : DateAndTime [ '2017-12-12T08:01:01.441992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2ContextSensitivityVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2282' ],		#self : OmReference [ '2283' ],		#time : DateAndTime [ '2017-12-12T08:01:01.442992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testAndMatch,			#protocol : #tests,			#sourceCode : 'testAndMatch\r\tparser := $a asPParser match and.\r\t\r\tself assertIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2283' ],		#self : OmReference [ '2284' ],		#time : DateAndTime [ '2017-12-12T08:01:01.443992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #tests,			#sourceCode : 'testLiteralObject\r\tparser := $a asPParser.\r\t\r\tself denyIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2284' ],		#self : OmReference [ '2285' ],		#time : DateAndTime [ '2017-12-12T08:01:01.444992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testMatch,			#protocol : #tests,			#sourceCode : 'testMatch\r\tparser := $a asPParser match.\r\t\r\tself assertIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2285' ],		#self : OmReference [ '2286' ],		#time : DateAndTime [ '2017-12-12T08:01:01.445992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSea,			#protocol : #tests,			#sourceCode : 'testSea\r\tparser := $a asPParser sea.\r\t\r\tself denyIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2286' ],		#self : OmReference [ '2287' ],		#time : DateAndTime [ '2017-12-12T08:01:01.446992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSeaWithCSIsland,			#protocol : #tests,			#sourceCode : 'testSeaWithCSIsland\r\tparser := $a asPParser match sea.\r\t\r\tself assertIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2287' ],		#self : OmReference [ '2288' ],		#time : DateAndTime [ '2017-12-12T08:01:01.448992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\tparser := $a asPParser, $b asPParser.\r\t\r\tself denyIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2288' ],		#self : OmReference [ '2289' ],		#time : DateAndTime [ '2017-12-12T08:01:01.449992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithMatch,			#protocol : #tests,			#sourceCode : 'testSequenceWithMatch\r\tparser := $a asPParser, $b asPParser match.\r\t\r\tself assertIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2289' ],		#self : OmReference [ '2290' ],		#time : DateAndTime [ '2017-12-12T08:01:01.450992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPush,			#protocol : #tests,			#sourceCode : 'testSequenceWithPush\r\tparser := #letter asPParser, #letter asPParser push.\r\t\r\tself denyIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2290' ],		#self : OmReference [ '2291' ],		#time : DateAndTime [ '2017-12-12T08:01:01.451992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPushMatch,			#protocol : #tests,			#sourceCode : 'testSequenceWithPushMatch\r\tparser := (#letter asPParser push), (#letter asPParser match).\r\t\r\tself denyIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2291' ],		#self : OmReference [ '2292' ],		#time : DateAndTime [ '2017-12-12T08:01:01.452992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextSensitivityVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithPushMatchPop,			#protocol : #tests,			#sourceCode : 'testSequenceWithPushMatchPop\r\tparser := (#letter asPParser push), (#letter asPParser match), (#letter asPParser pop).\r\t\r\tself denyIsContextSensitive: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2292' ],		#self : OmReference [ '2293' ],		#time : DateAndTime [ '2017-12-12T08:01:01.453992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextTest,				#isMetaSide : false			},			#name : #'contextOn:',			#protocol : #requirements,			#sourceCode : 'contextOn: aString\r\t^ PP2Context on: aString asPetit2Stream',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2293' ],		#self : OmReference [ '2294' ],		#time : DateAndTime [ '2017-12-12T08:01:01.455992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextTest,				#isMetaSide : false			},			#name : #testAsPetit2Context,			#protocol : #tests,			#sourceCode : 'testAsPetit2Context\r\t| context |\r\tcontext := (PP2MinimalStream on: \'foo\') asPetit2Stream asPetit2Context.\r\t\r\tself assert: (context isKindOf: PP2Context).\r\tself assert: context isPetit2Success.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2294' ],		#self : OmReference [ '2295' ],		#time : DateAndTime [ '2017-12-12T08:01:01.456992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextTest,				#isMetaSide : false			},			#name : #testAsPositionableStream,			#protocol : #tests,			#sourceCode : 'testAsPositionableStream\r\t| context |\r\tcontext := (PP2MinimalStream on: \'foo\') asPetit2Stream asPetit2Context.\r\tcontext position: 2.\r\r\tself should: [ context asPositionableStream ] raise: Exception',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2295' ],		#self : OmReference [ '2296' ],		#time : DateAndTime [ '2017-12-12T08:01:01.457992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextTest,				#isMetaSide : false			},			#name : #testCopy,			#protocol : #tests,			#sourceCode : 'testCopy\r\t| newContext context |\r\tcontext := PP2Context new\r \t\tposition: #postion;\r\t\tstream: #stream;\r\t\tparser: #parser;\r\t\tstartMemento: #startMemento;\r\t\tyourself.\r\t\t\r\tnewContext := context copy.\r\t\r\tself deny: context == newContext.\r\tself assert: context position = newContext position.\r\tself assert: context stream = newContext stream.\t\r\tself assert: context parser = newContext parser.\r\tself assert: context startMemento = newContext startMemento.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2296' ],		#self : OmReference [ '2297' ],		#time : DateAndTime [ '2017-12-12T08:01:01.458992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultIntegrationTest,				#isMetaSide : false			},			#name : #testArithmetic,			#protocol : #tests,			#sourceCode : 'testArithmetic\r\t| parser result |\r\tparser := PP2ExpressionParser new.\r\tresult := parser debug: \'1 + 2\'.\r\tself assert: result debugResult children size equals: 1.\r\tself assert: result debugResult children first result equals: #(1 $+ 2)',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2297' ],		#self : OmReference [ '2298' ],		#time : DateAndTime [ '2017-12-12T08:01:01.460992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultIntegrationTest,				#isMetaSide : false			},			#name : #testArithmeticCache,			#protocol : #tests,			#sourceCode : 'testArithmeticCache\r\t| parser result number links |\r\tparser := PP2ExpressionParser new.\r\tnumber := (parser productionAt: #number).\r\tnumber strategy: number strategy cache.\r\t\r\tresult := parser debug: \'1\'.\r\tlinks := result debugResult allResults select: [ :e | \r\t\te children isEmpty not and: [ e children first isKindOf: PP2DebugResultLink ]\r\t] thenCollect: [ :e | e children first ].\r\r\tself assert: links size equals: 2.\r\tself assert: links allSatisfy: [ :l | l reference parser name = #number ].',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2298' ],		#self : OmReference [ '2299' ],		#time : DateAndTime [ '2017-12-12T08:01:01.461992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultIntegrationTest,				#isMetaSide : false			},			#name : #testArithmeticFailure,			#protocol : #tests,			#sourceCode : 'testArithmeticFailure\r\t| parser result |\r\tparser := PP2ExpressionParser new.\r\tresult := parser debug: \'1 / 2\'.\r\tself assert: result debugResult children size equals: 1.\r\tself assert: result debugResult children first result isPetit2Failure',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2299' ],		#self : OmReference [ '2300' ],		#time : DateAndTime [ '2017-12-12T08:01:01.462992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultIntegrationTest,				#isMetaSide : false			},			#name : #testGtCacheReport,			#protocol : #tests,			#sourceCode : 'testGtCacheReport\r\t| parser result wrapper |\r\tparser := PP2ExpressionParser new.\r\tresult := parser debug: \'1 + 2\'.\r\twrapper := GLMWrapper new.\r\tself shouldnt: [ wrapper show: [:a | result gtCacheReport: a ] ] raise: Exception.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2300' ],		#self : OmReference [ '2301' ],		#time : DateAndTime [ '2017-12-12T08:01:01.463992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultIntegrationTest,				#isMetaSide : false			},			#name : #testNumberParser,			#protocol : #tests,			#sourceCode : 'testNumberParser\r\t| parser result |\r\tparser := PP2ExpressionParser new productionAt: #number.\r\tresult := parser debug: \'1\'.\r\tself assert: result debugResult children size equals: 1.\r\tself assert: result debugResult children first result equals: 1',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2301' ],		#self : OmReference [ '2302' ],		#time : DateAndTime [ '2017-12-12T08:01:01.465992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultIntegrationTest,				#isMetaSide : false			},			#name : #testProfilingContext,			#protocol : #tests,			#sourceCode : 'testProfilingContext\r\t| parser result |\r\tparser := PP2ExpressionParser new productionAt: #number.\r\tresult := parser debug: \'1\'.\r\tself assert: result isKindOf: PP2RecordingContext.',			#stamp : 'JanKurs 11/22/2016 07:25',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2302' ],		#self : OmReference [ '2303' ],		#time : DateAndTime [ '2017-12-12T08:01:01.466992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultTest,				#isMetaSide : false			},			#name : #testContents,			#protocol : #tests,			#sourceCode : 'testContents\r\t| result |\r\tresult := PP2DebugResult new.\r\tresult context: \'a\' asPetit2Context.\r\t\r\tself assert: result contents equals: \'a\'',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2303' ],		#self : OmReference [ '2304' ],		#time : DateAndTime [ '2017-12-12T08:01:01.467992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebugResultTest,				#isMetaSide : false			},			#name : #testStartStopInterval,			#protocol : #tests,			#sourceCode : 'testStartStopInterval\r\t| result |\r\tresult := PP2DebugResult new.\r\t\r\tself assert: result startStopInterval isNotNil.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2304' ],		#self : OmReference [ '2305' ],		#time : DateAndTime [ '2017-12-12T08:01:01.468992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\tnode := $a asPParser.\r\tstrategy := node strategy.\r',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2305' ],		#self : OmReference [ '2306' ],		#time : DateAndTime [ '2017-12-12T08:01:01.469992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #testCache,			#protocol : #'as yet unclassified',			#sourceCode : 'testCache\r\t| debugStrategy |\r\tdebugStrategy := strategy debug.\r\t\r\tself assert: debugStrategy cache == debugStrategy.\r\tself assert: debugStrategy strategy isKindOf: PP2Cache\r\t',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2306' ],		#self : OmReference [ '2307' ],		#time : DateAndTime [ '2017-12-12T08:01:01.470992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #testDebug,			#protocol : #'as yet unclassified',			#sourceCode : 'testDebug\r\t| debugStrategy |\r\r\tdebugStrategy := strategy debug.\r\t\r\tself assert: debugStrategy debug == debugStrategy.\r\t',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2307' ],		#self : OmReference [ '2308' ],		#time : DateAndTime [ '2017-12-12T08:01:01.471992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #testParsingGuard,			#protocol : #'as yet unclassified',			#sourceCode : 'testParsingGuard\r\t| classification debugStrategy |\r\tdebugStrategy := strategy debug.\r\tclassification := Array new: 255 withAll: false.\r\t\r\tself assert: (debugStrategy parsingGuard: classification) == debugStrategy.\r\tself assert: debugStrategy strategy isKindOf: PP2ParsingGuard.\t\r\tself assert: debugStrategy strategy retval isPetit2Failure.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2308' ],		#self : OmReference [ '2309' ],		#time : DateAndTime [ '2017-12-12T08:01:01.472992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #testParsingGuardOptional,			#protocol : #'as yet unclassified',			#sourceCode : 'testParsingGuardOptional\r\t| classification debugStrategy optional |\r\toptional := $a asPParser optional.\r\t\r\tdebugStrategy := optional strategy debug.\r\tclassification := Array new: 255 withAll: false.\r\t\r\tself assert: (debugStrategy parsingGuard: classification) == debugStrategy.\r\tself assert: debugStrategy strategy isKindOf: PP2ParsingGuard.\t\r\tself assert: debugStrategy strategy retval isNil.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2309' ],		#self : OmReference [ '2310' ],		#time : DateAndTime [ '2017-12-12T08:01:01.473992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #testRecognizer,			#protocol : #'as yet unclassified',			#sourceCode : 'testRecognizer\r\t| debugStrategy |\r\tnode := #letter asPParser.\r\tstrategy := node strategy.\r\tdebugStrategy := strategy debug.\r\r\tself assert: debugStrategy strategy isKindOf: PP2PredicateObject.\r\t\r\tself assert: debugStrategy recognizer == debugStrategy.\r\tself assert: debugStrategy strategy isKindOf: PP2PredicateObjectRecognizer.\r\t',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2310' ],		#self : OmReference [ '2311' ],		#time : DateAndTime [ '2017-12-12T08:01:01.475992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DebuggingStrategyTest,				#isMetaSide : false			},			#name : #testReparsable,			#protocol : #'as yet unclassified',			#sourceCode : 'testReparsable\r\t| debugStrategy |\r\tdebugStrategy := strategy debug.\r\t\r\tself assert: debugStrategy reparsable == debugStrategy.\r\tself assert: debugStrategy strategy isKindOf: PP2Reparsable\r\t',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2311' ],		#self : OmReference [ '2312' ],		#time : DateAndTime [ '2017-12-12T08:01:01.476992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tcontext := PP2Context on: \'foobar\'.\r\tbuffer := IdentityDictionary new.\r\tchange := PP2DeleteCharacter new.\r\tmemento := PP2Memento new.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2312' ],		#self : OmReference [ '2313' ],		#time : DateAndTime [ '2017-12-12T08:01:01.478992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testChangeAfterRange,			#protocol : #tests,			#sourceCode : 'testChangeAfterRange\r\tchange position: 2.\r\r\tself assert: (change changeAfterRange: 0).\r\r\tself deny: (change changeAfterRange: 1).\r\tself deny: (change changeAfterRange: 2).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2313' ],		#self : OmReference [ '2314' ],		#time : DateAndTime [ '2017-12-12T08:01:01.479992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testChangeBeforeRange,			#protocol : #tests,			#sourceCode : 'testChangeBeforeRange\r\tchange position: 2.\r\r\tself assert: (change changeBeforeRange: 4).\r\tself assert: (change changeBeforeRange: 3).\r\r\tself deny: (change changeBeforeRange: 2).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2314' ],		#self : OmReference [ '2315' ],		#time : DateAndTime [ '2017-12-12T08:01:01.480992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testChangeBetweenAnd,			#protocol : #tests,			#sourceCode : 'testChangeBetweenAnd\r\tchange position: 2.\r\r\tself assert: (change changeBetween: 2 and: 2).\r\tself assert: (change changeBetween: 2 and: 3).\r\tself assert: (change changeBetween: 1 and: 2).\r\tself assert: (change changeBetween: 1 and: 1).\r\r\tself deny: (change changeBetween: 3 and: 3).\r\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2315' ],		#self : OmReference [ '2316' ],		#time : DateAndTime [ '2017-12-12T08:01:01.481992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferChangeAfter,			#protocol : #tests,			#sourceCode : 'testUpdateBufferChangeAfter\r\tkey := 0. "+1"\r\tmemento furthestPosition: 1.\r\tchange position: 3.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) equals: memento.\r\tself assert: memento contextMemento position equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2316' ],		#self : OmReference [ '2317' ],		#time : DateAndTime [ '2017-12-12T08:01:01.482992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferChangeBefore,			#protocol : #tests,			#sourceCode : 'testUpdateBufferChangeBefore\r\tkey := 1. "+1"\r\tmemento furthestPosition: 3.\r\tchange position: 1.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key - 1) equals: memento.\r\tself assert: memento contextMemento position equals: 2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2317' ],		#self : OmReference [ '2318' ],		#time : DateAndTime [ '2017-12-12T08:01:01.483992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferInRange,			#protocol : #tests,			#sourceCode : 'testUpdateBufferInRange\r\tkey := 0. "+1"\r\tmemento furthestPosition: 3.\r\tchange position: 2.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) isKindOf: PP2MementoPromise.\r\tself assert: (newBuffer at: key) buffer equals: newBuffer.\r\tself assert: (newBuffer at: key) contextMemento position equals: 2.\r\tself assert: (newBuffer at: key) furthestPosition equals: 2.\t"not 100% it should be 2 or 3"\r\tself assert: (newBuffer at: key) position equals: key.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2318' ],		#self : OmReference [ '2319' ],		#time : DateAndTime [ '2017-12-12T08:01:01.484992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferInRangeHighBoundary,			#protocol : #tests,			#sourceCode : 'testUpdateBufferInRangeHighBoundary\r\tkey := 0. "+1"\r\tmemento furthestPosition: 3.\r\tchange position: 4.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) isKindOf: PP2MementoPromise.\r\tself assert: (newBuffer at: key) buffer equals: newBuffer.\r\tself assert: (newBuffer at: key) contextMemento position equals: 2.\r\tself assert: (newBuffer at: key) position equals: key.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2319' ],		#self : OmReference [ '2320' ],		#time : DateAndTime [ '2017-12-12T08:01:01.486992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferInRangeLowBoundary,			#protocol : #tests,			#sourceCode : 'testUpdateBufferInRangeLowBoundary\r\tkey := 0. "+1"\r\tmemento furthestPosition: 2.\r\tchange position: 1.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) isKindOf: PP2MementoPromise.\r\tself assert: (newBuffer at: key) buffer equals: newBuffer.\r\tself assert: (newBuffer at: key) contextMemento position equals: 1.\r\tself assert: (newBuffer at: key) position equals: key.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2320' ],		#self : OmReference [ '2321' ],		#time : DateAndTime [ '2017-12-12T08:01:01.487992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokens,			#protocol : #tests,			#sourceCode : 'testUpdateTokens\r\t| token anotherToken returnValue originalInput |\r\r\toriginalInput := \'_foobar\'.\r\r\ttoken := PP2Token on: originalInput start: 2 stop: 4.\r\tanotherToken := PP2Token on: originalInput start: 5 stop: 7.\r\t\r\treturnValue := OrderedCollection with: token with: #foobar with: anotherToken.\r\r\tchange input: \'foobar\'.\r\tchange position: 1.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: token start equals: 1.\r\tself assert: token stop equals: 3.\r\tself assert: token value = \'foo\'.\r\t\r\tself assert: anotherToken start equals: 4.\r\tself assert: anotherToken stop equals: 6.\r\tself assert: anotherToken value equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2321' ],		#self : OmReference [ '2322' ],		#time : DateAndTime [ '2017-12-12T08:01:01.488992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokensAfterChange,			#protocol : #tests,			#sourceCode : 'testUpdateTokensAfterChange\r\t| token anotherToken returnValue originalInput |\r\r\toriginalInput := \'foo___bar\'.\r\r\ttoken := PP2Token on: originalInput start: 1 stop: 3.\r\tanotherToken := PP2Token on: originalInput start: 7 stop: 9.\r\t\r\treturnValue := OrderedCollection with: token with: #foobar with: anotherToken.\r\r\tchange input: \'foo__bar\'.\r\tchange position: 5.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: token start equals: 1.\r\tself assert: token stop equals: 3.\r\tself assert: token value = \'foo\'.\r\t\r\tself assert: anotherToken start equals: 6.\r\tself assert: anotherToken stop equals: 8.\r\tself assert: anotherToken value equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2322' ],		#self : OmReference [ '2323' ],		#time : DateAndTime [ '2017-12-12T08:01:01.489992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokensOnce,			#protocol : #tests,			#sourceCode : 'testUpdateTokensOnce\r\t| token returnValue originalInput |\r\r\toriginalInput := \'__foobar\'.\r\r\ttoken := PP2Token on: originalInput start: 3 stop: 5.\r\t\r\treturnValue := OrderedCollection with: token with: #foobar with: token.\r\r\tchange input: \'_foobar\'.\r\tchange position: 1.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: token start equals: 2.\r\tself assert: token stop equals: 4.\r\tself assert: token value = \'foo\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2323' ],		#self : OmReference [ '2324' ],		#time : DateAndTime [ '2017-12-12T08:01:01.491992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2DeleteCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokensSingleToken,			#protocol : #tests,			#sourceCode : 'testUpdateTokensSingleToken\r\t| returnValue originalInput |\r\r\toriginalInput := \'__foobar\'.\r\treturnValue := PP2Token on: originalInput start: 3 stop: 5.\r\t\r\t\r\tchange input: \'_foobar\'.\r\tchange position: 1.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: returnValue start equals: 2.\r\tself assert: returnValue stop equals: 4.\r\tself assert: returnValue value = \'foo\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2324' ],		#self : OmReference [ '2325' ],		#time : DateAndTime [ '2017-12-12T08:01:01.492992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #'assert:value:',			#protocol : #support,			#sourceCode : 'assert: aPP2CharSetPredicate value: anInteger\r\tself assert: (aPP2CharSetPredicate value: anInteger) ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2325' ],		#self : OmReference [ '2326' ],		#time : DateAndTime [ '2017-12-12T08:01:01.493992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #'reject:value:',			#protocol : #support,			#sourceCode : 'reject: aPP2CharSetPredicate value: anInteger\r\tself assert: (aPP2CharSetPredicate value: anInteger) not',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2326' ],		#self : OmReference [ '2327' ],		#time : DateAndTime [ '2017-12-12T08:01:01.494992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testEmptyLiteralSequence,			#protocol : #tests,			#sourceCode : 'testEmptyLiteralSequence\r\tfirstCharSet := \'\' asPParser firstCharSet.\r\r\t1 to: 255 do: [ :index |\r\t\tself assert: firstCharSet value: (Character codePoint: index).\r\t].\r\r\tself assert: firstCharSet value: (Character codePoint: 0).\r\tself assert: firstCharSet value: (Character codePoint: 1234).\r\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2327' ],		#self : OmReference [ '2328' ],		#time : DateAndTime [ '2017-12-12T08:01:01.495992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testEpsilon,			#protocol : #tests,			#sourceCode : 'testEpsilon\r\tfirstCharSet := nil asPParser firstCharSet.\r\r\t1 to: 255 do: [ :index |\r\t\tself assert: firstCharSet value: (Character codePoint: index).\r\t].\r\r\tself assert: firstCharSet value: (Character codePoint: 0).\r\tself assert: firstCharSet value: (Character codePoint: 1234).\r\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2328' ],		#self : OmReference [ '2329' ],		#time : DateAndTime [ '2017-12-12T08:01:01.496992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #tests,			#sourceCode : 'testLiteralObject\r\tfirstCharSet := $b asPParser firstCharSet.\r\tself assert: firstCharSet value: $b.\r\r\tself reject: firstCharSet value: $a.\r\tself reject: firstCharSet value: $c.\r\t\r\tself reject: firstCharSet value: (Character codePoint: 1024).\r\t\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2329' ],		#self : OmReference [ '2330' ],		#time : DateAndTime [ '2017-12-12T08:01:01.497992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testLiteralSequence,			#protocol : #tests,			#sourceCode : 'testLiteralSequence\r\tfirstCharSet := \'foobar\' asPParser firstCharSet.\r\tself assert: firstCharSet value: $f.\r\r\tself reject: firstCharSet value: $e.\r\tself reject: firstCharSet value: $o.\r\tself reject: firstCharSet value: $b.\r\t\r\tself reject: firstCharSet value: 1024.\r\t\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2330' ],		#self : OmReference [ '2331' ],		#time : DateAndTime [ '2017-12-12T08:01:01.498992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testNot,			#protocol : #tests,			#sourceCode : 'testNot\r\tfirstCharSet := #digit asPParser not firstCharSet.\r\tself should: [ firstCharSet value: $1 ] raise: Error\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2331' ],		#self : OmReference [ '2332' ],		#time : DateAndTime [ '2017-12-12T08:01:01.499992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testPluggable,			#protocol : #tests,			#sourceCode : 'testPluggable\r\tfirstCharSet := ([ :c | c next ] asPParser) firstCharSet.\r\tself assert: firstCharSet isUnknown.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2332' ],		#self : OmReference [ '2333' ],		#time : DateAndTime [ '2017-12-12T08:01:01.501992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testPredicateObject,			#protocol : #tests,			#sourceCode : 'testPredicateObject\r\tfirstCharSet := #digit asPParser firstCharSet.\r\r\tself assert: firstCharSet value: $0.\r\tself assert: firstCharSet value: $1.\r\tself assert: firstCharSet value: $2.\r\tself assert: firstCharSet value: $3.\r\tself assert: firstCharSet value: $4.\r\tself assert: firstCharSet value: $5.\r\tself assert: firstCharSet value: $6.\r\tself assert: firstCharSet value: $7.\r\tself assert: firstCharSet value: $8.\r\tself assert: firstCharSet value: $9.\r\r\tself reject: firstCharSet value: $/.\r\tself reject: firstCharSet value: $:.\r\t\r\tself reject: firstCharSet value: (Character codePoint: 1024).\r\tself reject: firstCharSet value: (Character codePoint: 0).\r\t\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2333' ],		#self : OmReference [ '2334' ],		#time : DateAndTime [ '2017-12-12T08:01:01.502992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testStartOfLine,			#protocol : #tests,			#sourceCode : 'testStartOfLine\r\tfirstCharSet := #startOfLine asPParser firstCharSet.\r\r\tself should: [ firstCharSet value: $1 ] raise: Error\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2334' ],		#self : OmReference [ '2335' ],		#time : DateAndTime [ '2017-12-12T08:01:01.503992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testWrapping,			#protocol : #tests,			#sourceCode : 'testWrapping\r\tfirstCharSet := ($a asPParser >=> [ :c :cc | cc value ]) firstCharSet.\r\r\tself assert: firstCharSet isUnknown.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2335' ],		#self : OmReference [ '2336' ],		#time : DateAndTime [ '2017-12-12T08:01:01.504992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstCharSetTest,				#isMetaSide : false			},			#name : #testWrappingNonFunctional,			#protocol : #tests,			#sourceCode : 'testWrappingNonFunctional\r\tfirstCharSet := ($b asPParser >==> [ :c :cc | cc value ]) firstCharSet.\r\r\tself assert: firstCharSet value: $b.\r\r\tself reject: firstCharSet value: $a.\r\tself reject: firstCharSet value: $c.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2336' ],		#self : OmReference [ '2337' ],		#time : DateAndTime [ '2017-12-12T08:01:01.505992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstProductionSetCacheTest,				#isMetaSide : false			},			#name : #testSanity,			#protocol : #tests,			#sourceCode : 'testSanity\r\t| parser |\r\tparser := PP2ExpressionGrammar new.\r\tPP2FirstProductionSetCache new doPass: parser.\r\t\r\tparser allNodesDo: [ :child | \r\t\tself assert: (child hasProperty: #firstProductionSet).\r\t\tself assert: (child firstProductionSet allSatisfy: [ :e | e isProduction  ])\r\t]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2337' ],		#self : OmReference [ '2338' ],		#time : DateAndTime [ '2017-12-12T08:01:01.507992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetCacheTest,				#isMetaSide : false			},			#name : #testSanity,			#protocol : #tests,			#sourceCode : 'testSanity\r\t| parser |\r\tparser := ((($f asPParser, \'oo\' asPParser) wrapped not ==> [ :e | e ]) star / \r\t\t\t\t   (nil asPParser, \'\' asPParser)) end.\r\tPP2FirstSetCache new doPass: parser.\r\t\r\tself assert: (parser allNodes allSatisfy: [ :child | child hasProperty: #firstSet ])',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2338' ],		#self : OmReference [ '2339' ],		#time : DateAndTime [ '2017-12-12T08:01:01.508992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'assert:anySatisfy:',			#protocol : #converting,			#sourceCode : 'assert: aSet anySatisfy: anObject\r\tself assert: (aSet anySatisfy: anObject)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2339' ],		#self : OmReference [ '2340' ],		#time : DateAndTime [ '2017-12-12T08:01:01.509992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'assert:includes:',			#protocol : #converting,			#sourceCode : 'assert: aSet includes: anObject\r\tself assert: (aSet includes: anObject)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2340' ],		#self : OmReference [ '2341' ],		#time : DateAndTime [ '2017-12-12T08:01:01.510992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'firstSet:',			#protocol : #accessing,			#sourceCode : 'firstSet: aPP2Node\r\t^ PP2FirstSetVisitor firstSet visit: aPP2Node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2341' ],		#self : OmReference [ '2342' ],		#time : DateAndTime [ '2017-12-12T08:01:01.510992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'firstSetWithProduction:',			#protocol : #accessing,			#sourceCode : 'firstSetWithProduction: aPP2Node\r\t^ PP2FirstSetVisitor productionSet visit: aPP2Node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2342' ],		#self : OmReference [ '2343' ],		#time : DateAndTime [ '2017-12-12T08:01:01.512992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'firstSetWithSeasOrTerminals:',			#protocol : #'tests - seas or terminals',			#sourceCode : 'firstSetWithSeasOrTerminals: node\r\t^ PP2FirstSetVisitor seasOrTerminalsSet visit: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2343' ],		#self : OmReference [ '2344' ],		#time : DateAndTime [ '2017-12-12T08:01:01.513992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'firstSetWithTokens:',			#protocol : #accessing,			#sourceCode : 'firstSetWithTokens: aPP2Node\r\t^ PP2FirstSetVisitor tokenSet visit: aPP2Node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2344' ],		#self : OmReference [ '2345' ],		#time : DateAndTime [ '2017-12-12T08:01:01.514992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'firstSetWithoutDuplicates:',			#protocol : #accessing,			#sourceCode : 'firstSetWithoutDuplicates: aPP2Node\r\t^ self withoutDuplicates: (PP2FirstSetVisitor firstSet visit: aPP2Node)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2345' ],		#self : OmReference [ '2346' ],		#time : DateAndTime [ '2017-12-12T08:01:01.515992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testAdaptable,			#protocol : #tests,			#sourceCode : 'testAdaptable\r\tparser := PP2AdaptableNode new.\r\tparser changeChild: $a asPParser.\r\tfirstSet := self firstSet: parser.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: PP2EpsilonNode instance.\r\t\r\t1 to: 255 do: [ :index | \r\t\tself assert: firstSet anySatisfy: [ :e | \r\t\t\t(e parse: (Character codePoint: index) asString) isPetit2Success \r\t\t]\r\t]\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2346' ],		#self : OmReference [ '2347' ],		#time : DateAndTime [ '2017-12-12T08:01:01.517992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testAnd,			#protocol : #tests,			#sourceCode : 'testAnd\r\t| sequence |\r\tparser := #letter asPParser.\r\tsequence := parser and, $b asPParser.\r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2347' ],		#self : OmReference [ '2348' ],		#time : DateAndTime [ '2017-12-12T08:01:01.518992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #tests,			#sourceCode : 'testChoice\r\t| parserOne parserTwo |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\t\t\r\tfirstSet := self firstSet: parserOne / parserTwo.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: parserOne.\r\tself assert: firstSet includes: parserTwo.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2348' ],		#self : OmReference [ '2349' ],		#time : DateAndTime [ '2017-12-12T08:01:01.519992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testCycle,			#protocol : #tests,			#sourceCode : 'testCycle\r\t| delegateOne delegateTwo sequence |\r\tdelegateOne := PP2DelegateNode new.\r\tdelegateTwo := PP2DelegateNode new.\r\tsequence := nil asPParser, delegateTwo.\r\t\r\tdelegateOne child: delegateTwo.\r\tdelegateTwo child: delegateOne.\r\t\r\tself should: [ firstSet := self firstSet: sequence ] raise: Error.\r"\tself assert: firstSet isEmpty"',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2349' ],		#self : OmReference [ '2350' ],		#time : DateAndTime [ '2017-12-12T08:01:01.520992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testDeepProductions,			#protocol : #'tests - productions',			#sourceCode : 'testDeepProductions\r\t| productionTop productionOne productionTwo |\r\tproductionOne := \'foo\' asPParser name: \'bar\'.\r\tproductionTwo := \'bar\' asPParser name: \'baz\'.\r\tproductionTop := (productionOne / productionTwo) wrapped name: \'bark\'.\r\tparser := productionTop plus.\r\t\r\tfirstSet := self firstSetWithProduction: parser.\r\tself assert: firstSet size equals: 3.\r\tself assert: (firstSet includes: productionOne).\r\tself assert: (firstSet includes: productionTwo).\t\r\tself assert: (firstSet includes: productionTop).\t\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2350' ],		#self : OmReference [ '2351' ],		#time : DateAndTime [ '2017-12-12T08:01:01.521992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testDelegate,			#protocol : #tests,			#sourceCode : 'testDelegate\r\t| delegate  |\r\tparser := $a asPParser. \r\tdelegate := parser wrapped.\r\t\r\tfirstSet := self firstSet: delegate.\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2351' ],		#self : OmReference [ '2352' ],		#time : DateAndTime [ '2017-12-12T08:01:01.522992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testEndOfInput,			#protocol : #tests,			#sourceCode : 'testEndOfInput\r\tparser := PP2EndOfInputNode new.\r\t\r\tfirstSet := self firstSet: parser.\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2352' ],		#self : OmReference [ '2353' ],		#time : DateAndTime [ '2017-12-12T08:01:01.523992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testFirstWithTokensOneToken,			#protocol : #'tests - tokens',			#sourceCode : 'testFirstWithTokensOneToken\r\t| token  |\r\ttoken := $a asPParser token.\r\tparser := $b asPParser.\r\t\r\tfirstSet := self firstSetWithTokens: token / parser.\r\t\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: token.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2353' ],		#self : OmReference [ '2354' ],		#time : DateAndTime [ '2017-12-12T08:01:01.524992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testFirstWithTokensTwoTokens,			#protocol : #'tests - tokens',			#sourceCode : 'testFirstWithTokensTwoTokens\r\t| tokenOne tokenTwo trimmer |\r\ttrimmer := $c asPParser.\r\ttokenOne := $a asPParser token.\r\ttokenTwo := $b asPParser token trim: trimmer.\r\t\r\tfirstSet := self firstSetWithTokens: tokenOne / tokenTwo.\r\t\r\tself assert: firstSet size equals: 3.\r\tself assert: firstSet includes: tokenOne.\r\tself assert: firstSet includes: tokenTwo child.\r\tself assert: firstSet includes: tokenTwo trimmer.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2354' ],		#self : OmReference [ '2355' ],		#time : DateAndTime [ '2017-12-12T08:01:01.526992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testFlatten,			#protocol : #tests,			#sourceCode : 'testFlatten\r\t| flattened |\r\tparser := #letter asPParser.\r\tflattened := parser, #word asPParser star.\r\tfirstSet := self firstSet: flattened.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2355' ],		#self : OmReference [ '2356' ],		#time : DateAndTime [ '2017-12-12T08:01:01.527992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testJustSeaSoT,			#protocol : #'tests - seas or terminals',			#sourceCode : 'testJustSeaSoT\r\tparser := $a asPParser sea.\r\t\r\tfirstSet := self firstSetWithSeasOrTerminals: parser.\r\t\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2356' ],		#self : OmReference [ '2357' ],		#time : DateAndTime [ '2017-12-12T08:01:01.528992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #tests,			#sourceCode : 'testLiteralObject\r\tparser := $a asPParser.\r\tfirstSet := self firstSet: parser.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2357' ],		#self : OmReference [ '2358' ],		#time : DateAndTime [ '2017-12-12T08:01:01.529992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testLiteralSequence,			#protocol : #tests,			#sourceCode : 'testLiteralSequence\r\tparser := \'foo\' asPParser.\r\tfirstSet := self firstSet: parser.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2358' ],		#self : OmReference [ '2359' ],		#time : DateAndTime [ '2017-12-12T08:01:01.531992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testNonEpsilon,			#protocol : #tests,			#sourceCode : 'testNonEpsilon\r\t| terminal |\r\tterminal := $b asPParser.\r\tparser := terminal optional nonEpsilon.\r\t\r\tfirstSet := self firstSet: parser.\r\t\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: terminal.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2359' ],		#self : OmReference [ '2360' ],		#time : DateAndTime [ '2017-12-12T08:01:01.532992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testNonEpsilonWithoutEpsilon,			#protocol : #tests,			#sourceCode : 'testNonEpsilonWithoutEpsilon\r\t| terminal |\r\tterminal := $b asPParser.\r\tparser := terminal nonEpsilon.\r\t\r\tfirstSet := self firstSet: parser.\r\t\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: terminal.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2360' ],		#self : OmReference [ '2361' ],		#time : DateAndTime [ '2017-12-12T08:01:01.533992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testNot,			#protocol : #tests,			#sourceCode : 'testNot\r\t| sequence |\r\tparser := $a asPParser not.\r\tsequence := parser, $b asPParser.\r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2361' ],		#self : OmReference [ '2362' ],		#time : DateAndTime [ '2017-12-12T08:01:01.534992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testOptional,			#protocol : #tests,			#sourceCode : 'testOptional\r\t| optional |\r\tparser := $a asPParser.\r\toptional := parser optional.\r\tfirstSet := self firstSet: optional.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: PP2EpsilonNode instance.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2362' ],		#self : OmReference [ '2363' ],		#time : DateAndTime [ '2017-12-12T08:01:01.536992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testOptionalSeaSoT,			#protocol : #'tests - seas or terminals',			#sourceCode : 'testOptionalSeaSoT\r\t| sea |\r\tsea := $a asPParser sea.\r\tparser := sea optional wrapped.\r\t\r\tfirstSet := self firstSetWithSeasOrTerminals: parser.\r\t\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: sea',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2363' ],		#self : OmReference [ '2364' ],		#time : DateAndTime [ '2017-12-12T08:01:01.537992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testPluggable,			#protocol : #tests,			#sourceCode : 'testPluggable\r\tparser := [:ctx | ctx next] asPParser.\r\tfirstSet := self firstSet: parser.\r\r\t"JK: Not sure if it should contain epsilon or not"\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2364' ],		#self : OmReference [ '2365' ],		#time : DateAndTime [ '2017-12-12T08:01:01.538992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #tests,			#sourceCode : 'testPlus\r\t| plus |\r\tparser := $a asPParser.\r\tplus := parser plus.\r\tfirstSet := self firstSet: plus.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2365' ],		#self : OmReference [ '2366' ],		#time : DateAndTime [ '2017-12-12T08:01:01.539992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testPlusOptional,			#protocol : #tests,			#sourceCode : 'testPlusOptional\r\t| plus |\r\tparser := $a asPParser.\r\t"JK: This should actually throw warning somewhere"\r\tplus := parser optional plus.\r\tfirstSet := self firstSet: plus.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: PP2EpsilonNode instance.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2366' ],		#self : OmReference [ '2367' ],		#time : DateAndTime [ '2017-12-12T08:01:01.540992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testPossibleSeaSoT,			#protocol : #'tests - seas or terminals',			#sourceCode : 'testPossibleSeaSoT\r\t| sea before |\r\tsea := $a asPParser sea.\r\tbefore := $b asPParser.\r\tparser := before optional, sea.\r\t\r\tfirstSet := self firstSetWithSeasOrTerminals: parser.\r\t\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: sea.\r\tself assert: firstSet includes: before.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2367' ],		#self : OmReference [ '2368' ],		#time : DateAndTime [ '2017-12-12T08:01:01.541992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testPredicateObject,			#protocol : #tests,			#sourceCode : 'testPredicateObject\r\tparser := #letter asPParser.\r\tfirstSet := self firstSet: parser.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet anyOne equals: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2368' ],		#self : OmReference [ '2369' ],		#time : DateAndTime [ '2017-12-12T08:01:01.542992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testProductions,			#protocol : #'tests - productions',			#sourceCode : 'testProductions\r\t| productionOne productionTwo |\r\tproductionOne := \'foo\' asPParser name: \'bar\'.\r\tproductionTwo := \'bar\' asPParser name: \'baz\'.\r\tparser := productionOne / productionTwo.\r\t\r\tfirstSet := self firstSetWithProduction: parser.\r\tself assert: firstSet size equals: 2.\r\tself assert: (firstSet includes: productionOne).\r\tself assert: (firstSet includes: productionTwo).\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2369' ],		#self : OmReference [ '2370' ],		#time : DateAndTime [ '2017-12-12T08:01:01.543992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testProductionsSelf,			#protocol : #'tests - productions',			#sourceCode : 'testProductionsSelf\r\tparser := \'foo\' asPParser name: \'bar\'.\r\t\r\tfirstSet := self firstSetWithProduction: parser.\r\tself assert: firstSet size equals: 1.\r\tself assert: (firstSet includes: parser)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2370' ],		#self : OmReference [ '2371' ],		#time : DateAndTime [ '2017-12-12T08:01:01.545992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSea,			#protocol : #tests,			#sourceCode : 'testSea\r\t| sea |\r\tparser := $a asPParser.\r\tsea := parser sea.\r\tfirstSet := self firstSetWithoutDuplicates: sea.\r\t\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: parser.\r\tself assert: firstSet includes: #any asPParser. \r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2371' ],		#self : OmReference [ '2372' ],		#time : DateAndTime [ '2017-12-12T08:01:01.546992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSeaNullable,			#protocol : #tests,			#sourceCode : 'testSeaNullable\r\t| sea |\r\tparser := $a asPParser.\r\tsea := parser optional sea.\r\tfirstSet := self firstSetWithoutDuplicates: sea.\r\r\tself assert: firstSet size equals: 3.\r\tself assert: firstSet includes: parser.\r\tself assert: firstSet includes: #any asPParser.\r\tself assert: firstSet includes: #eoi asPParser.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2372' ],		#self : OmReference [ '2373' ],		#time : DateAndTime [ '2017-12-12T08:01:01.547992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSeaRepetitionSoT,			#protocol : #'tests - seas or terminals',			#sourceCode : 'testSeaRepetitionSoT\r\t| sea |\r\tsea := $a asPParser sea.\r\tparser := sea plus.\r\t\r\tfirstSet := self firstSetWithSeasOrTerminals: parser.\r\t\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: sea.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2373' ],		#self : OmReference [ '2374' ],		#time : DateAndTime [ '2017-12-12T08:01:01.548992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSeaSoT,			#protocol : #'tests - seas or terminals',			#sourceCode : 'testSeaSoT\r\t| sea |\r\tsea := $a asPParser sea.\r\tparser := sea wrapped.\r\t\r\tfirstSet := self firstSetWithSeasOrTerminals: parser.\r\t\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: sea.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2374' ],		#self : OmReference [ '2375' ],		#time : DateAndTime [ '2017-12-12T08:01:01.550992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSeaWaterTokens,			#protocol : #tests,			#sourceCode : 'testSeaWaterTokens\r\t| sea waterToken tokenOne tokenTwo |\r\tparser := $a asPParser.\r\ttokenOne := $b asPParser.\r\ttokenTwo := $c asPParser.\r\twaterToken := tokenOne / tokenTwo.\r\t\r\tsea := parser sea: waterToken.\r\tfirstSet := self firstSetWithoutDuplicates: sea.\r\r\tself assert: firstSet size equals: 3.\r\tself assert: firstSet includes: parser.\r\tself assert: firstSet includes: tokenOne.\r\tself assert: firstSet includes: tokenTwo.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2375' ],		#self : OmReference [ '2376' ],		#time : DateAndTime [ '2017-12-12T08:01:01.551992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\t| sequence |\r\tparser := $a asPParser.\r\tsequence := parser, $b asPParser.\r\t \r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2376' ],		#self : OmReference [ '2377' ],		#time : DateAndTime [ '2017-12-12T08:01:01.552992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSequenceTwoEpsilons,			#protocol : #tests,			#sourceCode : 'testSequenceTwoEpsilons\r\t| sequence parserOne parserTwo |\r\tparserOne := $a asPParser.\r\tparserTwo := nil asPParser.\r\tsequence := parserOne star, parserTwo.\r\t \r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: parserOne.\r\tself assert: firstSet includes: parserTwo',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2377' ],		#self : OmReference [ '2378' ],		#time : DateAndTime [ '2017-12-12T08:01:01.553992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSequenceTwoStars,			#protocol : #tests,			#sourceCode : 'testSequenceTwoStars\r\t| sequence parserOne parserTwo |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\tsequence := parserOne star, parserTwo star.\r\t \r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 3.\r\tself assert: firstSet includes: parserOne.\r\tself assert: firstSet includes: parserTwo.\r\tself assert: firstSet includes: PP2EpsilonNode instance',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2378' ],		#self : OmReference [ '2379' ],		#time : DateAndTime [ '2017-12-12T08:01:01.554992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithNil,			#protocol : #tests,			#sourceCode : 'testSequenceWithNil\r\t| sequence parserOne parserTwo |\r\tparserOne := nil asPParser.\r\tparserTwo := $b asPParser.\r\tsequence := parserOne, parserTwo.\r\t \r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parserTwo',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2379' ],		#self : OmReference [ '2380' ],		#time : DateAndTime [ '2017-12-12T08:01:01.556992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testSequenceWithStar,			#protocol : #tests,			#sourceCode : 'testSequenceWithStar\r\t| sequence parserOne parserTwo |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\tsequence := parserOne star, parserTwo.\r\t \r\tfirstSet := self firstSet: sequence.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: parserOne.\r\tself assert: firstSet includes: parserTwo',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2380' ],		#self : OmReference [ '2381' ],		#time : DateAndTime [ '2017-12-12T08:01:01.557992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testStar,			#protocol : #tests,			#sourceCode : 'testStar\r\t| star |\r\tparser := $a asPParser.\r\tstar := parser star.\r\tfirstSet := self firstSet: star.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: parser.\r\tself assert: firstSet includes: PP2EpsilonNode instance',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2381' ],		#self : OmReference [ '2382' ],		#time : DateAndTime [ '2017-12-12T08:01:01.558992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testStartOfLine,			#protocol : #tests,			#sourceCode : 'testStartOfLine\r\tparser := #startOfLine asPParser.\r\tfirstSet := self firstSet: parser.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2382' ],		#self : OmReference [ '2383' ],		#time : DateAndTime [ '2017-12-12T08:01:01.559992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testToken,			#protocol : #tests,			#sourceCode : 'testToken\r\t| token |\r\tparser := \'foo\' asPParser.\r\ttoken := parser token.\r\tfirstSet := self firstSet: token.\r\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet anyOne equals: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2383' ],		#self : OmReference [ '2384' ],		#time : DateAndTime [ '2017-12-12T08:01:01.560992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testTrimming,			#protocol : #tests,			#sourceCode : 'testTrimming\r\t| trimming |\r\tparser := \'foo\' asPParser.\r\ttrimming := parser trim.\r\tfirstSet := self firstSet: trimming.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: parser.\r\tself assert: firstSet includes: trimming trimmer child.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2384' ],		#self : OmReference [ '2385' ],		#time : DateAndTime [ '2017-12-12T08:01:01.561992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testTrimmingWithEpsilon,			#protocol : #tests,			#sourceCode : 'testTrimmingWithEpsilon\r\t| trimming |\r\tparser := \'foo\' asPParser.\r\ttrimming := parser optional trim.\r\tfirstSet := self firstSet: trimming.\r\r\tself assert: firstSet size equals: 3.\r\tself assert: firstSet includes: parser.\r\tself assert: firstSet includes: trimming trimmer child.\t\r\tself assert: firstSet includes: PP2EpsilonNode instance.\t\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2385' ],		#self : OmReference [ '2386' ],		#time : DateAndTime [ '2017-12-12T08:01:01.563992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testTwoParents,			#protocol : #tests,			#sourceCode : 'testTwoParents\r\t| sequence |\r\tparser := $a asPParser.\r\tsequence := parser star, parser star.\r\t\r\tfirstSet := self firstSet: sequence.\r\t\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: PP2EpsilonNode instance.\r\tself assert: firstSet includes: parser.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2386' ],		#self : OmReference [ '2387' ],		#time : DateAndTime [ '2017-12-12T08:01:01.564992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testWaterFirstSet,			#protocol : #tests,			#sourceCode : 'testWaterFirstSet\r\t| boundary waterToken |\r\tboundary := $b asPParser.\r\twaterToken := $a asPParser.\r\tparser := PP2WaterNode new boundary: boundary; waterToken: waterToken.\r\t\r\tfirstSet := self firstSet: parser.\r\t\r\tself assert: firstSet size equals: 2.\r\tself assert: firstSet includes: boundary.\r\tself assert: firstSet includes: waterToken.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2387' ],		#self : OmReference [ '2388' ],		#time : DateAndTime [ '2017-12-12T08:01:01.565992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testWrapping,			#protocol : #tests,			#sourceCode : 'testWrapping\r\tparser := $a asPParser >=> [:c :cc | cc value].\r\tfirstSet := self firstSet: parser.\r\r\t"JK: Not sure if it should contain epsilon or not"\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2388' ],		#self : OmReference [ '2389' ],		#time : DateAndTime [ '2017-12-12T08:01:01.566992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testWrappingNonFunctional,			#protocol : #tests,			#sourceCode : 'testWrappingNonFunctional\r\t| literal |\r\tliteral := $a asPParser.\r\tparser := literal >==> [:c :cc | cc value].\r\tfirstSet := self firstSet: parser.\r\r\t"JK: Not sure if it should contain epsilon or not"\r\tself assert: firstSet size equals: 1.\r\tself assert: firstSet includes: literal.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2389' ],		#self : OmReference [ '2390' ],		#time : DateAndTime [ '2017-12-12T08:01:01.568992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #'withoutDuplicates:',			#protocol : #accessing,			#sourceCode : 'withoutDuplicates: set\r\t| newSet |\r\tnewSet := Set new.\r\tnewSet addAll: set.\r\t^ newSet',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2390' ],		#self : OmReference [ '2391' ],		#time : DateAndTime [ '2017-12-12T08:01:01.569992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #'assert:at:',			#protocol : #support,			#sourceCode : 'assert: booleanArray at: position\r\tself assert: (booleanArray at: position)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2391' ],		#self : OmReference [ '2392' ],		#time : DateAndTime [ '2017-12-12T08:01:01.570992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #'deny:at:',			#protocol : #support,			#sourceCode : 'deny: booleanArray at: position\r\tself assert: (booleanArray at: position) not',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2392' ],		#self : OmReference [ '2393' ],		#time : DateAndTime [ '2017-12-12T08:01:01.571992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #'optimize:',			#protocol : #support,			#sourceCode : 'optimize: node\r\tPP2IsNullableCache new doPass: node.\r\tPP2FirstSetCache new doPass: node.\r\tPP2GuardVisitor new doPass: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2393' ],		#self : OmReference [ '2394' ],		#time : DateAndTime [ '2017-12-12T08:01:01.572992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\t\r\tvisitor := PP2GuardVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2394' ],		#self : OmReference [ '2395' ],		#time : DateAndTime [ '2017-12-12T08:01:01.573992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #tests,			#sourceCode : 'testChoice\r\t| parserOne parserTwo |\r\tparserOne := \'foo\' asPParser token trim wrapped.\r\tparserTwo := \'bar\' asPParser token trim wrapped.\r\t\r\tself optimize: parserOne / parserTwo.\r\t\r\tself assert: parserOne strategy isKindOf: PP2ParsingGuard.\r\tself assert: parserOne strategy classification isNotNil.\r\t\r\tself assert: parserTwo strategy isKindOf: PP2ParsingGuard.\r\tself assert: parserTwo strategy classification isNotNil.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2395' ],		#self : OmReference [ '2396' ],		#time : DateAndTime [ '2017-12-12T08:01:01.574992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testClassificationFor,			#protocol : #tests,			#sourceCode : 'testClassificationFor\r\t| classification |\r\tparser := $a asPParser / $b asPParser.\r\t\r\tclassification := visitor classificationFor: parser.\r\t\r\tself assert: classification at: $a codePoint.\r\tself assert: classification at: $b codePoint.\r\tself deny: classification at: $" codePoint.\r\tself deny: classification at: $c codePoint.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2396' ],		#self : OmReference [ '2397' ],		#time : DateAndTime [ '2017-12-12T08:01:01.576992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testClassificationFor2,			#protocol : #tests,			#sourceCode : 'testClassificationFor2\r\t| classification |\r\tparser := #letter asPParser / #digit asPParser.\r\t\r\tclassification := visitor classificationFor: parser.\r\t\r\t1 to: 255 do: [ :index | \r\t\tself assert: (classification at: index) equals: ((Character codePoint: index )isAlphaNumeric).\r\t]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2397' ],		#self : OmReference [ '2398' ],		#time : DateAndTime [ '2017-12-12T08:01:01.577992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testDelegate,			#protocol : #tests,			#sourceCode : 'testDelegate\r\tparser := \'foo\' asPParser plus flatten wrapped.\r\t\r\tself optimize: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2ParsingGuard.\r\tself assert: parser strategy classification isNotNil.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2398' ],		#self : OmReference [ '2399' ],		#time : DateAndTime [ '2017-12-12T08:01:01.578992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testGuardedChoice,			#protocol : #tests,			#sourceCode : 'testGuardedChoice\r\t| parserOne parserTwo parserThree choiceOne |\r\tparserOne := \'foo\' asPParser token trim wrapped.\r\tparserTwo := \'bar\' asPParser token trim wrapped.\r\tparserThree := \'baz\' asPParser token trim wrapped.\r\t\r\tchoiceOne := (parserOne / parserTwo) wrapped.\r\t\r\tself optimize: choiceOne / parserThree.\r\t\r\tself assert: choiceOne strategy isKindOf: PP2ParsingGuard.\r\tself assert: choiceOne strategy classification isNotNil.\r\t\r\tself assert: parserThree strategy isKindOf: PP2ParsingGuard.\r\tself assert: parserThree strategy classification isNotNil.\r\t\r\tself assert: parserOne strategy isKindOf: PP2ParsingGuard.\r\tself assert: parserTwo strategy isKindOf: PP2ParsingGuard.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2399' ],		#self : OmReference [ '2400' ],		#time : DateAndTime [ '2017-12-12T08:01:01.580992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testGuardedChoice2,			#protocol : #tests,			#sourceCode : 'testGuardedChoice2\r\t| parserOne parserTwo parserThree choiceOne |\r\tparserOne := \'baz\' asPParser token trim wrapped.\r\tparserTwo := \'bar\' asPParser token trim wrapped.\r\tparserThree := \'foo\' asPParser token trim wrapped.\r\t\r\tchoiceOne := (parserOne / parserTwo) wrapped.\r\tparser := choiceOne / parserThree.\r\r\tself optimize: parser.\r\t\r\tself assert: choiceOne strategy isKindOf: PP2ParsingGuard.\r\tself assert: choiceOne strategy classification isNotNil.\r\t\r\tself assert: parserThree strategy isKindOf: PP2ParsingGuard.\r\tself assert: parserThree strategy classification isNotNil.\r\t\r\t"already guarded by a parent!"\r\tself deny: parserOne strategy isKindOf: PP2ParsingGuard.\r\tself deny: parserTwo strategy isKindOf: PP2ParsingGuard.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2400' ],		#self : OmReference [ '2401' ],		#time : DateAndTime [ '2017-12-12T08:01:01.581992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testOptional,			#protocol : #tests,			#sourceCode : 'testOptional\r\tparser := \'foo\' asPParser token trim optional.\r\t\r\tself optimize: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2ParsingGuard.\r\tself assert: parser strategy retval isNil.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2401' ],		#self : OmReference [ '2402' ],		#time : DateAndTime [ '2017-12-12T08:01:01.582992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #tests,			#sourceCode : 'testPlus\r\tparser := \'foo\' asPParser token trim plus.\r\tparser strategy: (PP2Plus on: parser).\r\t\r\tself optimize: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2ParsingGuard.\r\tself assert: parser strategy retval isPetit2Failure.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2402' ],		#self : OmReference [ '2403' ],		#time : DateAndTime [ '2017-12-12T08:01:01.583992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testStar,			#protocol : #tests,			#sourceCode : 'testStar\r\tparser := \'foo\' asPParser token trim star.\r\tparser strategy: (PP2Star on: parser).\r\t\r\tself optimize: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2ParsingGuard.\r\tself assert: parser strategy retval equals: #().',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2403' ],		#self : OmReference [ '2404' ],		#time : DateAndTime [ '2017-12-12T08:01:01.584992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2GuardVisitorTest,				#isMetaSide : false			},			#name : #testTimes,			#protocol : #tests,			#sourceCode : 'testTimes\r\tparser := \'foo\' asPParser token trim times: 3.\r\t\r\tself optimize: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2ParsingGuard.\r\tself assert: parser strategy classification isNotNil.\r\tself assert: parser strategy retval isPetit2Failure',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2404' ],		#self : OmReference [ '2405' ],		#time : DateAndTime [ '2017-12-12T08:01:01.586992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContextTest,				#isMetaSide : false			},			#name : #'contextOn:',			#protocol : #requirements,			#sourceCode : 'contextOn: aString\r\t^ PP2InMemoryContext on: aString',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2405' ],		#self : OmReference [ '2406' ],		#time : DateAndTime [ '2017-12-12T08:01:01.587992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContextTest,				#isMetaSide : false			},			#name : #testAsPetit2Context,			#protocol : #'tests - converting',			#sourceCode : 'testAsPetit2Context\r\t| context |\r\tcontext := \'foo\' asPetit2Stream asPetit2Context.\r\t\r\tself assert: (context isKindOf: PP2InMemoryContext).\r\tself assert: context isPetit2Success.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2406' ],		#self : OmReference [ '2407' ],		#time : DateAndTime [ '2017-12-12T08:01:01.589992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContextTest,				#isMetaSide : false			},			#name : #testAsPetit2ContextDirect,			#protocol : #'tests - converting',			#sourceCode : 'testAsPetit2ContextDirect\r\t| context |\r\tcontext := \'foo\' asPetit2Context.\r\tself assert: context isKindOf: PP2InMemoryContext.\r\tself assert: context start equals: 0.\r\tself assert: context readLimit equals: 3',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2407' ],		#self : OmReference [ '2408' ],		#time : DateAndTime [ '2017-12-12T08:01:01.590992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContextTest,				#isMetaSide : false			},			#name : #testAsPositionableStream,			#protocol : #'tests - converting',			#sourceCode : 'testAsPositionableStream\r\t| stream context |\r\t\r\tcontext := \'bar\' asPetit2Stream asPetit2Context.\r\tcontext position: 2.\r\r\tstream := context asPositionableStream.\r\t\r\tself assert: (stream isKindOf: PositionableStream).\r\tself assert: stream position equals: 2.\r\tself assert: stream peek equals: $r.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2408' ],		#self : OmReference [ '2409' ],		#time : DateAndTime [ '2017-12-12T08:01:01.591992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InMemoryContextTest,				#isMetaSide : false			},			#name : #testCopy,			#protocol : #tests,			#sourceCode : 'testCopy\r\t| stream newContext context |\r\tstream := \'foo\' asPetit2Stream.\r\t\r\tcontext := PP2InMemoryContext new\r\t\tstream: stream;\r \t\tposition: 1;\r\t\tparser: #parser;\r\t\tstartMemento: #startMemento;\r\t\tyourself.\r\t\t\r\tnewContext := context copy.\r\t\r\tself deny: context == newContext.\r\tself assert: context position = newContext position.\r\tself assert: context contents = newContext contents.\t\r\tself assert: context parser = newContext parser.\r\tself assert: context startMemento = newContext startMemento.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2409' ],		#self : OmReference [ '2410' ],		#time : DateAndTime [ '2017-12-12T08:01:01.592992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tcontext := PP2Context on: \'foobar\'.\r\tbuffer := IdentityDictionary new.\r\tchange := PP2InsertCharacter new.\r\tmemento := PP2Memento new.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2410' ],		#self : OmReference [ '2411' ],		#time : DateAndTime [ '2017-12-12T08:01:01.593992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testChangeAfterRange,			#protocol : #tests,			#sourceCode : 'testChangeAfterRange\r\tchange position: 2.\r\r\tself assert: (change changeAfterRange: 0).\r\tself deny: (change changeAfterRange: 1).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2411' ],		#self : OmReference [ '2412' ],		#time : DateAndTime [ '2017-12-12T08:01:01.594992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testChangeBeforeRange,			#protocol : #tests,			#sourceCode : 'testChangeBeforeRange\r\tchange position: 2.\r\r\tself assert: (change changeBeforeRange: 4).\r\tself assert: (change changeBeforeRange: 3).\r\r\tself deny: (change changeBeforeRange: 2).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2412' ],		#self : OmReference [ '2413' ],		#time : DateAndTime [ '2017-12-12T08:01:01.595992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testChangeBetweenAnd,			#protocol : #tests,			#sourceCode : 'testChangeBetweenAnd\r\tchange position: 2.\r\r\tself assert: (change changeBetween: 2 and: 2).\r\tself assert: (change changeBetween: 2 and: 3).\r\r\tself assert: (change changeBetween: 1 and: 2).\r\tself assert: (change changeBetween: 1 and: 1).\r\r\tself deny: (change changeBetween: 3 and: 3).\r\tself deny: (change changeBetween: 0 and: 0).\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2413' ],		#self : OmReference [ '2414' ],		#time : DateAndTime [ '2017-12-12T08:01:01.597992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferChangeAfter,			#protocol : #tests,			#sourceCode : 'testUpdateBufferChangeAfter\r\tkey := 0. "+1"\r\tmemento furthestPosition: 1.\r\tchange position: 3.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\t\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) equals: memento.\r\tself assert: memento contextMemento position equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2414' ],		#self : OmReference [ '2415' ],		#time : DateAndTime [ '2017-12-12T08:01:01.598992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferChangeBefore,			#protocol : #tests,			#sourceCode : 'testUpdateBufferChangeBefore\r\tkey := 2. "+1"\r\tmemento furthestPosition: 3.\r\tchange position: 1.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\t\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key + 1) equals: memento.\r\tself assert: memento contextMemento position equals: 4.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2415' ],		#self : OmReference [ '2416' ],		#time : DateAndTime [ '2017-12-12T08:01:01.599992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferInRange,			#protocol : #tests,			#sourceCode : 'testUpdateBufferInRange\r\tkey := 0. "+1"\r\tmemento furthestPosition: 3.\r\tchange position: 2.\r\t\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\t\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) isKindOf: PP2MementoPromise.\r\tself assert: (newBuffer at: key) buffer equals: newBuffer.\r\tself assert: (newBuffer at: key) contextMemento position equals: 4.\r\tself assert: (newBuffer at: key) furthestPosition equals: 4.\r\tself assert: (newBuffer at: key) position equals: key.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2416' ],		#self : OmReference [ '2417' ],		#time : DateAndTime [ '2017-12-12T08:01:01.601992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferInRangeHighBoundary,			#protocol : #tests,			#sourceCode : 'testUpdateBufferInRangeHighBoundary\r\tkey := 0. "+1"\r\tmemento furthestPosition: 1.\r\tchange position: 2.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) isKindOf: PP2MementoPromise.\r\tself assert: (newBuffer at: key) buffer equals: newBuffer.\r\tself assert: (newBuffer at: key) contextMemento position equals: 2.\t\r\tself assert: (newBuffer at: key) position equals: key.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2417' ],		#self : OmReference [ '2418' ],		#time : DateAndTime [ '2017-12-12T08:01:01.602992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateBufferInRangeLowBoundary,			#protocol : #tests,			#sourceCode : 'testUpdateBufferInRangeLowBoundary\r\tkey := 1. "+1"\r\tmemento furthestPosition: 3.\r\tchange position: 2.\r\r\tcontext position: memento furthestPosition.\r\tmemento contextMemento: context remember.\r\t\r\tbuffer at: key put: memento.\r\t\r\tnewBuffer := change updateBuffer: buffer.\r\tself assert: (newBuffer at: key) isKindOf: PP2MementoPromise.\r\tself assert: (newBuffer at: key) buffer equals: newBuffer.\r\tself assert: (newBuffer at: key) contextMemento position equals: 4.\r\tself assert: (newBuffer at: key) position equals: key.\r\t\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2418' ],		#self : OmReference [ '2419' ],		#time : DateAndTime [ '2017-12-12T08:01:01.603992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokens,			#protocol : #tests,			#sourceCode : 'testUpdateTokens\r\t| token anotherToken returnValue originalInput |\r\r\toriginalInput := \'_foobar\'.\r\r\ttoken := PP2Token on: originalInput start: 2 stop: 4.\r\tanotherToken := PP2Token on: originalInput start: 5 stop: 7.\r\t\r\treturnValue := OrderedCollection with: token with: #foobar with: anotherToken.\r\r\tchange input: \'__foobar\'.\r\tchange position: 1.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: token start equals: 3.\r\tself assert: token stop equals: 5.\r\tself assert: token value = \'foo\'.\r\t\r\tself assert: anotherToken start equals: 6.\r\tself assert: anotherToken stop equals: 8.\r\tself assert: anotherToken value equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2419' ],		#self : OmReference [ '2420' ],		#time : DateAndTime [ '2017-12-12T08:01:01.604992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokensAfterChange,			#protocol : #tests,			#sourceCode : 'testUpdateTokensAfterChange\r\t| token anotherToken returnValue originalInput |\r\r\toriginalInput := \'foo__bar\'.\r\r\ttoken := PP2Token on: originalInput start: 1 stop: 3.\r\tanotherToken := PP2Token on: originalInput start: 6 stop: 8.\r\t\r\treturnValue := OrderedCollection with: token with: #foobar with: anotherToken.\r\r\tchange input: \'foo___bar\'.\r\tchange position: 5.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: token start equals: 1.\r\tself assert: token stop equals: 3.\r\tself assert: token value = \'foo\'.\r\t\r\tself assert: anotherToken start equals: 7.\r\tself assert: anotherToken stop equals: 9.\r\tself assert: anotherToken value equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2420' ],		#self : OmReference [ '2421' ],		#time : DateAndTime [ '2017-12-12T08:01:01.606992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokensOnce,			#protocol : #tests,			#sourceCode : 'testUpdateTokensOnce\r\t| token returnValue originalInput |\r\r\toriginalInput := \'_foobar\'.\r\r\ttoken := PP2Token on: originalInput start: 2 stop: 4.\r\t\r\treturnValue := OrderedCollection with: token with: #foobar with: token.\r\r\tchange input: \'__foobar\'.\r\tchange position: 1.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: token start equals: 3.\r\tself assert: token stop equals: 5.\r\tself assert: token value = \'foo\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2421' ],		#self : OmReference [ '2422' ],		#time : DateAndTime [ '2017-12-12T08:01:01.608992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2InsertCharacterTest,				#isMetaSide : false			},			#name : #testUpdateTokensSingleToken,			#protocol : #tests,			#sourceCode : 'testUpdateTokensSingleToken\r\t| returnValue originalInput |\r\r\toriginalInput := \'_foobar\'.\r\treturnValue := PP2Token on: originalInput start: 2 stop: 4.\r\t\r\t\r\tchange input: \'__foobar\'.\r\tchange position: 1.\r\tchange updateTokens: returnValue.\r\t\r\tself assert: returnValue start equals: 3.\r\tself assert: returnValue stop equals: 5.\r\tself assert: returnValue value = \'foo\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2422' ],		#self : OmReference [ '2423' ],		#time : DateAndTime [ '2017-12-12T08:01:01.609992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableCacheTest,				#isMetaSide : false			},			#name : #testSanity,			#protocol : #tests,			#sourceCode : 'testSanity\r\t| parser |\r\tparser := ((($f asPParser, \'oo\' asPParser) wrapped not ==> [ :e | e ]) star / \r\t\t\t\t   (nil asPParser, \'\' asPParser)) end.\r\tPP2IsNullableCache new doPass: parser.\r\t\r\tself assert: (parser allNodes allSatisfy: [ :child | child hasProperty: #isNullable ])',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2423' ],		#self : OmReference [ '2424' ],		#time : DateAndTime [ '2017-12-12T08:01:01.610992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #'assertIsNullable:',			#protocol : #support,			#sourceCode : 'assertIsNullable: node\r\t| retval |\r\tretval := visitor visit: node.\r\tself assert: retval',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2424' ],		#self : OmReference [ '2425' ],		#time : DateAndTime [ '2017-12-12T08:01:01.611992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #'denyIsNullable:',			#protocol : #support,			#sourceCode : 'denyIsNullable: node\r\t| retval |\r\tretval := visitor visit: node.\r\tself assert: retval not',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2425' ],		#self : OmReference [ '2426' ],		#time : DateAndTime [ '2017-12-12T08:01:01.612992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\t\r\tvisitor := PP2IsNullableVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2426' ],		#self : OmReference [ '2427' ],		#time : DateAndTime [ '2017-12-12T08:01:01.612992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testAction,			#protocol : #tests,			#sourceCode : 'testAction\r\tself denyIsNullable: #letter asPParser ==> [ :foo | foo ].',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2427' ],		#self : OmReference [ '2428' ],		#time : DateAndTime [ '2017-12-12T08:01:01.614992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testActionEmpty,			#protocol : #tests,			#sourceCode : 'testActionEmpty\r\tself assertIsNullable: nil asPParser ==> [ :foo | foo ].\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2428' ],		#self : OmReference [ '2429' ],		#time : DateAndTime [ '2017-12-12T08:01:01.615992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testAdaptable,			#protocol : #tests,			#sourceCode : 'testAdaptable\r\tparser := PP2AdaptableNode new.\r\tparser changeChild: $a asPParser.\r\r\tself denyIsNullable: parser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2429' ],		#self : OmReference [ '2430' ],		#time : DateAndTime [ '2017-12-12T08:01:01.616992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testAdaptableEpsilon,			#protocol : #tests,			#sourceCode : 'testAdaptableEpsilon\r\tparser := PP2AdaptableNode new.\r\tparser changeChild: nil asPParser.\r\r\tself denyIsNullable: parser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2430' ],		#self : OmReference [ '2431' ],		#time : DateAndTime [ '2017-12-12T08:01:01.618992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testAnd,			#protocol : #tests,			#sourceCode : 'testAnd\r\tself denyIsNullable: #letter asPParser and\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2431' ],		#self : OmReference [ '2432' ],		#time : DateAndTime [ '2017-12-12T08:01:01.619992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testBlock,			#protocol : #tests,			#sourceCode : 'testBlock\r\t| block |\r\tblock := [ :context | context next ] asPParser.\r\tself denyIsNullable: block.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2432' ],		#self : OmReference [ '2433' ],		#time : DateAndTime [ '2017-12-12T08:01:01.620992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testBlockAcceptsEpsilon,			#protocol : #tests,			#sourceCode : 'testBlockAcceptsEpsilon\r\t| block |\r\tblock := [ :context | context next ] asPParser\r\t\t\t\t\tisNullable: true;\r\t\t\t\t\tyourself.\r\tself assertIsNullable: block.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2433' ],		#self : OmReference [ '2434' ],		#time : DateAndTime [ '2017-12-12T08:01:01.621992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testCycle,			#protocol : #tests,			#sourceCode : 'testCycle\r\t| delegateOne delegateTwo sequence |\r\tdelegateOne := PP2DelegateNode new.\r\tdelegateTwo := PP2DelegateNode new.\r\tsequence := nil asPParser, delegateTwo.\r\t\r\tdelegateOne child: delegateTwo.\r\tdelegateTwo child: delegateOne.\r\t\r\tself should: [ self assertIsNullable: sequence ] raise: Error',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2434' ],		#self : OmReference [ '2435' ],		#time : DateAndTime [ '2017-12-12T08:01:01.622992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testCycleNoRecursion,			#protocol : #tests,			#sourceCode : 'testCycleNoRecursion\r\t| delegateOne delegateTwo sequence |\r\tdelegateOne := PP2DelegateNode new.\r\tdelegateTwo := PP2DelegateNode new.\r\tsequence := $a asPParser, delegateTwo.\r\t\r\tdelegateOne child: delegateTwo.\r\tdelegateTwo child: delegateOne.\r\t\r\tself denyIsNullable: sequence',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2435' ],		#self : OmReference [ '2436' ],		#time : DateAndTime [ '2017-12-12T08:01:01.623992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testEmptyLiteral,			#protocol : #tests,			#sourceCode : 'testEmptyLiteral\r\tself assertIsNullable: \'\' asPParser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2436' ],		#self : OmReference [ '2437' ],		#time : DateAndTime [ '2017-12-12T08:01:01.624992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testEnd,			#protocol : #tests,			#sourceCode : 'testEnd\r\tself denyIsNullable: \'foo\' asPParser end',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2437' ],		#self : OmReference [ '2438' ],		#time : DateAndTime [ '2017-12-12T08:01:01.625992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testEndEmpty,			#protocol : #tests,			#sourceCode : 'testEndEmpty\r\tself assertIsNullable: nil asPParser end',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2438' ],		#self : OmReference [ '2439' ],		#time : DateAndTime [ '2017-12-12T08:01:01.626992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testEndOfInput,			#protocol : #tests,			#sourceCode : 'testEndOfInput\r\tself denyIsNullable: PP2EndOfInputNode new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2439' ],		#self : OmReference [ '2440' ],		#time : DateAndTime [ '2017-12-12T08:01:01.628992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testLiteral,			#protocol : #tests,			#sourceCode : 'testLiteral\r\tself denyIsNullable: \'foo\' asPParser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2440' ],		#self : OmReference [ '2441' ],		#time : DateAndTime [ '2017-12-12T08:01:01.629992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #tests,			#sourceCode : 'testLiteralObject\r\tself denyIsNullable: $a asPParser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2441' ],		#self : OmReference [ '2442' ],		#time : DateAndTime [ '2017-12-12T08:01:01.630992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testNil,			#protocol : #tests,			#sourceCode : 'testNil\r\tself assertIsNullable: nil asPParser optional.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2442' ],		#self : OmReference [ '2443' ],		#time : DateAndTime [ '2017-12-12T08:01:01.631992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testNot,			#protocol : #tests,			#sourceCode : 'testNot\r\tself denyIsNullable: #letter asPParser not\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2443' ],		#self : OmReference [ '2444' ],		#time : DateAndTime [ '2017-12-12T08:01:01.632992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testOptional,			#protocol : #tests,			#sourceCode : 'testOptional\r\tself assertIsNullable: #letter asPParser optional.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2444' ],		#self : OmReference [ '2445' ],		#time : DateAndTime [ '2017-12-12T08:01:01.634992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testPluggable,			#protocol : #tests,			#sourceCode : 'testPluggable\r\tself denyIsNullable: [:ctx | ctx] asPParser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2445' ],		#self : OmReference [ '2446' ],		#time : DateAndTime [ '2017-12-12T08:01:01.635992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #tests,			#sourceCode : 'testPlus\r\tself denyIsNullable: #letter asPParser plus.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2446' ],		#self : OmReference [ '2447' ],		#time : DateAndTime [ '2017-12-12T08:01:01.636992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testPlusEplsilon,			#protocol : #tests,			#sourceCode : 'testPlusEplsilon\r\tself assertIsNullable: nil asPParser plus.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2447' ],		#self : OmReference [ '2448' ],		#time : DateAndTime [ '2017-12-12T08:01:01.638992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testPredicate,			#protocol : #tests,			#sourceCode : 'testPredicate\r\tself denyIsNullable: #letter asPParser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2448' ],		#self : OmReference [ '2449' ],		#time : DateAndTime [ '2017-12-12T08:01:01.639992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testPredicateObject,			#protocol : #tests,			#sourceCode : 'testPredicateObject\r\tself denyIsNullable: #letter asPParser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2449' ],		#self : OmReference [ '2450' ],		#time : DateAndTime [ '2017-12-12T08:01:01.640992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testPredicateObjectAny,			#protocol : #tests,			#sourceCode : 'testPredicateObjectAny\r\tself denyIsNullable: #any asPParser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2450' ],		#self : OmReference [ '2451' ],		#time : DateAndTime [ '2017-12-12T08:01:01.641992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\tself denyIsNullable: #letter asPParser, #word asPParser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2451' ],		#self : OmReference [ '2452' ],		#time : DateAndTime [ '2017-12-12T08:01:01.642992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testSequenceEmpty,			#protocol : #tests,			#sourceCode : 'testSequenceEmpty\r\tself assertIsNullable: #letter asPParser optional, nil asPParser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2452' ],		#self : OmReference [ '2453' ],		#time : DateAndTime [ '2017-12-12T08:01:01.643992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testSequenceFirstEpsilon,			#protocol : #tests,			#sourceCode : 'testSequenceFirstEpsilon\r\tself denyIsNullable: #letter asPParser optional, #word asPParser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2453' ],		#self : OmReference [ '2454' ],		#time : DateAndTime [ '2017-12-12T08:01:01.644992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testStar,			#protocol : #tests,			#sourceCode : 'testStar\r\tself assertIsNullable: #letter asPParser star.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2454' ],		#self : OmReference [ '2455' ],		#time : DateAndTime [ '2017-12-12T08:01:01.645992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testStartOfLine,			#protocol : #tests,			#sourceCode : 'testStartOfLine\r\tself denyIsNullable: #startOfLine asPParser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2455' ],		#self : OmReference [ '2456' ],		#time : DateAndTime [ '2017-12-12T08:01:01.646992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testWater,			#protocol : #tests,			#sourceCode : 'testWater\r\tself denyIsNullable: (PP2WaterNode new boundary: nil asPParser).\r\tself denyIsNullable: (PP2WaterNode new boundary: $a asPParser).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2456' ],		#self : OmReference [ '2457' ],		#time : DateAndTime [ '2017-12-12T08:01:01.648992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testWrapping,			#protocol : #tests,			#sourceCode : 'testWrapping\r\tparser := $a asPParser >=> [ :c :cc | cc value ].\r\r\tself denyIsNullable: parser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2457' ],		#self : OmReference [ '2458' ],		#time : DateAndTime [ '2017-12-12T08:01:01.649992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testWrappingAcceptsEpsilon,			#protocol : #tests,			#sourceCode : 'testWrappingAcceptsEpsilon\r\t| wrapped |\r\twrapped := $a asPParser >=> [ :context :cc |  ]\r\t\tisNullable: true;\r\t\tyourself.\r\t\r\tself assertIsNullable: wrapped\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2458' ],		#self : OmReference [ '2459' ],		#time : DateAndTime [ '2017-12-12T08:01:01.650992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testWrappingNonFunctional,			#protocol : #tests,			#sourceCode : 'testWrappingNonFunctional\r\tparser := $a asPParser >==> [:c :cc | cc value].\r\r\tself denyIsNullable: parser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2459' ],		#self : OmReference [ '2460' ],		#time : DateAndTime [ '2017-12-12T08:01:01.651992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testWrappingNonFunctionalEpsilon,			#protocol : #tests,			#sourceCode : 'testWrappingNonFunctionalEpsilon\r\tparser := nil asPParser >==> [:c :cc | cc value].\r\r\tself assertIsNullable: parser\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2460' ],		#self : OmReference [ '2461' ],		#time : DateAndTime [ '2017-12-12T08:01:01.652992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContextTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\to1 := Object new.\r\to2 := Object new.\r\to3 := Object new.\r\t\r\tcontext1 := PP2NextSetsContext new.\r\tcontext2 := PP2NextSetsContext new.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2461' ],		#self : OmReference [ '2462' ],		#time : DateAndTime [ '2017-12-12T08:01:01.653992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContextTest,				#isMetaSide : false			},			#name : #testEqual,			#protocol : #'as yet unclassified',			#sourceCode : 'testEqual\r\tcontext1 currentNext: (IdentitySet with: o1 with: o2).\r\tcontext2 currentNext: (IdentitySet with: o2 with: o1).\r\t\r\tself deny: context1 == context2.\r\tself assert: context1 = context2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2462' ],		#self : OmReference [ '2463' ],		#time : DateAndTime [ '2017-12-12T08:01:01.654992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContextTest,				#isMetaSide : false			},			#name : #testEqualNot,			#protocol : #'as yet unclassified',			#sourceCode : 'testEqualNot\r\tcontext1 currentNext: (IdentitySet with: o1 with: o2).\r\tcontext2 currentNext: (IdentitySet with: o2 with: o3).\r\t\r\tself deny: context1 == context2.\r\tself deny: context1 = context2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2463' ],		#self : OmReference [ '2464' ],		#time : DateAndTime [ '2017-12-12T08:01:01.656992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContextTest,				#isMetaSide : false			},			#name : #testHash,			#protocol : #'as yet unclassified',			#sourceCode : 'testHash\r\tcontext1 currentNext: (IdentitySet with: o1 with: o2).\r\tcontext2 currentNext: (IdentitySet with: o2 with: o1).\r\t\r\tself assert: context1 hash equals: context2 hash. ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2464' ],		#self : OmReference [ '2465' ],		#time : DateAndTime [ '2017-12-12T08:01:01.657992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsContextTest,				#isMetaSide : false			},			#name : #testHashNotEqual,			#protocol : #'as yet unclassified',			#sourceCode : 'testHashNotEqual\r\tcontext1 currentNext: (IdentitySet with: o1 with: o2).\r\tcontext2 currentNext: (IdentitySet with: o2 with: o1 with: o3).\r\t\r\tself deny: context1 hash = context2 hash. ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2465' ],		#self : OmReference [ '2466' ],		#time : DateAndTime [ '2017-12-12T08:01:01.658992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #'assert:includes:',			#protocol : #accessing,			#sourceCode : 'assert: aSet includes: anObject\r\tself assert: (aSet includes: anObject)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2466' ],		#self : OmReference [ '2467' ],		#time : DateAndTime [ '2017-12-12T08:01:01.659992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #'nextSet:in:',			#protocol : #accessing,			#sourceCode : 'nextSet: node in: root\r\tvisitor visit: root.\r\t^ nextSet := visitor nextSets at: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2467' ],		#self : OmReference [ '2468' ],		#time : DateAndTime [ '2017-12-12T08:01:01.660992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #accessing,			#sourceCode : 'setUp\r\tvisitor := PP2NextSetsVisitor new.\r\teoi := visitor instVarNamed: #eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2468' ],		#self : OmReference [ '2469' ],		#time : DateAndTime [ '2017-12-12T08:01:01.661992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testAction,			#protocol : #accessing,			#sourceCode : 'testAction\r\t| action |\r\tparser := $a asPParser.\r\taction := parser ==> [:e | e].\r\t\r\tself nextSet: parser in: action.\r\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: action in: action.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2469' ],		#self : OmReference [ '2470' ],		#time : DateAndTime [ '2017-12-12T08:01:01.662992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testChoice,			#protocol : #accessing,			#sourceCode : 'testChoice\r\t| choice |\r\tparser := $a asPParser.\r\tchoice := parser / parser wrapped.\r\t\r\tself nextSet: parser in: choice.\r\t\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2470' ],		#self : OmReference [ '2471' ],		#time : DateAndTime [ '2017-12-12T08:01:01.663992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testDelegate,			#protocol : #accessing,			#sourceCode : 'testDelegate\r\t| delegate |\r\tparser := $a asPParser.\r\tdelegate := parser wrapped.\r\t\r\tself nextSet: parser in: delegate.\r\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: delegate in: delegate.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2471' ],		#self : OmReference [ '2472' ],		#time : DateAndTime [ '2017-12-12T08:01:01.664992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testEpsilon,			#protocol : #accessing,			#sourceCode : 'testEpsilon\r\tparser := nil asPParser.\r\t\r\tself nextSet: parser in: parser.\r\t\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2472' ],		#self : OmReference [ '2473' ],		#time : DateAndTime [ '2017-12-12T08:01:01.665992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testFlatten,			#protocol : #accessing,			#sourceCode : 'testFlatten\r\t| flatten |\r\tparser := $a asPParser.\r\tflatten := parser flatten.\r\t\r\tself nextSet: parser in: flatten.\r\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: flatten in: flatten.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2473' ],		#self : OmReference [ '2474' ],		#time : DateAndTime [ '2017-12-12T08:01:01.666992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testLiteralObject,			#protocol : #accessing,			#sourceCode : 'testLiteralObject\r\tparser := $a asPParser.\r\t\r\tself nextSet: parser in: parser.\r\t\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2474' ],		#self : OmReference [ '2475' ],		#time : DateAndTime [ '2017-12-12T08:01:01.668992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testLiteralSequence,			#protocol : #accessing,			#sourceCode : 'testLiteralSequence\r\tparser := \'foo\' asPParser.\r\t\r\tself nextSet: parser in: parser.\r\t\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2475' ],		#self : OmReference [ '2476' ],		#time : DateAndTime [ '2017-12-12T08:01:01.669992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testOptional,			#protocol : #accessing,			#sourceCode : 'testOptional\r\t| optional |\r\tparser := $a asPParser.\r\toptional := parser optional.\r\t\r\tself nextSet: parser in: optional.\r\t\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2476' ],		#self : OmReference [ '2477' ],		#time : DateAndTime [ '2017-12-12T08:01:01.670992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testPossesiveRepeating,			#protocol : #accessing,			#sourceCode : 'testPossesiveRepeating\r\t| plus |\r\tparser := $a asPParser.\r\tplus := parser plus.\r\t\r\tself nextSet: parser in: plus.\r\r\tself assert: nextSet size equals: 2.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: plus in: plus.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2477' ],		#self : OmReference [ '2478' ],		#time : DateAndTime [ '2017-12-12T08:01:01.671992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testRoot,			#protocol : #accessing,			#sourceCode : 'testRoot\r\tparser := $a asPParser.\r\t\r\tself nextSet: parser in: parser.\r\t\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2478' ],		#self : OmReference [ '2479' ],		#time : DateAndTime [ '2017-12-12T08:01:01.672992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #accessing,			#sourceCode : 'testSequence\r\t| sequence |\r\tparser := $a asPParser.\r\tnextParser := $b asPParser.\r\t\r\tsequence := parser, nextParser.\r\t\r\tself nextSet: parser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: nextParser.\r\r\tself nextSet: nextParser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\t\r\tself nextSet: sequence in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2479' ],		#self : OmReference [ '2480' ],		#time : DateAndTime [ '2017-12-12T08:01:01.672992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfDelegates,			#protocol : #accessing,			#sourceCode : 'testSequenceOfDelegates\r\t| sequence |\r\tparser := $a asPParser.\r\tnextParser := $b asPParser wrapped.\r\t\r\tsequence := parser wrapped, nextParser.\r\t\r\tself nextSet: parser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: nextParser.\r\t\r\tself nextSet: nextParser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: sequence in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2480' ],		#self : OmReference [ '2481' ],		#time : DateAndTime [ '2017-12-12T08:01:01.673992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfThree,			#protocol : #accessing,			#sourceCode : 'testSequenceOfThree\r\t| sequence nextNextParser |\r\tparser := $a asPParser.\r\tnextParser := $b asPParser.\r\tnextNextParser := $c asPParser.\r\t\r\tsequence := parser, nextParser, nextNextParser.\r\t\r\tself nextSet: parser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: nextParser.\r\t\r\tself nextSet: nextParser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: nextNextParser.\r\t\r\tself nextSet: nextNextParser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: sequence in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2481' ],		#self : OmReference [ '2482' ],		#time : DateAndTime [ '2017-12-12T08:01:01.675992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfThreeWithNullable,			#protocol : #accessing,			#sourceCode : 'testSequenceOfThreeWithNullable\r\t| sequence nextNextParser |\r\tparser := $a asPParser.\r\tnextParser := $b asPParser optional.\r\tnextNextParser := $c asPParser.\r\t\r\tsequence := parser, nextParser, nextNextParser.\r\t\r\tself nextSet: parser in: sequence.\r\tself assert: nextSet size equals: 2.\r\tself assert: nextSet includes: nextParser.\r\tself assert: nextSet includes: nextNextParser.\r\t\r\tself nextSet: nextParser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: nextNextParser.\r\t\r\tself nextSet: nextNextParser in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: sequence in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2482' ],		#self : OmReference [ '2483' ],		#time : DateAndTime [ '2017-12-12T08:01:01.675992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOptional,			#protocol : #accessing,			#sourceCode : 'testSequenceOptional\r\t| sequence |\r\tparser := $a asPParser.\r\tnextParser := $b asPParser optional.\r\t\r\tsequence := parser, nextParser.\r\t\r\tself nextSet: parser in: sequence.\r\t\r\tself assert: nextSet size equals: 2.\r\tself assert: nextSet includes: nextParser.\r\tself assert: nextSet includes: eoi.\t\r\t\r\tself nextSet: sequence in: sequence.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2483' ],		#self : OmReference [ '2484' ],		#time : DateAndTime [ '2017-12-12T08:01:01.676992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testToken,			#protocol : #accessing,			#sourceCode : 'testToken\r\t| token |\r\tparser := $a asPParser.\r\ttoken := parser token.\r\t\r\tself nextSet: parser in: token.\r\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: token in: token.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2484' ],		#self : OmReference [ '2485' ],		#time : DateAndTime [ '2017-12-12T08:01:01.678992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testTrim,			#protocol : #accessing,			#sourceCode : 'testTrim\r\t| trim |\r\tparser := $a asPParser.\r\ttrim := parser trim.\r\t\r\tself nextSet: parser in: trim.\r\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: trim in: trim.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2485' ],		#self : OmReference [ '2486' ],		#time : DateAndTime [ '2017-12-12T08:01:01.679992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NextSetsVisitorTest,				#isMetaSide : false			},			#name : #testTrimmingToken,			#protocol : #accessing,			#sourceCode : 'testTrimmingToken\r\t| token |\r\tparser := $a asPParser.\r\ttoken := parser token trim.\r\t\r\tself nextSet: parser in: token.\r\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.\r\t\r\tself nextSet: token in: token.\r\tself assert: nextSet size equals: 1.\r\tself assert: nextSet includes: eoi.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2486' ],		#self : OmReference [ '2487' ],		#time : DateAndTime [ '2017-12-12T08:01:01.680992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeCopyTest,				#isMetaSide : false			},			#name : #testCopy,			#protocol : #tests,			#sourceCode : 'testCopy\r\t| node nodeCopy |\r\tnode := $a asPParser.\r\t\r\tnodeCopy := node copy.\r\t\r\tself assert: node equals: nodeCopy.\r\tself assert: node ~~ nodeCopy.\r\t\r\tself assert: node strategy node == node.\r\tself assert: nodeCopy strategy node == nodeCopy.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2487' ],		#self : OmReference [ '2488' ],		#time : DateAndTime [ '2017-12-12T08:01:01.681992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeCopyTest,				#isMetaSide : false			},			#name : #testCopyDelegate,			#protocol : #tests,			#sourceCode : 'testCopyDelegate\r\t| node nodeCopy |\r\tnode := $a asPParser wrapped.\r\t\r\tnodeCopy := node copy.\r\t\r\tself assert: node equals: nodeCopy.\r\tself assert: node ~~ nodeCopy.\r\t\r\tself assert: node child == nodeCopy child.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2488' ],		#self : OmReference [ '2489' ],		#time : DateAndTime [ '2017-12-12T08:01:01.682992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeCopyTest,				#isMetaSide : false			},			#name : #testCopyProperties,			#protocol : #tests,			#sourceCode : 'testCopyProperties\r\t| node nodeCopy |\r\tnode := $a asPParser.\r\tnode propertyAt: #foo put: #bar.\r\t\r\tnodeCopy := node copy.\r\t\r\tself assert: node equals: nodeCopy.\r\r\tself assert: node properties equals: nodeCopy properties.\r\tself assert: node properties ~~ nodeCopy properties.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2489' ],		#self : OmReference [ '2490' ],		#time : DateAndTime [ '2017-12-12T08:01:01.683992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeCopyTest,				#isMetaSide : false			},			#name : #testDuplicateDelegate,			#protocol : #tests,			#sourceCode : 'testDuplicateDelegate\r\t| node nodeCopy |\r\tnode := $a asPParser wrapped.\r\t\r\tnodeCopy := node duplicate.\r\t\r\tself assert: node equals: nodeCopy.\r\tself assert: node ~~ nodeCopy.\r\t\r\tself assert: node child equals: nodeCopy child.\r\tself assert: node child ~~ nodeCopy child.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2490' ],		#self : OmReference [ '2491' ],		#time : DateAndTime [ '2017-12-12T08:01:01.684992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeCopyTest,				#isMetaSide : false			},			#name : #testDuplicateSequence,			#protocol : #tests,			#sourceCode : 'testDuplicateSequence\r\t| node nodeCopy |\r\tnode := $a asPParser, $b asPParser.\r\t\r\tnodeCopy := node duplicate.\r\t\r\tself assert: node equals: nodeCopy.\r\tself assert: node ~~ nodeCopy.\r\t\r\tself assert: node firstChild ~~ nodeCopy firstChild.\r\tself assert: node secondChild ~~ nodeCopy secondChild.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2491' ],		#self : OmReference [ '2492' ],		#time : DateAndTime [ '2017-12-12T08:01:01.685992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableDebug,			#protocol : #tests,			#sourceCode : 'testEnableDebug\r\tparser := PP2ExpressionGrammar new.\r\tparser enableDebug.\r\t\r\tself assert: parser allNodes allSatisfy: [ :node | node strategies size = 2 ].\r\tself assert: parser allNodes allSatisfy: [ :node |  node strategies first isDebugging ].\r\tself assert: parser allNodes noneSatisfy: [ :node |  node strategies second isDebugging ]\t',			#stamp : 'JanKurs 11/24/2016 07:18',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2492' ],		#self : OmReference [ '2493' ],		#time : DateAndTime [ '2017-12-12T08:01:01.686992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableDebugAndRecordingTwice,			#protocol : #tests,			#sourceCode : 'testEnableDebugAndRecordingTwice\r\tparser := PP2ExpressionGrammar new.\r\tparser enableDebug.\r\tparser enableRecording.\r\tparser enableDebug.\r\tparser enableRecording.\r\t\r\tself assert: parser allNodes allSatisfy: [ :node | node strategies size = 2 ].\r\tself assert: parser allNodes allSatisfy: [ :node |  node strategies first isDebugging ].\r\tself assert: parser allNodes allSatisfy: [ :node |  node strategies first isRecording ].\r\tself assert: parser allNodes noneSatisfy: [ :node |  node strategies second isDebugging ]\t.',			#stamp : 'JanKurs 11/24/2016 07:54',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2493' ],		#self : OmReference [ '2494' ],		#time : DateAndTime [ '2017-12-12T08:01:01.688992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableDebugAndRecordingTwiceOptimized,			#protocol : #tests,			#sourceCode : 'testEnableDebugAndRecordingTwiceOptimized\r\t| strategies |\r\tparser := PP2ExpressionGrammar new.\r\r\tparser optimize.\r\tparser enableDebug.\r\tparser enableRecording.\r\t\r\tstrategies := IdentityDictionary new.\r\tparser allNodesDo: [ :node | strategies at: node put: node strategies ].\r\t\r\tparser enableDebug.\r\tparser enableRecording.\r\t\r\tparser allNodesDo: [ :node | \r\t\tself assert: (strategies at: node) equals: node strategies.\r\t]',			#stamp : 'JanKurs 11/24/2016 07:57',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2494' ],		#self : OmReference [ '2495' ],		#time : DateAndTime [ '2017-12-12T08:01:01.689992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableDebugTwice,			#protocol : #tests,			#sourceCode : 'testEnableDebugTwice\r\tparser := PP2ExpressionGrammar new.\r\tparser enableDebug.\r\tparser enableDebug.\r\t\r\tself assert: parser allNodes allSatisfy: [ :node | node strategies size = 2 ].\r\tself assert: parser allNodes allSatisfy: [ :node |  node strategies first isDebugging ].\r\tself assert: parser allNodes noneSatisfy: [ :node |  node strategies second isDebugging ]\t',			#stamp : 'JanKurs 11/24/2016 07:18',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2495' ],		#self : OmReference [ '2496' ],		#time : DateAndTime [ '2017-12-12T08:01:01.690992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableRecordingCaches,			#protocol : #tests,			#sourceCode : 'testEnableRecordingCaches\r\tparser := PP2ExpressionGrammar new.\r\tparser optimize.\r\t\r\tparser enableRecording.\r\t\r\tself deny: parser collectCaches isEmpty.\r\tself assert: parser collectCaches allSatisfy: [ :c | c isRecording ].',			#stamp : 'JanKurs 11/24/2016 07:47',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2496' ],		#self : OmReference [ '2497' ],		#time : DateAndTime [ '2017-12-12T08:01:01.691992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableRecordingDebugInvocations,			#protocol : #tests,			#sourceCode : 'testEnableRecordingDebugInvocations\r\tparser := PP2ExpressionGrammar new.\r\tparser optimize.\r\t\r\tparser enableDebug.\r\tparser enableRecording.\r\t\r\tself assert: parser allNodes allSatisfy: [ :n | n strategy isRecording ].',			#stamp : 'JanKurs 11/24/2016 07:51',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2497' ],		#self : OmReference [ '2498' ],		#time : DateAndTime [ '2017-12-12T08:01:01.693992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableRecordingInvocations,			#protocol : #tests,			#sourceCode : 'testEnableRecordingInvocations\r\tparser := PP2ExpressionGrammar new.\r\tparser optimize.\r\t\r\tparser enableRecording.\r\t\r\tself flag: \'JK: Does not work right now, should implement?\'\r"\tself assert: parser allNodes allSatisfy: [ :n | n strategy isRecording ]."',			#stamp : 'JanKurs 11/24/2016 07:53',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2498' ],		#self : OmReference [ '2499' ],		#time : DateAndTime [ '2017-12-12T08:01:01.694992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeDebugTest,				#isMetaSide : false			},			#name : #testEnableRecordingRefreshCaches,			#protocol : #tests,			#sourceCode : 'testEnableRecordingRefreshCaches\r\tparser := PP2ExpressionGrammar new.\r\tparser optimize.\r\t\r\tparser enableRecording.\r\t\r\tself deny: parser collectCaches isEmpty.\r\tself assert: parser allCaches equals: parser collectCaches.',			#stamp : 'JanKurs 11/24/2016 07:48',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2499' ],		#self : OmReference [ '2500' ],		#time : DateAndTime [ '2017-12-12T08:01:01.695992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #'deny:equals:',			#protocol : #support,			#sourceCode : 'deny: anObject equals: anotherObject\r\tself assert: (anObject = anotherObject) not',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2500' ],		#self : OmReference [ '2501' ],		#time : DateAndTime [ '2017-12-12T08:01:01.696992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #testCycle,			#protocol : #tests,			#sourceCode : 'testCycle\r\tparserOne := PP2DelegateNode new.\r\tparserTwo := PP2DelegateNode new.\r\t\r\tparserOne child: parserTwo.\r\tparserTwo child: parserOne.\r\t\r\tself deny:  parserOne == parserTwo.\r\tself assert: parserOne equals: parserTwo.\r\t\r\tself assert: parserOne hash equals: parserTwo hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2501' ],		#self : OmReference [ '2502' ],		#time : DateAndTime [ '2017-12-12T08:01:01.697992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #testPossesiveRepeating,			#protocol : #tests,			#sourceCode : 'testPossesiveRepeating\r\tparserOne := #space asPParser star.\r\tparserTwo := #space asPParser star.\r\t\r\tself deny:  \t parserOne == parserTwo.\r\tself assert: parserOne equals: parserTwo.\r\t\r\tself assert: parserOne hash equals: parserTwo hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2502' ],		#self : OmReference [ '2503' ],		#time : DateAndTime [ '2017-12-12T08:01:01.699992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #testPossesiveRepeatingDifferent,			#protocol : #tests,			#sourceCode : 'testPossesiveRepeatingDifferent\r\tparserOne := #space asPParser star.\r\tparserTwo := #space asPParser plus.\r\t\r\tself deny: parserOne == parserTwo.\r\tself deny: parserOne equals: parserTwo.\r\t\r\tself deny: parserOne hash equals: parserTwo hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2503' ],		#self : OmReference [ '2504' ],		#time : DateAndTime [ '2017-12-12T08:01:01.700992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #testPossesiveRepeatingDifferent2,			#protocol : #tests,			#sourceCode : 'testPossesiveRepeatingDifferent2\r\tparserOne := #space asPParser star.\r\tparserTwo := #blank asPParser star.\r\t\r\tself deny: parserOne == parserTwo.\r\tself deny: parserOne equals: parserTwo.\r\t\r\tself deny: parserOne hash equals: parserTwo hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2504' ],		#self : OmReference [ '2505' ],		#time : DateAndTime [ '2017-12-12T08:01:01.701992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #testPredicateObject,			#protocol : #tests,			#sourceCode : 'testPredicateObject\r\tparserOne := #space asPParser.\r\tparserTwo := #space asPParser.\r\t\r\tself deny:   parserOne == parserTwo.\r\tself assert: parserOne equals: parserTwo.\r\t\r\tself assert: parserOne hash equals: parserTwo hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2505' ],		#self : OmReference [ '2506' ],		#time : DateAndTime [ '2017-12-12T08:01:01.702992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeEqualityTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #tests,			#sourceCode : 'testSequence\r\tparserOne := $a asPParser, #word asPParser.\r\tparserTwo := $a asPParser, #word asPParser.\r\t\r\tself deny:   parserOne == parserTwo.\r\tself assert: parserOne equals: parserTwo.\r\t\r\tself assert: parserOne hash equals: parserTwo hash.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2506' ],		#self : OmReference [ '2507' ],		#time : DateAndTime [ '2017-12-12T08:01:01.703992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeTransformationTest,				#isMetaSide : false			},			#name : #testDelegateReplace,			#protocol : #tests,			#sourceCode : 'testDelegateReplace\r\t| one other delegate |\r\tone := $a asPParser.\r\tother := $b asPParser.\r\t\r\tdelegate := one token.\r\tself assert: delegate children first == one.\r\tself deny: delegate children first == other.\r\t\r\tdelegate replace: other with: one.\r\tself assert: delegate children first == one.\r\tself deny: delegate children first == other.\r\t\r\tdelegate replace: one with: other.\r\tself deny: delegate children first == one.\r\tself assert: delegate children first == other',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2507' ],		#self : OmReference [ '2508' ],		#time : DateAndTime [ '2017-12-12T08:01:01.704992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeTransformationTest,				#isMetaSide : false			},			#name : #testListReplace,			#protocol : #tests,			#sourceCode : 'testListReplace\r\t| one other another list |\r\tone := $a asPParser.\r\tother := $b asPParser.\r\tanother := $c asPParser.\r\tlist := one , another , one.\r\tself assert: list children first == one.\r\tself assert: list children second == another.\r\tself assert: list children last == one.\r\t\r\tlist replace: other with: one.\r\tself assert: list children first == one.\r\tself assert: list children second == another.\r\tself assert: list children last == one.\r\t\r\tlist replace: one with: other.\r\tself assert: list children first == other.\r\tself assert: list children second == another.\r\tself assert: list children last == other.\r\t\r\tlist replace: another with: one.\r\tself assert: list children first == other.\r\tself assert: list children second == one.\r\tself assert: list children last == other',			#stamp : 'JanKurs 9/9/2017 17:08',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2508' ],		#self : OmReference [ '2509' ],		#time : DateAndTime [ '2017-12-12T08:01:01.705992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeTransformationTest,				#isMetaSide : false			},			#name : #testSeaReplace,			#protocol : #tests,			#sourceCode : 'testSeaReplace\r\t| island sea beforeWater afterWater otherIsland otherBeforeWater otherAfterWater |\r\r\tisland := $a asPParser.\r\tsea := island sea.\r\tbeforeWater := sea beforeWater.\r\tafterWater := sea afterWater.\r\t\r\totherIsland := $b asPParser.\r\totherBeforeWater := $c asPParser.\r\totherAfterWater := $d asPParser.\t\r\t\r\tself assert: sea children first == beforeWater.\r\tself assert: sea children second == island.\r\tself assert: sea children third == afterWater.\r\t\r\tsea replace: island with: otherIsland.\r\tself assert: sea children second == otherIsland.\r\tself assert: sea children first == beforeWater.\r\tself assert: sea children third == afterWater.\r\t\r\tsea replace: beforeWater  with: otherBeforeWater.\r\tself assert: sea children first == otherBeforeWater.\r\t\r\tsea replace: afterWater  with: otherAfterWater.\r\tself assert: sea children third == otherAfterWater.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2509' ],		#self : OmReference [ '2510' ],		#time : DateAndTime [ '2017-12-12T08:01:01.706992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeTransformationTest,				#isMetaSide : false			},			#name : #testTrimmingReplace,			#protocol : #tests,			#sourceCode : 'testTrimmingReplace\r\t| one trimmer trimming other otherTrimmer |\r\r\tone := $a asPParser.\r\ttrimmer := $b asPParser.\r\t\r\tother := $c asPParser.\r\totherTrimmer := $d asPParser.\r\t\r\ttrimming := one trim: trimmer.\r\r\tself assert: trimming children first == trimmer.\r\tself assert: trimming children second == one.\r\tself deny: trimming children first == otherTrimmer.\r\tself deny: trimming children second == other.\r\t\r\ttrimming replace: trimmer with: otherTrimmer.\r\tself assert: trimming children first == otherTrimmer.\r\tself assert: trimming children second == one.\r\t\r\ttrimming replace: one with: other.\r\tself assert: trimming children second == other',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2510' ],		#self : OmReference [ '2511' ],		#time : DateAndTime [ '2017-12-12T08:01:01.707992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\tsuper setUp.\r\t\r\tvisitor := PP2MockNoopVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2511' ],		#self : OmReference [ '2512' ],		#time : DateAndTime [ '2017-12-12T08:01:01.709992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitorTest,				#isMetaSide : false			},			#name : #testVisitCharacter,			#protocol : #tests,			#sourceCode : 'testVisitCharacter\r\tparser := $a asPParser.\r\tresult := visitor visit: parser.\r\t\r\tself assert: result equals: visitor',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2512' ],		#self : OmReference [ '2513' ],		#time : DateAndTime [ '2017-12-12T08:01:01.710992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitorTest,				#isMetaSide : false			},			#name : #testVisitCycle,			#protocol : #'as yet unclassified',			#sourceCode : 'testVisitCycle\r\t| delegate |\r\tdelegate := PP2DelegateNode new.\r\tparser := delegate, delegate.\r\tdelegate child: parser.\r\t\r\tresult := visitor visit: parser.\r\t\r\tself assert: result equals: visitor.\r\t\r\tself assert: (visitor closedSet includes: (PP2NoopContext with: parser)). \r\tself assert: (visitor closedSet includes: (PP2NoopContext with: delegate)). \r\tself assert: (visitor openSet isEmpty). \t\r\t\r\tself assert: visitor visitOrder size equals: 2.\r\tself assert: visitor visitOrder first equals: parser.\r\tself assert: visitor visitOrder second equals: delegate.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2513' ],		#self : OmReference [ '2514' ],		#time : DateAndTime [ '2017-12-12T08:01:01.711992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitorTest,				#isMetaSide : false			},			#name : #testVisitDelegate,			#protocol : #'as yet unclassified',			#sourceCode : 'testVisitDelegate\r\tparser := $a asPParser wrapped.\r\tresult := visitor visit: parser.\r\t\r\tself assert: result equals: visitor',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2514' ],		#self : OmReference [ '2515' ],		#time : DateAndTime [ '2017-12-12T08:01:01.712992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NoopVisitorTest,				#isMetaSide : false			},			#name : #testVisitSequence,			#protocol : #'as yet unclassified',			#sourceCode : 'testVisitSequence\r\tparser := $a asPParser, $b asPParser.\r\tresult := visitor visit: parser.\r\t\r\tself assert: result equals: visitor',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2515' ],		#self : OmReference [ '2516' ],		#time : DateAndTime [ '2017-12-12T08:01:01.713992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testAnyStarLazyLiteralObject,			#protocol : #tests,			#sourceCode : 'testAnyStarLazyLiteralObject\r\tparser := #any asPParser starLazy, $a asPParser.\r\t\r\tparser optimize.\r\t\r\tself assert: parser firstChild strategy isKindOf: PP2AnyStarLazyLiteralObject.',			#stamp : 'JanKurs 12/27/2016 16:17',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2516' ],		#self : OmReference [ '2517' ],		#time : DateAndTime [ '2017-12-12T08:01:01.715992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testAnyStarLazyPredicateObject,			#protocol : #tests,			#sourceCode : 'testAnyStarLazyPredicateObject\r\tparser := #any asPParser starLazy, #word asPParser.\r\t\r\tparser optimize.\r\t\r\tself assert: parser firstChild strategy isKindOf: PP2AnyStarLazyPredicateObject.',			#stamp : 'JanKurs 12/27/2016 16:16',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2517' ],		#self : OmReference [ '2518' ],		#time : DateAndTime [ '2017-12-12T08:01:01.716992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testBypass,			#protocol : #tests,			#sourceCode : 'testBypass\r\tparser := #letter asPParser wrapped star optimize.\r\t\r\tself assert: parser strategy child isKindOf: PP2PredicateObjectNode',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2518' ],		#self : OmReference [ '2519' ],		#time : DateAndTime [ '2017-12-12T08:01:01.717992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testCommonPrefix,			#protocol : #tests,			#sourceCode : 'testCommonPrefix\r\t| prefixOne prefixTwo |\r\tprefixOne := #letter asPParser star wrapped flatten name: \'id\'.\r\tprefixTwo := #letter asPParser star wrapped flatten name: \'id\'.\r\t\r\tparser := (prefixOne token trim) / ((prefixTwo, $a asPParser) token trim).\r\t\r\tparser optimize.\r\t\r\tself assert: prefixOne strategy isKindOf: PP2Cache.\r\tself assert: prefixTwo strategy isKindOf: PP2Cache.\r\t\r\tself assert: prefixOne strategy == prefixTwo strategy.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2519' ],		#self : OmReference [ '2520' ],		#time : DateAndTime [ '2017-12-12T08:01:01.718992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testIdentifier,			#protocol : #tests,			#sourceCode : 'testIdentifier\r\tparser := #letter asPParser, #word asPParser star.\r\t\r\tparser optimize.\r\t\r\tself assert: parser strategy isKindOf: PP2SequenceOfTwo.\r\tself assert: parser secondChild strategy isKindOf: PP2StarPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2520' ],		#self : OmReference [ '2521' ],		#time : DateAndTime [ '2017-12-12T08:01:01.720992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testIdentifierToken,			#protocol : #tests,			#sourceCode : 'testIdentifierToken\r\tparser := (#letter asPParser, #word asPParser star) token.\r\t\r\tparser optimize.\r\t\r\tself assert: parser child strategy isKindOf: PP2SequenceOfTwoRecognizer.\r\tself assert: parser child secondChild strategy isKindOf: PP2StarPredicateObjectRecognizer.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2521' ],		#self : OmReference [ '2522' ],		#time : DateAndTime [ '2017-12-12T08:01:01.721992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testIdentifierTrimmingToken,			#protocol : #tests,			#sourceCode : 'testIdentifierTrimmingToken\r\tparser := (#letter asPParser, #word asPParser star) token trim.\r\t\r\tparser optimize.\r\t\r\tself assert: parser strategy isKindOf: PP2TrimmingToken.\r\tself assert: parser strategy tokenChild strategy isKindOf: PP2SequenceOfTwoRecognizer.\r\tself assert: parser strategy tokenChild firstChild strategy isKindOf: PP2PredicateObjectRecognizer.\r\tself assert: parser strategy tokenChild secondChild strategy isKindOf: PP2StarPredicateObjectRecognizer.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2522' ],		#self : OmReference [ '2523' ],		#time : DateAndTime [ '2017-12-12T08:01:01.722992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testMemoization,			#protocol : #tests,			#sourceCode : 'testMemoization\r\t| id |\r\tid := #any asPParser, #word asPParser star.\r\tid memoize.\r\t\r\tparser := id / id optional.\r\tparser optimize.\r\t\r\tself assert: id strategy isKindOf: PP2Packrat.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2523' ],		#self : OmReference [ '2524' ],		#time : DateAndTime [ '2017-12-12T08:01:01.724992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testTrimming,			#protocol : #tests,			#sourceCode : 'testTrimming\r\tparser := #letter asPParser trim optimize.\r\t\r\tself assert: parser trimmer strategy isKindOf: PP2TrimmingCache.\r\tself assert: parser trimmer strategy strategy isKindOf: PP2StarPredicateObjectRecognizer.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2524' ],		#self : OmReference [ '2525' ],		#time : DateAndTime [ '2017-12-12T08:01:01.725992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2OptimizationIntegrationTest,				#isMetaSide : false			},			#name : #testTrimmingToken,			#protocol : #tests,			#sourceCode : 'testTrimmingToken\r\tparser := #letter asPParser trim optimize.\r\t\r\tself assert: parser trimmer strategy isKindOf: PP2TrimmingCache.\r\tself assert: parser trimmer strategy strategy isKindOf: PP2StarPredicateObjectRecognizer.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2525' ],		#self : OmReference [ '2526' ],		#time : DateAndTime [ '2017-12-12T08:01:01.726992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #'assertMemoized:',			#protocol : #asserting,			#sourceCode : 'assertMemoized: node\r\r\tvisitor visit: node.\r\t\r\tself assert: (node isMemoized).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2526' ],		#self : OmReference [ '2527' ],		#time : DateAndTime [ '2017-12-12T08:01:01.727992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #'denyMemoized:',			#protocol : #asserting,			#sourceCode : 'denyMemoized: node\r\r\tvisitor visit: node.\r\t\r\tself deny: (node isMemoized).',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2527' ],		#self : OmReference [ '2528' ],		#time : DateAndTime [ '2017-12-12T08:01:01.728992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2PackratVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2528' ],		#self : OmReference [ '2529' ],		#time : DateAndTime [ '2017-12-12T08:01:01.729992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #testMemoize,			#protocol : #tests,			#sourceCode : 'testMemoize\r\tparser := $a asPParser memoize.\r\t\r\tself assertMemoized: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2529' ],		#self : OmReference [ '2530' ],		#time : DateAndTime [ '2017-12-12T08:01:01.730992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #testMemoizeMatch,			#protocol : #tests,			#sourceCode : 'testMemoizeMatch\r\tparser := $a asPParser match memoize.\r\t\r\tself assertMemoized: parser.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2530' ],		#self : OmReference [ '2531' ],		#time : DateAndTime [ '2017-12-12T08:01:01.732992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #testMemoizeMemoized,			#protocol : #tests,			#sourceCode : 'testMemoizeMemoized\r\tparser := $a asPParser memoize memoize.\r\t\r\tself assertMemoized: parser.\r\tself assert: parser strategies size equals: 2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2531' ],		#self : OmReference [ '2532' ],		#time : DateAndTime [ '2017-12-12T08:01:01.733992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #testMemoizePop,			#protocol : #tests,			#sourceCode : 'testMemoizePop\r\tparser := $a asPParser pop memoize.\r\t\r\tself denyMemoized: parser.\r\tself assert: parser warnings size equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2532' ],		#self : OmReference [ '2533' ],		#time : DateAndTime [ '2017-12-12T08:01:01.734992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2PackratVisitorTest,				#isMetaSide : false			},			#name : #testMemoizePush,			#protocol : #tests,			#sourceCode : 'testMemoizePush\r\tparser := $a asPParser push memoize.\r\t\r\tself denyMemoized: parser.\r\tself assert: parser warnings size equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2533' ],		#self : OmReference [ '2534' ],		#time : DateAndTime [ '2017-12-12T08:01:01.735992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #'assert:includes:',			#protocol : #support,			#sourceCode : 'assert: aCollection includes: anObject\r\tself assert: (aCollection includes: anObject) ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2534' ],		#self : OmReference [ '2535' ],		#time : DateAndTime [ '2017-12-12T08:01:01.736992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2ParentAnalysisVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2535' ],		#self : OmReference [ '2536' ],		#time : DateAndTime [ '2017-12-12T08:01:01.737992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #testCycle,			#protocol : #tests,			#sourceCode : 'testCycle\r\t|  delegateOne delegateTwo |\r\r\tdelegateOne := PP2DelegateNode new.\r\tdelegateTwo := PP2DelegateNode new.\r\tdelegateOne child: delegateTwo.\r\tdelegateTwo child: delegateOne.\r\t\r\tvisitor visit: delegateOne.\r\t\r\tself assert: delegateOne parents size equals: 1.\r\tself assert: delegateOne parents includes: delegateTwo.\r\r\tself assert: delegateTwo parents size equals: 1.\r\tself assert: delegateTwo parents includes: delegateOne.\r\t\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2536' ],		#self : OmReference [ '2537' ],		#time : DateAndTime [ '2017-12-12T08:01:01.738992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #testDeepParent,			#protocol : #tests,			#sourceCode : 'testDeepParent\r\t| superParent |\r\tparser := $a asPParser.\r\tparent := parser wrapped.\r\tsuperParent := parent wrapped.\r\t\r\tvisitor visit: superParent.\r\t\r\tself assert: parser parents anyOne equals: parent.\r\tself assert: parent parents anyOne equals: superParent.\r\tself assert: superParent parents isEmpty.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2537' ],		#self : OmReference [ '2538' ],		#time : DateAndTime [ '2017-12-12T08:01:01.740992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #testMultipleParents,			#protocol : #tests,			#sourceCode : 'testMultipleParents\r\t| parentOne parentTwo superParent |\r\r\tparser := $a asPParser.\r\tparentOne := parser wrapped.\r\tparentTwo := parser star.\r\tsuperParent := parentOne, parentTwo.\r\t\r\tvisitor visit: superParent.\r\t\r\tself assert: parser parents size equals: 2.\r\tself assert: parser parents includes: parentOne.\r\tself assert: parser parents includes: parentTwo.\r\t\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2538' ],		#self : OmReference [ '2539' ],		#time : DateAndTime [ '2017-12-12T08:01:01.741992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #testNoParent,			#protocol : #tests,			#sourceCode : 'testNoParent\r\tparser := $a asPParser.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser parents isEmpty.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2539' ],		#self : OmReference [ '2540' ],		#time : DateAndTime [ '2017-12-12T08:01:01.742992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #testParent,			#protocol : #tests,			#sourceCode : 'testParent\r\tparser := $a asPParser.\r\tparent := parser wrapped.\r\t\r\tvisitor visit: parent.\r\t\r\tself assert: parser parents size equals: 1.\r\tself assert: parent parents isEmpty.\r\tself assert: parser parents includes: parent.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2540' ],		#self : OmReference [ '2541' ],		#time : DateAndTime [ '2017-12-12T08:01:01.743992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParentAnalysisVisitorTest,				#isMetaSide : false			},			#name : #testParentOfSequence,			#protocol : #tests,			#sourceCode : 'testParentOfSequence\r\t| parserOne parserTwo |\r\tparserOne := $a asPParser.\r\tparserTwo := $b asPParser.\r\tparent := parserOne, parserTwo.\r\t\r\tvisitor visit: parent.\r\t\r\tself assert: parserOne parents size equals: 1.\r\tself assert: parserOne parents includes: parent.\r\tself assert: parserTwo parents size equals: 1.\r\tself assert: parserTwo parents includes: parent.\r\tself assert: parent parents isEmpty.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2541' ],		#self : OmReference [ '2542' ],		#time : DateAndTime [ '2017-12-12T08:01:01.744992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuardTest,				#isMetaSide : false			},			#name : #'guardOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'guardOn: parser\r\t| guard |\r\tguard := PP2ParsingGuard on: parser.\r\tguard classification: (Array new: 255 withAll: true).\r\tguard retval: (PP2Failure message: \'ooups\').\r\t^ guard\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2542' ],		#self : OmReference [ '2543' ],		#time : DateAndTime [ '2017-12-12T08:01:01.745992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuardTest,				#isMetaSide : false			},			#name : #testParseOn,			#protocol : #'as yet unclassified',			#sourceCode : 'testParseOn\r\t| parser context guard |\r\tparser := #letter asPParser.\r\tguard := self guardOn: parser.\r\tcontext := \'a\' asPetit2Stream asPetit2Context.\r\t\t\r\tself assert: (guard parseOn: context) isPetit2Success',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2543' ],		#self : OmReference [ '2544' ],		#time : DateAndTime [ '2017-12-12T08:01:01.746992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuardTest,				#isMetaSide : false			},			#name : #testParseOnFailure,			#protocol : #'as yet unclassified',			#sourceCode : 'testParseOnFailure\r\t| parser context guard |\r\tparser := #letter asPParser.\r\tguard := self guardOn: parser.\r\tcontext := \'1\' asPetit2Stream asPetit2Context.\r\t\r\tself assert: (guard parseOn: context) isPetit2Failure',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2544' ],		#self : OmReference [ '2545' ],		#time : DateAndTime [ '2017-12-12T08:01:01.748992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParsingGuardTest,				#isMetaSide : false			},			#name : #testParseOnUnicode,			#protocol : #'as yet unclassified',			#sourceCode : 'testParseOnUnicode\r\t| parser context guard |\r\tparser := #letter asPParser.\r\tguard := self guardOn: parser.\r\tcontext := \'α\' asPetit2Stream asPetit2Context.\r\t\r\tself assert: (guard parseOn: context) isPetit2Success.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2545' ],		#self : OmReference [ '2546' ],		#time : DateAndTime [ '2017-12-12T08:01:01.749992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2RecognizerVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2546' ],		#self : OmReference [ '2547' ],		#time : DateAndTime [ '2017-12-12T08:01:01.751992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testFlatten,			#protocol : #tests,			#sourceCode : 'testFlatten\r\t| flattened |\r\tparser := #letter asPParser star.\r\tparser strategy: (PP2StarPredicateObject on: parser).\r\tflattened := parser flatten.\r\t\r\tself visit: flattened.\r\t\r\tself assert: parser strategy isKindOf: PP2StarPredicateObjectRecognizer ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2547' ],		#self : OmReference [ '2548' ],		#time : DateAndTime [ '2017-12-12T08:01:01.752992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testPredicateObject,			#protocol : #tests,			#sourceCode : 'testPredicateObject\r\tparser := #letter asPParser.\r\ttoken := parser token.\r\t\r\tself visit: token.\r\t\r\tself assert: parser strategy isKindOf: PP2PredicateObjectRecognizer  ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2548' ],		#self : OmReference [ '2549' ],		#time : DateAndTime [ '2017-12-12T08:01:01.753992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfTwo,			#protocol : #tests,			#sourceCode : 'testSequenceOfTwo\r\tparser := $a asPParser, $b asPParser.\r\tparser strategy: (PP2SequenceOfTwo on: parser).\r\ttoken := parser token.\r\t\r\tself visit: token.\r\t\r\tself assert: parser strategy isKindOf: PP2SequenceOfTwoRecognizer ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2549' ],		#self : OmReference [ '2550' ],		#time : DateAndTime [ '2017-12-12T08:01:01.754992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testToken,			#protocol : #tests,			#sourceCode : 'testToken\r\tparser := #letter asPParser star.\r\tparser strategy: (PP2StarPredicateObject on: parser).\r\ttoken := parser token.\r\t\r\tself visit: token.\r\t\r\tself assert: parser strategy isKindOf: PP2StarPredicateObjectRecognizer ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2550' ],		#self : OmReference [ '2551' ],		#time : DateAndTime [ '2017-12-12T08:01:01.755992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testTwoParents,			#protocol : #tests,			#sourceCode : 'testTwoParents\r\tparser := #letter asPParser star.\r\tparser strategy: (PP2StarPredicateObject on: parser).\r\r\ttoken := parser token.\r\tsequence := token, parser.\r\t\r\tself visit: sequence.\r\t\r\tself assert: parser warnings size equals: 1.\r\tself assert: parser strategy isKindOf: PP2StarPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2551' ],		#self : OmReference [ '2552' ],		#time : DateAndTime [ '2017-12-12T08:01:01.757992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testTwoParentsDifferentContext,			#protocol : #tests,			#sourceCode : 'testTwoParentsDifferentContext\r\t| wrapped |\r\tparser := #letter asPParser star.\r\tparser strategy: (PP2StarPredicateObject on: parser).\r\twrapped := parser wrapped.\r\r\ttoken := wrapped token.\r\tsequence := wrapped, token.\r\t\r\tself visit: sequence.\r\t\r\tself assert: parser warnings size equals: 1.\r\tself assert: parser strategy isKindOf: PP2StarPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2552' ],		#self : OmReference [ '2553' ],		#time : DateAndTime [ '2017-12-12T08:01:01.758992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #testTwoParentsNoWarning,			#protocol : #tests,			#sourceCode : 'testTwoParentsNoWarning\r\t| tokenOne tokenTwo |\r\tparser := #letter asPParser star.\r\tparser strategy: (PP2StarPredicateObject on: parser).\r\r\ttokenOne := parser token.\r\ttokenTwo := parser token.\r\tsequence := tokenOne, tokenTwo.\r\t\r\tself visit: sequence.\r\t\r\tself assert: parser warnings isEmpty.\r\tself assert: parser strategy isKindOf: PP2StarPredicateObjectRecognizer.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2553' ],		#self : OmReference [ '2554' ],		#time : DateAndTime [ '2017-12-12T08:01:01.759992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecognizerVisitorTest,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #support,			#sourceCode : 'visit: node\r\tvisitor doPass: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2554' ],		#self : OmReference [ '2555' ],		#time : DateAndTime [ '2017-12-12T08:01:01.761992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingCacheTest,				#isMetaSide : false			},			#name : #testInvocations,			#protocol : #tests,			#sourceCode : 'testInvocations\r\t| cachedParser parser result |\r\tcachedParser := $a asPParser star.\r\tcachedParser strategy: cachedParser strategy cache recording.\r\t\r\tparser := cachedParser and, cachedParser.\r\t\r\tresult := parser parse: \'aaa\' withContext: PP2RecordingContext new.\r\t\r\tself assert: result isPetit2Success.\r\tself assert: cachedParser strategy invocations equals: 2.\r\tself assert: cachedParser strategy hits equals: 1.\r\t\r',			#stamp : 'JanKurs 11/22/2016 07:57',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2555' ],		#self : OmReference [ '2556' ],		#time : DateAndTime [ '2017-12-12T08:01:01.762992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #'contextOn:',			#protocol : #requirements,			#sourceCode : 'contextOn: aString\r\t^ PP2RecordingContext on: aString',			#stamp : 'JanKurs 11/22/2016 07:25',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2556' ],		#self : OmReference [ '2557' ],		#time : DateAndTime [ '2017-12-12T08:01:01.763992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testAsFrequencyTable,			#protocol : #'tests - profiling',			#sourceCode : 'testAsFrequencyTable\r\t| parser context table |\r\tparser := PP2ExpressionParser new optimize enableDebug.\r\tcontext := self contextOn: \'1+2\'.\r\t\r\tparser parseWithContext: context.\r\t\r\ttable := context asFrequencyTable.\r\tself assert: (table collect: #first) noneSatisfy: [ :e | e isNil ].\r\tself assert: (table collect: #second) allSatisfy: [ :e | e isNumber ].\r\tself assert: (table collect: #third) allSatisfy: [ :e | e isNumber ].\r\t\r\t"This comes from the parseAdaptableWithContext, when remember is called"\r\tself assert: (context eventsTrace strategies) anySatisfy: [ :e | e isKindOf: PP2NilStrategy  ]',			#stamp : 'JanKurs 11/20/2016 12:23',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2557' ],		#self : OmReference [ '2558' ],		#time : DateAndTime [ '2017-12-12T08:01:01.764992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testDebugResultDebug,			#protocol : #'tests - debugging',			#sourceCode : 'testDebugResultDebug\r\t| context parser resultContext |\r\tcontext := PP2RecordingContext new.\r\t\r\tparser := \'foo\' asPParser star.\r\tresultContext := parser debug: \'foofoofoo\' withContext: context.\r\t\r\tself assert: resultContext returnValue isPetit2Success.\r\tself assert: context debugResult isNil not.\r\tself assert: context debugResult children size equals: 1.',			#stamp : 'JanKurs 11/22/2016 07:25',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2558' ],		#self : OmReference [ '2559' ],		#time : DateAndTime [ '2017-12-12T08:01:01.765992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testDebugResultNoDebug,			#protocol : #'tests - debugging',			#sourceCode : 'testDebugResultNoDebug\r\t| context parser resultContext |\r\tcontext := PP2RecordingContext new.\r\t\r\tparser := \'foo\' asPParser star.\r\tresultContext := parser parse: \'foofoofoo\' withContext: context.\r\t\r\tself assert: resultContext returnValue isPetit2Success.\r\tself assert: context debugResult isNil not.\r\tself assert: context debugResult children size equals: 1.',			#stamp : 'JanKurs 11/22/2016 07:25',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2559' ],		#self : OmReference [ '2560' ],		#time : DateAndTime [ '2017-12-12T08:01:01.767992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testFurthestPosition,			#protocol : #tests,			#sourceCode : 'testFurthestPosition\r\t| context parser |\r\tcontext := \'a\' asReparsableContext.\r\tparser := $a asPParser.\r\tparser parseWithContext: context.\r\t\r\tself assert: context furthestPosition equals: 1.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2560' ],		#self : OmReference [ '2561' ],		#time : DateAndTime [ '2017-12-12T08:01:01.768992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testFurthestPositionBactrack,			#protocol : #tests,			#sourceCode : 'testFurthestPositionBactrack\r\t| parser context |\r\tparser := \'a\' asPParser star, \'b\' asPParser.\r\tcontext := parser parseWithContext: \'aaaac\' asReparsableContext.\r\r\tself assert: context furthestPosition equals: 5.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2561' ],		#self : OmReference [ '2562' ],		#time : DateAndTime [ '2017-12-12T08:01:01.769992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testFurthestPositionLiteralChoice,			#protocol : #tests,			#sourceCode : 'testFurthestPositionLiteralChoice\r\t| context parser |\r\tcontext := \'a\' asReparsableContext.\r\tparser := \'aaa\' asPParser / \'a\' asPParser.\r\tparser parseWithContext: context.\r\t\r\tself assert: context furthestPosition equals: 3.',			#stamp : ' 11/16/2016 18:57:26',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2562' ],		#self : OmReference [ '2563' ],		#time : DateAndTime [ '2017-12-12T08:01:01.770992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testMultipleProfilingStrategies,			#protocol : #'tests - profiling',			#sourceCode : 'testMultipleProfilingStrategies\r\t| cache parser context debugging |\r\r\tparser := #letter asPParser.\r\tcache := parser strategy cache.\r\tdebugging := PP2DebuggingStrategy on: cache.\r\tparser strategy: debugging.\r\t\r\tcontext := self contextOn: \'\'.\r\tcontext parser: parser.\r\t\r\tself assert: parser strategies size equals: 3.\r\tself assert: (parser strategies first isKindOf: PP2RecordingDebuggingStrategy).\r\tself assert: (parser strategies second isKindOf: PP2RecordingCache).\r\t',			#stamp : 'JanKurs 11/22/2016 07:22',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2563' ],		#self : OmReference [ '2564' ],		#time : DateAndTime [ '2017-12-12T08:01:01.772992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testParserRefreshCache,			#protocol : #'tests - profiling',			#sourceCode : 'testParserRefreshCache\r\t| parser context |\r\r\tparser := (#letter asPParser plus token trim, #word asPParser star token trim) flatten.\r\tparser optimize.\r\tself assert:( parser allCaches noneSatisfy: [:c | c isRecording ]).\r\r\t\r\tcontext := self contextOn: \'\'.\r\tcontext parser: parser.\r\tself assert: parser allCaches size equals: 2.\r\tself assert:( parser allCaches allSatisfy: [:c | c isRecording ]).\r\t',			#stamp : 'JanKurs 11/22/2016 07:34',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2564' ],		#self : OmReference [ '2565' ],		#time : DateAndTime [ '2017-12-12T08:01:01.774992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testRecordingCache,			#protocol : #'tests - profiling',			#sourceCode : 'testRecordingCache\r\t| parser context |\r\r\tparser := #letter asPParser.\r\tparser strategy: parser strategy cache.\r\t\r\tcontext := self contextOn: \'\'.\r\tcontext parser: parser.\r\tself assert: parser strategies size equals: 2.\r\tself assert: (parser strategy isKindOf: PP2RecordingCache).\r\t',			#stamp : 'JanKurs 11/22/2016 07:42',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2565' ],		#self : OmReference [ '2566' ],		#time : DateAndTime [ '2017-12-12T08:01:01.775992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2RecordingContextTest,				#isMetaSide : false			},			#name : #testSwitchToDebugging,			#protocol : #'tests - debugging',			#sourceCode : 'testSwitchToDebugging\r\t| parser context |\r\r\tparser := (#letter asPParser plus token trim, #word asPParser star token trim) flatten.\r\tparser optimize.\r\tself assert:( parser allCaches noneSatisfy: [:c | c isRecording ]).\r\r\t\r\tcontext := self contextOn: \'\'.\r\tcontext parser: parser.\r\tself assert: parser allCaches size equals: 2.\r\tself assert:( parser allCaches allSatisfy: [:c | c isRecording ]).\r\t',			#stamp : 'JanKurs 11/22/2016 07:34',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2566' ],		#self : OmReference [ '2567' ],		#time : DateAndTime [ '2017-12-12T08:01:01.776992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContextTest,				#isMetaSide : false			},			#name : #testFurthestPosition,			#protocol : #'as yet unclassified',			#sourceCode : 'testFurthestPosition\r\tcontext := \'a\' asReparsableContext.\r\tparser := $a asPParser.\r\tparser parseWithContext: context.\r\t\r\tself assert: context furthestPosition equals: 1.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2567' ],		#self : OmReference [ '2568' ],		#time : DateAndTime [ '2017-12-12T08:01:01.777992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContextTest,				#isMetaSide : false			},			#name : #testFurthestPositionBactrack,			#protocol : #'as yet unclassified',			#sourceCode : 'testFurthestPositionBactrack\r\tparser := \'a\' asPParser star, \'b\' asPParser.\r\tcontext := parser parseWithContext: \'aaaac\' asReparsableContext.\r\r\tself assert: context furthestPosition equals: 5.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2568' ],		#self : OmReference [ '2569' ],		#time : DateAndTime [ '2017-12-12T08:01:01.778992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableContextTest,				#isMetaSide : false			},			#name : #testFurthestPositionLiteralChoice,			#protocol : #'as yet unclassified',			#sourceCode : 'testFurthestPositionLiteralChoice\r\tcontext := \'a\' asReparsableContext.\r\tparser := \'aaa\' asPParser / \'a\' asPParser.\r\tparser parseWithContext: context.\r\t\r\tself assert: context furthestPosition equals: 3.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2569' ],		#self : OmReference [ '2570' ],		#time : DateAndTime [ '2017-12-12T08:01:01.779992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableTest,				#isMetaSide : false			},			#name : #testMemoHit,			#protocol : #tests,			#sourceCode : 'testMemoHit\r\tmemoized := $a asPParser plus.\r\tmemoized strategy: (PP2Reparsable on: memoized strategy).\r\t\r\tparser := (memoized, $b asPParser) / (memoized, $c asPParser).\r\tparser setOptimized.\r\t\r\tcontext := parser parseWithContext: \'aac\' asReparsableContext.\r\t\r\tself assert: context debugResult allResults size equals: 11.\r\tself assert: context returnValue size equals: 2.\r\tself assert: context returnValue first size equals: 2.\r\tself assert: context returnValue first first equals: $a.\r\tself assert: context returnValue second equals: $c.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2570' ],		#self : OmReference [ '2571' ],		#time : DateAndTime [ '2017-12-12T08:01:01.780992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableTest,				#isMetaSide : false			},			#name : #testMemoMiss,			#protocol : #tests,			#sourceCode : 'testMemoMiss\r\tmemoized := $a asPParser plus.\r\tmemoized strategy: (PP2Reparsable on: memoized strategy).\r\t\r\t\r\tparser := (memoized, $b asPParser) / ($a asPParser, memoized).\r\tparser setOptimized.\r\t\r\tcontext := parser parseWithContext: \'aaa\' asReparsableContext.\r\t\r\tself assert: context debugResult steps equals: 15.\r\tself assert: context returnValue size equals: 2.\r\tself assert: context returnValue first equals: $a.\r\tself assert: context returnValue second first equals: $a.\r\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2571' ],		#self : OmReference [ '2572' ],		#time : DateAndTime [ '2017-12-12T08:01:01.782992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableTest,				#isMetaSide : false			},			#name : #testParseAndParse,			#protocol : #tests,			#sourceCode : 'testParseAndParse\r\tparser := $a asPParser plus.\r\tparser strategy: (PP2Reparsable on: parser strategy).\r\tparser setOptimized.\r\tparser enableDebug.\r\t\r\tcontext := parser parseWithContext: \'aa\' asReparsableContext.\r\tself assert: context debugResult steps equals: 5.\r\t\r\tcontext := parser parseWithContext: context asReparsableContext.\r\tself assert: context debugResult steps equals: 5.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2572' ],		#self : OmReference [ '2573' ],		#time : DateAndTime [ '2017-12-12T08:01:01.783992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableTest,				#isMetaSide : false			},			#name : #testReparse,			#protocol : #tests,			#sourceCode : 'testReparse\r\t| startContext |\r\tparser := $a asPParser plus.\r\tparser strategy: (PP2Reparsable on: parser strategy).\r\tparser setOptimized.\r\tparser enableDebug.\r\t\r\tstartContext := \'aa\' asReparsableContext.\r\t\r\tcontext := parser parseWithContext: startContext.\r\tself assert: context debugResult steps equals: 5.\r\t\r\tcontext := parser reparseWithContext: context.\r\tself assert: context debugResult steps equals: 2.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2573' ],		#self : OmReference [ '2574' ],		#time : DateAndTime [ '2017-12-12T08:01:01.784992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableVisitorTest,				#isMetaSide : false			},			#name : #testReparsable,			#protocol : #'as yet unclassified',			#sourceCode : 'testReparsable\r\treparsable := #letter asPParser star reparsable.\r\tparser := reparsable wrapped.\r\t\r\tself visit: parser.\r\t\r\tself assert: reparsable strategy isKindOf: PP2Reparsable ',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2574' ],		#self : OmReference [ '2575' ],		#time : DateAndTime [ '2017-12-12T08:01:01.785992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ReparsableVisitorTest,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #'as yet unclassified',			#sourceCode : 'visit: node\r\t^ PP2ReparsableVisitor new visit: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2575' ],		#self : OmReference [ '2576' ],		#time : DateAndTime [ '2017-12-12T08:01:01.786992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNodeTest,				#isMetaSide : false			},			#name : #testAfterWater,			#protocol : #tests,			#sourceCode : 'testAfterWater\r\tsea := PP2SeaNode new\r\t\tisland: $a asPParser;\r\t\tyourself.\r\r\tself assert: sea afterWater isKindOf: PP2WaterNode.\r',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2576' ],		#self : OmReference [ '2577' ],		#time : DateAndTime [ '2017-12-12T08:01:01.787992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNodeTest,				#isMetaSide : false			},			#name : #testBeforeWater,			#protocol : #tests,			#sourceCode : 'testBeforeWater\r\tsea := PP2SeaNode new\r\t\tisland: $a asPParser;\r\t\tyourself.\r\r\tself assert: sea beforeWater isKindOf: PP2WaterNode.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2577' ],		#self : OmReference [ '2578' ],		#time : DateAndTime [ '2017-12-12T08:01:01.788992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNodeTest,				#isMetaSide : false			},			#name : #testChildren,			#protocol : #tests,			#sourceCode : 'testChildren\r\t| waterToken island |\r\twaterToken := #space asPParser.\r\tisland := $a asPParser optional.\r\tsea := PP2SeaNode new\r\t\tisland: island;\r\t\twaterToken: waterToken;\r\t\tyourself.\r\r\tself assert: sea children size equals: 3.\r\tself assert: sea children first isKindOf: PP2Node.\r\tself assert: sea children second == island.\r\tself assert: sea children third isKindOf: PP2Node.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2578' ],		#self : OmReference [ '2579' ],		#time : DateAndTime [ '2017-12-12T08:01:01.790992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNodeTest,				#isMetaSide : false			},			#name : #testNonNullableIsland,			#protocol : #tests,			#sourceCode : 'testNonNullableIsland\r\t| waterToken island beforeWater boundary elements |\r\twaterToken := #space asPParser.\r\tisland := $a asPParser optional.\r\tsea := PP2SeaNode new\r\t\tisland: island;\r\t\twaterToken: waterToken;\r\t\tyourself.\r\tboundary := $b asPParser.\r\t\t\r\tparser := sea, boundary.\r\t\r\tsea updateBeforeWater: parser.\r\tbeforeWater := sea beforeWater.\r\t\t\t\r\telements := beforeWater boundaryElements.\r\tself assert: elements size equals: 2.\t\r\tself assert: elements noneSatisfy: [ :e | e isNullable  ].',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2579' ],		#self : OmReference [ '2580' ],		#time : DateAndTime [ '2017-12-12T08:01:01.791992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNodeTest,				#isMetaSide : false			},			#name : #testUpdateAfterWater,			#protocol : #tests,			#sourceCode : 'testUpdateAfterWater\r\t| waterToken island afterWater boundary elements nextBoundary |\r\twaterToken := #space asPParser.\r\tisland := $a asPParser.\r\tsea := PP2SeaNode new\r\t\tisland: island;\r\t\twaterToken: waterToken;\r\t\tyourself.\r\tboundary := $b asPParser optional.\r\tnextBoundary := $c asPParser.\r\t\t\r\tparser := sea, boundary, nextBoundary.\r\t\r\tsea updateAfterWater: parser.\r\tafterWater := sea afterWater.\r\t\r\tself assert: afterWater isKindOf: PP2WaterNode.\r\tself assert: afterWater waterToken equals: waterToken.\r\tself assert: afterWater boundary isKindOf: PP2ChoiceNode.\r\tself assert: afterWater boundary children allSatisfy: [ :child | child isKindOf: PP2AndNode].\t\r\t\t\r\telements := afterWater boundaryElements.\r\tself assert: elements size equals: 2.\t\r\tself assert: elements noneSatisfy: [ :n | n isNullable ].\r\tself assert: elements includes: nextBoundary.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2580' ],		#self : OmReference [ '2581' ],		#time : DateAndTime [ '2017-12-12T08:01:01.793992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaNodeTest,				#isMetaSide : false			},			#name : #testUpdateBeforeWater,			#protocol : #tests,			#sourceCode : 'testUpdateBeforeWater\r\t| waterToken island beforeWater boundary elements |\r\twaterToken := #space asPParser.\r\tisland := $a asPParser.\r\tsea := PP2SeaNode new\r\t\tisland: island;\r\t\twaterToken: waterToken;\r\t\tyourself.\r\tboundary := $b asPParser.\r\t\t\r\tparser := sea, boundary.\r\t\r\tsea updateBeforeWater: parser.\r\tbeforeWater := sea beforeWater.\r\t\r\tself assert: beforeWater isKindOf: PP2WaterNode.\r\tself assert: beforeWater waterToken equals: waterToken.\r\tself assert: beforeWater boundary isKindOf: PP2ChoiceNode.\r\tself assert: beforeWater boundary children allSatisfy: [ :child | child isKindOf: PP2AndNode ].\t\r\t\t\r\telements := beforeWater boundaryElements.\r\tself assert: elements size equals: 2.\t\r\tself assert: elements includes: island.\r\tself assert: elements includes: boundary.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2581' ],		#self : OmReference [ '2582' ],		#time : DateAndTime [ '2017-12-12T08:01:01.794992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #'assert:anySatisfy:',			#protocol : #asserting,			#sourceCode : 'assert: set anySatisfy: aBlock\r\tself assert: (set anySatisfy: aBlock)\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2582' ],		#self : OmReference [ '2583' ],		#time : DateAndTime [ '2017-12-12T08:01:01.795992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #asserting,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2583' ],		#self : OmReference [ '2584' ],		#time : DateAndTime [ '2017-12-12T08:01:01.796992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #'assert:noneSatisfy:',			#protocol : #asserting,			#sourceCode : 'assert: set noneSatisfy: aBlock\r\tself assert: (set noneSatisfy: aBlock)\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2584' ],		#self : OmReference [ '2585' ],		#time : DateAndTime [ '2017-12-12T08:01:01.797992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testJustSea,			#protocol : #tests,			#sourceCode : 'testJustSea\r\tparser := $a asPParser sea.\r\t\r\tself visit: parser.\r\tself assert: parser strategy isKindOf: PP2Sea',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2585' ],		#self : OmReference [ '2586' ],		#time : DateAndTime [ '2017-12-12T08:01:01.798992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testMemoizedSea,			#protocol : #tests,			#sourceCode : 'testMemoizedSea\r\tsea := $a asPParser sea.\r\t\r\tparser := sea, ($a asPParser / sea).\r\t\r\tself visit: parser.\r\tself assert: sea strategy isKindOf: PP2MemoizedSea.\r\tself assert: sea afterWater allNodes anySatisfy: [ :n | n isSea ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2586' ],		#self : OmReference [ '2587' ],		#time : DateAndTime [ '2017-12-12T08:01:01.799992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testNestedSea,			#protocol : #tests,			#sourceCode : 'testNestedSea\r\tsea := $a asPParser sea.\r\t\r\tparser := sea star sea.\r\tself visit: parser.\r\r\tself assert: sea strategy isKindOf: PP2Sea.\r\tself assert: sea afterWater boundaryElements noneSatisfy: [ :e | e isSea ].\r\tself assert: sea afterWater boundaryElements anySatisfy: [ :e | e == sea island ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2587' ],		#self : OmReference [ '2588' ],		#time : DateAndTime [ '2017-12-12T08:01:01.800992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testOverlappingSeas,			#protocol : #tests,			#sourceCode : 'testOverlappingSeas\r\t| seaOne seaTwo |\r\tseaOne := $a asPParser sea.\r\tseaTwo := $b asPParser sea.\r\t\r\tparser := seaOne, seaTwo.\r\t\r\tself visit: parser.\r\tself assert: seaOne strategy isKindOf: PP2Sea.\r\tself assert: seaTwo strategy isKindOf: PP2Sea.\r\tself assert: seaOne afterWater allNodes noneSatisfy: [ :n | n isSea ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2588' ],		#self : OmReference [ '2589' ],		#time : DateAndTime [ '2017-12-12T08:01:01.801992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testRepetitionInBoundary,			#protocol : #tests,			#sourceCode : 'testRepetitionInBoundary\r\tsea := $a asPParser sea.\r\tparser := sea, $b asPParser plus.\r\t\r\tself visit: parser.\r\tself assert: sea beforeWater boundaryElements noneSatisfy: [ :e | e isRepeating ].\t\r\tself assert: sea afterWater boundaryElements noneSatisfy: [ :e | e isRepeating ].',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2589' ],		#self : OmReference [ '2590' ],		#time : DateAndTime [ '2017-12-12T08:01:01.804992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testSeaInBoundary,			#protocol : #tests,			#sourceCode : 'testSeaInBoundary\r\tparser := $a asPParser sea.\r\t\r\tself visit: parser.\r\tself assert: parser strategy isKindOf: PP2Sea.\r\tself assert: parser beforeWater boundaryElements noneSatisfy: [ :e | e isSea ].',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2590' ],		#self : OmReference [ '2591' ],		#time : DateAndTime [ '2017-12-12T08:01:01.805992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testSeaOptimizations,			#protocol : #tests,			#sourceCode : 'testSeaOptimizations\r\t| bw aw |\r\tsea := $a asPParser sea.\r\t\r\tparser := sea star.\r\tself visit: parser.\r\tbw := sea beforeWater boundary.\r\taw := sea afterWater boundary.\r\r\tparser parse: \'..a..\'.\r\t\r\tself assert: sea beforeWater boundary == bw.\r\tself assert: sea afterWater boundary == aw.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2591' ],		#self : OmReference [ '2592' ],		#time : DateAndTime [ '2017-12-12T08:01:01.806992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testSeaOptimizationsReset,			#protocol : #tests,			#sourceCode : 'testSeaOptimizationsReset\r\t| bw aw |\r\tsea := $a asPParser sea.\r\t\r\tparser := sea star.\r\tself visit: parser.\r\tbw := sea beforeWater boundary.\r\taw := sea afterWater boundary.\r\r\tsea parse: \'..a..\'.\r\t\r\tself assert: sea beforeWater boundary ~= bw.\r\tself assert: sea afterWater boundary ~= aw.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2592' ],		#self : OmReference [ '2593' ],		#time : DateAndTime [ '2017-12-12T08:01:01.807992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testSeaPlus,			#protocol : #tests,			#sourceCode : 'testSeaPlus\r\tsea := $a asPParser sea.\r\t\r\tparser := sea plus.\r\t\r\tself visit: parser.\r\tself assert: sea strategy isKindOf: PP2Sea.\r\tself assert: sea afterWater allNodes noneSatisfy: [ :n | n isSea ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2593' ],		#self : OmReference [ '2594' ],		#time : DateAndTime [ '2017-12-12T08:01:01.809992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #testSeaStar,			#protocol : #tests,			#sourceCode : 'testSeaStar\r\tsea := $a asPParser sea.\r\t\r\tparser := sea star.\r\t\r\tself visit: parser.\r\tself assert: sea strategy isKindOf: PP2Sea.\r\tself assert: sea afterWater allNodes noneSatisfy: [ :n | n isSea ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2594' ],		#self : OmReference [ '2595' ],		#time : DateAndTime [ '2017-12-12T08:01:01.810992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SeaOptimizationVisitorTest,				#isMetaSide : false			},			#name : #'visit:',			#protocol : #visiting,			#sourceCode : 'visit: node\r\tPP2SeaOptimizationVisitor new visit: node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2595' ],		#self : OmReference [ '2596' ],		#time : DateAndTime [ '2017-12-12T08:01:01.811992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tvisitor := PP2SpecializingVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2596' ],		#self : OmReference [ '2597' ],		#time : DateAndTime [ '2017-12-12T08:01:01.812992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testAndLiteraObject,			#protocol : #tests,			#sourceCode : 'testAndLiteraObject\r\tparser := $a asPParser and.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2AndLiteralObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2597' ],		#self : OmReference [ '2598' ],		#time : DateAndTime [ '2017-12-12T08:01:01.814992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testAndPredicateObject,			#protocol : #tests,			#sourceCode : 'testAndPredicateObject\r\tparser := #letter asPParser and.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2AndPredicateObject',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2598' ],		#self : OmReference [ '2599' ],		#time : DateAndTime [ '2017-12-12T08:01:01.815992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testAnyStarLazyLiteralObject,			#protocol : #tests,			#sourceCode : 'testAnyStarLazyLiteralObject\r\t| starLazy literal |\r\tstarLazy := #any asPParser starLazy.\r\tliteral := $a asPParser.\r\tparser := starLazy, literal.\r\t\r\tstarLazy child updateAfterWater: parser.\r\tstarLazy child updateBeforeWater: parser.\r\t\t\r\tvisitor visit: parser.\r\tself assert: starLazy strategy isKindOf: PP2AnyStarLazyLiteralObject.\r\tself assert: starLazy strategy literal equals: literal literal.',			#stamp : 'JanKurs 12/27/2016 16:00',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2599' ],		#self : OmReference [ '2600' ],		#time : DateAndTime [ '2017-12-12T08:01:01.816992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testAnyStarLazyPredicateObject,			#protocol : #tests,			#sourceCode : 'testAnyStarLazyPredicateObject\r\t| starLazy predicate |\r\tstarLazy := #any asPParser starLazy.\r\tpredicate := #letter asPParser.\r\tparser := starLazy, predicate.\r\t\r\tstarLazy child updateAfterWater: parser.\r\tstarLazy child updateBeforeWater: parser.\r\t\t\r\tvisitor visit: parser.\r\tself assert: starLazy strategy isKindOf: PP2AnyStarLazyPredicateObject.\r\tself assert: starLazy strategy predicate equals: predicate predicate.',			#stamp : 'JanKurs 12/27/2016 16:04',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2600' ],		#self : OmReference [ '2601' ],		#time : DateAndTime [ '2017-12-12T08:01:01.818992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testIsAny,			#protocol : #tests,			#sourceCode : 'testIsAny\r\tparser := #any asPParser.\r\t\r\tself assert: (visitor isAny: parser).',			#stamp : 'JanKurs 12/26/2016 19:24',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2601' ],		#self : OmReference [ '2602' ],		#time : DateAndTime [ '2017-12-12T08:01:01.819992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testMappingOfThree,			#protocol : #tests,			#sourceCode : 'testMappingOfThree\r\tparser := ($a asPParser, $b asPParser, $c asPParser) map: [ :a :b :c | $d ].\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2MappingOfThree.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2602' ],		#self : OmReference [ '2603' ],		#time : DateAndTime [ '2017-12-12T08:01:01.820992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testMappingOfTwo,			#protocol : #tests,			#sourceCode : 'testMappingOfTwo\r\tparser := ($a asPParser, $b asPParser) map: [ :a :b | $c ].\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2MappingOfTwo.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2603' ],		#self : OmReference [ '2604' ],		#time : DateAndTime [ '2017-12-12T08:01:01.821992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testNotLiteraObject,			#protocol : #tests,			#sourceCode : 'testNotLiteraObject\r\tparser := $a asPParser not.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2NotLiteralObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2604' ],		#self : OmReference [ '2605' ],		#time : DateAndTime [ '2017-12-12T08:01:01.822992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testOptionalLiteraObject,			#protocol : #tests,			#sourceCode : 'testOptionalLiteraObject\r\tparser := $a asPParser optional.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2OptionalLiteralObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2605' ],		#self : OmReference [ '2606' ],		#time : DateAndTime [ '2017-12-12T08:01:01.823992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testPlus,			#protocol : #tests,			#sourceCode : 'testPlus\r\tparser := $a asPParser plus.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2Plus.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2606' ],		#self : OmReference [ '2607' ],		#time : DateAndTime [ '2017-12-12T08:01:01.825992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testPlusPredicateObject,			#protocol : #tests,			#sourceCode : 'testPlusPredicateObject\r\tparser := #letter asPParser plus.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2PlusPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2607' ],		#self : OmReference [ '2608' ],		#time : DateAndTime [ '2017-12-12T08:01:01.827992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testPlusPredicateObject2,			#protocol : #tests,			#sourceCode : 'testPlusPredicateObject2\r\tparser := #letter asPParser plus.\r\tparser max: 20.\r\t\r\tvisitor visit: parser.\r\tself deny: parser strategy isKindOf: PP2PlusPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2608' ],		#self : OmReference [ '2609' ],		#time : DateAndTime [ '2017-12-12T08:01:01.828992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfThree,			#protocol : #tests,			#sourceCode : 'testSequenceOfThree\r\tparser := $a asPParser, $b asPParser, $c asPParser.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2SequenceOfThree.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2609' ],		#self : OmReference [ '2610' ],		#time : DateAndTime [ '2017-12-12T08:01:01.829992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testSequenceOfTwo,			#protocol : #tests,			#sourceCode : 'testSequenceOfTwo\r\tparser := $a asPParser, $b asPParser.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2SequenceOfTwo.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2610' ],		#self : OmReference [ '2611' ],		#time : DateAndTime [ '2017-12-12T08:01:01.830992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testStar,			#protocol : #tests,			#sourceCode : 'testStar\r\tparser := $a asPParser star.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2Star.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2611' ],		#self : OmReference [ '2612' ],		#time : DateAndTime [ '2017-12-12T08:01:01.831992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testStarPredicateObject,			#protocol : #tests,			#sourceCode : 'testStarPredicateObject\r\tparser := #letter asPParser star.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2StarPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2612' ],		#self : OmReference [ '2613' ],		#time : DateAndTime [ '2017-12-12T08:01:01.832992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testStarPredicateObject2,			#protocol : #tests,			#sourceCode : 'testStarPredicateObject2\r\tparser := #letter asPParser star.\r\tparser max: 2.\r\t\r\tvisitor visit: parser.\r\tself deny: parser strategy isKindOf: PP2StarPredicateObject.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2613' ],		#self : OmReference [ '2614' ],		#time : DateAndTime [ '2017-12-12T08:01:01.833992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testTrimmingLiteralObjectToken,			#protocol : #tests,			#sourceCode : 'testTrimmingLiteralObjectToken\r\tparser := $a asPParser token trim.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2TrimmingLiteralObjectToken.\r\tself assert: parser strategy literal equals: $a.\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2614' ],		#self : OmReference [ '2615' ],		#time : DateAndTime [ '2017-12-12T08:01:01.835992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testTrimmingLiteralObjectTokenWrapped,			#protocol : #tests,			#sourceCode : 'testTrimmingLiteralObjectTokenWrapped\r\tparser := $a asPParser wrapped token trim.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2TrimmingLiteralObjectToken.\r\tself assert: parser strategy literal equals: $a.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2615' ],		#self : OmReference [ '2616' ],		#time : DateAndTime [ '2017-12-12T08:01:01.836992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SpecializingVisitorTest,				#isMetaSide : false			},			#name : #testTrimmingToken,			#protocol : #tests,			#sourceCode : 'testTrimmingToken\r\tparser := $a asPParser plus token trim.\r\t\r\tvisitor visit: parser.\r\t\r\tself assert: parser strategy isKindOf: PP2TrimmingToken.\r\tself assert: parser strategy trimmer equals: parser trimmer.\r\tself assert: parser strategy tokenClass equals: parser child tokenClass.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2616' ],		#self : OmReference [ '2617' ],		#time : DateAndTime [ '2017-12-12T08:01:01.838992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StreamTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2617' ],		#self : OmReference [ '2618' ],		#time : DateAndTime [ '2017-12-12T08:01:01.839992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StreamTest,				#isMetaSide : false			},			#name : #'streamOn:',			#protocol : #running,			#sourceCode : 'streamOn: collection\r\t^ PP2Stream on: collection',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2618' ],		#self : OmReference [ '2619' ],		#time : DateAndTime [ '2017-12-12T08:01:01.840992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2StreamTest,				#isMetaSide : false			},			#name : #testContents,			#protocol : #'tests - context interface',			#sourceCode : 'testContents\r\t| stream |\r\tstream := self streamOn: \'bar\'. \r\t\r\tself assert: stream contents equals: \'bar\'.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2619' ],		#self : OmReference [ '2620' ],		#time : DateAndTime [ '2017-12-12T08:01:01.841992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitorTest,				#isMetaSide : false			},			#name : #grammarA,			#protocol : #grammars,			#sourceCode : 'grammarA\r\t"A highly recrusive grammar."\r\r\t| grammar |\r\tgrammar := PP2UnresolvedNode new.\r\tgrammar def: (grammar , $+ asPParser , grammar) / $1 asPParser.\r\t^grammar',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2620' ],		#self : OmReference [ '2621' ],		#time : DateAndTime [ '2017-12-12T08:01:01.842992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitorTest,				#isMetaSide : false			},			#name : #grammarB,			#protocol : #grammars,			#sourceCode : 'grammarB\r\t"The most stupid parser, it just references itself and never consumes anything. All algorithms should survive such an attack."\r\r\t| parser |\r\tparser := PP2DelegateNode new.\r\tparser child: parser.\r\t^ parser',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2621' ],		#self : OmReference [ '2622' ],		#time : DateAndTime [ '2017-12-12T08:01:01.843992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitorTest,				#isMetaSide : false			},			#name : #testTransformIdentityGrammarA,			#protocol : #tests,			#sourceCode : 'testTransformIdentityGrammarA\r\t| orig tran |\r\torig := self grammarA.\r\ttran := orig transform: [ :each | each ].\r\tself deny: orig == tran.\r\tself deny: orig children first == tran children first.\r\tself deny: orig children first children first == tran children first children first.\r\tself deny: orig children first children last == tran children first children last.\r\tself deny: orig children last == tran children last.\r\t\r\tself assert: orig class == PP2ChoiceNode.\r\tself assert: orig children first class == PP2SequenceNode.\r\tself assert: orig children first children first == orig.\r\tself assert: orig children first children last == orig.\r\tself assert: orig children last class == PP2LiteralObjectNode.\r\r\tself assert: tran class == PP2ChoiceNode.\r\tself assert: tran children first class == PP2SequenceNode.\r\tself assert: tran children first children first == tran.\r\tself assert: tran children first children last == tran.\r\tself assert: tran children last class == PP2LiteralObjectNode',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2622' ],		#self : OmReference [ '2623' ],		#time : DateAndTime [ '2017-12-12T08:01:01.844992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitorTest,				#isMetaSide : false			},			#name : #testTransformIdentityGrammarB,			#protocol : #tests,			#sourceCode : 'testTransformIdentityGrammarB\r\t| orig tran |\r\torig := self grammarB.\r\ttran := orig transform: [ :each | each ].\r\tself deny: orig == tran.\r\tself deny: orig children first == tran children first.\r\t\r\tself assert: orig class == PP2DelegateNode.\r\tself assert: orig children first == orig.\r\t\r\tself assert: tran class == PP2DelegateNode.\r\tself assert: tran children first == tran',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2623' ],		#self : OmReference [ '2624' ],		#time : DateAndTime [ '2017-12-12T08:01:01.846992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitorTest,				#isMetaSide : false			},			#name : #testTransformWrapGrammarA,			#protocol : #tests,			#sourceCode : 'testTransformWrapGrammarA\r\t| orig tran |\r\torig := self grammarA.\r\ttran := orig transform: [ :each | each wrapped ].\r\r\tself assert: orig class == PP2ChoiceNode.\r\tself assert: orig children first class == PP2SequenceNode.\r\tself assert: orig children first children first == orig.\r\tself assert: orig children first children last == orig.\r\tself assert: orig children last class == PP2LiteralObjectNode.\r\t\r\tself assert: tran class == PP2DelegateNode.\r\tself assert: tran children first class == PP2ChoiceNode.\r\tself assert: tran children first children first class == PP2DelegateNode.\r\tself assert: tran children first children first children first class == PP2SequenceNode.\r\tself assert: tran children first children first children first children first == tran.\r\tself assert: tran children first children first children first children last == tran.\r\tself assert: tran children first children last class == PP2DelegateNode.\r\tself assert: tran children first children last children first class == PP2LiteralObjectNode',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2624' ],		#self : OmReference [ '2625' ],		#time : DateAndTime [ '2017-12-12T08:01:01.847992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TransformVisitorTest,				#isMetaSide : false			},			#name : #testTransformWrapGrammarB,			#protocol : #tests,			#sourceCode : 'testTransformWrapGrammarB\r\t| orig tran |\r\torig := self grammarB.\r\ttran := orig transform: [ :each | each wrapped ].\r\t\r\tself assert: orig class == PP2DelegateNode.\r\tself assert: orig child == orig.\r\t\r\tself assert: tran class == PP2DelegateNode.\r\tself assert: tran child class == PP2DelegateNode.\r\tself assert: tran child child == tran',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2625' ],		#self : OmReference [ '2626' ],		#time : DateAndTime [ '2017-12-12T08:01:01.848992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitorTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #support,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2626' ],		#self : OmReference [ '2627' ],		#time : DateAndTime [ '2017-12-12T08:01:01.849992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\tsuper setUp.\r\t\r\tvisitor := PP2TrimmingCacheVisitor new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2627' ],		#self : OmReference [ '2628' ],		#time : DateAndTime [ '2017-12-12T08:01:01.850992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitorTest,				#isMetaSide : false			},			#name : #testDifferentTrimmers,			#protocol : #'as yet unclassified',			#sourceCode : 'testDifferentTrimmers\r\tparser := $a asPParser trimSpaces, $b asPParser trimBlanks.\r\t\r\tvisitor doPass: parser.\r\tself assert: parser firstChild trimmer strategy isKindOf: PP2PossesiveRepeating.\r\tself assert: parser secondChild trimmer strategy isKindOf: PP2PossesiveRepeating\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2628' ],		#self : OmReference [ '2629' ],		#time : DateAndTime [ '2017-12-12T08:01:01.852992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitorTest,				#isMetaSide : false			},			#name : #testSequence,			#protocol : #'as yet unclassified',			#sourceCode : 'testSequence\r\tparser := $a asPParser trim, $b asPParser trim.\r\t\r\tvisitor doPass: parser.\r\tself assert: parser firstChild trimmer strategy isKindOf: PP2TrimmingCache.\r\tself assert: parser secondChild trimmer strategy isKindOf: PP2TrimmingCache\t',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2629' ],		#self : OmReference [ '2630' ],		#time : DateAndTime [ '2017-12-12T08:01:01.853992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitorTest,				#isMetaSide : false			},			#name : #testSimpleTrimming,			#protocol : #'as yet unclassified',			#sourceCode : 'testSimpleTrimming\r\tparser := $a asPParser trim.\r\t\r\tvisitor doPass: parser.\r\tself assert: parser trimmer strategy isKindOf: PP2TrimmingCache',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2630' ],		#self : OmReference [ '2631' ],		#time : DateAndTime [ '2017-12-12T08:01:01.854992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2TrimmingCacheVisitorTest,				#isMetaSide : false			},			#name : #testSimpleTrimmingToken,			#protocol : #'as yet unclassified',			#sourceCode : 'testSimpleTrimmingToken\r\tparser := $a asPParser token trim.\r\t\r\tvisitor doPass: parser.\r\tself assert: parser trimmer strategy isKindOf: PP2TrimmingCache',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2631' ],		#self : OmReference [ '2632' ],		#time : DateAndTime [ '2017-12-12T08:01:01.855992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2MinimalStream class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: values\r\t^ self basicNew \r\t\tinitialize;\r\t\tvalues: values;\r\t\tyourself',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2632' ],		#self : OmReference [ '2633' ],		#time : DateAndTime [ '2017-12-12T08:01:01.857992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MinimalStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #'minimal interface',			#sourceCode : 'atEnd\r\t^ position == values size',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2633' ],		#self : OmReference [ '2634' ],		#time : DateAndTime [ '2017-12-12T08:01:01.858992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MinimalStream,				#isMetaSide : false			},			#name : #contents,			#protocol : #private,			#sourceCode : 'contents\r\t^ values',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2634' ],		#self : OmReference [ '2635' ],		#time : DateAndTime [ '2017-12-12T08:01:01.859992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MinimalStream,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tposition := 0.',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2635' ],		#self : OmReference [ '2636' ],		#time : DateAndTime [ '2017-12-12T08:01:01.860992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MinimalStream,				#isMetaSide : false			},			#name : #next,			#protocol : #'minimal interface',			#sourceCode : 'next\r\tposition := position + 1.\r\t^ values at: position',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2636' ],		#self : OmReference [ '2637' ],		#time : DateAndTime [ '2017-12-12T08:01:01.861992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MinimalStream,				#isMetaSide : false			},			#name : #'values:',			#protocol : #private,			#sourceCode : 'values: anObject\r\tvalues := anObject',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2637' ],		#self : OmReference [ '2638' ],		#time : DateAndTime [ '2017-12-12T08:01:01.862992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MockNoopVisitor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tvisitOrder := OrderedCollection new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2638' ],		#self : OmReference [ '2639' ],		#time : DateAndTime [ '2017-12-12T08:01:01.863992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MockNoopVisitor,				#isMetaSide : false			},			#name : #visitOrder,			#protocol : #accessing,			#sourceCode : 'visitOrder\r\t^ visitOrder',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2639' ],		#self : OmReference [ '2640' ],		#time : DateAndTime [ '2017-12-12T08:01:01.864992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2MockNoopVisitor,				#isMetaSide : false			},			#name : #'visitPP2Node:',			#protocol : #visiting,			#sourceCode : 'visitPP2Node: aPP2Node\r\tvisitOrder add: aPP2Node.\r\t\r\t^ super visitPP2Node: aPP2Node',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2640' ],		#self : OmReference [ '2641' ],		#time : DateAndTime [ '2017-12-12T08:01:01.865992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParserResource,				#isMetaSide : false			},			#name : #'parserAt:',			#protocol : #accessing,			#sourceCode : 'parserAt: aParserClass\r\t"Answer a cached instance of aParserClass."\r\t\r\t^ parsers at: aParserClass name ifAbsentPut: [ aParserClass new ]',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2641' ],		#self : OmReference [ '2642' ],		#time : DateAndTime [ '2017-12-12T08:01:01.867992+08:00' ],		#trigger : OmReference [ '1806' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ParserResource,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tparsers := Dictionary new',			#stamp : ' 11/16/2016 18:57:10',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:01:01.971992+08:00' ],		#prior : OmReference [ '2642' ],		#self : OmReference [ '2643' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Validation-JanKurs.29'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2643' ],		#self : OmReference [ '2644' ],		#time : DateAndTime [ '2017-12-12T08:01:02.052992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Validation-Core,		#affectedPackageName : #PetitParser2-Validation	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2644' ],		#self : OmReference [ '2645' ],		#time : DateAndTime [ '2017-12-12T08:01:02.059992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Validator\r\tinstanceVariableNames: \'report silent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Core\''			},			#name : #PP2Validator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Validator,						#isMetaSide : false					},					#name : #report,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Validator,						#isMetaSide : false					},					#name : #silent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Validator class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Validator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Validator,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Core,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2645' ],		#self : OmReference [ '2646' ],		#time : DateAndTime [ '2017-12-12T08:01:02.065992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Validation-Streams,		#affectedPackageName : #PetitParser2-Validation	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2646' ],		#self : OmReference [ '2647' ],		#time : DateAndTime [ '2017-12-12T08:01:02.067992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Validator',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Validator subclass: #PP2BufferStreamValidator\r\tinstanceVariableNames: \'parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Streams\''			},			#name : #PP2BufferStreamValidator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStreamValidator,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BufferStreamValidator class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BufferStreamValidator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BufferStreamValidator,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Streams,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2647' ],		#self : OmReference [ '2648' ],		#time : DateAndTime [ '2017-12-12T08:01:02.073992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Validation-Optimizations,		#affectedPackageName : #PetitParser2-Validation	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2648' ],		#self : OmReference [ '2649' ],		#time : DateAndTime [ '2017-12-12T08:01:02.077992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Validator',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Validator subclass: #PP2ExpressionGrammarOptimizaitonsValidator\r\tinstanceVariableNames: \'parser optimizedParser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Optimizations\''			},			#name : #PP2ExpressionGrammarOptimizaitonsValidator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammarOptimizaitonsValidator,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammarOptimizaitonsValidator,						#isMetaSide : false					},					#name : #optimizedParser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionGrammarOptimizaitonsValidator class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionGrammarOptimizaitonsValidator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionGrammarOptimizaitonsValidator,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Optimizations,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2649' ],		#self : OmReference [ '2650' ],		#time : DateAndTime [ '2017-12-12T08:01:02.089992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2ValidatorReport\r\tinstanceVariableNames: \'time sources failures timeouts errors entries parserName\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Core\''			},			#name : #PP2ValidatorReport,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #time,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #sources,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #failures,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #timeouts,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #errors,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #entries,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReport,						#isMetaSide : false					},					#name : #parserName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ValidatorReport class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ValidatorReport class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ValidatorReport,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Core,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2650' ],		#self : OmReference [ '2651' ],		#time : DateAndTime [ '2017-12-12T08:01:02.096992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2ValidatorReportEntry\r\tinstanceVariableNames: \'expected actual\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Core\''			},			#name : #PP2ValidatorReportEntry,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReportEntry,						#isMetaSide : false					},					#name : #expected,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ValidatorReportEntry,						#isMetaSide : false					},					#name : #actual,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ValidatorReportEntry class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ValidatorReportEntry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ValidatorReportEntry,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Core,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2651' ],		#self : OmReference [ '2652' ],		#time : DateAndTime [ '2017-12-12T08:01:02.101992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestResource',				#traitCompositionSource : '{}',				#definitionSource : 'TestResource subclass: #PP2Sources\r\tinstanceVariableNames: \'cache\'\r\tclassVariableNames: \'DataDirectory\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Core\''			},			#name : #PP2Sources,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Sources,						#isMetaSide : false					},					#name : #cache,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Sources class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Sources class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Sources,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Sources,						#isMetaSide : false					},					#name : #DataDirectory,					#parent : @8				}			],			#category : #PetitParser2-Validation-Core,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2652' ],		#self : OmReference [ '2653' ],		#time : DateAndTime [ '2017-12-12T08:01:02.137992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Notification',				#traitCompositionSource : '{}',				#definitionSource : 'Notification subclass: #PP2SkipValidation\r\tinstanceVariableNames: \'reason\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2SkipValidation,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SkipValidation,						#isMetaSide : false					},					#name : #reason,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SkipValidation class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SkipValidation class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SkipValidation,					#isMetaSide : false				},				#parent : @8,				#content : 'If there is something wrong with the validation, throw this error. The PPValidator will skip validation for this source.',				#stamp : 'JanKurs 8/13/2016 15:03'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'If there is something wrong with the validation, throw this error. The PPValidator will skip validation for this source.',		#newStamp : 'JanKurs 8/13/2016 15:03'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2653' ],		#self : OmReference [ '2654' ],		#time : DateAndTime [ '2017-12-12T08:01:02.139992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Notification',				#traitCompositionSource : '{}',				#definitionSource : 'Notification subclass: #PP2SkipValidation\r\tinstanceVariableNames: \'reason\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Core\''			},			#name : #PP2SkipValidation,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SkipValidation,						#isMetaSide : false					},					#name : #reason,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SkipValidation class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SkipValidation class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SkipValidation,					#isMetaSide : false				},				#parent : @8,				#content : 'If there is something wrong with the validation, throw this error. The PPValidator will skip validation for this source.',				#stamp : 'JanKurs 8/13/2016 15:03'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Core,			#package : #PetitParser2-Validation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2654' ],		#self : OmReference [ '2655' ],		#time : DateAndTime [ '2017-12-12T08:01:08.654992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidator,				#isMetaSide : false			},			#name : #'actualForSource:',			#protocol : #validation,			#sourceCode : 'actualForSource: source\r\t| result |\r\t\r\t[\r\t\tresult := parser parse: (PP2BufferStream on: (PP2MinimalStream on: source) bufferSize: 64).\r\t] on: SubscriptOutOfBounds do: [  \r\t\t(PP2SkipValidation reason: \'To small buffer\') signal\r\t].\r\r\t^ result isPetit2Failure ifFalse: [ \r\t\tresult value isCollection \r\t\t\tifTrue: [  result value ] \r\t\t\tifFalse: [ Array with: result value ]\r\t] ifTrue: [ \r\t\t#failure\r\t]',			#stamp : 'JanKurs 9/3/2016 17:58',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2655' ],		#self : OmReference [ '2656' ],		#time : DateAndTime [ '2017-12-12T08:01:08.658992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidator,				#isMetaSide : false			},			#name : #'expectedForSource:',			#protocol : #validation,			#sourceCode : 'expectedForSource: source\r\t| result |\r\tresult := parser parse: source.\r\t\r\t^ result isPetit2Failure ifFalse: [ \r\t\tresult value isCollection \r\t\t\tifTrue: [  result value ] \r\t\t\tifFalse: [ Array with: result value ]\r\t] ifTrue: [ \r\t\t#failure\r\t]',			#stamp : 'JanKurs 9/3/2016 17:58',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2656' ],		#self : OmReference [ '2657' ],		#time : DateAndTime [ '2017-12-12T08:01:08.659992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tparser := PP2ExpressionParser new',			#stamp : 'JanKurs 9/3/2016 13:27',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2657' ],		#self : OmReference [ '2658' ],		#time : DateAndTime [ '2017-12-12T08:01:08.661992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidator,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ \'PP2BufferStream\'',			#stamp : 'JanKurs 8/13/2016 11:30',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2658' ],		#self : OmReference [ '2659' ],		#time : DateAndTime [ '2017-12-12T08:01:08.662992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidator,				#isMetaSide : false			},			#name : #sources,			#protocol : #accessing,			#sourceCode : 'sources\r\t^ PP2Sources current inputs: #expressionOfSize: steps: 200 amount: 1 max: 200',			#stamp : 'JanKurs 8/23/2016 15:09',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2659' ],		#self : OmReference [ '2660' ],		#time : DateAndTime [ '2017-12-12T08:01:08.663992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #'actualForSource:',			#protocol : #validation,			#sourceCode : 'actualForSource: source\r\t| result |\r\tresult := optimizedParser parse: source.\r\t^ result isPetit2Failure ifFalse: [ \r\t\tresult value\r\t] ifTrue: [ \r\t\t#failure\r\t]',			#stamp : 'JanKurs 8/31/2016 19:23',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2660' ],		#self : OmReference [ '2661' ],		#time : DateAndTime [ '2017-12-12T08:01:08.665992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #'expectedForSource:',			#protocol : #validation,			#sourceCode : 'expectedForSource: source\r\t| result |\r\tresult := parser parse: source.\r\t\r\t^ result isPetit2Failure ifFalse: [ \r\t\tresult value\r\t] ifTrue: [ \r\t\t#failure\r\t]',			#stamp : 'JanKurs 8/31/2016 16:41',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2661' ],		#self : OmReference [ '2662' ],		#time : DateAndTime [ '2017-12-12T08:01:08.667992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tparser := PP2ExpressionGrammar new.\r\toptimizedParser := PP2ExpressionGrammar new optimize',			#stamp : 'JanKurs 8/31/2016 16:41',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2662' ],		#self : OmReference [ '2663' ],		#time : DateAndTime [ '2017-12-12T08:01:08.668992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ \'PP2ExpressionGrammar(Opt)\'',			#stamp : 'JanKurs 8/31/2016 16:41',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2663' ],		#self : OmReference [ '2664' ],		#time : DateAndTime [ '2017-12-12T08:01:08.669992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #optimizedParser,			#protocol : #accessing,			#sourceCode : 'optimizedParser\r\t^ optimizedParser',			#stamp : 'JanKurs 9/16/2016 09:30',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2664' ],		#self : OmReference [ '2665' ],		#time : DateAndTime [ '2017-12-12T08:01:08.670992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #parser,			#protocol : #accessing,			#sourceCode : 'parser\r\t^ parser',			#stamp : 'JanKurs 9/16/2016 09:30',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2665' ],		#self : OmReference [ '2666' ],		#time : DateAndTime [ '2017-12-12T08:01:08.671992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizaitonsValidator,				#isMetaSide : false			},			#name : #sources,			#protocol : #accessing,			#sourceCode : 'sources\r\t^ PP2Sources current inputs: #expressionOfSize: steps: 200 amount: 1 max: 200',			#stamp : 'JanKurs 9/16/2016 09:31',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2666' ],		#self : OmReference [ '2667' ],		#time : DateAndTime [ '2017-12-12T08:01:08.672992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'actualForSource:',			#protocol : #validation,			#sourceCode : 'actualForSource: source\r\tself subclassResponsibility',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2667' ],		#self : OmReference [ '2668' ],		#time : DateAndTime [ '2017-12-12T08:01:08.673992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'compactReportTo:',			#protocol : #reporting,			#sourceCode : 'compactReportTo: filename\r\t| file |\r\tfile := FileStream forceNewFileNamed: filename.\r\tself report printCompactOnStream: file.\r\tfile close.',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2668' ],		#self : OmReference [ '2669' ],		#time : DateAndTime [ '2017-12-12T08:01:08.674992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'expectedForSource:',			#protocol : #validation,			#sourceCode : 'expectedForSource: source\r\tself subclassResponsibility',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2669' ],		#self : OmReference [ '2670' ],		#time : DateAndTime [ '2017-12-12T08:01:08.675992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'fileContents:',			#protocol : #utilities,			#sourceCode : 'fileContents: filename\r\t^ (FileStream fileNamed: filename) contents',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2670' ],		#self : OmReference [ '2671' ],		#time : DateAndTime [ '2017-12-12T08:01:08.678992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tsilent := true',			#stamp : 'JanKurs 9/15/2016 17:28',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2671' ],		#self : OmReference [ '2672' ],		#time : DateAndTime [ '2017-12-12T08:01:08.679992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\tself subclassResponsibility',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2672' ],		#self : OmReference [ '2673' ],		#time : DateAndTime [ '2017-12-12T08:01:08.680992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #report,			#protocol : #accessing,			#sourceCode : 'report\r\t^ report',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2673' ],		#self : OmReference [ '2674' ],		#time : DateAndTime [ '2017-12-12T08:01:08.681992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'showDiffForSource:',			#protocol : #utilities,			#sourceCode : 'showDiffForSource: source\r\t| actual expected |\r\tactual := self actualForSource: source.\r\texpected := self expectedForSource: source.\r\t\r\t(DiffMorph \r\t\tfrom: (actual joinUsing: Character lf) \r\t\tto: (expected joinUsing: Character lf)) openInWindow',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2674' ],		#self : OmReference [ '2675' ],		#time : DateAndTime [ '2017-12-12T08:01:08.682992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #silent,			#protocol : #accessing,			#sourceCode : 'silent\r\t^ silent',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2675' ],		#self : OmReference [ '2676' ],		#time : DateAndTime [ '2017-12-12T08:01:08.683992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'silent:',			#protocol : #accessing,			#sourceCode : 'silent: aBoolean\r\t^ silent := aBoolean',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2676' ],		#self : OmReference [ '2677' ],		#time : DateAndTime [ '2017-12-12T08:01:08.684992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #sources,			#protocol : #accessing,			#sourceCode : 'sources\r\tself subclassResponsibility',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2677' ],		#self : OmReference [ '2678' ],		#time : DateAndTime [ '2017-12-12T08:01:08.685992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #timeout,			#protocol : #accessing,			#sourceCode : 'timeout\r\t^ 30 asDuration',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2678' ],		#self : OmReference [ '2679' ],		#time : DateAndTime [ '2017-12-12T08:01:08.687992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #transcriptCr,			#protocol : #transcript,			#sourceCode : 'transcriptCr\r\tself silent ifTrue: [ ^ self ].\r\t\r\tTranscript cr.',			#stamp : 'JanKurs 9/15/2016 17:29',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2679' ],		#self : OmReference [ '2680' ],		#time : DateAndTime [ '2017-12-12T08:01:08.689992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'transcriptShow:',			#protocol : #transcript,			#sourceCode : 'transcriptShow: text\r\tself silent ifTrue: [ ^ self ].\r\t\r\tTranscript show: text.',			#stamp : 'JanKurs 9/15/2016 17:29',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2680' ],		#self : OmReference [ '2681' ],		#time : DateAndTime [ '2017-12-12T08:01:08.690992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #validate,			#protocol : #validation,			#sourceCode : 'validate\r\t[ self validateBlocking ] fork',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2681' ],		#self : OmReference [ '2682' ],		#time : DateAndTime [ '2017-12-12T08:01:08.691992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #validateBlocking,			#protocol : #validation,			#sourceCode : 'validateBlocking\r\t| time sources |\r\r\tself transcriptCr; transcriptShow: \'Validating: \', self name.\r\t\t\r\treport := PP2ValidatorReport new.\r\treport parserName: self name.\r\t\r\ttime := [\r\t\tsources := self sources.\r\t\treport sources: sources.\r\t\t\r\t\tself transcriptCr.\r\t\tsources withIndexDo: [ :source :index | \r\t\t[ \r\t\t\t((index % ((sources size // 50) max: 1)) = 0) ifTrue: [ self transcriptShow: \'-\' ].\r\t\t\t(self validateSource: source report: report).\r\t\t] on: Error do: [ :err | \r\t\t\treport error: err forSource: source.\r\t\t\tsilent ifFalse: [ err signal ]\r\t\t]\r\t]] timeToRun.\r\r\treport time: time.\r\tself transcriptShow: report asString',			#stamp : 'JanKurs 9/15/2016 17:33',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2682' ],		#self : OmReference [ '2683' ],		#time : DateAndTime [ '2017-12-12T08:01:08.692992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Validator,				#isMetaSide : false			},			#name : #'validateSource:report:',			#protocol : #validation,			#sourceCode : 'validateSource: source report: aPPValidatorReport\r\t| expected actual |\r\t[\r\t\t[ expected := self expectedForSource: source. ] on: PP2SkipValidation do: [ ^ self ].\r\t] on: NotFound do: [ \r\t\t"Dunno why, but expected source not found just skip..."\r\t\t^ self\r\t].\r\t\r\t[\r\t\t[  actual := self actualForSource: source. ] on: PP2SkipValidation do: [  ^ self ]\r\t] valueWithin: self timeout onTimeout: [ \r\t\tactual := #().\r\t\treport timeout: source.\r\t].\r\r\taPPValidatorReport actual: actual vs: expected for: source\r\t\r',			#stamp : 'JanKurs 8/25/2016 15:28',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2683' ],		#self : OmReference [ '2684' ],		#time : DateAndTime [ '2017-12-12T08:01:08.693992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'actual:vs:for:',			#protocol : #events,			#sourceCode : 'actual: actual vs: expected for: source\r\t| entry |\r\r\t(actual isPetit2Failure and: [ expected isPetit2Failure not ]) ifTrue: [ \r\t\tentry := PP2ValidatorReportEntry new.\r\t\tentry actual: #().\r\t\tentry expected: expected.\r\t\tentries at: source put: entry.\r\t\t\r\t\t^ self failure: actual forSource: source.\r\t].\r\r\t(actual isPetit2Failure and: [ expected isPetit2Failure ]) ifTrue: [ \r\t\tentry := PP2ValidatorReportEntry new.\r\t\tentry expected: #().\r\t\tentry actual: #().\r\t\tentries at: source put: entry.\r\t\t\r\t\t^ self\r\t].\r\r\t(actual isPetit2Failure not and: [ expected isPetit2Failure ]) ifTrue: [ \r\t\tentry := PP2ValidatorReportEntry new.\r\t\tentry expected: #().\r\t\tentry actual: actual.\r\t\tentries at: source put: entry.\r\t\t\r\t\t^ self\r\t].\r\r\t"\r\t\tboth are ok\r\t"\r\tentry := PP2ValidatorReportEntry new.\r\tentry expected: expected.\r\tentry actual: actual.\r\tentries at: source put: entry',			#stamp : 'JanKurs 9/3/2016 17:54',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2684' ],		#self : OmReference [ '2685' ],		#time : DateAndTime [ '2017-12-12T08:01:08.694992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #asString,			#protocol : #converting,			#sourceCode : 'asString\r\t| stream |\r\tstream := \'\' writeStream.\r\tself printOnStream: stream.\r\t^ stream contents',			#stamp : 'JanKurs 9/16/2016 10:52',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2685' ],		#self : OmReference [ '2686' ],		#time : DateAndTime [ '2017-12-12T08:01:08.695992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'error:forSource:',			#protocol : #events,			#sourceCode : 'error: error forSource: source\r\terrors add: (error -> source).',			#stamp : 'JanKurs 6/7/2016 14:29',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2686' ],		#self : OmReference [ '2687' ],		#time : DateAndTime [ '2017-12-12T08:01:08.696992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #errors,			#protocol : #accessing,			#sourceCode : 'errors\r\t^ errors',			#stamp : 'JanKurs 6/7/2016 14:26',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2687' ],		#self : OmReference [ '2688' ],		#time : DateAndTime [ '2017-12-12T08:01:08.698992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'failure:forSource:',			#protocol : #events,			#sourceCode : 'failure: failure forSource: source\r\tfailures add: (failure -> source)',			#stamp : 'JanKurs 6/7/2016 15:55',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2688' ],		#self : OmReference [ '2689' ],		#time : DateAndTime [ '2017-12-12T08:01:08.700992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #failureRate,			#protocol : #stats,			#sourceCode : 'failureRate\r\t^ ((timeouts size + failures size) / sources size) asFloat',			#stamp : 'JanKurs 6/10/2016 10:15',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2689' ],		#self : OmReference [ '2690' ],		#time : DateAndTime [ '2017-12-12T08:01:08.701992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #failures,			#protocol : #accessing,			#sourceCode : 'failures\r\t^ failures',			#stamp : 'JanKurs 6/7/2016 14:26',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2690' ],		#self : OmReference [ '2691' ],		#time : DateAndTime [ '2017-12-12T08:01:08.702992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tentries := Dictionary new.\r\tfailures := OrderedCollection new.\r\ttimeouts := OrderedCollection new.\r\terrors := OrderedCollection new.',			#stamp : 'JanKurs 6/7/2016 16:14',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2691' ],		#self : OmReference [ '2692' ],		#time : DateAndTime [ '2017-12-12T08:01:08.703992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #parserName,			#protocol : #accessing,			#sourceCode : 'parserName\r\t^ parserName',			#stamp : 'JanKurs 6/10/2016 10:18',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2692' ],		#self : OmReference [ '2693' ],		#time : DateAndTime [ '2017-12-12T08:01:08.704992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'parserName:',			#protocol : #accessing,			#sourceCode : 'parserName: aString\r\tparserName := aString',			#stamp : 'JanKurs 6/10/2016 10:16',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2693' ],		#self : OmReference [ '2694' ],		#time : DateAndTime [ '2017-12-12T08:01:08.705992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #precision,			#protocol : #stats,			#sourceCode : 'precision\r\t| truePositives falsePositives |\r\ttruePositives := entries  inject: 0 into: [ :sum :e | sum + e truePositives size ].\r\tfalsePositives := entries values inject: 0 into: [ :sum :e | sum + e falsePositives size ].\r\t\r\t^ truePositives / (truePositives + falsePositives) asFloat\r\t',			#stamp : 'JanKurs 6/7/2016 16:11',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2694' ],		#self : OmReference [ '2695' ],		#time : DateAndTime [ '2017-12-12T08:01:08.706992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'printCompactOnStream:',			#protocol : #printing,			#sourceCode : 'printCompactOnStream: stream\r\tstream nextPutAll: self parserName; tab.\r\tstream nextPutAll: self precision asString; tab.\r\tstream nextPutAll: self recall asString; tab.\r\tstream nextPutAll: self failureRate asString; tab.\r\tstream nextPutAll: self timePerSource asString; tab.\r\t\r\tstream nextPutAll: failures size asString; tab.\r\tstream nextPutAll: timeouts size asString; tab.\r\tstream nextPutAll: errors size asString; cr.\r\tstream flush.\r',			#stamp : 'JanKurs 6/10/2016 13:57',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2695' ],		#self : OmReference [ '2696' ],		#time : DateAndTime [ '2017-12-12T08:01:08.707992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'printOnStream:',			#protocol : #printing,			#sourceCode : 'printOnStream: stream\r\tstream cr; nextPutAll: \'Validated in: \', time asMilliSeconds asString, \'ms on \', sources  size asString, \' files\'.\r\tstream cr; nextPutAll: \'precision: \', (self precision printShowingDecimalPlaces: 3).\r\tstream cr; nextPutAll: \'recall: \', (self recall printShowingDecimalPlaces: 3).\r\tstream cr; nextPutAll: \'total elements: \', (self total asString).\r\tstream cr; nextPutAll: \'failure rate: \', (self failureRate printShowingDecimalPlaces: 3).\r\tstream cr; nextPutAll: \'average time: \', (self timePerSource printShowingDecimalPlaces: 3), \'ms\'.\r\t\r\tstream cr; nextPutAll: \'failures: \', failures size asString.\r\tstream cr; nextPutAll: \'timeouts: \', timeouts size asString.\r\tstream cr; nextPutAll: \'errors: \', errors size asString.\r\tstream flush.\r',			#stamp : 'JanKurs 9/9/2017 17:31',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2696' ],		#self : OmReference [ '2697' ],		#time : DateAndTime [ '2017-12-12T08:01:08.709992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #recall,			#protocol : #stats,			#sourceCode : 'recall\r\t| truePositives falseNegatives |\r\ttruePositives := entries values inject: 0 into: [ :sum :e | sum + e truePositives size ].\r\tfalseNegatives := entries values inject: 0 into: [ :sum :e | sum + e falseNegatives size ].\r\r\t^ truePositives / (truePositives + falseNegatives) asFloat\r\t',			#stamp : 'JanKurs 6/8/2016 14:50',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2697' ],		#self : OmReference [ '2698' ],		#time : DateAndTime [ '2017-12-12T08:01:08.710992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #sources,			#protocol : #accessing,			#sourceCode : 'sources\r\t^ sources',			#stamp : 'JanKurs 6/7/2016 14:26',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2698' ],		#self : OmReference [ '2699' ],		#time : DateAndTime [ '2017-12-12T08:01:08.711992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'sources:',			#protocol : #accessing,			#sourceCode : 'sources: anObject\r\tsources := anObject',			#stamp : 'JanKurs 6/7/2016 14:26',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2699' ],		#self : OmReference [ '2700' ],		#time : DateAndTime [ '2017-12-12T08:01:08.713992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'time:',			#protocol : #accessing,			#sourceCode : 'time: aTime\r\ttime := aTime',			#stamp : 'JanKurs 6/7/2016 16:07',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2700' ],		#self : OmReference [ '2701' ],		#time : DateAndTime [ '2017-12-12T08:01:08.714992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #timePerSource,			#protocol : #stats,			#sourceCode : 'timePerSource\r\t^ (time asMilliSeconds / sources size) asFloat',			#stamp : 'JanKurs 6/7/2016 16:18',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2701' ],		#self : OmReference [ '2702' ],		#time : DateAndTime [ '2017-12-12T08:01:08.715992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #'timeout:',			#protocol : #events,			#sourceCode : 'timeout: source\r\ttimeouts add: source',			#stamp : 'JanKurs 6/7/2016 14:29',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2702' ],		#self : OmReference [ '2703' ],		#time : DateAndTime [ '2017-12-12T08:01:08.716992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #timeouts,			#protocol : #accessing,			#sourceCode : 'timeouts\r\t^ timeouts',			#stamp : 'JanKurs 6/7/2016 14:26',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2703' ],		#self : OmReference [ '2704' ],		#time : DateAndTime [ '2017-12-12T08:01:08.717992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReport,				#isMetaSide : false			},			#name : #total,			#protocol : #stats,			#sourceCode : 'total\r\t^ entries values inject: 0 into: [ :sum :e | sum + e expected size ].\t',			#stamp : 'JanKurs 7/19/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2704' ],		#self : OmReference [ '2705' ],		#time : DateAndTime [ '2017-12-12T08:01:08.719992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #actual,			#protocol : #accessing,			#sourceCode : 'actual\r\t^ actual',			#stamp : 'JanKurs 6/7/2016 15:19',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2705' ],		#self : OmReference [ '2706' ],		#time : DateAndTime [ '2017-12-12T08:01:08.720992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #'actual:',			#protocol : #accessing,			#sourceCode : 'actual: anObject\r\tactual := anObject',			#stamp : 'JanKurs 6/7/2016 15:19',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2706' ],		#self : OmReference [ '2707' ],		#time : DateAndTime [ '2017-12-12T08:01:08.721992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #expected,			#protocol : #accessing,			#sourceCode : 'expected\r\t^ expected',			#stamp : 'JanKurs 6/7/2016 15:19',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2707' ],		#self : OmReference [ '2708' ],		#time : DateAndTime [ '2017-12-12T08:01:08.722992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #'expected:',			#protocol : #accessing,			#sourceCode : 'expected: anObject\r\texpected := anObject',			#stamp : 'JanKurs 6/7/2016 15:19',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2708' ],		#self : OmReference [ '2709' ],		#time : DateAndTime [ '2017-12-12T08:01:08.723992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #falseNegatives,			#protocol : #stats,			#sourceCode : 'falseNegatives\r\t^ expected select: [ :e | (actual includes: e) not ].\r',			#stamp : 'JanKurs 6/7/2016 15:18',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2709' ],		#self : OmReference [ '2710' ],		#time : DateAndTime [ '2017-12-12T08:01:08.724992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #falsePositives,			#protocol : #stats,			#sourceCode : 'falsePositives\r\t^ actual select: [ :e | (expected includes: e) not ].\r',			#stamp : 'JanKurs 6/7/2016 15:18',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2710' ],		#self : OmReference [ '2711' ],		#time : DateAndTime [ '2017-12-12T08:01:08.725992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #isPerfect,			#protocol : #testing,			#sourceCode : 'isPerfect\r\t^ self precision = 1 and: [ self recall = 1 ]',			#stamp : 'JanKurs 7/16/2016 19:46',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2711' ],		#self : OmReference [ '2712' ],		#time : DateAndTime [ '2017-12-12T08:01:08.726992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #precision,			#protocol : #stats,			#sourceCode : 'precision\r\t( actual isEmpty) ifTrue: [ ^ 1 ].\r\t\r\t^ self truePositives size / (self truePositives size + self falsePositives size) asFloat\r\t',			#stamp : 'JanKurs 8/31/2016 19:25',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2712' ],		#self : OmReference [ '2713' ],		#time : DateAndTime [ '2017-12-12T08:01:08.727992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPut: $(.\r\taStream nextPutAll: (self precision  printShowingDecimalPlaces: 2).\r\taStream nextPutAll: \', \'.\r\taStream nextPutAll: (self recall  printShowingDecimalPlaces: 2).\r\taStream nextPut: $).\r',			#stamp : 'JanKurs 6/8/2016 14:19',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2713' ],		#self : OmReference [ '2714' ],		#time : DateAndTime [ '2017-12-12T08:01:08.728992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #recall,			#protocol : #stats,			#sourceCode : 'recall\r\t(expected isEmpty) ifTrue: [ ^ 1 ].\r\t^ self truePositives size / (self truePositives size + self falseNegatives size) asFloat',			#stamp : 'JanKurs 8/31/2016 19:25',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2714' ],		#self : OmReference [ '2715' ],		#time : DateAndTime [ '2017-12-12T08:01:08.731992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #showStringDiff,			#protocol : #printing,			#sourceCode : 'showStringDiff\r\t(DiffMorph \r\t\tfrom: (actual joinUsing: Character lf) \r\t\tto: (expected joinUsing: Character lf)) openInWindow',			#stamp : 'JanKurs 7/17/2016 15:51',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2715' ],		#self : OmReference [ '2716' ],		#time : DateAndTime [ '2017-12-12T08:01:08.732992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ValidatorReportEntry,				#isMetaSide : false			},			#name : #truePositives,			#protocol : #stats,			#sourceCode : 'truePositives\r\t^ actual select: [ :e | (expected includes: e) ].\r',			#stamp : 'JanKurs 6/7/2016 15:18',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2716' ],		#self : OmReference [ '2717' ],		#time : DateAndTime [ '2017-12-12T08:01:08.733992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Sources class',				#isMetaSide : true			},			#name : #downloadUrl,			#protocol : #'as yet unclassified',			#sourceCode : 'downloadUrl\r\t^ \'http://scg.unibe.ch/download/jk/sources/\'',			#stamp : 'JanKurs 9/16/2016 14:18',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2717' ],		#self : OmReference [ '2718' ],		#time : DateAndTime [ '2017-12-12T08:01:08.734992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'aIslandOfSize:',			#protocol : #seas,			#sourceCode : 'aIslandOfSize: size\r\t| collection |\r\tcollection := String new: size.\r\t\r\t1 to: size do: [ :index |\r\t \t\tcollection at: index put: $. .\t\r\t].\r\r\tcollection at: size atRandom put: $a.\r\t^ collection',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2718' ],		#self : OmReference [ '2719' ],		#time : DateAndTime [ '2017-12-12T08:01:08.735992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #aIslandSourcesBenchmarking,			#protocol : #seas,			#sourceCode : 'aIslandSourcesBenchmarking\r\t^ self cachedValue: #aIslandSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #aIslandOfSize: steps: 30 amount: 1 max: 1*1000*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2719' ],		#self : OmReference [ '2720' ],		#time : DateAndTime [ '2017-12-12T08:01:08.736992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #aIslandSourcesComplexity,			#protocol : #seas,			#sourceCode : 'aIslandSourcesComplexity\r\t^ self cachedValue: #aIslandSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #aIslandOfSize: steps: 30 amount: 1 max: 1*1000*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2720' ],		#self : OmReference [ '2721' ],		#time : DateAndTime [ '2017-12-12T08:01:08.737992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #aIslandSourcesProfiling,			#protocol : #seas,			#sourceCode : 'aIslandSourcesProfiling\r\t^ self cachedValue: #aIslandSourcesProfiling ifAbsentPut: [ \r\t\tself inputs: #aIslandOfSize: steps: 30 amount: 1 max: 100*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2721' ],		#self : OmReference [ '2722' ],		#time : DateAndTime [ '2017-12-12T08:01:08.738992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'aIslandsOfSize:',			#protocol : #seas,			#sourceCode : 'aIslandsOfSize: size\r\t| collection |\r\tcollection := String new: size.\r\t\r\t1 to: size do: [ :index |\r\t\t(10 atRandom == 1) ifTrue: [ \r\t\t\tcollection at: index put: $a.\r\t\t] ifFalse: [ \r\t \t\tcollection at: index put: $. .\t\r\t\t]\r\t].\r\t^ collection',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2722' ],		#self : OmReference [ '2723' ],		#time : DateAndTime [ '2017-12-12T08:01:08.739992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #aIslandsSourcesBenchmarking,			#protocol : #seas,			#sourceCode : 'aIslandsSourcesBenchmarking\r\t^ self cachedValue: #aIslandsSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #aIslandsOfSize: steps: 30 amount: 1 max: 1*1000*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2723' ],		#self : OmReference [ '2724' ],		#time : DateAndTime [ '2017-12-12T08:01:08.741992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #aIslandsSourcesComplexity,			#protocol : #seas,			#sourceCode : 'aIslandsSourcesComplexity\r\t^ self cachedValue: #aIslandsSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #aIslandsOfSize: steps: 30 amount: 1 max: 100*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2724' ],		#self : OmReference [ '2725' ],		#time : DateAndTime [ '2017-12-12T08:01:08.742992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #aIslandsSourcesProfiling,			#protocol : #seas,			#sourceCode : 'aIslandsSourcesProfiling\r\t^ self cachedValue: #aIslandsSourcesProfiling ifAbsentPut: [ \r\t\tself inputs: #aIslandsOfSize: steps: 30 amount: 1 max: 2*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2725' ],		#self : OmReference [ '2726' ],		#time : DateAndTime [ '2017-12-12T08:01:08.743992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'blockIslandsOfSize:',			#protocol : #seas,			#sourceCode : 'blockIslandsOfSize: size\r\t| stream |\r\tstream := WriteStream on: (String new: size).\r\tself blockIslandsOfSize: size stream: stream.\r\tself assert: (stream size - size) == 0.\r\t^ stream contents\r',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2726' ],		#self : OmReference [ '2727' ],		#time : DateAndTime [ '2017-12-12T08:01:08.744992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'blockIslandsOfSize:stream:',			#protocol : #seas,			#sourceCode : 'blockIslandsOfSize: size stream: stream\r\t| index rand |\r\tindex := 0.\r\trand := Random new.\r\t\r\t[index < size] whileTrue: [ \r \t\t((size - index >= 2) and: [(rand next < 0.1)]) ifTrue: [  \r\t\t\t| subSize |\r\t\t\tsubSize := (0 max: (size - index - 2)).\r\t\t\tsubSize > 0 ifTrue: [ subSize := rand nextInt: subSize ].\r\t\t\tstream nextPut: ${.\r\t\t\tself blockIslandsOfSize: subSize stream: stream.\r\t\t\tstream nextPut: $}.\r\t\t\tindex := index + subSize  + 2.\r\t\t] ifFalse: [ \r\t\t\tstream nextPut: $. .\r\t\t\tindex := index + 1.\r\t\t].\r\t]',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2727' ],		#self : OmReference [ '2728' ],		#time : DateAndTime [ '2017-12-12T08:01:08.745992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #blockIslandsSourcesBenchmarking,			#protocol : #seas,			#sourceCode : 'blockIslandsSourcesBenchmarking\r\t^ self cachedValue: #blockIslandsSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #blockIslandsOfSize: steps: 30 amount: 1 max: 1*1000*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2728' ],		#self : OmReference [ '2729' ],		#time : DateAndTime [ '2017-12-12T08:01:08.746992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #blockIslandsSourcesComplexity,			#protocol : #seas,			#sourceCode : 'blockIslandsSourcesComplexity\r\t^ self cachedValue: #blockIslandsSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #blockIslandsOfSize: steps: 30 amount: 1 max: 50*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2729' ],		#self : OmReference [ '2730' ],		#time : DateAndTime [ '2017-12-12T08:01:08.747992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #blockIslandsSourcesProfiling,			#protocol : #seas,			#sourceCode : 'blockIslandsSourcesProfiling\r\t^ self cachedValue: #blockIslandsSourcesProfiling ifAbsentPut: [ \r\t\tself inputs: #blockIslandsOfSize: steps: 30 amount: 3 max: 2*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2730' ],		#self : OmReference [ '2731' ],		#time : DateAndTime [ '2017-12-12T08:01:08.748992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #blockIslandsSourcesTesting,			#protocol : #seas,			#sourceCode : 'blockIslandsSourcesTesting\r\t^ self cachedValue: #blockIslandsSourcesTesting ifAbsentPut: [ \r\t\tself inputs: #blockIslandsOfSize: steps: 30 amount: 1 max: 1*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2731' ],		#self : OmReference [ '2732' ],		#time : DateAndTime [ '2017-12-12T08:01:08.749992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'cachedValue:ifAbsentPut:',			#protocol : #caching,			#sourceCode : 'cachedValue: key ifAbsentPut: block\r\t^ cache at: key ifAbsentPut: block',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2732' ],		#self : OmReference [ '2733' ],		#time : DateAndTime [ '2017-12-12T08:01:08.750992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'download:',			#protocol : #download,			#sourceCode : 'download: zipFile\r\tzipFile asFileReference exists ifFalse: [ \r\t\tZnClient new\r\t\t\turl: self class downloadUrl, zipFile;\r\t\t\tsignalProgress: true;\r\t\t\tdownloadTo: FileSystem workingDirectory.\r\t].\r\t^  (FileSystem zip: zipFile asFileReference) open workingDirectory',			#stamp : 'JanKurs 9/17/2016 21:27',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2733' ],		#self : OmReference [ '2734' ],		#time : DateAndTime [ '2017-12-12T08:01:08.752992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'downloadUI:',			#protocol : #download,			#sourceCode : 'downloadUI: zipFile\r\tzipFile asFileReference exists ifFalse: [ \r\t\tUIManager default informUserDuring: [ :bar |\r\t\t\tbar label: \'Downloading ...\'.\r\t\t\t[ ZnClient new\r\t\t\t\turl: self class downloadUrl, zipFile;\r\t\t\t\tsignalProgress: true;\r\t\t\t\tdownloadTo: FileSystem workingDirectory ]\r\t\t\ton: HTTPProgress \r\t\t\tdo: [ :progress |\r\t\t\t\tprogress isEmpty ifFalse: [ \r\t\t\t\t\tbar current: progress percentage.\r\t\t\t\t\tprogress total ifNotNil: [ :aTotalNumber |\r\t\t\t\t\t\tbar label: \'Downloading \' ] ].\r\t\t\t\tprogress resume ] \r\t\t]\t\r\t].\r\t^  (FileSystem zip: zipFile asFileReference) open workingDirectory',			#stamp : 'JanKurs 9/17/2016 21:27',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2734' ],		#self : OmReference [ '2735' ],		#time : DateAndTime [ '2017-12-12T08:01:08.753992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'expressionOfSize:',			#protocol : #expressions,			#sourceCode : 'expressionOfSize: size\r\t| stream |\r\tstream := WriteStream on: (String new: size * 5).\r\tself expressionOfSize: size stream: stream.\r\t^ stream contents',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2735' ],		#self : OmReference [ '2736' ],		#time : DateAndTime [ '2017-12-12T08:01:08.755992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'expressionOfSize:stream:',			#protocol : #expressions,			#sourceCode : 'expressionOfSize: size stream: stream\r\t| index rand |\r\tindex := 0.\r\trand := Random new.\r\t\r\t[index < size] whileTrue: [ \r \t\t(rand next < 0.1) ifTrue: [  \r\t\t\t| subSize |\r\t\t\tsubSize := rand nextInt: (size - index - 1) + 1.\r\t\t\tstream nextPutAll: \' (\'.\r\t\t\tself expressionOfSize: subSize stream: stream.\r\t\t\tstream nextPutAll: \') \'.\r\t\t\tindex := index + subSize.\r\t\t] ifFalse: [ \r\t\t\tstream nextPutAll: (rand nextInt: 100) asString.\r\t\t\tindex := index + 1.\r\t\t].\r\t\r\t\t(index < size) ifTrue: [ \r \t\t\t(rand next < 0.5) \r\t\t\t\tifTrue: [  stream nextPutAll: \' + \' ] \r\t\t\t\tifFalse: [ stream nextPutAll: \' * \' ]\r\t\t]\r\t]',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2736' ],		#self : OmReference [ '2737' ],		#time : DateAndTime [ '2017-12-12T08:01:08.756992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #expressionSourcesBenchmarking,			#protocol : #expressions,			#sourceCode : 'expressionSourcesBenchmarking\r\t^ self cachedValue: #expressionSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #expressionOfSize: steps: 50 amount: 10 max: 200.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2737' ],		#self : OmReference [ '2738' ],		#time : DateAndTime [ '2017-12-12T08:01:08.757992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #expressionSourcesComplexity,			#protocol : #expressions,			#sourceCode : 'expressionSourcesComplexity\r\t^ self cachedValue: #expressionSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #expressionOfSize: steps: 50 amount: 3 max: 2000.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2738' ],		#self : OmReference [ '2739' ],		#time : DateAndTime [ '2017-12-12T08:01:08.758992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #expressionSourcesProfiling,			#protocol : #expressions,			#sourceCode : 'expressionSourcesProfiling\r\t^ self cachedValue: #expressionSourcesProfiling ifAbsentPut: [ \r\t\tself inputs: #expressionOfSize: steps: 50 amount: 1 max: 100.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2739' ],		#self : OmReference [ '2740' ],		#time : DateAndTime [ '2017-12-12T08:01:08.759992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #expressionSourcesVerification,			#protocol : #expressions,			#sourceCode : 'expressionSourcesVerification\r\t^ self cachedValue: #expressionSourcesVerification ifAbsentPut: [ \r\t\tself inputs: #expressionOfSize: steps: 500 amount: 1 max: 500.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2740' ],		#self : OmReference [ '2741' ],		#time : DateAndTime [ '2017-12-12T08:01:08.760992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'files:withExtension:',			#protocol : #utility,			#sourceCode : 'files: files withExtension: extension\r\t^ files select: [ :f | f extension = extension ] ',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2741' ],		#self : OmReference [ '2742' ],		#time : DateAndTime [ '2017-12-12T08:01:08.762992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #idsSourcesBenchmarking,			#protocol : #micro,			#sourceCode : 'idsSourcesBenchmarking\r\t"\r\t\tPPValidatorSources current idsSourcesBenchmarking.\r\t"\r\t^ self cachedValue: #idsSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #loremIpsum: steps: 50 amount: 1 max: 200*1000\r\t]',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2742' ],		#self : OmReference [ '2743' ],		#time : DateAndTime [ '2017-12-12T08:01:08.763992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'indentExpressionOfSize:',			#protocol : #expressions,			#sourceCode : 'indentExpressionOfSize: size\r\t| stream |\r\tstream := WriteStream on: (String new: size * 5).\r\tself indentExpressionOfSize: size stream: stream indent: 0 limit: size.\r\t^ stream contents',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2743' ],		#self : OmReference [ '2744' ],		#time : DateAndTime [ '2017-12-12T08:01:08.765992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'indentExpressionOfSize:stream:indent:limit:',			#protocol : #expressions,			#sourceCode : 'indentExpressionOfSize: size stream: stream indent: indent limit: limit\r\t| index rand |\r\tindex := 0.\r\trand := Random new.\r\r\t[index < size] whileTrue: [ \r \t\t(index ~= 0 and: [ indent < 500 and: [ rand next < 0.1]] ) ifTrue: [  \r\t\t\t| subSize |\r\t\t\tsubSize := rand nextInt: (size - index - 1) + 1.\r\r\t\t\tstream nextPut: Character cr.\r\t\t\t(indent + 1) timesRepeat: [ stream nextPutAll: \'    \' ].\r\r\t\t\tself indentExpressionOfSize: subSize stream: stream indent: (indent + 1) limit: limit.\r\r\t\t\tstream nextPut: Character cr.\r\t\t\tindent timesRepeat: [ stream nextPutAll: \'    \' ].\r\r\t\t\tindex := index + subSize.\r\t\t] ifFalse: [ \r\t\t\tstream nextPutAll: (rand nextInt: 100) asString.\r\t\t\tindex := index + 1.\r\t\t].\r\t\r\t\t(index < size) ifTrue: [ \r \t\t\t(rand next < 0.5) \r\t\t\t\tifTrue: [  stream nextPutAll: \'+\' ] \r\t\t\t\tifFalse: [ stream nextPutAll: \'*\' ]\r\t\t]\r\t]',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2744' ],		#self : OmReference [ '2745' ],		#time : DateAndTime [ '2017-12-12T08:01:08.766992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #indentExpressionSourcesBenchmarking,			#protocol : #expressions,			#sourceCode : 'indentExpressionSourcesBenchmarking\r\t^ self cachedValue: #indentExpressionSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #indentExpressionOfSize: steps: 50 amount: 3 max: 200.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2745' ],		#self : OmReference [ '2746' ],		#time : DateAndTime [ '2017-12-12T08:01:08.767992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #indentExpressionSourcesComplexity,			#protocol : #expressions,			#sourceCode : 'indentExpressionSourcesComplexity\r\t^ self cachedValue: #indentExpressionSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #indentExpressionOfSize: steps: 50 amount: 3 max: 2000.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2746' ],		#self : OmReference [ '2747' ],		#time : DateAndTime [ '2017-12-12T08:01:08.768992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #indentExpressionSourcesProfiling,			#protocol : #expressions,			#sourceCode : 'indentExpressionSourcesProfiling\r\t^ self cachedValue: #indentExpressionSourcesProfiling ifAbsentPut: [ \r\t\tself inputs: #indentExpressionOfSize: steps: 50 amount: 1 max: 50.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2747' ],		#self : OmReference [ '2748' ],		#time : DateAndTime [ '2017-12-12T08:01:08.769992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #indentExpressionSourcesVerification,			#protocol : #expressions,			#sourceCode : 'indentExpressionSourcesVerification\r\t^ self cachedValue: #indentExpressionSourcesVerification ifAbsentPut: [ \r\t\tself inputs: #indentExpressionOfSize: steps: 50 amount: 1 max: 50.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2748' ],		#self : OmReference [ '2749' ],		#time : DateAndTime [ '2017-12-12T08:01:08.770992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcache := IdentityDictionary new',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2749' ],		#self : OmReference [ '2750' ],		#time : DateAndTime [ '2017-12-12T08:01:08.771992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'inputs:steps:amount:max:',			#protocol : #utility,			#sourceCode : 'inputs: selector steps: steps amount: amount max: max\r\t| input size step |\r\tinput := OrderedCollection new.\r\tstep := max // steps.\r\t\r\t1 to: steps do: [ :index |\r\t\tsize := step * index.\r\t\tamount timesRepeat: [ \r\t\t\tinput add: (self perform: selector with: size).\r\t\t]\r\t].\r\r\t^ input',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2750' ],		#self : OmReference [ '2751' ],		#time : DateAndTime [ '2017-12-12T08:01:08.773992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #ll1expressionSourcesBenchmarking,			#protocol : #expressions,			#sourceCode : 'll1expressionSourcesBenchmarking\r\t^ self cachedValue: #ll1expressionSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #expressionOfSize: steps: 50 amount: 3 max: 2000.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2751' ],		#self : OmReference [ '2752' ],		#time : DateAndTime [ '2017-12-12T08:01:08.774992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #ll1expressionSourcesComplexity,			#protocol : #expressions,			#sourceCode : 'll1expressionSourcesComplexity\r\t^ self cachedValue: #ll1expressionSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #expressionOfSize: steps: 200 amount: 1 max: 10*1000.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2752' ],		#self : OmReference [ '2753' ],		#time : DateAndTime [ '2017-12-12T08:01:08.775992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #ll1indentExpressionSourcesBenchmarking,			#protocol : #expressions,			#sourceCode : 'll1indentExpressionSourcesBenchmarking\r\t^ self cachedValue: #ll1indentExpressionSourcesBenchmarking ifAbsentPut: [ \r\t\tself inputs: #indentExpressionOfSize: steps: 50 amount: 3 max: 500.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2753' ],		#self : OmReference [ '2754' ],		#time : DateAndTime [ '2017-12-12T08:01:08.776992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #ll1indentExpressionSourcesComplexity,			#protocol : #expressions,			#sourceCode : 'll1indentExpressionSourcesComplexity\r\t^ self cachedValue: #ll1indentExpressionSourcesComplexity ifAbsentPut: [ \r\t\tself inputs: #indentExpressionOfSize: steps: 200 amount: 1 max: 5*1000.\r\t].\r\t\r',			#stamp : 'JanKurs 9/16/2016 11:44',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2754' ],		#self : OmReference [ '2755' ],		#time : DateAndTime [ '2017-12-12T08:01:08.777992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #loremIpsum,			#protocol : #utility,			#sourceCode : 'loremIpsum\r\t^ \'Lorem ipsum dolor sit amet  consectetur adipiscing elit  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua  Ut enim ad minim veniam  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur  Excepteur sint occaecat cupidatat non proident  sunt in culpa qui officia deserunt mollit anim id est laborum\'',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2755' ],		#self : OmReference [ '2756' ],		#time : DateAndTime [ '2017-12-12T08:01:08.779992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'loremIpsum:',			#protocol : #utility,			#sourceCode : 'loremIpsum: size\r\t"Return a mostly random multi-paragraph filler string of the specified size.\r\tThe result is pure ASCII, uses CR for newlines and no dots and newlines."\r\t\r\t"\r\tPPValidatorSources new loremIpsum: 2048\r\t"\r\t\r\t| words out |\r\twords := (self loremIpsum findTokens: \' \') collect: #asLowercase.\r\t(out := LimitedWriteStream on: (String new: size withAll: Character space))\r\t\tsetLimit: size - 2 \r\t\tlimitBlock: [ \r\t\t\t^ out originalContents \r\t\t\t\tat: size put: Character cr; \r\t\t\t\tyourself ].\r\t[ \r\t\tout << self loremIpsum; cr; cr.\r\t\t5 atRandom timesRepeat: [\r\t\t\t15 atRandom timesRepeat: [\r\t \t\t\tout << words atRandom capitalized.\r\t\t\t\t20 atRandom timesRepeat: [ out space; << words atRandom ].\r\t\t\t\tout space ].\r\t\t\tout cr; cr ] ] repeat',			#stamp : 'JanKurs 8/23/2016 14:17',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2756' ],		#self : OmReference [ '2757' ],		#time : DateAndTime [ '2017-12-12T08:01:08.780992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'readDirectory:',			#protocol : #utility,			#sourceCode : 'readDirectory: directory\r\t| file |\r\r\t( (Smalltalk respondsTo: #isSmalltalkX) and:[ Smalltalk isSmalltalkX ] ) ifTrue:[ \r\t\tfile := self class dataDirectory asFilename / directory.\r\t\tfile exists ifFalse:[  \r\t\t\tself error: \'Directory does not exist\'.\r\t\t].\r\t\t^ (file recursiveDirectoryContentsAsFilenames select:[:each | each isRegularFile ]) asSortedCollection \r\t] ifFalse:[ \r\t\t"Assuming Pharo..."\r\t\tZnClient new\r\t\t\turl: \'http://scg.unibe.ch/download/jk/sources/smalltalk-src-selected.zip\';\r\t\t\tsignalProgress: true;\r\t\t\tdownloadTo: FileSystem workingDirectory.\r\t\tfile := (FileSystem zip: \'smalltalk-src-selected.zip\' asFileReference) open workingDirectory.\r\r"\t\tfile := self class dataDirectory download\r\t\tfile := self class dataDirectory asFileReference / directory.\r\t\tfile exists ifFalse: [ \r\t\t\tself error: \'Directory\', directory asString, \' does not exist\'.\r\t\t].\r"\t\t^ file allFiles asSortedCollection \r\t]\r\r\t"Modified: / 10-05-2015 / 07:54:14 / Jan Vrany <jan.vrany@fit.cvut.cz>"',			#stamp : 'JanKurs 9/16/2016 14:14',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2757' ],		#self : OmReference [ '2758' ],		#time : DateAndTime [ '2017-12-12T08:01:08.781992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'selectEvenly:fromFiles:',			#protocol : #utility,			#sourceCode : 'selectEvenly: n fromFiles: collection\r\t^ self selectEvenly: n fromFiles: collection thatSatisfy: [ :e | true ]',			#stamp : 'JanKurs 9/17/2016 21:08',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2758' ],		#self : OmReference [ '2759' ],		#time : DateAndTime [ '2017-12-12T08:01:08.784992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #'selectEvenly:fromFiles:thatSatisfy:',			#protocol : #utility,			#sourceCode : 'selectEvenly: n fromFiles: collection thatSatisfy: aBlock\r\t| set step index size sorted |\r\tset := IdentitySet new.\t\r\tstep := 65537.\r\tindex := 0.\r\tsize := collection size.\r\tsorted := collection sort.\r\tself assert: collection atRandom isFile.\r\t\r\t[set size = n] whileFalse: [ \r\t\tindex := ((index + step) % size).\r\t\t(aBlock value: (sorted at: (index + 1) )) ifTrue: [ \r\t\t\tset add: (sorted at: (index + 1)).\r\t\t].\r\t].\r\r\t^ set asOrderedCollection sorted collect: [ :file | file contents ]',			#stamp : 'JanKurs 9/17/2016 21:22',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2759' ],		#self : OmReference [ '2760' ],		#time : DateAndTime [ '2017-12-12T08:01:08.785992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SkipValidation class',				#isMetaSide : true			},			#name : #'reason:',			#protocol : #'instance creation',			#sourceCode : 'reason: aString\r\t^ self new\r\t\treason: aString;\r\t\tyourself',			#stamp : 'JanKurs 8/13/2016 15:08',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2760' ],		#self : OmReference [ '2761' ],		#time : DateAndTime [ '2017-12-12T08:01:08.786992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SkipValidation,				#isMetaSide : false			},			#name : #reason,			#protocol : #accessing,			#sourceCode : 'reason\r\t^ reason',			#stamp : 'JanKurs 8/13/2016 15:08',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2761' ],		#self : OmReference [ '2762' ],		#time : DateAndTime [ '2017-12-12T08:01:08.787992+08:00' ],		#trigger : OmReference [ '2643' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SkipValidation,				#isMetaSide : false			},			#name : #'reason:',			#protocol : #accessing,			#sourceCode : 'reason: aString\r\treason := aString',			#stamp : 'JanKurs 8/13/2016 15:09',			#package : #PetitParser2-Validation		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:01:08.876992+08:00' ],		#prior : OmReference [ '2762' ],		#self : OmReference [ '2763' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Validation-Tests-JanKurs.16'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2763' ],		#self : OmReference [ '2764' ],		#time : DateAndTime [ '2017-12-12T08:01:08.931992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Validation-Tests-Tests,		#affectedPackageName : #PetitParser2-Validation-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2764' ],		#self : OmReference [ '2765' ],		#time : DateAndTime [ '2017-12-12T08:01:08.934992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2BufferStreamValidatorTest\r\tinstanceVariableNames: \'validator\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Tests-Tests\''			},			#name : #PP2BufferStreamValidatorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BufferStreamValidatorTest,						#isMetaSide : false					},					#name : #validator,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BufferStreamValidatorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BufferStreamValidatorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BufferStreamValidatorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Tests-Tests,			#package : #PetitParser2-Validation-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2765' ],		#self : OmReference [ '2766' ],		#time : DateAndTime [ '2017-12-12T08:01:08.940992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2ExpressionGrammarOptimizationsValidator\r\tinstanceVariableNames: \'validator\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Tests-Tests\''			},			#name : #PP2ExpressionGrammarOptimizationsValidator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2ExpressionGrammarOptimizationsValidator,						#isMetaSide : false					},					#name : #validator,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ExpressionGrammarOptimizationsValidator class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ExpressionGrammarOptimizationsValidator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ExpressionGrammarOptimizationsValidator,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Tests-Tests,			#package : #PetitParser2-Validation-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2766' ],		#self : OmReference [ '2767' ],		#time : DateAndTime [ '2017-12-12T08:01:08.945992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2SourcesTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Tests-Tests\''			},			#name : #PP2SourcesTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SourcesTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SourcesTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SourcesTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Tests-Tests,			#package : #PetitParser2-Validation-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2767' ],		#self : OmReference [ '2768' ],		#time : DateAndTime [ '2017-12-12T08:01:08.978992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2VerificationTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PP2VerificationTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2VerificationTests class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2VerificationTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2VerificationTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am aspecial kind of test. I do not test validation  itself, but that that validation returns expected results.',				#stamp : 'JanKurs 8/23/2016 14:32'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am aspecial kind of test. I do not test validation  itself, but that that validation returns expected results.',		#newStamp : 'JanKurs 8/23/2016 14:32'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2768' ],		#self : OmReference [ '2769' ],		#time : DateAndTime [ '2017-12-12T08:01:08.980992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Validation-Tests-Verification,		#affectedPackageName : #PetitParser2-Validation-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2769' ],		#self : OmReference [ '2770' ],		#time : DateAndTime [ '2017-12-12T08:01:08.982992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2VerificationTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Validation-Tests-Verification\''			},			#name : #PP2VerificationTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2VerificationTests class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2VerificationTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2VerificationTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am aspecial kind of test. I do not test validation  itself, but that that validation returns expected results.',				#stamp : 'JanKurs 8/23/2016 14:32'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Validation-Tests-Verification,			#package : #PetitParser2-Validation-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2770' ],		#self : OmReference [ '2771' ],		#time : DateAndTime [ '2017-12-12T08:01:09.531992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidatorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tvalidator := PP2BufferStreamValidator new.\r',			#stamp : 'JanKurs 9/3/2016 13:26',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2771' ],		#self : OmReference [ '2772' ],		#time : DateAndTime [ '2017-12-12T08:01:09.533992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidatorTest,				#isMetaSide : false			},			#name : #testActualForSource,			#protocol : #tests,			#sourceCode : 'testActualForSource\r\t| result |\r\tresult := validator actualForSource: \'1+2\'.\r\t\r\tself assert: result size = 3.\r\tself assert: result first = 1.\r\tself assert: result second = $+.\r\tself assert: result third = 2.',			#stamp : 'JanKurs 9/3/2016 13:27',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2772' ],		#self : OmReference [ '2773' ],		#time : DateAndTime [ '2017-12-12T08:01:09.537992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidatorTest,				#isMetaSide : false			},			#name : #testActualForSourceSingleNumber,			#protocol : #tests,			#sourceCode : 'testActualForSourceSingleNumber\r\t| result |\r\tresult := validator actualForSource: \'52\'.\r\t\r\tself assert: result isCollection.',			#stamp : 'JanKurs 9/3/2016 17:57',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2773' ],		#self : OmReference [ '2774' ],		#time : DateAndTime [ '2017-12-12T08:01:09.538992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidatorTest,				#isMetaSide : false			},			#name : #testExpectedForSource,			#protocol : #tests,			#sourceCode : 'testExpectedForSource\r\t| result |\r\tresult := validator expectedForSource: \'1+2\'.\r\t\r\tself assert: result size = 3.\r\tself assert: result first = 1.\r\tself assert: result second = $+.\r\tself assert: result third = 2.',			#stamp : 'JanKurs 9/3/2016 13:27',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2774' ],		#self : OmReference [ '2775' ],		#time : DateAndTime [ '2017-12-12T08:01:09.539992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BufferStreamValidatorTest,				#isMetaSide : false			},			#name : #testExpectedForSourceSingleNumber,			#protocol : #tests,			#sourceCode : 'testExpectedForSourceSingleNumber\r\t| result |\r\tresult := validator expectedForSource: \'52\'.\r\t\r\tself assert: result isCollection.',			#stamp : 'JanKurs 9/3/2016 17:57',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2775' ],		#self : OmReference [ '2776' ],		#time : DateAndTime [ '2017-12-12T08:01:09.540992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizationsValidator,				#isMetaSide : false			},			#name : #setUp,			#protocol : #'as yet unclassified',			#sourceCode : 'setUp\r\tsuper setUp.\r\tvalidator := PP2ExpressionGrammarOptimizaitonsValidator new.\r',			#stamp : 'JanKurs 9/3/2016 13:29',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2776' ],		#self : OmReference [ '2777' ],		#time : DateAndTime [ '2017-12-12T08:01:09.541992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizationsValidator,				#isMetaSide : false			},			#name : #testActualForSource,			#protocol : #'as yet unclassified',			#sourceCode : 'testActualForSource\r\t| result |\r\tresult := validator actualForSource: \'1+2\'.\r\t\r\tself assert: result size = 3.\r\tself assert: result first = \'1\'.\r\tself assert: result second = $+.\r\tself assert: result third = \'2\'.',			#stamp : 'JanKurs 9/3/2016 13:29',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2777' ],		#self : OmReference [ '2778' ],		#time : DateAndTime [ '2017-12-12T08:01:09.543992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizationsValidator,				#isMetaSide : false			},			#name : #testExpectedForSource,			#protocol : #'as yet unclassified',			#sourceCode : 'testExpectedForSource\r\t| result |\r\tresult := validator expectedForSource: \'1+2\'.\r\t\r\tself assert: result size = 3.\r\tself assert: result first = \'1\'.\r\tself assert: result second = $+.\r\tself assert: result third = \'2\'.',			#stamp : 'JanKurs 9/3/2016 13:30',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2778' ],		#self : OmReference [ '2779' ],		#time : DateAndTime [ '2017-12-12T08:01:09.544992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ExpressionGrammarOptimizationsValidator,				#isMetaSide : false			},			#name : #testOptimization,			#protocol : #'as yet unclassified',			#sourceCode : 'testOptimization\r\tself assert: validator optimizedParser isOptimized',			#stamp : 'JanKurs 9/3/2016 13:30',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2779' ],		#self : OmReference [ '2780' ],		#time : DateAndTime [ '2017-12-12T08:01:09.545992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2VerificationTests,				#isMetaSide : false			},			#name : #testPP2BufferStream,			#protocol : #streams,			#sourceCode : 'testPP2BufferStream\r\t| validator |\r\tvalidator := PP2BufferStreamValidator new.\r\tvalidator validateBlocking.\r\t\r\tself assert: validator report precision equals: 1.\r\tself assert: validator report recall equals: 1.',			#stamp : 'JanKurs 8/23/2016 14:54',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2780' ],		#self : OmReference [ '2781' ],		#time : DateAndTime [ '2017-12-12T08:01:09.546992+08:00' ],		#trigger : OmReference [ '2763' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2VerificationTests,				#isMetaSide : false			},			#name : #testPP2ExpressionGrammarOptimizations,			#protocol : #optimizations,			#sourceCode : 'testPP2ExpressionGrammarOptimizations\r\t| validator |\r\tvalidator := PP2ExpressionGrammarOptimizaitonsValidator new.\r\tvalidator validateBlocking.\r\t\r\tself assert: validator report precision equals: 1.\r\tself assert: validator report recall equals: 1.',			#stamp : 'JanKurs 8/31/2016 16:42',			#package : #PetitParser2-Validation-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:01:09.630992+08:00' ],		#prior : OmReference [ '2781' ],		#self : OmReference [ '2782' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Tutorial-JanKurs.4'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2782' ],		#self : OmReference [ '2783' ],		#time : DateAndTime [ '2017-12-12T08:01:09.696992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Tutorial,		#affectedPackageName : #PetitParser2-Tutorial	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2783' ],		#self : OmReference [ '2784' ],		#time : DateAndTime [ '2017-12-12T08:01:09.699992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #WebGrammarTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #WebGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebGrammarTest class\r\tinstanceVariableNames: \'\''				},				#name : #'WebGrammarTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2784' ],		#self : OmReference [ '2785' ],		#time : DateAndTime [ '2017-12-12T08:01:09.704992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WebGrammarTest',				#traitCompositionSource : '{}',				#definitionSource : 'WebGrammarTest subclass: #WebParserTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #WebParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'WebParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2785' ],		#self : OmReference [ '2786' ],		#time : DateAndTime [ '2017-12-12T08:01:09.761992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #assertions,			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2786' ],		#self : OmReference [ '2787' ],		#time : DateAndTime [ '2017-12-12T08:01:09.802992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #assertions,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2787' ],		#self : OmReference [ '2788' ],		#time : DateAndTime [ '2017-12-12T08:01:09.812992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Tutorial\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #PP2Tutorial,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Tutorial class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Tutorial class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Tutorial,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2788' ],		#self : OmReference [ '2789' ],		#time : DateAndTime [ '2017-12-12T08:01:09.818992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WebElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #WebElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebElement class\r\tinstanceVariableNames: \'\''				},				#name : #'WebElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2789' ],		#self : OmReference [ '2790' ],		#time : DateAndTime [ '2017-12-12T08:01:09.823992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WebElement',				#traitCompositionSource : '{}',				#definitionSource : 'WebElement subclass: #HtmlElement\r\tinstanceVariableNames: \'name children\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #HtmlElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #HtmlElement,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #HtmlElement,						#isMetaSide : false					},					#name : #children,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HtmlElement class\r\tinstanceVariableNames: \'\''				},				#name : #'HtmlElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HtmlElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2790' ],		#self : OmReference [ '2791' ],		#time : DateAndTime [ '2017-12-12T08:01:09.827992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WebElement',				#traitCompositionSource : '{}',				#definitionSource : 'WebElement subclass: #JavascriptElement\r\tinstanceVariableNames: \'code\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #JavascriptElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JavascriptElement,						#isMetaSide : false					},					#name : #code,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JavascriptElement class\r\tinstanceVariableNames: \'\''				},				#name : #'JavascriptElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JavascriptElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2791' ],		#self : OmReference [ '2792' ],		#time : DateAndTime [ '2017-12-12T08:01:09.832992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WebElement',				#traitCompositionSource : '{}',				#definitionSource : 'WebElement subclass: #UnknownText\r\tinstanceVariableNames: \'text\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #UnknownText,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnknownText,						#isMetaSide : false					},					#name : #text,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnknownText class\r\tinstanceVariableNames: \'\''				},				#name : #'UnknownText class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnknownText,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2792' ],		#self : OmReference [ '2793' ],		#time : DateAndTime [ '2017-12-12T08:01:09.835992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #WebGrammar\r\tinstanceVariableNames: \'document javascript elOpen elContent elClose elementName element text jsOpen jsContent jsClose jsString structuredDocument comment any\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #WebGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #document,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #javascript,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #elOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #elContent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #elClose,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #elementName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #element,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #text,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #jsOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #jsContent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #jsClose,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #jsString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #structuredDocument,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #comment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammar,						#isMetaSide : false					},					#name : #any,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'WebGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebGrammar,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2793' ],		#self : OmReference [ '2794' ],		#time : DateAndTime [ '2017-12-12T08:01:09.839992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WebGrammar',				#traitCompositionSource : '{}',				#definitionSource : 'WebGrammar subclass: #WebParser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #WebParser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebParser class\r\tinstanceVariableNames: \'\''				},				#name : #'WebParser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebParser,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2794' ],		#self : OmReference [ '2795' ],		#time : DateAndTime [ '2017-12-12T08:01:13.909992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ WebGrammar',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2795' ],		#self : OmReference [ '2796' ],		#time : DateAndTime [ '2017-12-12T08:01:13.978992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testComment,			#protocol : #tests,			#sourceCode : 'testComment\r\tself parse: \'<!-- html comment -->\' rule: #comment\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2796' ],		#self : OmReference [ '2797' ],		#time : DateAndTime [ '2017-12-12T08:01:13.979992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testDocument,			#protocol : #tests,			#sourceCode : 'testDocument\r\t| input |\r\tinput := PP2Sources current htmlSample.\r\t\r\tself parse: input rule: #document.\r\tself assert: result size equals: 2.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2797' ],		#self : OmReference [ '2798' ],		#time : DateAndTime [ '2017-12-12T08:01:13.981992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testElement,			#protocol : #tests,			#sourceCode : 'testElement\r\tself parse: \'<p>lorem ipsum</p>\' rule: #element\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2798' ],		#self : OmReference [ '2799' ],		#time : DateAndTime [ '2017-12-12T08:01:13.982992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testElementEmpty,			#protocol : #tests,			#sourceCode : 'testElementEmpty\r\tself parse: \'<foo></foo>\' rule: #element\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2799' ],		#self : OmReference [ '2800' ],		#time : DateAndTime [ '2017-12-12T08:01:13.983992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformedExtraClose,			#protocol : #tests,			#sourceCode : 'testElementMalformedExtraClose\r\tself parse: \'<foo><bar>meh</bar></fii></foo>\' rule: #element\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2800' ],		#self : OmReference [ '2801' ],		#time : DateAndTime [ '2017-12-12T08:01:13.984992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformedUnclosed,			#protocol : #tests,			#sourceCode : 'testElementMalformedUnclosed\r\tself parse: \'<head><meta content="mess"></head>\' rule: #element.\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2801' ],		#self : OmReference [ '2802' ],		#time : DateAndTime [ '2017-12-12T08:01:13.987992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformedWrongClose,			#protocol : #tests,			#sourceCode : 'testElementMalformedWrongClose\r\tself parse: \'<foo><bar>meh</baz></foo>\' rule: #element.\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2802' ],		#self : OmReference [ '2803' ],		#time : DateAndTime [ '2017-12-12T08:01:13.988992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testElementNested,			#protocol : #tests,			#sourceCode : 'testElementNested\r\tself parse: \'<p>lorem <i>ipsum</i></p>\' rule: #element\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2803' ],		#self : OmReference [ '2804' ],		#time : DateAndTime [ '2017-12-12T08:01:13.989992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testJavascript,			#protocol : #tests,			#sourceCode : 'testJavascript\r\tself parse: \'<script>alert("hi there!")</script>\' rule: #javascript\t',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2804' ],		#self : OmReference [ '2805' ],		#time : DateAndTime [ '2017-12-12T08:01:13.990992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testJavascriptWithString,			#protocol : #tests,			#sourceCode : 'testJavascriptWithString\r\tself parse: \'<script>alert(\'\'</script>\'\')</script>\' rule: #javascript\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2805' ],		#self : OmReference [ '2806' ],		#time : DateAndTime [ '2017-12-12T08:01:13.991992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testStructuredDocument,			#protocol : #tests,			#sourceCode : 'testStructuredDocument\r\t| input |\r\tinput := PP2Sources current htmlSample.\r\t\r\tself parse: input rule: #structuredDocument',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2806' ],		#self : OmReference [ '2807' ],		#time : DateAndTime [ '2017-12-12T08:01:13.992992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testStructuredDocumentSimple,			#protocol : #tests,			#sourceCode : 'testStructuredDocumentSimple\r\t| input |\r\tinput := \'<html>\r\t\t<body>\r\t\t\t<script>alert("hello world")</script>\r\t\t</body>\r\t</html>\'.\r\t\r\tself parse: input rule: #structuredDocument',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2807' ],		#self : OmReference [ '2808' ],		#time : DateAndTime [ '2017-12-12T08:01:13.993992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testStructuredDocumentWithDoctype,			#protocol : #tests,			#sourceCode : 'testStructuredDocumentWithDoctype\r\t| input |\r\tinput := \'\r<!DOCTYPE html>\r<!-- comment -->\r<html>\r\t<body>\r\t\t<script>alert("hello world")</script>\r\t</body>\r</html>\'.\r\t\r\tself parse: input rule: #structuredDocument',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2808' ],		#self : OmReference [ '2809' ],		#time : DateAndTime [ '2017-12-12T08:01:13.994992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammarTest,				#isMetaSide : false			},			#name : #testText,			#protocol : #tests,			#sourceCode : 'testText\r\tself parse: \'foobar\' rule: #text\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2809' ],		#self : OmReference [ '2810' ],		#time : DateAndTime [ '2017-12-12T08:01:13.999992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ WebParser',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2810' ],		#self : OmReference [ '2811' ],		#time : DateAndTime [ '2017-12-12T08:01:14.000992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testElement,			#protocol : #tests,			#sourceCode : 'testElement\r\tsuper testElement.\r\t\r\tself assert: result name equals: \'p\'.\r\tself assert: result firstChild text equals: \'lorem ipsum\'',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2811' ],		#self : OmReference [ '2812' ],		#time : DateAndTime [ '2017-12-12T08:01:14.001992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testElementEmpty,			#protocol : #tests,			#sourceCode : 'testElementEmpty\r\tsuper testElementEmpty.\r\t\r\tself assert: result name equals: \'foo\'.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2812' ],		#self : OmReference [ '2813' ],		#time : DateAndTime [ '2017-12-12T08:01:14.002992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testElementMalformedExtraClose,			#protocol : #tests,			#sourceCode : 'testElementMalformedExtraClose\r\tsuper testElementMalformedExtraClose.\r\t\r\tself assert: result name equals: \'foo\'.\r\tself assert: result secondChild text equals: \'</fii>\'\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2813' ],		#self : OmReference [ '2814' ],		#time : DateAndTime [ '2017-12-12T08:01:14.003992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testElementMalformedUnclosed,			#protocol : #tests,			#sourceCode : 'testElementMalformedUnclosed\r\tsuper testElementMalformedUnclosed.\r\t\r\tself assert: result name equals: \'head\'.\r\tself assert: result firstChild text trim equals: \'<meta content="mess">\'',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2814' ],		#self : OmReference [ '2815' ],		#time : DateAndTime [ '2017-12-12T08:01:14.004992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testElementMalformedWrongClose,			#protocol : #tests,			#sourceCode : 'testElementMalformedWrongClose\r\tsuper testElementMalformedWrongClose.\r\t\r\tself assert: result name equals: \'foo\'.\r\tself assert: result firstChild text equals: \'<bar>meh</baz>\'',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2815' ],		#self : OmReference [ '2816' ],		#time : DateAndTime [ '2017-12-12T08:01:14.005992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testElementNested,			#protocol : #tests,			#sourceCode : 'testElementNested\r\tsuper testElementNested.\r\t\r\tself assert: result name equals: \'p\'.\r\tself assert: result firstChild text trim equals: \'lorem\'.\r\tself assert: result secondChild name equals: \'i\'.\r\tself assert: result secondChild firstChild text equals: \'ipsum\'',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2816' ],		#self : OmReference [ '2817' ],		#time : DateAndTime [ '2017-12-12T08:01:14.006992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testJavascript,			#protocol : #tests,			#sourceCode : 'testJavascript\r\tsuper testJavascript.\r\t\r\tself assert: result code equals: \'alert("hi there!")\'\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2817' ],		#self : OmReference [ '2818' ],		#time : DateAndTime [ '2017-12-12T08:01:14.009992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testJavascriptWithString,			#protocol : #tests,			#sourceCode : 'testJavascriptWithString\r\tsuper testJavascriptWithString.\r\t\r\tself assert: result code equals: \'alert(\'\'</script>\'\')\'\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2818' ],		#self : OmReference [ '2819' ],		#time : DateAndTime [ '2017-12-12T08:01:14.010992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testStructuredDocument,			#protocol : #tests,			#sourceCode : 'testStructuredDocument\r\t| html body |\r\tsuper testStructuredDocument.\r\t\r\tself assert: result name equals: \'DOCUMENT\'.\r\r\thtml := result secondChild.\r\tself assert: html name equals: \'html\'.\r\r\tself assert: html firstChild name equals: \'head\'.\t\r\tself assert: html secondChild name equals: \'body\'.\r\t\r\tbody := html secondChild.\r\tself assert: body children size equals: 4.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2819' ],		#self : OmReference [ '2820' ],		#time : DateAndTime [ '2017-12-12T08:01:14.011992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testStructuredDocumentSimple,			#protocol : #tests,			#sourceCode : 'testStructuredDocumentSimple\r\t| html body javascript |\r\tsuper testStructuredDocumentSimple.\r\t\r\tself assert: result name equals: \'DOCUMENT\'.\r\r\r\thtml := result secondChild.\r\tself assert: html name equals: \'html\'.\r\r\tbody := html firstChild.\r\tself assert: body name equals: \'body\'.\r\t\r\tjavascript := body firstChild.\r\tself assert: javascript isKindOf: JavascriptElement.\r\tself assert: javascript code equals: \'alert("hello world")\'.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2820' ],		#self : OmReference [ '2821' ],		#time : DateAndTime [ '2017-12-12T08:01:14.012992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParserTest,				#isMetaSide : false			},			#name : #testStructuredDocumentWithDoctype,			#protocol : #tests,			#sourceCode : 'testStructuredDocumentWithDoctype\r\t| html body javascript |\r\tsuper testStructuredDocumentWithDoctype.\r\t\r\tself assert: result name equals: \'DOCUMENT\'.\r\r\r\thtml := result secondChild.\r\tself assert: html name equals: \'html\'.\r\r\tbody := html firstChild.\r\tself assert: body name equals: \'body\'.\r\t\r\tjavascript := body firstChild.\r\tself assert: javascript isKindOf: JavascriptElement.\r\tself assert: javascript code equals: \'alert("hello world")\'.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2821' ],		#self : OmReference [ '2822' ],		#time : DateAndTime [ '2017-12-12T08:01:14.013992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'definitionFor:',			#protocol : #pillar-support,			#sourceCode : 'definitionFor: aClass\r\t^ aClass definition',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2822' ],		#self : OmReference [ '2823' ],		#time : DateAndTime [ '2017-12-12T08:01:14.014992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'export:',			#protocol : #actions,			#sourceCode : 'export: class\r\t| name |\r\tname := class name.\r\t\r\t((\'build/\', name, \'.st\') asFileReference) deleteIfAbsent: nil.\r\tclass fileOut.\r\t(name, \'.st\') asFileReference moveTo: ((\'build/\', name, \'.st\') asFileReference).',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2823' ],		#self : OmReference [ '2824' ],		#time : DateAndTime [ '2017-12-12T08:01:14.015992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'printAsCode:stream:',			#protocol : #pillar-support,			#sourceCode : 'printAsCode: aString stream: stream\r\tstream nextPutAll: \'[[[\';\r\t\tlf;\r\t\tnextPutAll: aString;\r\t\tlf;\r\t\tnextPutAll: \']]]\'.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2824' ],		#self : OmReference [ '2825' ],		#time : DateAndTime [ '2017-12-12T08:01:14.016992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #script,			#protocol : #accessing,			#sourceCode : 'script\r| js jsSea document jsString any |\rany := #any asPParser.\rjsString := $\' asPParser, any starLazy, $\' asPParser.\rjs := \'<script>\' asPParser, ((jsString / any) starLazy) flatten, \'</script>\' asPParser\r\t ==> #second.\r\rjsSea := js sea ==> #second.\rdocument := jsSea star.\r^ document',			#stamp : 'JanKurs 2/13/2017 21:14',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2825' ],		#self : OmReference [ '2826' ],		#time : DateAndTime [ '2017-12-12T08:01:14.018992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #scriptWithoutString,			#protocol : #accessing,			#sourceCode : 'scriptWithoutString\r\t| source js jsSea document |\rsource := PP2Sources current htmlSample.\rjs := \'<script>\' asPParser, #any asPParser starLazy flatten, \'</script>\' asPParser\r\t==> #second.\rjsSea := js sea ==> #second.\rdocument := jsSea star.\r^ document',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2826' ],		#self : OmReference [ '2827' ],		#time : DateAndTime [ '2017-12-12T08:01:14.020992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #source,			#protocol : #accessing,			#sourceCode : 'source\r\t^ PP2Sources current htmlSample ',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2827' ],		#self : OmReference [ '2828' ],		#time : DateAndTime [ '2017-12-12T08:01:14.021992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'sourceFor:',			#protocol : #pillar-support,			#sourceCode : 'sourceFor: selector\r\t^ self sourceFor: selector in: self class',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2828' ],		#self : OmReference [ '2829' ],		#time : DateAndTime [ '2017-12-12T08:01:14.022992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'sourceFor:in:',			#protocol : #pillar-support,			#sourceCode : 'sourceFor: selector in: class\r\t^ class name, \'>>\', (class methodNamed: selector) sourceCode',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2829' ],		#self : OmReference [ '2830' ],		#time : DateAndTime [ '2017-12-12T08:01:14.023992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'sourceForScript:',			#protocol : #pillar-support,			#sourceCode : 'sourceForScript: selector\r\t| lines |\r\tlines := Character cr split: (self sourceFor: selector).\r\tlines\tremoveFirst.\r\tlines removeFirst.\r\tlines removeLast.\r\t^ Character cr join: lines.',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2830' ],		#self : OmReference [ '2831' ],		#time : DateAndTime [ '2017-12-12T08:01:14.024992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'testResultFor:in:',			#protocol : #pillar-support,			#sourceCode : 'testResultFor: selector in: class\r\t"\r\t\tself new testResultFor: #testText in: WebGrammarTest\r\t"\r\t^ (class run: selector) passed isEmpty ifFalse: [ \'[PASS]\' ] ifTrue: [ \'[FAIL]\' ]\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2831' ],		#self : OmReference [ '2832' ],		#time : DateAndTime [ '2017-12-12T08:01:14.025992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Tutorial,				#isMetaSide : false			},			#name : #'testResultsFor:in:',			#protocol : #pillar-support,			#sourceCode : 'testResultsFor: selectorArray in: class\r\t"\r\t\tself new testResultsFor: #(#testText #testJavascript) in: WebGrammarTest\r\t"\r\t^ (class buildSuiteFromMethods: selectorArray) run asString\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2832' ],		#self : OmReference [ '2833' ],		#time : DateAndTime [ '2017-12-12T08:01:14.026992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HtmlElement,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ children\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2833' ],		#self : OmReference [ '2834' ],		#time : DateAndTime [ '2017-12-12T08:01:14.027992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HtmlElement,				#isMetaSide : false			},			#name : #'children:',			#protocol : #accessing,			#sourceCode : 'children: anObject\r\tchildren := anObject\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2834' ],		#self : OmReference [ '2835' ],		#time : DateAndTime [ '2017-12-12T08:01:14.030992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HtmlElement,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t^ self name\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2835' ],		#self : OmReference [ '2836' ],		#time : DateAndTime [ '2017-12-12T08:01:14.030992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HtmlElement,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ name\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2836' ],		#self : OmReference [ '2837' ],		#time : DateAndTime [ '2017-12-12T08:01:14.031992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HtmlElement,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: newName\r\tname := newName\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2837' ],		#self : OmReference [ '2838' ],		#time : DateAndTime [ '2017-12-12T08:01:14.033992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JavascriptElement,				#isMetaSide : false			},			#name : #code,			#protocol : #accessing,			#sourceCode : 'code\r\t^ code\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2838' ],		#self : OmReference [ '2839' ],		#time : DateAndTime [ '2017-12-12T08:01:14.033992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JavascriptElement,				#isMetaSide : false			},			#name : #'code:',			#protocol : #accessing,			#sourceCode : 'code: anObject\r\tcode := anObject\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2839' ],		#self : OmReference [ '2840' ],		#time : DateAndTime [ '2017-12-12T08:01:14.034992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JavascriptElement,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t^ self code\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2840' ],		#self : OmReference [ '2841' ],		#time : DateAndTime [ '2017-12-12T08:01:14.035992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JavascriptElement,				#isMetaSide : false			},			#name : #'gtText:',			#protocol : #gt,			#sourceCode : 'gtText: composite\r\t<gtInspectorPresentationOrder: 40>\r\t\r\tcomposite text\r\t\ttitle: \'Text\';\r\t\tdisplay: [ :context | code ]\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2841' ],		#self : OmReference [ '2842' ],		#time : DateAndTime [ '2017-12-12T08:01:14.037992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnknownText,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t^ self text trim\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2842' ],		#self : OmReference [ '2843' ],		#time : DateAndTime [ '2017-12-12T08:01:14.038992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnknownText,				#isMetaSide : false			},			#name : #'gtText:',			#protocol : #gt,			#sourceCode : 'gtText: composite\r\t<gtInspectorPresentationOrder: 40>\r\t\r\tcomposite text\r\t\ttitle: \'Text\';\r\t\tdisplay: [ :context | text ]\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2843' ],		#self : OmReference [ '2844' ],		#time : DateAndTime [ '2017-12-12T08:01:14.038992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnknownText,				#isMetaSide : false			},			#name : #text,			#protocol : #accessing,			#sourceCode : 'text\r\t^ text\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2844' ],		#self : OmReference [ '2845' ],		#time : DateAndTime [ '2017-12-12T08:01:14.041992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnknownText,				#isMetaSide : false			},			#name : #'text:',			#protocol : #accessing,			#sourceCode : 'text: anObject\r\ttext := anObject\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2845' ],		#self : OmReference [ '2846' ],		#time : DateAndTime [ '2017-12-12T08:01:14.042992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebElement,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ #()\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2846' ],		#self : OmReference [ '2847' ],		#time : DateAndTime [ '2017-12-12T08:01:14.043992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebElement,				#isMetaSide : false			},			#name : #firstChild,			#protocol : #accessing,			#sourceCode : 'firstChild\r\t"Just for convenience"\r\t^ self children first\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2847' ],		#self : OmReference [ '2848' ],		#time : DateAndTime [ '2017-12-12T08:01:14.044992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebElement,				#isMetaSide : false			},			#name : #'gtTreeViewIn:',			#protocol : #gui,			#sourceCode : 'gtTreeViewIn: composite\r\t<gtInspectorPresentationOrder: 40>\r\r\tcomposite tree\r\t\ttitle: \'Tree\';\r\t\tchildren: [:n | n children ];\r\t\tformat: [:n| n displayText printStringLimitedTo: 50 ];\r\t\tshouldExpandToLevel: 6\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2848' ],		#self : OmReference [ '2849' ],		#time : DateAndTime [ '2017-12-12T08:01:14.045992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebElement,				#isMetaSide : false			},			#name : #secondChild,			#protocol : #accessing,			#sourceCode : 'secondChild\r\t"Just for convenience"\r\t^ self children second\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2849' ],		#self : OmReference [ '2850' ],		#time : DateAndTime [ '2017-12-12T08:01:14.046992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #any,			#protocol : #various,			#sourceCode : 'any\r\t^ #any asPParser',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2850' ],		#self : OmReference [ '2851' ],		#time : DateAndTime [ '2017-12-12T08:01:14.047992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #comment,			#protocol : #various,			#sourceCode : 'comment\r\t^ \'<!--\' asPParser, any starLazy, \'-->\' asPParser',			#stamp : 'JanKurs 2/20/2017 07:23',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2851' ],		#self : OmReference [ '2852' ],		#time : DateAndTime [ '2017-12-12T08:01:14.048992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #document,			#protocol : #various,			#sourceCode : 'document\r\t^ (javascript sea ==> #second) star',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2852' ],		#self : OmReference [ '2853' ],		#time : DateAndTime [ '2017-12-12T08:01:14.049992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #elClose,			#protocol : #element,			#sourceCode : 'elClose\r\t^ \'</\' asPParser, elementName match pop, $> asPParser\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2853' ],		#self : OmReference [ '2854' ],		#time : DateAndTime [ '2017-12-12T08:01:14.050992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #elContent,			#protocol : #element,			#sourceCode : 'elContent\r\t^ (javascript / element / text nonEpsilon) star',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2854' ],		#self : OmReference [ '2855' ],		#time : DateAndTime [ '2017-12-12T08:01:14.052992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #elOpen,			#protocol : #element,			#sourceCode : 'elOpen\r\t^ $< asPParser, elementName push, any starLazy, $> asPParser ==> #second',			#stamp : 'JanKurs 2/20/2017 07:23',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2855' ],		#self : OmReference [ '2856' ],		#time : DateAndTime [ '2017-12-12T08:01:14.053992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #element,			#protocol : #element,			#sourceCode : 'element\r\t^ (elOpen, elContent, elClose)\r"\t\tmemoize;"\r\t\tyourself\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2856' ],		#self : OmReference [ '2857' ],		#time : DateAndTime [ '2017-12-12T08:01:14.054992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #elementName,			#protocol : #element,			#sourceCode : 'elementName\r\t^ #word asPParser plus flatten\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2857' ],		#self : OmReference [ '2858' ],		#time : DateAndTime [ '2017-12-12T08:01:14.055992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #javascript,			#protocol : #javascript,			#sourceCode : 'javascript\r\t^ jsOpen, jsContent, jsClose ==> #second',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2858' ],		#self : OmReference [ '2859' ],		#time : DateAndTime [ '2017-12-12T08:01:14.056992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #jsClose,			#protocol : #javascript,			#sourceCode : 'jsClose\r\t^ \'</script>\' asPParser',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2859' ],		#self : OmReference [ '2860' ],		#time : DateAndTime [ '2017-12-12T08:01:14.057992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #jsContent,			#protocol : #javascript,			#sourceCode : 'jsContent\r\t^ (jsString / any) starLazy',			#stamp : 'JanKurs 2/14/2017 07:41',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2860' ],		#self : OmReference [ '2861' ],		#time : DateAndTime [ '2017-12-12T08:01:14.058992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #jsOpen,			#protocol : #javascript,			#sourceCode : 'jsOpen\r\t^ \'<script>\' asPParser',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2861' ],		#self : OmReference [ '2862' ],		#time : DateAndTime [ '2017-12-12T08:01:14.059992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #jsString,			#protocol : #javascript,			#sourceCode : 'jsString\r\t^ $\' asPParser, any starLazy, $\' asPParser',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2862' ],		#self : OmReference [ '2863' ],		#time : DateAndTime [ '2017-12-12T08:01:14.062992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #start,			#protocol : #various,			#sourceCode : 'start\r\t^ structuredDocument ',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2863' ],		#self : OmReference [ '2864' ],		#time : DateAndTime [ '2017-12-12T08:01:14.063992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #structuredDocument,			#protocol : #various,			#sourceCode : 'structuredDocument\r\t^ element sea',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2864' ],		#self : OmReference [ '2865' ],		#time : DateAndTime [ '2017-12-12T08:01:14.064992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebGrammar,				#isMetaSide : false			},			#name : #text,			#protocol : #various,			#sourceCode : 'text\r\t^ (comment / any) starLazy\r',			#stamp : 'JanKurs 2/20/2017 07:23',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2865' ],		#self : OmReference [ '2866' ],		#time : DateAndTime [ '2017-12-12T08:01:14.065992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #document,			#protocol : #various,			#sourceCode : 'document\r\t^ super document\r\t\r\tmap: [ :_bw :_document :_aw |\r\t\t| beforeWater afterWater |\r\t\tbeforeWater := UnknownText new\r\t\t\ttext: _bw;\r\t\t\tyourself.\r\t\t\t\r\t\tafterWater := UnknownText new\r\t\t\ttext: _aw;\r\t\t\tyourself.\r\t\t\t\r\t\tHtmlElement new\r\t\t\tname: \'DOCUMENT\';\r\t\t\tchildren: (Array with: beforeWater with: _document with: afterWater);\r\t\t\tyourself\r\t\r\t]',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2866' ],		#self : OmReference [ '2867' ],		#time : DateAndTime [ '2017-12-12T08:01:14.066992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #elClose,			#protocol : #accessing,			#sourceCode : 'elClose\r\t^ super elClose trim\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2867' ],		#self : OmReference [ '2868' ],		#time : DateAndTime [ '2017-12-12T08:01:14.067992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #elOpen,			#protocol : #accessing,			#sourceCode : 'elOpen\r\t^ super elOpen trimRight\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2868' ],		#self : OmReference [ '2869' ],		#time : DateAndTime [ '2017-12-12T08:01:14.068992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #element,			#protocol : #accessing,			#sourceCode : 'element\r\t^ super element \r\t\r\tmap: [ :_open :_content :_close | \r\t \t(HtmlElement new)\r\t\t\tname: _open;\r\t\t\tchildren: _content;\r\t\t\tyourself\r\t]\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2869' ],		#self : OmReference [ '2870' ],		#time : DateAndTime [ '2017-12-12T08:01:14.069992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #javascript,			#protocol : #accessing,			#sourceCode : 'javascript\r\t^ super javascript\r\t\r\tmap: [ :_code | \r\t\t(JavascriptElement new)\r\t\t\tcode: _code;\r\t\t\tyourself\r\t]\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2870' ],		#self : OmReference [ '2871' ],		#time : DateAndTime [ '2017-12-12T08:01:14.070992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #jsContent,			#protocol : #accessing,			#sourceCode : 'jsContent\r\t^ super jsContent flatten',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2871' ],		#self : OmReference [ '2872' ],		#time : DateAndTime [ '2017-12-12T08:01:14.073992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #structuredDocument,			#protocol : #accessing,			#sourceCode : 'structuredDocument\r\t^ super structuredDocument\r\t\r\tmap: [ :_bw :_html :_aw |\r\t\t| beforeWater afterWater |\r\t\tbeforeWater := UnknownText new\r\t\t\ttext: _bw;\r\t\t\tyourself.\r\t\t\t\r\t\tafterWater := UnknownText new\r\t\t\ttext: _aw;\r\t\t\tyourself.\r\t\t\t\r\t\tHtmlElement new\r\t\t\tname: \'DOCUMENT\';\r\t\t\tchildren: (Array \r\t\t\t\twith: beforeWater \r\t\t\t\twith: _html \r\t\t\t\twith: afterWater);\r\t\t\tyourself\r\t]\r',			#stamp : 'JanKurs 2/1/2017 18:49',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2872' ],		#self : OmReference [ '2873' ],		#time : DateAndTime [ '2017-12-12T08:01:14.074992+08:00' ],		#trigger : OmReference [ '2782' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WebParser,				#isMetaSide : false			},			#name : #text,			#protocol : #accessing,			#sourceCode : 'text\r\t^ super text flatten\r\t\r\tmap: [ :_value | \r\t\tUnknownText new\r\t\t\ttext: _value;\r\t\t\tyourself\t\r\t]\r',			#stamp : ' 1/27/2017 07:41:38',			#package : #PetitParser2-Tutorial		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:01:14.156992+08:00' ],		#prior : OmReference [ '2873' ],		#self : OmReference [ '2874' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Benchmarks-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2874' ],		#self : OmReference [ '2875' ],		#time : DateAndTime [ '2017-12-12T08:01:14.217992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Benchmarks-Tests,		#affectedPackageName : #PetitParser2-Benchmarks	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2875' ],		#self : OmReference [ '2876' ],		#time : DateAndTime [ '2017-12-12T08:01:14.221992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2BenchmarkTest\r\tinstanceVariableNames: \'context selector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Benchmarks-Tests\''			},			#name : #PP2BenchmarkTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkTest,						#isMetaSide : false					},					#name : #selector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BenchmarkTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BenchmarkTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BenchmarkTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Benchmarks-Tests,			#package : #PetitParser2-Benchmarks,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2876' ],		#self : OmReference [ '2877' ],		#time : DateAndTime [ '2017-12-12T08:01:14.225992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Benchmarks-Core,		#affectedPackageName : #PetitParser2-Benchmarks	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2877' ],		#self : OmReference [ '2878' ],		#time : DateAndTime [ '2017-12-12T08:01:14.228992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2Benchmark\r\tinstanceVariableNames: \'preferredRepetitions report input parser repetitions resources sourcesSize properties contextClass selector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Benchmarks-Core\''			},			#name : #PP2Benchmark,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #preferredRepetitions,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #report,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #input,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #repetitions,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #resources,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #sourcesSize,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #contextClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2Benchmark,						#isMetaSide : false					},					#name : #selector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2Benchmark class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2Benchmark class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2Benchmark,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Benchmarks-Core,			#package : #PetitParser2-Benchmarks,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2878' ],		#self : OmReference [ '2879' ],		#time : DateAndTime [ '2017-12-12T08:01:14.234992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Benchmark',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Benchmark subclass: #PP2ComplexityBenchmark\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Benchmarks-Core\''			},			#name : #PP2ComplexityBenchmark,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2ComplexityBenchmark class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2ComplexityBenchmark class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2ComplexityBenchmark,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Benchmarks-Core,			#package : #PetitParser2-Benchmarks,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2879' ],		#self : OmReference [ '2880' ],		#time : DateAndTime [ '2017-12-12T08:01:14.239992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2BenchmarkEntry\r\tinstanceVariableNames: \'name size time timestamp gcTime\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Benchmarks-Core\''			},			#name : #PP2BenchmarkEntry,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkEntry,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkEntry,						#isMetaSide : false					},					#name : #size,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkEntry,						#isMetaSide : false					},					#name : #time,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkEntry,						#isMetaSide : false					},					#name : #timestamp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkEntry,						#isMetaSide : false					},					#name : #gcTime,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BenchmarkEntry class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BenchmarkEntry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BenchmarkEntry,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Benchmarks-Core,			#package : #PetitParser2-Benchmarks,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2880' ],		#self : OmReference [ '2881' ],		#time : DateAndTime [ '2017-12-12T08:01:14.243992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2BenchmarkReport\r\tinstanceVariableNames: \'entries\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Benchmarks-Core\''			},			#name : #PP2BenchmarkReport,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2BenchmarkReport,						#isMetaSide : false					},					#name : #entries,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2BenchmarkReport class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2BenchmarkReport class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2BenchmarkReport,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Benchmarks-Core,			#package : #PetitParser2-Benchmarks,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2881' ],		#self : OmReference [ '2882' ],		#time : DateAndTime [ '2017-12-12T08:01:14.274992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParserBenchmarks\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ManifestPetitParserBenchmarks,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParserBenchmarks class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParserBenchmarks class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParserBenchmarks,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2882' ],		#self : OmReference [ '2883' ],		#time : DateAndTime [ '2017-12-12T08:01:14.275992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Benchmarks,		#affectedPackageName : #PetitParser2-Benchmarks	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2883' ],		#self : OmReference [ '2884' ],		#time : DateAndTime [ '2017-12-12T08:01:14.276992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParserBenchmarks\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Benchmarks\''			},			#name : #ManifestPetitParserBenchmarks,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParserBenchmarks class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParserBenchmarks class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParserBenchmarks,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Benchmarks,			#package : #PetitParser2-Benchmarks,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2884' ],		#self : OmReference [ '2885' ],		#time : DateAndTime [ '2017-12-12T08:01:19.435992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testExpressionGrammar,			#protocol : #tests,			#sourceCode : 'testExpressionGrammar\r\t| parser bench result input |\r\tbench := PP2Benchmark new setupExpressionGrammar.\r\tparser := bench parser.\r\t\r\tself assert: parser class equals: PP2ExpressionGrammar.\r\tself assert: (bench context isKindOf: PP2InMemoryContext).\r\t\r\tresult := parser end parse: \'1 + (2 * 3)\'.\r\tself assert: result value size = 3.\r\tself assert: result value first equals: \'1\'.\r\t\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2885' ],		#self : OmReference [ '2886' ],		#time : DateAndTime [ '2017-12-12T08:01:19.438992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testExpressionGrammarNoOpt,			#protocol : #'testing - expressions',			#sourceCode : 'testExpressionGrammarNoOpt\r\t| parser bench result input |\r\tbench := PP2Benchmark new setupExpressionGrammarNoOpt.\r\tparser := bench parser.\r\t\r\tself assert: parser class equals: PP2ExpressionGrammar.\r\tself assert: (bench context isKindOf: PP2Context).\r\t\r\tresult := parser end parse: \'1 + (2 * 3)\'.\r\tself assert: result value size = 3.\r\tself assert: result value first equals: \'1\'.\r\t\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2886' ],		#self : OmReference [ '2887' ],		#time : DateAndTime [ '2017-12-12T08:01:19.439992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testExpressionParser,			#protocol : #'testing - expressions',			#sourceCode : 'testExpressionParser\r\t| parser bench result input |\r\tbench := PP2Benchmark new setupExpressionParser.\r\tparser := bench parser.\r\t\r\tself assert: parser class equals: PP2ExpressionParser.\r\t\r\tresult := parser end parse: \'1 + (2 * 3)\'.\r\tself assert: result value size = 3.\r\tself assert: result value first equals: 1.\r\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2887' ],		#self : OmReference [ '2888' ],		#time : DateAndTime [ '2017-12-12T08:01:19.443992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Benchmark class',				#isMetaSide : true			},			#name : #exampleExpressionGrammar,			#protocol : #examples,			#sourceCode : 'exampleExpressionGrammar\r\t<example>\r\t\r\t| b |\r\tb := PP2Benchmark new.\r\tb benchmarkExpressionGrammar.\r\tb benchmarkExpressionGrammarNoOpt.\r\tb showTpcs inspect',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2888' ],		#self : OmReference [ '2889' ],		#time : DateAndTime [ '2017-12-12T08:01:19.444992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkExpressionGrammar,			#protocol : #'benchmarks - expression grammar',			#sourceCode : 'benchmarkExpressionGrammar\r\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2889' ],		#self : OmReference [ '2890' ],		#time : DateAndTime [ '2017-12-12T08:01:19.445992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkExpressionGrammarNoOpt,			#protocol : #'benchmarks - expression grammar',			#sourceCode : 'benchmarkExpressionGrammarNoOpt\r\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2890' ],		#self : OmReference [ '2891' ],		#time : DateAndTime [ '2017-12-12T08:01:19.447992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkExpressionParser,			#protocol : #'benchmarks - expression grammar',			#sourceCode : 'benchmarkExpressionParser\r\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2891' ],		#self : OmReference [ '2892' ],		#time : DateAndTime [ '2017-12-12T08:01:19.447992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\t^ contextClass new',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2892' ],		#self : OmReference [ '2893' ],		#time : DateAndTime [ '2017-12-12T08:01:19.448992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'contextClass:',			#protocol : #accessing,			#sourceCode : 'contextClass: aClass\r\t^ contextClass := aClass',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2893' ],		#self : OmReference [ '2894' ],		#time : DateAndTime [ '2017-12-12T08:01:19.451992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #createResources,			#protocol : #accessing,			#sourceCode : 'createResources\r\t^ PP2Sources current',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2894' ],		#self : OmReference [ '2895' ],		#time : DateAndTime [ '2017-12-12T08:01:19.452992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'hasProperty:',			#protocol : #'accessing - properties',			#sourceCode : 'hasProperty: aKey\r\t"Test if the property aKey is present."\r\t\r\t^ properties notNil and: [ properties includesKey: aKey ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2895' ],		#self : OmReference [ '2896' ],		#time : DateAndTime [ '2017-12-12T08:01:19.453992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tresources := self createResources.\r\t\r\tcontextClass := PP2Context.\r\tpreferredRepetitions := 1.\r\treport := PP2BenchmarkReport new.\r\tsourcesSize := \'Benchmarking\'.\r\t\r\tselector := #\'parse:withContext:\'',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2896' ],		#self : OmReference [ '2897' ],		#time : DateAndTime [ '2017-12-12T08:01:19.454992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #input,			#protocol : #accessing,			#sourceCode : 'input\r\t^ input',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2897' ],		#self : OmReference [ '2898' ],		#time : DateAndTime [ '2017-12-12T08:01:19.455992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'input:',			#protocol : #accessing,			#sourceCode : 'input: anObject\r\tinput := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2898' ],		#self : OmReference [ '2899' ],		#time : DateAndTime [ '2017-12-12T08:01:19.456992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'instantiate:',			#protocol : #accessing,			#sourceCode : 'instantiate: aParserClass\r\t^ aParserClass new',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2899' ],		#self : OmReference [ '2900' ],		#time : DateAndTime [ '2017-12-12T08:01:19.457992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #parser,			#protocol : #accessing,			#sourceCode : 'parser\r\t^ parser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2900' ],		#self : OmReference [ '2901' ],		#time : DateAndTime [ '2017-12-12T08:01:19.458992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'parser:',			#protocol : #accessing,			#sourceCode : 'parser: anObject\r\tparser := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2901' ],		#self : OmReference [ '2902' ],		#time : DateAndTime [ '2017-12-12T08:01:19.459992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #properties,			#protocol : #'accessing - properties',			#sourceCode : 'properties\r\t^ properties',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2902' ],		#self : OmReference [ '2903' ],		#time : DateAndTime [ '2017-12-12T08:01:19.462992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'properties:',			#protocol : #'accessing - properties',			#sourceCode : 'properties: aDictionary\r\tproperties := aDictionary ',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2903' ],		#self : OmReference [ '2904' ],		#time : DateAndTime [ '2017-12-12T08:01:19.464992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'propertyAt:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey \r\t^ self propertyAt: aKey  ifAbsent: [ nil ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2904' ],		#self : OmReference [ '2905' ],		#time : DateAndTime [ '2017-12-12T08:01:19.465992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'propertyAt:ifAbsent:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey ifAbsent: aBlock\r\t"Answer the property value associated with aKey or, if aKey isn\'t found, answer the result of evaluating aBlock."\r\t\r\t^ properties isNil\r\t\tifTrue: [ aBlock value ]\r\t\tifFalse: [ properties at: aKey ifAbsent: aBlock ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2905' ],		#self : OmReference [ '2906' ],		#time : DateAndTime [ '2017-12-12T08:01:19.466992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'propertyAt:ifAbsentPut:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey ifAbsentPut: aBlock\r\t"Answer the property associated with aKey or, if aKey isn\'t found store the result of evaluating aBlock as new value."\r\t\r\t^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2906' ],		#self : OmReference [ '2907' ],		#time : DateAndTime [ '2017-12-12T08:01:19.467992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'propertyAt:put:',			#protocol : #'accessing - properties',			#sourceCode : 'propertyAt: aKey put: anObject\r\t"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."\r\r\t^ (properties ifNil: [ properties := Dictionary new: 1 ])\r\t\tat: aKey put: anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2907' ],		#self : OmReference [ '2908' ],		#time : DateAndTime [ '2017-12-12T08:01:19.468992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #repetitions,			#protocol : #accessing,			#sourceCode : 'repetitions\r\t^ repetitions isNil ifTrue: [ preferredRepetitions  ] ifFalse: [ repetitions ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2908' ],		#self : OmReference [ '2909' ],		#time : DateAndTime [ '2017-12-12T08:01:19.469992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'repetitions:',			#protocol : #accessing,			#sourceCode : 'repetitions: anObject\r\trepetitions := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2909' ],		#self : OmReference [ '2910' ],		#time : DateAndTime [ '2017-12-12T08:01:19.470992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'repetitionsIfNotSet:',			#protocol : #accessing,			#sourceCode : 'repetitionsIfNotSet: value\r\trepetitions := value',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2910' ],		#self : OmReference [ '2911' ],		#time : DateAndTime [ '2017-12-12T08:01:19.472992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #report,			#protocol : #accessing,			#sourceCode : 'report\r\t^ report',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2911' ],		#self : OmReference [ '2912' ],		#time : DateAndTime [ '2017-12-12T08:01:19.473992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'reportInput:time:gcTime:name:',			#protocol : #reporting,			#sourceCode : 'reportInput: anInput time: time gcTime: gcTime name: nameOrNil\r\t| size name |\r\tsize := anInput inject: 0 into: [:r :e | r + e size  ].\r\t\r\tname := nameOrNil isNil \r\t\tifTrue: [ parser class printString ]\r\t\tifFalse: [ nameOrNil ].\r\t\r\treport addEntry: name size: size time: time gcTime: gcTime.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2912' ],		#self : OmReference [ '2913' ],		#time : DateAndTime [ '2017-12-12T08:01:19.475992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'reportInput:time:name:',			#protocol : #reporting,			#sourceCode : 'reportInput: anInput time: time name: nameOrNil\r\tself reportInput: anInput time: time gcTime:  0 name: nameOrNil',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2913' ],		#self : OmReference [ '2914' ],		#time : DateAndTime [ '2017-12-12T08:01:19.476992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #resources,			#protocol : #accessing,			#sourceCode : 'resources\r\t^ resources',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2914' ],		#self : OmReference [ '2915' ],		#time : DateAndTime [ '2017-12-12T08:01:19.477992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'resources:',			#protocol : #accessing,			#sourceCode : 'resources: newResources\r\tresources := newResources',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2915' ],		#self : OmReference [ '2916' ],		#time : DateAndTime [ '2017-12-12T08:01:19.478992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #run,			#protocol : #running,			#sourceCode : 'run\r\t| time gcTime |\r\tself repetitions timesRepeat: [ \r\t\t3 timesRepeat: [ Smalltalk garbageCollect ].\r\t\tgcTime := Smalltalk vm totalGCTime.\r\t\ttime := [ input do: [ :source | \r\t\t\t"parser parse: source withContext: self context"\r\t\t\tparser perform: selector withArguments: {  source . self context }.\r\t\t] ] timeToRun asMilliseconds.\r\t\t\r\t\tself reportInput: input time: time gcTime: (Smalltalk vm totalGCTime - gcTime) name: parser name\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2916' ],		#self : OmReference [ '2917' ],		#time : DateAndTime [ '2017-12-12T08:01:19.479992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'runTimeout:',			#protocol : #running,			#sourceCode : 'runTimeout: timeout\r\t| time gcTime |\r\tself repetitions timesRepeat: [ \r\t\t3 timesRepeat: [ Smalltalk garbageCollect ].\r\t\tgcTime := Smalltalk vm totalGCTime.\r\t\ttime := [ input do: [ :source | \r\t\t\t[ parser parse: source withContext: self context ]\r\t\t\t\tvalueWithin: timeout\r\t\t\t\tonTimeout: [ Transcript show: \'timeout\'; cr. #timeout ]\r\t\t] ] timeToRun asMilliSeconds.\r\r\t\tself reportInput: input time: time gcTime: (Smalltalk vm totalGCTime - gcTime) name: parser class asString\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2917' ],		#self : OmReference [ '2918' ],		#time : DateAndTime [ '2017-12-12T08:01:19.480992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'saveReport:',			#protocol : #reporting,			#sourceCode : 'saveReport: filename\r\treport save: filename\r\t',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2918' ],		#self : OmReference [ '2919' ],		#time : DateAndTime [ '2017-12-12T08:01:19.481992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #selector,			#protocol : #accessing,			#sourceCode : 'selector\r\t^ selector ',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2919' ],		#self : OmReference [ '2920' ],		#time : DateAndTime [ '2017-12-12T08:01:19.484992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'setup:sources:',			#protocol : #'setup & teardown',			#sourceCode : 'setup: class sources: name\r\tparser := self instantiate: class.\r\tinput := self sourcesFor: name\r\t',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2920' ],		#self : OmReference [ '2921' ],		#time : DateAndTime [ '2017-12-12T08:01:19.485992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupExpressionGrammar,			#protocol : #'benchmarks - expression grammar',			#sourceCode : 'setupExpressionGrammar\r\tself setup: PP2ExpressionGrammar sources: \'expression\'.\r\tparser name: \'Arithmetic Expressions\'.\r\tself parser optimize.\r\t\r\tcontextClass := PP2InMemoryContext.\r\tselector := #\'parseAdaptable:withContext:\'.\r\tpreferredRepetitions := 3',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2921' ],		#self : OmReference [ '2922' ],		#time : DateAndTime [ '2017-12-12T08:01:19.486992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupExpressionGrammarNoOpt,			#protocol : #'benchmarks - expression grammar',			#sourceCode : 'setupExpressionGrammarNoOpt\r\tself setup: PP2ExpressionGrammar sources: \'expression\'.\r\tparser name: \'Arithmetic Expressions (NoOpt)\'.\r\tpreferredRepetitions := 3.\r\t\r\tcontextClass := PP2Context.\r\tselector := #\'parseAdaptable:withContext:\'.\r\tpreferredRepetitions := 3.\r',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2922' ],		#self : OmReference [ '2923' ],		#time : DateAndTime [ '2017-12-12T08:01:19.487992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupExpressionParser,			#protocol : #'benchmarks - expression grammar',			#sourceCode : 'setupExpressionParser\r\tself setup: PP2ExpressionParser sources: \'expression\'.\r\tparser name: \'Arithmetic Expressions Parser\'.\r\tpreferredRepetitions := 3.\r\t\r\tcontextClass := PP2Context.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2923' ],		#self : OmReference [ '2924' ],		#time : DateAndTime [ '2017-12-12T08:01:19.488992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'setupMock:',			#protocol : #'setup & teardown',			#sourceCode : 'setupMock: id\r\tinput := OrderedCollection with: \'mock\'.\r\tparser := (nil asPParser)\r\t\tname: id;\r\t\tyourself',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2924' ],		#self : OmReference [ '2925' ],		#time : DateAndTime [ '2017-12-12T08:01:19.489992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'setupSelector:',			#protocol : #running,			#sourceCode : 'setupSelector: setupSelector\r\tself perform: (\'setup\', setupSelector) asSymbol.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2925' ],		#self : OmReference [ '2926' ],		#time : DateAndTime [ '2017-12-12T08:01:19.490992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #showDetailedReport,			#protocol : #reporting,			#sourceCode : 'showDetailedReport\r\treport showDetailed',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2926' ],		#self : OmReference [ '2927' ],		#time : DateAndTime [ '2017-12-12T08:01:19.491992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #showReport,			#protocol : #reporting,			#sourceCode : 'showReport\r\treport show',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2927' ],		#self : OmReference [ '2928' ],		#time : DateAndTime [ '2017-12-12T08:01:19.494992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #showSpeedup,			#protocol : #reporting,			#sourceCode : 'showSpeedup\r\treport speedup',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2928' ],		#self : OmReference [ '2929' ],		#time : DateAndTime [ '2017-12-12T08:01:19.495992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'smartSetupAndRun:',			#protocol : #'setup & teardown',			#sourceCode : 'smartSetupAndRun: benchmarkSelector\r\t^ self testSetupAndRun: (benchmarkSelector removePrefix: \'benchmark\')',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2929' ],		#self : OmReference [ '2930' ],		#time : DateAndTime [ '2017-12-12T08:01:19.496992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'sourcesFor:',			#protocol : #accessing,			#sourceCode : 'sourcesFor: language\r\t| sourcesSelector |\r\tsourcesSelector := (language asString, \'Sources\', sourcesSize) asSymbol.\t\r\t^ resources perform: sourcesSelector',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2930' ],		#self : OmReference [ '2931' ],		#time : DateAndTime [ '2017-12-12T08:01:19.497992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'sourcesSize:',			#protocol : #accessing,			#sourceCode : 'sourcesSize: aString\r\tsourcesSize := aString',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2931' ],		#self : OmReference [ '2932' ],		#time : DateAndTime [ '2017-12-12T08:01:19.498992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'teardownSelector:',			#protocol : #'setup & teardown',			#sourceCode : 'teardownSelector: teardownSelector\r\t| symbol |\r\tsymbol := (\'teardown\', teardownSelector) asSymbol.\r\t\r\t(self respondsTo: symbol) ifTrue: [ \r\t\tself perform: symbol.\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2932' ],		#self : OmReference [ '2933' ],		#time : DateAndTime [ '2017-12-12T08:01:19.499992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #testClass,			#protocol : #accessing,			#sourceCode : 'testClass\r\t^ PP2BenchmarkTest',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2933' ],		#self : OmReference [ '2934' ],		#time : DateAndTime [ '2017-12-12T08:01:19.500992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'testSelector:',			#protocol : #running,			#sourceCode : 'testSelector: testSelector\r\tself testClass new perform: (\'test\', testSelector) asSymbol.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2934' ],		#self : OmReference [ '2935' ],		#time : DateAndTime [ '2017-12-12T08:01:19.502992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #'testSetupAndRun:',			#protocol : #running,			#sourceCode : 'testSetupAndRun: runSelector\r\tself testSelector: runSelector.\r\tself setupSelector: runSelector.\r\tself run.\r\tself teardownSelector: runSelector.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2935' ],		#self : OmReference [ '2936' ],		#time : DateAndTime [ '2017-12-12T08:01:19.503992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ComplexityBenchmark,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tsourcesSize := \'Complexity\'.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2936' ],		#self : OmReference [ '2937' ],		#time : DateAndTime [ '2017-12-12T08:01:19.505992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ComplexityBenchmark,				#isMetaSide : false			},			#name : #'reportInput:time:gcTime:name:',			#protocol : #reporting,			#sourceCode : 'reportInput: anInput time: time gcTime: gcTime name: nameOrNil\r\t| size name |\r\tsize := anInput size.\r\t\r\tname := nameOrNil isNil \r\t\tifTrue: [ parser class printString ]\r\t\tifFalse: [ nameOrNil ].\r\t\r\treport addEntry: name size: size time: time gcTime: gcTime.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2937' ],		#self : OmReference [ '2938' ],		#time : DateAndTime [ '2017-12-12T08:01:19.506992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ComplexityBenchmark,				#isMetaSide : false			},			#name : #run,			#protocol : #running,			#sourceCode : 'run\r\t^ self runTimeout: 30 asDuration',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2938' ],		#self : OmReference [ '2939' ],		#time : DateAndTime [ '2017-12-12T08:01:19.507992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ComplexityBenchmark,				#isMetaSide : false			},			#name : #'runTimeout:',			#protocol : #running,			#sourceCode : 'runTimeout: timeout\r\t| time |\r\r\tself repetitions timesRepeat: [ \r\t\t\r\t\tinput withIndexDo: [ :source :index | \r\t\t\ttime := [[ parser parse: source withContext: self context ]\r\t\t\t\tvalueWithin: timeout\r\t\t\t\tonTimeout: [ Transcript cr; show: \'timeout\'; cr. #TIMEOUT ] ] timeToRunWithoutGC.\r\t\t\tself reportInput: source time: time name: parser name.\r\t\t].\r\r\t].\r\r\t^ report',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2939' ],		#self : OmReference [ '2940' ],		#time : DateAndTime [ '2017-12-12T08:01:19.508992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #gcTime,			#protocol : #accessing,			#sourceCode : 'gcTime\r\t^ gcTime ifNil: [ 0 ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2940' ],		#self : OmReference [ '2941' ],		#time : DateAndTime [ '2017-12-12T08:01:19.509992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #'gcTime:',			#protocol : #accessing,			#sourceCode : 'gcTime: anObject\r\tgcTime := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2941' ],		#self : OmReference [ '2942' ],		#time : DateAndTime [ '2017-12-12T08:01:19.510992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ name',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2942' ],		#self : OmReference [ '2943' ],		#time : DateAndTime [ '2017-12-12T08:01:19.511992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: anObject\r\tname := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2943' ],		#self : OmReference [ '2944' ],		#time : DateAndTime [ '2017-12-12T08:01:19.512992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t^ size',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2944' ],		#self : OmReference [ '2945' ],		#time : DateAndTime [ '2017-12-12T08:01:19.513992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #'size:',			#protocol : #accessing,			#sourceCode : 'size: anObject\r\tsize := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2945' ],		#self : OmReference [ '2946' ],		#time : DateAndTime [ '2017-12-12T08:01:19.514992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #time,			#protocol : #accessing,			#sourceCode : 'time\r\t^ time',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2946' ],		#self : OmReference [ '2947' ],		#time : DateAndTime [ '2017-12-12T08:01:19.517992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #'time:',			#protocol : #accessing,			#sourceCode : 'time: anObject\r\ttime := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2947' ],		#self : OmReference [ '2948' ],		#time : DateAndTime [ '2017-12-12T08:01:19.518992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #timestamp,			#protocol : #accessing,			#sourceCode : 'timestamp\r\t^ timestamp',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2948' ],		#self : OmReference [ '2949' ],		#time : DateAndTime [ '2017-12-12T08:01:19.518992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #'timestamp:',			#protocol : #accessing,			#sourceCode : 'timestamp: anObject\r\ttimestamp := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2949' ],		#self : OmReference [ '2950' ],		#time : DateAndTime [ '2017-12-12T08:01:19.519992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkEntry,				#isMetaSide : false			},			#name : #tpc,			#protocol : #stats,			#sourceCode : 'tpc\r\t^ time / size',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2950' ],		#self : OmReference [ '2951' ],		#time : DateAndTime [ '2017-12-12T08:01:19.520992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'addEntry:',			#protocol : #logging,			#sourceCode : 'addEntry: entry\r\tentries add: entry',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2951' ],		#self : OmReference [ '2952' ],		#time : DateAndTime [ '2017-12-12T08:01:19.521992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'addEntry:size:time:',			#protocol : #logging,			#sourceCode : 'addEntry: parserName size: inputSize time: milliseconds\r\tself addEntry: parserName size: inputSize time: milliseconds gcTime: 0',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2952' ],		#self : OmReference [ '2953' ],		#time : DateAndTime [ '2017-12-12T08:01:19.522992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'addEntry:size:time:gcTime:',			#protocol : #logging,			#sourceCode : 'addEntry: parserName size: inputSize time: milliseconds gcTime: gcMilliseconds\r\t| entry |\r\tentry := PP2BenchmarkEntry new\r\t\tname: parserName ;\r\t\tsize: inputSize ;\r\t\ttime: milliseconds ;\r\t\tgcTime: gcMilliseconds ;\r\t\ttimestamp: DateAndTime current.\r\t\t\r\tself addEntry: entry',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2953' ],		#self : OmReference [ '2954' ],		#time : DateAndTime [ '2017-12-12T08:01:19.523992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #asString,			#protocol : #converting,			#sourceCode : 'asString\r\t| stream |\r\tstream := WriteStream on: \'\'.\r\tself show: stream.\r\t^ stream contents',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2954' ],		#self : OmReference [ '2955' ],		#time : DateAndTime [ '2017-12-12T08:01:19.524992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'fiveNumberSummary:',			#protocol : #statistics,			#sourceCode : 'fiveNumberSummary: list\r\t| median min max lowerQuartile upperQuartile |\r\tmedian := self median: list.\r\tmin := self min: list.\r\tmax := self max: list.\r\tlowerQuartile := self lowerQuartile: list.\r\tupperQuartile := self upperQuartile: list.\r\t\r\t^ {  min . lowerQuartile . median . upperQuartile . max } ',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2955' ],		#self : OmReference [ '2956' ],		#time : DateAndTime [ '2017-12-12T08:01:19.527992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'gcTimesFrom:',			#protocol : #summary,			#sourceCode : 'gcTimesFrom: subentries\r\t^ subentries collect: #gcTime',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2956' ],		#self : OmReference [ '2957' ],		#time : DateAndTime [ '2017-12-12T08:01:19.528992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'groupBy:',			#protocol : #summary,			#sourceCode : 'groupBy: fieldName\r\t| dictionary |\r\tdictionary := OrderedDictionary new.\r\tentries do: [ :e |\r\t\t| collection |\r\t\tcollection := dictionary at: (e perform: fieldName) ifAbsentPut: [ OrderedCollection new ].\r\t\tcollection add: e.\r\t].\r\t^ dictionary',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2957' ],		#self : OmReference [ '2958' ],		#time : DateAndTime [ '2017-12-12T08:01:19.529992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tentries := OrderedCollection new',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2958' ],		#self : OmReference [ '2959' ],		#time : DateAndTime [ '2017-12-12T08:01:19.531992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'lowerHalf:',			#protocol : #statistics,			#sourceCode : 'lowerHalf: list\r\t| return mean |\r\tmean := self median: list.\r\treturn := list select: [ :e | e < mean ].\r\t\r\treturn isEmpty ifTrue: [ return add: list anyOne ].\r\t^ return',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2959' ],		#self : OmReference [ '2960' ],		#time : DateAndTime [ '2017-12-12T08:01:19.532992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'lowerQuartile:',			#protocol : #statistics,			#sourceCode : 'lowerQuartile: list\r\t^ self mean: (self lowerHalf: list)',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2960' ],		#self : OmReference [ '2961' ],		#time : DateAndTime [ '2017-12-12T08:01:19.533992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'max:',			#protocol : #statistics,			#sourceCode : 'max: list\r\t^ list max',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2961' ],		#self : OmReference [ '2962' ],		#time : DateAndTime [ '2017-12-12T08:01:19.534992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'mean:',			#protocol : #statistics,			#sourceCode : 'mean: list\r\t^ list average',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2962' ],		#self : OmReference [ '2963' ],		#time : DateAndTime [ '2017-12-12T08:01:19.535992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'median:',			#protocol : #statistics,			#sourceCode : 'median: list\r\t| sorted size |\r\tsorted := list sort.\r\tsize := sorted size.\r\t^ (size % 2 = 0) ifTrue: [ \r\t\t((sorted at: (size // 2)) + (sorted at: ((size // 2) + 1))) / 2\r\t] ifFalse: [ \r\t\tsorted at: (size // 2) + 1\r\t]\r\r',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2963' ],		#self : OmReference [ '2964' ],		#time : DateAndTime [ '2017-12-12T08:01:19.536992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'min:',			#protocol : #statistics,			#sourceCode : 'min: list\r\t^ list min',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2964' ],		#self : OmReference [ '2965' ],		#time : DateAndTime [ '2017-12-12T08:01:19.538992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'printFiveNumberSummary:on:',			#protocol : #reporting,			#sourceCode : 'printFiveNumberSummary: summary on: stream\r\t"expeted: min, q1 mean q3 max"\r\t^ self printNumberSummary: summary on: stream ',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2965' ],		#self : OmReference [ '2966' ],		#time : DateAndTime [ '2017-12-12T08:01:19.539992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'printNumberSummary:on:',			#protocol : #reporting,			#sourceCode : 'printNumberSummary: summary on: stream\r\t"expeted: min, q1 mean q3 max"\r\r\tsummary do: [ :e | \r\t\tstream \r\t\t\tnextPut: Character tab;\r\t\t\tnextPutAll: (e printShowingDecimalPlaces: 3);\r\t\t\tyourself\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2966' ],		#self : OmReference [ '2967' ],		#time : DateAndTime [ '2017-12-12T08:01:19.541992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'save:',			#protocol : #reporting,			#sourceCode : 'save: filename\r\t| file    |\r\tfile := FileStream forceNewFileNamed: filename.\r\tself show: file.\r\tfile close.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2967' ],		#self : OmReference [ '2968' ],		#time : DateAndTime [ '2017-12-12T08:01:19.542992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'saveComplexity:',			#protocol : #'reporting complexity',			#sourceCode : 'saveComplexity: filename\r\t| file    |\r\tfile := FileStream forceNewFileNamed: filename.\r\tself saveComplexityStream: file.\r\tfile close.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2968' ],		#self : OmReference [ '2969' ],		#time : DateAndTime [ '2017-12-12T08:01:19.543992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'saveComplexityEntries:stream:',			#protocol : #'reporting complexity',			#sourceCode : 'saveComplexityEntries: subentries stream: stream\r\t| entry time gcTime |\r\tentry := subentries anyOne.\r\ttime := self mean: (subentries collect: #time).\r\tgcTime := self mean: (subentries collect: #gcTime).\r\t\r\tstream \r\t\tnextPutAll: entry name;\r\t\tnextPut: Character tab;\r\t\tnextPutAll: entry size asString;\r\t\tnextPut: Character tab;\r\t\tnextPutAll: time asFloat asString;\r\t\tnextPut: Character tab;\r\t\tnextPutAll: gcTime asFloat asString;\r\t\tnextPut: Character lf;\r\t\tflush',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2969' ],		#self : OmReference [ '2970' ],		#time : DateAndTime [ '2017-12-12T08:01:19.544992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'saveComplexityStream:',			#protocol : #'reporting complexity',			#sourceCode : 'saveComplexityStream: stream\r\t(self groupBy: #size) keysAndValuesDo: [ :size :subentries |\r\t\tself saveComplexityEntries: subentries stream: stream\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2970' ],		#self : OmReference [ '2971' ],		#time : DateAndTime [ '2017-12-12T08:01:19.545992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'saveEntriesNamed:entries:stream:',			#protocol : #reporting,			#sourceCode : 'saveEntriesNamed: name entries: subentries stream: stream\r\t| size  timeSummary timeWithoutGCSummary gcSummary |\r\r\tsize := (self sizesFrom: subentries) anyOne.\r\ttimeSummary := self fiveNumberSummary: (self withoutMax: (self timesFrom: subentries)).\r\ttimeWithoutGCSummary := self fiveNumberSummary: (self withoutMax: (self timesWithoutGCFrom: subentries)).\r\tgcSummary := self fiveNumberSummary: (self withoutMax: (self gcTimesFrom: subentries)).\t\r\t\r\tstream\r\t\t\tnextPutAll: name;\r\t\t\t"With GC"\r\t\t\tnextPut: Character tab;\r\t\t\tnextPutAll: \'with gc\'.\r\tself printFiveNumberSummary: (timeSummary collect: [ :e | e / size * 1000 ]) on: stream.\r\tstream\r\t\t\t"Without GC"\r\t\t\tnextPut: Character tab;\r\t\t\tnextPutAll: \'without gc\'.\r\tself printFiveNumberSummary: (timeWithoutGCSummary collect: [ :e | e / size * 1000 ]) on: stream.\r\tstream\r\t\t\t"GC TIMES"\r\t\t\tnextPut: Character tab;\r\t\t\tnextPutAll: \'gc\'.\r\tself printFiveNumberSummary: (gcSummary collect: [ :e | e / size * 1000 ]) on: stream.\r\tstream\r\t\t\tnextPutAll: String lf;\r\t\t\tflush.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2971' ],		#self : OmReference [ '2972' ],		#time : DateAndTime [ '2017-12-12T08:01:19.547992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #show,			#protocol : #reporting,			#sourceCode : 'show\r\tTranscript show: \'============\'; cr.\r\tself show: Transcript',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2972' ],		#self : OmReference [ '2973' ],		#time : DateAndTime [ '2017-12-12T08:01:19.549992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'show:',			#protocol : #reporting,			#sourceCode : 'show: stream\r\t(self groupBy: #name) keysAndValuesDo: [ :name :subentries |\r\t\tself saveEntriesNamed: name entries: subentries stream: stream\r\t].\r\r',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2973' ],		#self : OmReference [ '2974' ],		#time : DateAndTime [ '2017-12-12T08:01:19.550992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #showComplexity,			#protocol : #'reporting complexity',			#sourceCode : 'showComplexity\r\tself saveComplexityStream: Transcript',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2974' ],		#self : OmReference [ '2975' ],		#time : DateAndTime [ '2017-12-12T08:01:19.551992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #showDetailed,			#protocol : #reporting,			#sourceCode : 'showDetailed\r\t(self groupBy: #name) keysAndValuesDo: [ :name :subentries |\r\t\tself showEntries: subentries\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2975' ],		#self : OmReference [ '2976' ],		#time : DateAndTime [ '2017-12-12T08:01:19.552992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'showEntries:',			#protocol : #reporting,			#sourceCode : 'showEntries: subentries\r\tsubentries do: [ :e | \r\t\tself showEntry: e\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2976' ],		#self : OmReference [ '2977' ],		#time : DateAndTime [ '2017-12-12T08:01:19.554992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'showEntry:',			#protocol : #reporting,			#sourceCode : 'showEntry: entry\r\r\tTranscript crShow: \'Size: \', entry size asString.\r\tTranscript crShow: entry name, \' time: \', entry time asString.\r\tTranscript crShow: \'Time per character: \', (entry tpc * 1000.0) asString, \' microseconds\'.\r\t\r\tTranscript crShow: \'GC time: \', (entry gcTime) asString, \'ms\'.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2977' ],		#self : OmReference [ '2978' ],		#time : DateAndTime [ '2017-12-12T08:01:19.555992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t^ entries size',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2978' ],		#self : OmReference [ '2979' ],		#time : DateAndTime [ '2017-12-12T08:01:19.556992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'sizesFrom:',			#protocol : #summary,			#sourceCode : 'sizesFrom: subentries\r\t^ subentries collect: #size',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2979' ],		#self : OmReference [ '2980' ],		#time : DateAndTime [ '2017-12-12T08:01:19.557992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #speedup,			#protocol : #reporting,			#sourceCode : 'speedup\r\tself speedup: Transcript',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2980' ],		#self : OmReference [ '2981' ],		#time : DateAndTime [ '2017-12-12T08:01:19.558992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'speedup:',			#protocol : #reporting,			#sourceCode : 'speedup: stream\r\t| grouped firstKey first firstName related relatedName |\r\tgrouped := (self groupBy: #name).\r\tfirstKey := grouped orderedKeys first.\r\tfirst := (self fiveNumberSummary: (self timesFrom: (grouped at: firstKey))) first.\r\tfirstName := (grouped at: firstKey) anyOne name. \r\t\r\tgrouped orderedKeys allButFirstDo: [ :key | \r\t\tkey isNil ifFalse: [ \r\t\t\trelated := (self fiveNumberSummary: (self timesFrom: (grouped at: key))) first.\r\t\t\trelatedName := (grouped at: key) anyOne name.\r\t\t\r\t\t\tstream nextPutAll: firstName, \' vs \', relatedName, \' speedup: \', ((first / related) asFloat printShowingDecimalPlaces: 3).\r\t\t\tstream nextPutAll: String lf.\r\t\t]\r\t].\r\tstream flush.',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2981' ],		#self : OmReference [ '2982' ],		#time : DateAndTime [ '2017-12-12T08:01:19.561992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'standardDeviation:',			#protocol : #statistics,			#sourceCode : 'standardDeviation: data\r\t^ (self variance: data)\tsqrt',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2982' ],		#self : OmReference [ '2983' ],		#time : DateAndTime [ '2017-12-12T08:01:19.562992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'time:characters:',			#protocol : #reporting,			#sourceCode : 'time: timeValue characters: size\r\t^ (timeValue / size * 1000) printShowingDecimalPlaces: 3',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2983' ],		#self : OmReference [ '2984' ],		#time : DateAndTime [ '2017-12-12T08:01:19.563992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'timesFrom:',			#protocol : #summary,			#sourceCode : 'timesFrom: subentries\r\t^ subentries collect: #time',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2984' ],		#self : OmReference [ '2985' ],		#time : DateAndTime [ '2017-12-12T08:01:19.564992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'timesWithoutGCFrom:',			#protocol : #summary,			#sourceCode : 'timesWithoutGCFrom: subentries\r\t^ subentries collect: [:e | e time - e gcTime ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2985' ],		#self : OmReference [ '2986' ],		#time : DateAndTime [ '2017-12-12T08:01:19.565992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'tpcsFrom:',			#protocol : #summary,			#sourceCode : 'tpcsFrom: subentries\r\t| size |\r\tsize := (self sizesFrom: subentries) anyOne.\r\t^ (subentries collect: #time) collect: [ :e | e / size * 1000 ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2986' ],		#self : OmReference [ '2987' ],		#time : DateAndTime [ '2017-12-12T08:01:19.566992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'upperHalf:',			#protocol : #statistics,			#sourceCode : 'upperHalf: list\r\t| mean |\r\tmean := self median: list.\r\t^ list select: [ :e | e >= mean ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2987' ],		#self : OmReference [ '2988' ],		#time : DateAndTime [ '2017-12-12T08:01:19.567992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'upperQuartile:',			#protocol : #statistics,			#sourceCode : 'upperQuartile: list\r\t^ self mean: (self upperHalf: list)',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2988' ],		#self : OmReference [ '2989' ],		#time : DateAndTime [ '2017-12-12T08:01:19.568992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'variance:',			#protocol : #statistics,			#sourceCode : 'variance: data\r\t| mean squaredDiffs |\r\tmean := self mean: data.\r\tsquaredDiffs := data collect: [ :value | (value - mean) abs squared ].\r\t\r\t^ squaredDiffs average',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2989' ],		#self : OmReference [ '2990' ],		#time : DateAndTime [ '2017-12-12T08:01:19.571992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'withoutMax:',			#protocol : #statistics,			#sourceCode : 'withoutMax: list\r\t| max new |\r\t(list size <= 1) ifTrue: [ ^ list ].\r\t\r\tmax := self max: list.\r\tnew := list copy asOrderedCollection.\r\tnew remove: max.\r\t^ new',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2990' ],		#self : OmReference [ '2991' ],		#time : DateAndTime [ '2017-12-12T08:01:19.572992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkReport,				#isMetaSide : false			},			#name : #'withoutWorst:',			#protocol : #statistics,			#sourceCode : 'withoutWorst: list\r\t^ list sort removeLast',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2991' ],		#self : OmReference [ '2992' ],		#time : DateAndTime [ '2017-12-12T08:01:19.573992+08:00' ],		#trigger : OmReference [ '2874' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBParser,				#isMetaSide : false			},			#name : #name,			#protocol : #'*PetitParser2-Benchmarks',			#sourceCode : 'name\r\t^ \'RBParser\'',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Benchmarks		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:01:19.666992+08:00' ],		#prior : OmReference [ '2992' ],		#self : OmReference [ '2993' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Smalltalk-JanKurs.2'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2993' ],		#self : OmReference [ '2994' ],		#time : DateAndTime [ '2017-12-12T08:01:19.738992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Smalltalk-Strategies,		#affectedPackageName : #PetitParser2-Smalltalk	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2994' ],		#self : OmReference [ '2995' ],		#time : DateAndTime [ '2017-12-12T08:01:19.741992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Strategy',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Strategy subclass: #PP2SmalltalkWhitespaceStrategy\r\tinstanceVariableNames: \'failure\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Strategies\''			},			#name : #PP2SmalltalkWhitespaceStrategy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkWhitespaceStrategy,						#isMetaSide : false					},					#name : #failure,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkWhitespaceStrategy class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkWhitespaceStrategy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkWhitespaceStrategy,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Strategies,			#package : #PetitParser2-Smalltalk,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2995' ],		#self : OmReference [ '2996' ],		#time : DateAndTime [ '2017-12-12T08:01:19.746992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Smalltalk-Core,		#affectedPackageName : #PetitParser2-Smalltalk	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2996' ],		#self : OmReference [ '2997' ],		#time : DateAndTime [ '2017-12-12T08:01:19.748992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2SmalltalkGrammar\r\tinstanceVariableNames: \'array arrayItem arrayLiteral arrayLiteralArray assignment assignmentToken binary binaryExpression binaryMessage binaryMethod binaryPragma binaryToken block blockArgument blockArguments blockArgumentsWith blockArgumentsWithout blockBody byteLiteral byteLiteralArray cascadeExpression cascadeMessage char charLiteral charToken expression falseLiteral falseToken identifier identifierToken keyword keywordExpression keywordMessage keywordMethod keywordPragma keywordToken literal message method methodDeclaration methodSequence multiword nilLiteral nilToken number numberLiteral numberToken parens period periodToken pragma pragmaMessage pragmas primary return sequence startExpression startMethod statements string stringLiteral stringToken symbol symbolLiteral symbolLiteralArray temporaries trueLiteral trueToken unary unaryExpression unaryMessage unaryMethod unaryPragma unaryToken variable\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Core\''			},			#name : #PP2SmalltalkGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #array,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #arrayItem,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #arrayLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #arrayLiteralArray,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #assignment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #assignmentToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #binary,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #binaryExpression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #binaryMessage,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #binaryMethod,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #binaryPragma,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #binaryToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #blockArgument,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #blockArguments,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #blockArgumentsWith,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #blockArgumentsWithout,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #blockBody,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #byteLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #byteLiteralArray,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #cascadeExpression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #cascadeMessage,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #char,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #charLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #charToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #expression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #falseLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #falseToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #identifier,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #identifierToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #keyword,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #keywordExpression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #keywordMessage,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #keywordMethod,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #keywordPragma,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #keywordToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #literal,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #message,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #method,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #methodDeclaration,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #methodSequence,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #multiword,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #nilLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #nilToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #number,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #numberLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #numberToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #parens,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #period,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #periodToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #pragma,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #pragmaMessage,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #pragmas,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #primary,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #return,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #sequence,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #startExpression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #startMethod,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #statements,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #string,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #stringLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #stringToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #symbol,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #symbolLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #symbolLiteralArray,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #temporaries,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #trueLiteral,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #trueToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #unary,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #unaryExpression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #unaryMessage,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #unaryMethod,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #unaryPragma,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #unaryToken,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammar,						#isMetaSide : false					},					#name : #variable,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkGrammar,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Core,			#package : #PetitParser2-Smalltalk,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2997' ],		#self : OmReference [ '2998' ],		#time : DateAndTime [ '2017-12-12T08:01:19.752992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2SmalltalkGrammar',				#traitCompositionSource : '{}',				#definitionSource : 'PP2SmalltalkGrammar subclass: #PP2SmalltalkParser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Core\''			},			#name : #PP2SmalltalkParser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkParser class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkParser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkParser,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Core,			#package : #PetitParser2-Smalltalk,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2998' ],		#self : OmReference [ '2999' ],		#time : DateAndTime [ '2017-12-12T08:01:19.760992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Smalltalk-Validation,		#affectedPackageName : #PetitParser2-Smalltalk	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2999' ],		#self : OmReference [ '3000' ],		#time : DateAndTime [ '2017-12-12T08:01:19.762992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Validator',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Validator subclass: #PP2SmalltalkParserOptimizationsValidator\r\tinstanceVariableNames: \'parser optimizedParser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Validation\''			},			#name : #PP2SmalltalkParserOptimizationsValidator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkParserOptimizationsValidator,						#isMetaSide : false					},					#name : #parser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkParserOptimizationsValidator,						#isMetaSide : false					},					#name : #optimizedParser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkParserOptimizationsValidator class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkParserOptimizationsValidator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkParserOptimizationsValidator,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Validation,			#package : #PetitParser2-Smalltalk,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3000' ],		#self : OmReference [ '3001' ],		#time : DateAndTime [ '2017-12-12T08:01:19.766992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Node',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Node subclass: #PP2SmalltalkWhitespaceNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Core\''			},			#name : #PP2SmalltalkWhitespaceNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkWhitespaceNode class\r\tinstanceVariableNames: \'instance\''				},				#name : #'PP2SmalltalkWhitespaceNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'PP2SmalltalkWhitespaceNode class',							#isMetaSide : true						},						#name : #instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkWhitespaceNode,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Core,			#package : #PetitParser2-Smalltalk,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3001' ],		#self : OmReference [ '3002' ],		#time : DateAndTime [ '2017-12-12T08:01:19.770992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2Token',				#traitCompositionSource : '{}',				#definitionSource : 'PP2Token subclass: #PP2SmalltalkToken\r\tinstanceVariableNames: \'comments\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Core\''			},			#name : #PP2SmalltalkToken,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkToken,						#isMetaSide : false					},					#name : #comments,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkToken class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkToken class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkToken,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Core,			#package : #PetitParser2-Smalltalk,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3002' ],		#self : OmReference [ '3003' ],		#time : DateAndTime [ '2017-12-12T08:01:30.101992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2Benchmark class',				#isMetaSide : true			},			#name : #exampleSmalltalk,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'exampleSmalltalk\r\t<example>\r\t\r\t| b |\r\tMetacello new\r  \t\tbaseline: \'SmaCC\';\r\t\trepository: \'github://ThierryGoubier/SmaCC:v2.0.5\';\r \t\tload: \'SmaCC-Smalltalk-Parser\'.\r\r\tb := PP2Benchmark new.\r\tb benchmarkSmalltalkParser.\r\tb benchmarkSmalltalkParserNoOpt.\r\tb benchmarkSmalltalkParserSmacc.\r\tb benchmarkRBParser.\r\tb showTpcs inspect',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3003' ],		#self : OmReference [ '3004' ],		#time : DateAndTime [ '2017-12-12T08:01:30.104992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkRBParser,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkRBParser\r\t| time  |\r\tself setupRBParser.\r\t\r\tself repetitions timesRepeat: [ \r\t\ttime := [ input do: [ :source | \r\t\t\t\r\t\t\tparser initializeParserWith: source.\r\t\t\tparser parseMethod: source\r\t\t\t\r\t\t] ] timeToRunWithoutGC "timeToRun asMilliseconds.".\r\t\t\r\t\tself reportInput: input time: time name: parser name\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3004' ],		#self : OmReference [ '3005' ],		#time : DateAndTime [ '2017-12-12T08:01:30.106992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkSmalltalkGrammar,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkSmalltalkGrammar\r\t\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3005' ],		#self : OmReference [ '3006' ],		#time : DateAndTime [ '2017-12-12T08:01:30.107992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkSmalltalkGrammarIM,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkSmalltalkGrammarIM\r\t"IM: Interpreted with Mutable context"\r\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3006' ],		#self : OmReference [ '3007' ],		#time : DateAndTime [ '2017-12-12T08:01:30.108992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkSmalltalkGrammarNoOpt,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkSmalltalkGrammarNoOpt\r\t\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3007' ],		#self : OmReference [ '3008' ],		#time : DateAndTime [ '2017-12-12T08:01:30.109992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkSmalltalkParser,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkSmalltalkParser\r\t\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3008' ],		#self : OmReference [ '3009' ],		#time : DateAndTime [ '2017-12-12T08:01:30.110992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkSmalltalkParserNoOpt,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkSmalltalkParserNoOpt\r\t\tself smartSetupAndRun: thisContext method selector.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3009' ],		#self : OmReference [ '3010' ],		#time : DateAndTime [ '2017-12-12T08:01:30.113992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #benchmarkSmalltalkParserSmacc,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'benchmarkSmalltalkParserSmacc\r\t| time  gcTime |\r\tself setupSmalltalkParserSmacc.\r\t\r\tself repetitions timesRepeat: [ \r\t\t3 timesRepeat: [ Smalltalk garbageCollect ].\r\t\r\t\tgcTime := Smalltalk vm totalGCTime.\r\t\ttime := [ input do: [ :source | \r\t\t\tparser parse: source\r\t\t] ] timeToRun asMilliseconds.\r\t\t\r\t\tself reportInput: input time: time gcTime: (Smalltalk vm totalGCTime - gcTime) name: parser name\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3010' ],		#self : OmReference [ '3011' ],		#time : DateAndTime [ '2017-12-12T08:01:30.114992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupRBParser,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupRBParser\r\t\r\tinput := self sourcesFor: \'smalltalk\'.\r\tparser := RBParser new.\r\tpreferredRepetitions := 3.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3011' ],		#self : OmReference [ '3012' ],		#time : DateAndTime [ '2017-12-12T08:01:30.115992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupSmalltalkGrammar,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupSmalltalkGrammar\r\tself setup: PP2SmalltalkGrammar sources: \'smalltalk\'.\r\tself parser name: \'Smalltalk Grammar\'.\r\tself parser optimize.\r\t\r\tcontextClass := PP2InMemoryContext.\r\tselector := #\'parseAdaptable:withContext:\'.\r\tpreferredRepetitions := 3.\r\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3012' ],		#self : OmReference [ '3013' ],		#time : DateAndTime [ '2017-12-12T08:01:30.116992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupSmalltalkGrammarIM,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupSmalltalkGrammarIM\r\t"IM: Interpreted with Mutable context"\r\t\r\tself setup: PP2SmalltalkGrammar sources: \'smalltalk\'.\r\tself parser name: \'Smalltalk Grammar (IM)\'.\r\t\r\tcontextClass := PP2Context.\r\tselector := #\'parseInterpreted:withContext:\'.\r\tpreferredRepetitions := 3.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3013' ],		#self : OmReference [ '3014' ],		#time : DateAndTime [ '2017-12-12T08:01:30.117992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupSmalltalkGrammarNoOpt,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupSmalltalkGrammarNoOpt\r\tself setup: PP2SmalltalkGrammar sources: \'smalltalk\'.\r\tself parser name: \'Smalltalk Grammar (NoOpt)\'.\r\t\r\tcontextClass := PP2Context.\r\tselector := #\'parseAdaptable:withContext:\'.\r\tpreferredRepetitions := 3.\r\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3014' ],		#self : OmReference [ '3015' ],		#time : DateAndTime [ '2017-12-12T08:01:30.117992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupSmalltalkParser,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupSmalltalkParser\r\tself setup: PP2SmalltalkParser sources: \'smalltalk\'.\r\tself parser name: \'Smalltalk Parser\'.\r\tself parser optimize.\r\t\r\tcontextClass := PP2InMemoryContext.\r\tselector := #\'parseAdaptable:withContext:\'.\r\tpreferredRepetitions := 3.\r\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3015' ],		#self : OmReference [ '3016' ],		#time : DateAndTime [ '2017-12-12T08:01:30.118992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupSmalltalkParserNoOpt,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupSmalltalkParserNoOpt\r\tself setup: PP2SmalltalkParser sources: \'smalltalk\'.\r\tself parser name: \'Smalltalk Parser (NoOpt)\'.\r\t\r\tcontextClass := PP2Context.\r\tselector := #\'parseAdaptable:withContext:\'.\r\tpreferredRepetitions := 3.\r\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3016' ],		#self : OmReference [ '3017' ],		#time : DateAndTime [ '2017-12-12T08:01:30.119992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Benchmark,				#isMetaSide : false			},			#name : #setupSmalltalkParserSmacc,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'setupSmalltalkParserSmacc\r\t"\r\t\tMetacello new\r\t\t  \tbaseline: \'SmaCC\';\r  \t\t\trepository: \'github://ThierryGoubier/SmaCC:v2.0.5\';\r  \t\t\tload: \'SmaCC-Smalltalk-Parser\'\r\t"\r\t\r\t\r\tinput := self sourcesFor: \'smalltalk\'.\r\tparser := Smalltalk at: #StParser.\r\tpreferredRepetitions := 3.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3017' ],		#self : OmReference [ '3018' ],		#time : DateAndTime [ '2017-12-12T08:01:30.120992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBProgramNode,				#isMetaSide : false			},			#name : #'pp2AddComments:',			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'pp2AddComments: aCollectionOfIntervals\r\t(aCollectionOfIntervals isNil or: [ aCollectionOfIntervals isEmpty ])\r\t\tifFalse: [ self comments: self comments , aCollectionOfIntervals ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3018' ],		#self : OmReference [ '3019' ],		#time : DateAndTime [ '2017-12-12T08:01:30.123992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitor,				#isMetaSide : false			},			#name : #'visitSmalltalkWhitespace:',			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'visitSmalltalkWhitespace: node\r\t| returnSet |\r\t(self isTerminal: node) ifTrue: [ ^ self setWithPossible: node ].\r\r\treturnSet := self setWithPossible: node.\r\t\r\treturnSet addAll: (self visit: #space asPParser).\r\treturnSet addAll: (self visit: $" asPParser).\r\t\r\t^ returnSet',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3019' ],		#self : OmReference [ '3020' ],		#time : DateAndTime [ '2017-12-12T08:01:30.124992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceStrategy,				#isMetaSide : false			},			#name : #'initializeFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'initializeFor: aPP2Node\r\tsuper initializeFor: aPP2Node.\r\t\r\tfailure := PP2Failure message: \'no whitespace found\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3020' ],		#self : OmReference [ '3021' ],		#time : DateAndTime [ '2017-12-12T08:01:30.125992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceStrategy,				#isMetaSide : false			},			#name : #'parseOn:',			#protocol : #parsing,			#sourceCode : 'parseOn: aPP2Context\r\t[ \r\t\t[ aPP2Context peek isSeparator ] whileTrue: [ \r\t\t\taPP2Context shift \r\t\t].\r\t\r\t\t(aPP2Context peek == $" ) \r\t] whileTrue: [\r\t\taPP2Context shift.\r\t\taPP2Context upTo: $".\r\t].\r\r\t^ failure',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3021' ],		#self : OmReference [ '3022' ],		#time : DateAndTime [ '2017-12-12T08:01:30.126992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #smalltalkAllUrl,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkAllUrl\r\t^ \'smalltalk-src-selected.zip\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3022' ],		#self : OmReference [ '3023' ],		#time : DateAndTime [ '2017-12-12T08:01:30.127992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #smalltalkFiles,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkFiles\r\t^ self files: ((self downloadUI: self smalltalkAllUrl) allFiles) withExtension: \'st\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3023' ],		#self : OmReference [ '3024' ],		#time : DateAndTime [ '2017-12-12T08:01:30.128992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #smalltalkSourcesAll,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkSourcesAll\r\t^ self cachedValue: #smalltalkSourcesAll ifAbsentPut: [ \r\t\t(self downloadUI: self smalltalkAllUrl) allFiles collect: [ :f | f contents ]\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3024' ],		#self : OmReference [ '3025' ],		#time : DateAndTime [ '2017-12-12T08:01:30.129992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #smalltalkSourcesBenchmarking,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkSourcesBenchmarking\r\t^ self cachedValue: #smalltalkSourcesBenchmarking ifAbsentPut: [ \r\t\t"self smalltalkSourcesInDirectory: self smalltalkSelectedDirectory."\r\t\tself \r\t\t\tselectEvenly: 10000 \r\t\t\tfromFiles: \tself smalltalkFiles\r\t\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3025' ],		#self : OmReference [ '3026' ],		#time : DateAndTime [ '2017-12-12T08:01:30.130992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #smalltalkSourcesProfiling,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkSourcesProfiling\r\t^ self cachedValue: #smalltalkSourcesProfiling ifAbsentPut: [ \r\t\tself \r\t\t\tselectEvenly: 1000 \r\t\t\tfromFiles: \tself smalltalkFiles\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3026' ],		#self : OmReference [ '3027' ],		#time : DateAndTime [ '2017-12-12T08:01:30.131992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #smalltalkSourcesVerification,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkSourcesVerification\r\t^ self cachedValue: #smalltalkSourcesVerification ifAbsentPut: [ \r\t\t"self smalltalkSourcesInDirectory: self smalltalkSelectedDirectory."\r\t\tself \r\t\t\tselectEvenly: 5*1000 \r\t\t\tfromFiles: self smalltalkFiles\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3027' ],		#self : OmReference [ '3028' ],		#time : DateAndTime [ '2017-12-12T08:01:30.132992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkGrammar class',				#isMetaSide : true			},			#name : #allowUnderscoreAssignment,			#protocol : #testing,			#sourceCode : 'allowUnderscoreAssignment\r\t^ (Scanner respondsTo: #allowUnderscoreAsAssignment) and: [ Scanner allowUnderscoreAsAssignment ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3028' ],		#self : OmReference [ '3029' ],		#time : DateAndTime [ '2017-12-12T08:01:30.134992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkGrammar class',				#isMetaSide : true			},			#name : #'parseExpression:',			#protocol : #accessing,			#sourceCode : 'parseExpression: aString\r\t^ self new parseExpression: aString',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3029' ],		#self : OmReference [ '3030' ],		#time : DateAndTime [ '2017-12-12T08:01:30.135992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkGrammar class',				#isMetaSide : true			},			#name : #'parseExpression:onError:',			#protocol : #accessing,			#sourceCode : 'parseExpression: aString onError: aBlock\r\t^ self new parseExpression: aString onError: aBlock',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3030' ],		#self : OmReference [ '3031' ],		#time : DateAndTime [ '2017-12-12T08:01:30.136992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkGrammar class',				#isMetaSide : true			},			#name : #'parseMethod:',			#protocol : #accessing,			#sourceCode : 'parseMethod: aString\r\t^ self new parseMethod: aString',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3031' ],		#self : OmReference [ '3032' ],		#time : DateAndTime [ '2017-12-12T08:01:30.137992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkGrammar class',				#isMetaSide : true			},			#name : #'parseMethod:onError:',			#protocol : #accessing,			#sourceCode : 'parseMethod: aString onError: aBlock\r\t^ self new parseMethod: aString onError: aBlock',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3032' ],		#self : OmReference [ '3033' ],		#time : DateAndTime [ '2017-12-12T08:01:30.139992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #array,			#protocol : #grammar,			#sourceCode : 'array\r\t^ ${ asPParser smalltalkToken , (expression delimitedBy: periodToken) optional , $} asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3033' ],		#self : OmReference [ '3034' ],		#time : DateAndTime [ '2017-12-12T08:01:30.140992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #arrayItem,			#protocol : #grammar-literals,			#sourceCode : 'arrayItem\r\t^ literal / symbolLiteralArray / arrayLiteralArray / byteLiteralArray',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3034' ],		#self : OmReference [ '3035' ],		#time : DateAndTime [ '2017-12-12T08:01:30.141992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #arrayLiteral,			#protocol : #grammar-literals,			#sourceCode : 'arrayLiteral\r\t^ \'#(\' asPParser smalltalkToken , arrayItem star , $) asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3035' ],		#self : OmReference [ '3036' ],		#time : DateAndTime [ '2017-12-12T08:01:30.142992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #arrayLiteralArray,			#protocol : #grammar-literals,			#sourceCode : 'arrayLiteralArray\r\t^ $( asPParser smalltalkToken , arrayItem star , $) asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3036' ],		#self : OmReference [ '3037' ],		#time : DateAndTime [ '2017-12-12T08:01:30.143992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #assignment,			#protocol : #grammar,			#sourceCode : 'assignment\r\t^ variable , assignmentToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3037' ],		#self : OmReference [ '3038' ],		#time : DateAndTime [ '2017-12-12T08:01:30.146992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #assignmentToken,			#protocol : #token,			#sourceCode : 'assignmentToken\r\t^ \':=\' asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3038' ],		#self : OmReference [ '3039' ],		#time : DateAndTime [ '2017-12-12T08:01:30.147992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #binary,			#protocol : #primitives,			#sourceCode : 'binary\r\t^ (PP2PredicateObjectNode anyOf: \'!%&*+,-/<=>?@\\|~\') plus',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3039' ],		#self : OmReference [ '3040' ],		#time : DateAndTime [ '2017-12-12T08:01:30.148992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #binaryExpression,			#protocol : #grammar-messages,			#sourceCode : 'binaryExpression\r\t^ unaryExpression , binaryMessage star',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3040' ],		#self : OmReference [ '3041' ],		#time : DateAndTime [ '2017-12-12T08:01:30.149992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #binaryMessage,			#protocol : #grammar-messages,			#sourceCode : 'binaryMessage\r\t^ (binaryToken , unaryExpression) ==> [ :nodes | \r\t\tArray \r\t\t\twith: (Array with: nodes first)\r\t\t\twith: (Array with: nodes second) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3041' ],		#self : OmReference [ '3042' ],		#time : DateAndTime [ '2017-12-12T08:01:30.150992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #binaryMethod,			#protocol : #grammar-methods,			#sourceCode : 'binaryMethod\r\t^ (binaryToken , variable) ==> [ :nodes | \r\t\tArray \r\t\t\twith: (Array with: nodes first)\r\t\t\twith: (Array with: nodes second) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3042' ],		#self : OmReference [ '3043' ],		#time : DateAndTime [ '2017-12-12T08:01:30.151992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #binaryPragma,			#protocol : #grammar-pragmas,			#sourceCode : 'binaryPragma\r\t^ (binaryToken , arrayItem) ==> [ :nodes | \r\t\tArray \r\t\t\twith: (Array with: nodes first)\r\t\t\twith: (Array with: nodes second) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3043' ],		#self : OmReference [ '3044' ],		#time : DateAndTime [ '2017-12-12T08:01:30.152992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #binaryToken,			#protocol : #token,			#sourceCode : 'binaryToken\r\t^ binary smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3044' ],		#self : OmReference [ '3045' ],		#time : DateAndTime [ '2017-12-12T08:01:30.153992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #block,			#protocol : #grammar-blocks,			#sourceCode : 'block\r\t^ $[ asPParser smalltalkToken , blockBody , $] asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3045' ],		#self : OmReference [ '3046' ],		#time : DateAndTime [ '2017-12-12T08:01:30.155992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #blockArgument,			#protocol : #grammar-blocks,			#sourceCode : 'blockArgument\r\t^ $: asPParser smalltalkToken , variable',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3046' ],		#self : OmReference [ '3047' ],		#time : DateAndTime [ '2017-12-12T08:01:30.157992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #blockArguments,			#protocol : #grammar-blocks,			#sourceCode : 'blockArguments\r\t^ blockArgumentsWith / blockArgumentsWithout',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3047' ],		#self : OmReference [ '3048' ],		#time : DateAndTime [ '2017-12-12T08:01:30.158992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #blockArgumentsWith,			#protocol : #grammar-blocks,			#sourceCode : 'blockArgumentsWith\r\t^ blockArgument plus , ($| asPParser smalltalkToken / ($] asPParser smalltalkToken and ==> [ :node | nil ]))',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3048' ],		#self : OmReference [ '3049' ],		#time : DateAndTime [ '2017-12-12T08:01:30.160992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #blockArgumentsWithout,			#protocol : #grammar-blocks,			#sourceCode : 'blockArgumentsWithout\r\t^ nil asPParser ==> [ :nodes | Array with: #() with: nil ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3049' ],		#self : OmReference [ '3050' ],		#time : DateAndTime [ '2017-12-12T08:01:30.161992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #blockBody,			#protocol : #grammar-blocks,			#sourceCode : 'blockBody\r\t^ blockArguments , sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3050' ],		#self : OmReference [ '3051' ],		#time : DateAndTime [ '2017-12-12T08:01:30.162992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #byteLiteral,			#protocol : #grammar-literals,			#sourceCode : 'byteLiteral\r\t^ \'#[\' asPParser smalltalkToken , numberLiteral star , $] asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3051' ],		#self : OmReference [ '3052' ],		#time : DateAndTime [ '2017-12-12T08:01:30.163992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #byteLiteralArray,			#protocol : #grammar-literals,			#sourceCode : 'byteLiteralArray\r\t^ $[ asPParser smalltalkToken , numberLiteral star , $] asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3052' ],		#self : OmReference [ '3053' ],		#time : DateAndTime [ '2017-12-12T08:01:30.164992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #cascadeExpression,			#protocol : #grammar-messages,			#sourceCode : 'cascadeExpression\r\t^ keywordExpression , cascadeMessage star',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3053' ],		#self : OmReference [ '3054' ],		#time : DateAndTime [ '2017-12-12T08:01:30.165992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #cascadeMessage,			#protocol : #grammar-messages,			#sourceCode : 'cascadeMessage\r\t^ $; asPParser smalltalkToken , message',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3054' ],		#self : OmReference [ '3055' ],		#time : DateAndTime [ '2017-12-12T08:01:30.168992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #char,			#protocol : #primitives,			#sourceCode : 'char\r\t^ $$ asPParser , #any asPParser',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3055' ],		#self : OmReference [ '3056' ],		#time : DateAndTime [ '2017-12-12T08:01:30.169992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #charLiteral,			#protocol : #grammar-literals,			#sourceCode : 'charLiteral\r\t^ charToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3056' ],		#self : OmReference [ '3057' ],		#time : DateAndTime [ '2017-12-12T08:01:30.170992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #charToken,			#protocol : #token,			#sourceCode : 'charToken\r\t^ char smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3057' ],		#self : OmReference [ '3058' ],		#time : DateAndTime [ '2017-12-12T08:01:30.171992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #expression,			#protocol : #grammar,			#sourceCode : 'expression\r\t^ assignment star , cascadeExpression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3058' ],		#self : OmReference [ '3059' ],		#time : DateAndTime [ '2017-12-12T08:01:30.172992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #falseLiteral,			#protocol : #grammar-literals,			#sourceCode : 'falseLiteral\r\t^ falseToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3059' ],		#self : OmReference [ '3060' ],		#time : DateAndTime [ '2017-12-12T08:01:30.173992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #falseToken,			#protocol : #token,			#sourceCode : 'falseToken\r\t^ (\'false\' asPParser , #word asPParser not) smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3060' ],		#self : OmReference [ '3061' ],		#time : DateAndTime [ '2017-12-12T08:01:30.175992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #identifier,			#protocol : #primitives,			#sourceCode : 'identifier\r\t| word letter |\r\tletter := (PP2PredicateObjectNode\r\t\t\t\ton: [ :each | each isLetter or: [ each = $_ ] ]\r\t\t\t\tmessage: \'letter expected\').\r\t\t\t\t\r\tword := (PP2PredicateObjectNode\r\t\t\t\ton: [ :each | each isAlphaNumeric or: [ each = $_ ] ]\r\t\t\t\tmessage: \'letter or digit expected\').\r\t\t\t\t\r\t^ (letter, word star)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3061' ],		#self : OmReference [ '3062' ],		#time : DateAndTime [ '2017-12-12T08:01:30.176992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #identifierToken,			#protocol : #token,			#sourceCode : 'identifierToken\r\t^ identifier smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3062' ],		#self : OmReference [ '3063' ],		#time : DateAndTime [ '2017-12-12T08:01:30.177992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #keyword,			#protocol : #primitives,			#sourceCode : 'keyword\r\t^ identifier , $: asPParser',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3063' ],		#self : OmReference [ '3064' ],		#time : DateAndTime [ '2017-12-12T08:01:30.181992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #keywordExpression,			#protocol : #grammar-messages,			#sourceCode : 'keywordExpression\r\t^ binaryExpression , keywordMessage optional',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3064' ],		#self : OmReference [ '3065' ],		#time : DateAndTime [ '2017-12-12T08:01:30.182992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #keywordMessage,			#protocol : #grammar-messages,			#sourceCode : 'keywordMessage\r\t^ (keywordToken , binaryExpression) plus ==> [ :nodes | \r\t\tArray \r\t\t\twith: (nodes collect: [ :each | each first ])\r\t\t\twith: (nodes collect: [ :each | each second ]) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3065' ],		#self : OmReference [ '3066' ],		#time : DateAndTime [ '2017-12-12T08:01:30.183992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #keywordMethod,			#protocol : #grammar-methods,			#sourceCode : 'keywordMethod\r\t^ (keywordToken , variable) plus ==> [ :nodes | \r\t\tArray \r\t\t\twith: (nodes collect: [ :each | each first ])\r\t\t\twith: (nodes collect: [ :each | each second ]) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3066' ],		#self : OmReference [ '3067' ],		#time : DateAndTime [ '2017-12-12T08:01:30.184992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #keywordPragma,			#protocol : #grammar-pragmas,			#sourceCode : 'keywordPragma\r\t^ (keywordToken , arrayItem) plus ==> [ :nodes | \r\t\tArray \r\t\t\twith: (nodes collect: [ :each | each first ])\r\t\t\twith: (nodes collect: [ :each | each second ]) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3067' ],		#self : OmReference [ '3068' ],		#time : DateAndTime [ '2017-12-12T08:01:30.185992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #keywordToken,			#protocol : #token,			#sourceCode : 'keywordToken\r\t^ self keyword smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3068' ],		#self : OmReference [ '3069' ],		#time : DateAndTime [ '2017-12-12T08:01:30.186992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #literal,			#protocol : #grammar,			#sourceCode : 'literal\r\t^ numberLiteral / stringLiteral / charLiteral / arrayLiteral / byteLiteral / symbolLiteral / nilLiteral / trueLiteral / falseLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3069' ],		#self : OmReference [ '3070' ],		#time : DateAndTime [ '2017-12-12T08:01:30.188992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #message,			#protocol : #grammar,			#sourceCode : 'message\r\t^ keywordMessage / binaryMessage / unaryMessage',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3070' ],		#self : OmReference [ '3071' ],		#time : DateAndTime [ '2017-12-12T08:01:30.189992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #method,			#protocol : #grammar,			#sourceCode : 'method\r\t^ methodDeclaration , methodSequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3071' ],		#self : OmReference [ '3072' ],		#time : DateAndTime [ '2017-12-12T08:01:30.191992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #methodDeclaration,			#protocol : #grammar,			#sourceCode : 'methodDeclaration\r\t^ keywordMethod / unaryMethod / binaryMethod',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3072' ],		#self : OmReference [ '3073' ],		#time : DateAndTime [ '2017-12-12T08:01:30.193992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #methodSequence,			#protocol : #grammar,			#sourceCode : 'methodSequence\r\t^ periodToken star , pragmas , periodToken star , temporaries , periodToken star , pragmas , periodToken star , statements',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3073' ],		#self : OmReference [ '3074' ],		#time : DateAndTime [ '2017-12-12T08:01:30.194992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #multiword,			#protocol : #primitives,			#sourceCode : 'multiword\r\t^ keyword plus',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3074' ],		#self : OmReference [ '3075' ],		#time : DateAndTime [ '2017-12-12T08:01:30.195992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #nilLiteral,			#protocol : #grammar-literals,			#sourceCode : 'nilLiteral\r\t^ nilToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3075' ],		#self : OmReference [ '3076' ],		#time : DateAndTime [ '2017-12-12T08:01:30.196992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #nilToken,			#protocol : #token,			#sourceCode : 'nilToken\r\t^ (\'nil\' asPParser , #word asPParser not) smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3076' ],		#self : OmReference [ '3077' ],		#time : DateAndTime [ '2017-12-12T08:01:30.197992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #number,			#protocol : #primitives,			#sourceCode : 'number\r\t^ ($- asPParser optional , #digit asPParser) and , [ :context | \r\t\t[ | stream retval |\r\t\t\tstream := context asPositionableStream.\r\t\t  \tretval := (NumberParser on: stream) nextNumber.\r\t\t\t(context position: stream position)\r\t\t\t\treturnValue: retval;\r\t\t\t\tyourself\r\t\t] on: Error do: [ :err | context failure: err messageText ] \r\t] asPParser',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3077' ],		#self : OmReference [ '3078' ],		#time : DateAndTime [ '2017-12-12T08:01:30.199992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #numberLiteral,			#protocol : #grammar-literals,			#sourceCode : 'numberLiteral\r\t^ numberToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3078' ],		#self : OmReference [ '3079' ],		#time : DateAndTime [ '2017-12-12T08:01:30.200992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #numberToken,			#protocol : #token,			#sourceCode : 'numberToken\r\t^ number smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3079' ],		#self : OmReference [ '3080' ],		#time : DateAndTime [ '2017-12-12T08:01:30.201992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #parens,			#protocol : #grammar,			#sourceCode : 'parens\r\t^ $( asPParser smalltalkToken , expression , $) asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3080' ],		#self : OmReference [ '3081' ],		#time : DateAndTime [ '2017-12-12T08:01:30.204992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #'parseExpression:',			#protocol : #parsing,			#sourceCode : 'parseExpression: aString \r\t^ self parseExpression: aString onError: [ :msg :pos | self error: msg ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3081' ],		#self : OmReference [ '3082' ],		#time : DateAndTime [ '2017-12-12T08:01:30.205992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #'parseExpression:onError:',			#protocol : #parsing,			#sourceCode : 'parseExpression: aString onError: aBlock\r\t^ startExpression parse: aString onError: aBlock',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3082' ],		#self : OmReference [ '3083' ],		#time : DateAndTime [ '2017-12-12T08:01:30.206992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #'parseMethod:',			#protocol : #parsing,			#sourceCode : 'parseMethod: aString \r\t^ self parseMethod: aString onError: [ :msg :pos | self error: msg ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3083' ],		#self : OmReference [ '3084' ],		#time : DateAndTime [ '2017-12-12T08:01:30.207992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #'parseMethod:onError:',			#protocol : #parsing,			#sourceCode : 'parseMethod: aString onError: aBlock\r\t^ startMethod parse: aString onError: aBlock',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3084' ],		#self : OmReference [ '3085' ],		#time : DateAndTime [ '2017-12-12T08:01:30.208992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #period,			#protocol : #primitives,			#sourceCode : 'period\r\t^ $. asPParser',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3085' ],		#self : OmReference [ '3086' ],		#time : DateAndTime [ '2017-12-12T08:01:30.209992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #periodToken,			#protocol : #token,			#sourceCode : 'periodToken\r\t^ period smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3086' ],		#self : OmReference [ '3087' ],		#time : DateAndTime [ '2017-12-12T08:01:30.210992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #pragma,			#protocol : #grammar,			#sourceCode : 'pragma\r\t^ $< asPParser smalltalkToken , pragmaMessage , $> asPParser smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3087' ],		#self : OmReference [ '3088' ],		#time : DateAndTime [ '2017-12-12T08:01:30.212992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #pragmaMessage,			#protocol : #grammar-pragmas,			#sourceCode : 'pragmaMessage\r\t^ keywordPragma / unaryPragma / binaryPragma',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3088' ],		#self : OmReference [ '3089' ],		#time : DateAndTime [ '2017-12-12T08:01:30.213992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #pragmas,			#protocol : #grammar,			#sourceCode : 'pragmas\r\t^ pragma star',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3089' ],		#self : OmReference [ '3090' ],		#time : DateAndTime [ '2017-12-12T08:01:30.216992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #primary,			#protocol : #grammar,			#sourceCode : 'primary\r\t^ literal / variable / block / parens / array',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3090' ],		#self : OmReference [ '3091' ],		#time : DateAndTime [ '2017-12-12T08:01:30.217992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #return,			#protocol : #grammar,			#sourceCode : 'return\r\t^ $^ asPParser smalltalkToken , expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3091' ],		#self : OmReference [ '3092' ],		#time : DateAndTime [ '2017-12-12T08:01:30.218992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #sequence,			#protocol : #grammar,			#sourceCode : 'sequence\r\t^ temporaries , periodToken star , statements',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3092' ],		#self : OmReference [ '3093' ],		#time : DateAndTime [ '2017-12-12T08:01:30.219992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t"Default start production."\r\r\t^ startMethod',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3093' ],		#self : OmReference [ '3094' ],		#time : DateAndTime [ '2017-12-12T08:01:30.220992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #startExpression,			#protocol : #accessing,			#sourceCode : 'startExpression\r\t"Start production for the expression."\r\r\t^ sequence end',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3094' ],		#self : OmReference [ '3095' ],		#time : DateAndTime [ '2017-12-12T08:01:30.221992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #startMethod,			#protocol : #accessing,			#sourceCode : 'startMethod\r\t"Start production for the method."\r\r\t^ method end',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3095' ],		#self : OmReference [ '3096' ],		#time : DateAndTime [ '2017-12-12T08:01:30.222992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #statements,			#protocol : #grammar,			#sourceCode : 'statements\r\t^ \t(expression wrapped , ((periodToken plus , statements ==> [ :nodes | nodes first , nodes last ])\r\t\t\t\t\t\t\t\t/ periodToken star)\r\t\t\t==> [ :nodes | (Array with: nodes first) , (nodes last) ])\r\t/\t(return , periodToken star\r\t\t\t==> [ :nodes | (Array with: nodes first) , (nodes last) ])\r\t/\t(periodToken star)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3096' ],		#self : OmReference [ '3097' ],		#time : DateAndTime [ '2017-12-12T08:01:30.223992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #string,			#protocol : #primitives,			#sourceCode : 'string\r\t^ ($\' asPParser , (\'\'\'\'\'\' asPParser / $\' asPParser negate) star , $\' asPParser)\r\t\tforbidCache;\r\t\tyourself',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3097' ],		#self : OmReference [ '3098' ],		#time : DateAndTime [ '2017-12-12T08:01:30.226992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #stringLiteral,			#protocol : #grammar-literals,			#sourceCode : 'stringLiteral\r\t^ stringToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3098' ],		#self : OmReference [ '3099' ],		#time : DateAndTime [ '2017-12-12T08:01:30.227992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #stringToken,			#protocol : #token,			#sourceCode : 'stringToken\r\t^ string smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3099' ],		#self : OmReference [ '3100' ],		#time : DateAndTime [ '2017-12-12T08:01:30.229992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #symbol,			#protocol : #primitives,			#sourceCode : 'symbol\r\t^ unary / binary / multiword / string',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3100' ],		#self : OmReference [ '3101' ],		#time : DateAndTime [ '2017-12-12T08:01:30.230992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #symbolLiteral,			#protocol : #grammar-literals,			#sourceCode : 'symbolLiteral\r\t"This is totally fucked up: The Pharo compiler allows multiple #, arbitrary spaces between the # and the symbol, as well as comments inbetween. And yes, it is used."\r\r\t^ $# asPParser smalltalkToken plus , symbol smalltalkToken ==> [ :tokens | tokens first copyWith: tokens last ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3101' ],		#self : OmReference [ '3102' ],		#time : DateAndTime [ '2017-12-12T08:01:30.231992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #symbolLiteralArray,			#protocol : #grammar-literals,			#sourceCode : 'symbolLiteralArray\r\t^ symbol smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3102' ],		#self : OmReference [ '3103' ],		#time : DateAndTime [ '2017-12-12T08:01:30.232992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #temporaries,			#protocol : #grammar,			#sourceCode : 'temporaries\r\t^ ($| asPParser smalltalkToken , variable star , $| asPParser smalltalkToken) optional ==> [ :nodes | nodes ifNil: [ #() ] ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3103' ],		#self : OmReference [ '3104' ],		#time : DateAndTime [ '2017-12-12T08:01:30.233992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #trueLiteral,			#protocol : #grammar-literals,			#sourceCode : 'trueLiteral\r\t^ trueToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3104' ],		#self : OmReference [ '3105' ],		#time : DateAndTime [ '2017-12-12T08:01:30.234992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #trueToken,			#protocol : #token,			#sourceCode : 'trueToken\r\t^ (\'true\' asPParser , #word asPParser not) smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3105' ],		#self : OmReference [ '3106' ],		#time : DateAndTime [ '2017-12-12T08:01:30.235992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #unary,			#protocol : #primitives,			#sourceCode : 'unary\r\t^ identifier , $: asPParser not',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3106' ],		#self : OmReference [ '3107' ],		#time : DateAndTime [ '2017-12-12T08:01:30.238992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #unaryExpression,			#protocol : #grammar-messages,			#sourceCode : 'unaryExpression\r\t^ primary , unaryMessage star',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3107' ],		#self : OmReference [ '3108' ],		#time : DateAndTime [ '2017-12-12T08:01:30.239992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #unaryMessage,			#protocol : #grammar-messages,			#sourceCode : 'unaryMessage\r\t^ unaryToken ==> [ :node | \r\t\tArray \r\t\t\twith: (Array with: node)\r\t\t\twith: Array new ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3108' ],		#self : OmReference [ '3109' ],		#time : DateAndTime [ '2017-12-12T08:01:30.240992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #unaryMethod,			#protocol : #grammar-methods,			#sourceCode : 'unaryMethod\r\t^ identifierToken ==> [ :node | \r\t\tArray \r\t\t\twith: (Array with: node)\r\t\t\twith: Array new ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3109' ],		#self : OmReference [ '3110' ],		#time : DateAndTime [ '2017-12-12T08:01:30.242992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #unaryPragma,			#protocol : #grammar-pragmas,			#sourceCode : 'unaryPragma\r\t^ identifierToken ==> [ :node | \r\t\tArray \r\t\t\twith: (Array with: node)\r\t\t\twith: (Array new) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3110' ],		#self : OmReference [ '3111' ],		#time : DateAndTime [ '2017-12-12T08:01:30.243992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #unaryToken,			#protocol : #token,			#sourceCode : 'unaryToken\r\t^ unary smalltalkToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3111' ],		#self : OmReference [ '3112' ],		#time : DateAndTime [ '2017-12-12T08:01:30.244992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammar,				#isMetaSide : false			},			#name : #variable,			#protocol : #grammar,			#sourceCode : 'variable\r\t^ identifierToken',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3112' ],		#self : OmReference [ '3113' ],		#time : DateAndTime [ '2017-12-12T08:01:30.246992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'addStatements:into:',			#protocol : #private,			#sourceCode : 'addStatements: aCollection into: aNode\r\taCollection isNil \r\t\tifTrue: [ ^ aNode ].\r\taCollection do: [ :each |\r\t\teach class == PP2SmalltalkToken\r\t\t\tifFalse: [ aNode addNode:  each ]\r\t\t\tifTrue: [\r\t\t\t\taNode statements isEmpty\r\t\t\t\t\tifTrue: [ aNode pp2AddComments: each comments ]\r\t\t\t\t\tifFalse: [ aNode statements last pp2AddComments: each comments ].\r\t\t\t\taNode periods: (aNode periods asOrderedCollection\r\t\t\t\t\taddLast: each start;\r\t\t\t\t\tyourself) ] ].\r\t^ aNode',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3113' ],		#self : OmReference [ '3114' ],		#time : DateAndTime [ '2017-12-12T08:01:30.247992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #array,			#protocol : #grammar,			#sourceCode : 'array\r\t^ super array map: [ :openNode :statementNodes :closeNode |\r\t\t(self buildArray: statementNodes)\r\t\t\tleft: openNode start;\r\t\t\tright: closeNode start;\r\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3114' ],		#self : OmReference [ '3115' ],		#time : DateAndTime [ '2017-12-12T08:01:30.249992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #arrayLiteral,			#protocol : #grammar-literals,			#sourceCode : 'arrayLiteral\r\t^ super arrayLiteral\r\t\t==> [ :nodes | \r\t\t\tRBLiteralArrayNode\r\t\t\t\tstartPosition: nodes first start\r\t\t\t\tcontents: nodes second\r\t\t\t\tstopPosition: nodes last start\r\t\t\t\tisByteArray: false ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3115' ],		#self : OmReference [ '3116' ],		#time : DateAndTime [ '2017-12-12T08:01:30.251992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #arrayLiteralArray,			#protocol : #grammar-literals,			#sourceCode : 'arrayLiteralArray\r\t^ super arrayLiteralArray\r\t\t==> [ :nodes | \r\t\t\tRBLiteralArrayNode\r\t\t\t\tstartPosition: nodes first start\r\t\t\t\tcontents: nodes second\r\t\t\t\tstopPosition: nodes last start\r\t\t\t\tisByteArray: false ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3116' ],		#self : OmReference [ '3117' ],		#time : DateAndTime [ '2017-12-12T08:01:30.252992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #binaryExpression,			#protocol : #grammar-messages,			#sourceCode : 'binaryExpression\r\t^ super binaryExpression map: [ :receiverNode :messageNodes | self build: receiverNode messages: messageNodes ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3117' ],		#self : OmReference [ '3118' ],		#time : DateAndTime [ '2017-12-12T08:01:30.253992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #binaryToken,			#protocol : #token,			#sourceCode : 'binaryToken\r\t^ super binaryToken\r\t\t==> [ :token | \r\t\t\t(RBBinarySelectorToken value: token value start: token start)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3118' ],		#self : OmReference [ '3119' ],		#time : DateAndTime [ '2017-12-12T08:01:30.254992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #block,			#protocol : #grammar-blocks,			#sourceCode : 'block\r\t^ super block map: [ :leftToken :blockNode :rightToken | blockNode left: leftToken start; right: rightToken start ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3119' ],		#self : OmReference [ '3120' ],		#time : DateAndTime [ '2017-12-12T08:01:30.255992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #blockArgument,			#protocol : #grammar-blocks,			#sourceCode : 'blockArgument\r\t^ super blockArgument ==> #second',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3120' ],		#self : OmReference [ '3121' ],		#time : DateAndTime [ '2017-12-12T08:01:30.256992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #blockBody,			#protocol : #grammar-blocks,			#sourceCode : 'blockBody\r\t^ super blockBody\r\t\t==> [ :nodes | \r\t\t\t| result |\r\t\t\tresult := RBBlockNode arguments: nodes first first body: nodes last.\r\t\t\tnodes first last ifNotNil: [ result bar: nodes first last start ].\r\t\t\tresult ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3121' ],		#self : OmReference [ '3122' ],		#time : DateAndTime [ '2017-12-12T08:01:30.257992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'build:assignment:',			#protocol : #private,			#sourceCode : 'build: aNode assignment: anArray\r\t^ anArray isEmpty\r\t\tifTrue: [ aNode ]\r\t\tifFalse: [\r\t\t\tanArray reverse \r\t\t\t\tinject: aNode\r\t\t\t\tinto: [ :result :each |\r\t\t\t\t\tRBAssignmentNode \r\t\t\t\t\t\tvariable: each first\r\t\t\t\t\t\tvalue: result\r\t\t\t\t\t\tposition: each second start ] ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3122' ],		#self : OmReference [ '3123' ],		#time : DateAndTime [ '2017-12-12T08:01:30.259992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'build:cascade:',			#protocol : #private,			#sourceCode : 'build: aNode cascade: anArray \r\t| messages semicolons |\r\t^ (anArray isNil or: [ anArray isEmpty ]) \r\t\tifTrue: [ aNode ]\r\t\tifFalse: [\r\t\t\tmessages := OrderedCollection new: anArray size + 1.\r\t\t\tmessages addLast: aNode.\r\t\t\tsemicolons := OrderedCollection new.\r\t\t\tanArray do: [ :each | \r\t\t\t\tmessages addLast: (self \r\t\t\t\t\tbuild: aNode receiver\r\t\t\t\t\tmessages: (Array with: each second)).\r\t\t\t\tsemicolons addLast: each first start ].\r\t\t\tRBCascadeNode messages: messages semicolons: semicolons ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3123' ],		#self : OmReference [ '3124' ],		#time : DateAndTime [ '2017-12-12T08:01:30.262992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'build:messages:',			#protocol : #private,			#sourceCode : 'build: aNode messages: anArray\r\t^ (anArray isNil or: [ anArray isEmpty ])\r\t\tifTrue: [ aNode ]\r\t\tifFalse: [ \r\t\t\tanArray\r\t\t\t\tinject: aNode\r\t\t\t\tinto: [ :rec :msg | \r\t\t\t\t\tmsg isNil\r\t\t\t\t\t\tifTrue: [ rec ]\r\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\tRBMessageNode\r\t\t\t\t\t\t\t\treceiver: rec\r\t\t\t\t\t\t\t\tselector: (self buildSelector: msg first)\r\t\t\t\t\t\t\t\tkeywordsPositions: (msg first collect: [ :each | each start ])\r\t\t\t\t\t\t\t\targuments: msg second ] ] ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3124' ],		#self : OmReference [ '3125' ],		#time : DateAndTime [ '2017-12-12T08:01:30.263992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'build:sequence:',			#protocol : #private,			#sourceCode : 'build: aTempCollection sequence: aStatementCollection\r\t| result |\r\tresult := self\r\t\taddStatements: aStatementCollection\r\t\tinto: RBSequenceNode new.\r\taTempCollection isEmpty ifFalse: [\r\t\tresult\r\t\t\tleftBar: aTempCollection first start\r\t\t\ttemporaries: aTempCollection second\r\t\t\trightBar: aTempCollection last start ].\r\t^ result',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3125' ],		#self : OmReference [ '3126' ],		#time : DateAndTime [ '2017-12-12T08:01:30.264992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'buildArray:',			#protocol : #private,			#sourceCode : 'buildArray: aStatementCollection\r\t^ self addStatements: aStatementCollection into: RBArrayNode new',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3126' ],		#self : OmReference [ '3127' ],		#time : DateAndTime [ '2017-12-12T08:01:30.265992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'buildMethod:',			#protocol : #private,			#sourceCode : 'buildMethod: aMethodNode\r\tself flag: \'check this one thoroughly as it is unclear if the changes preserve \r\tthe original behavior from before the AST refactoring \'.\r"\taMethodNode selectorParts \r\t\tdo: [ :each | aMethodNode addComments: each comments ].\r"\taMethodNode arguments\r\t\tdo: [ :each | aMethodNode pp2AddComments: each comments ].\r\taMethodNode pragmas do: [ :aPragma |\r\t\taMethodNode pp2AddComments: aPragma comments.\r\t\taMethodNode pp2AddComments: aPragma comments.\r\t\taPragma arguments do: [ :each | \r\t\t\teach isLiteralArray\r\t\t\t\tifFalse: [ aMethodNode pp2AddComments: each comments ] ].\r\t\taPragma comments: #() ].\r\t^ aMethodNode',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3127' ],		#self : OmReference [ '3128' ],		#time : DateAndTime [ '2017-12-12T08:01:30.266992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'buildSelector:',			#protocol : #private,			#sourceCode : 'buildSelector: anArray\r\t^ (String streamContents: [ :stream | anArray do: [ :each | stream nextPutAll: each value ] ]) asSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3128' ],		#self : OmReference [ '3129' ],		#time : DateAndTime [ '2017-12-12T08:01:30.267992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #'buildString:',			#protocol : #private,			#sourceCode : 'buildString: aString \r\t(aString isEmpty or: [ aString first ~= $\' or: [ aString last ~= $\' ] ])\r\t\tifTrue: [ ^ aString ].\r\t^ (aString \r\t\tcopyFrom: 2\r\t\tto: aString size - 1) \r\t\tcopyReplaceAll: \'\'\'\'\'\'\r\t\twith: \'\'\'\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3129' ],		#self : OmReference [ '3130' ],		#time : DateAndTime [ '2017-12-12T08:01:30.268992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #byteLiteral,			#protocol : #grammar-literals,			#sourceCode : 'byteLiteral\r\t^ super byteLiteral\r\t\t==> [ :nodes | \r\t\t\tRBLiteralArrayNode\r\t\t\t\tstartPosition: nodes first start\r\t\t\t\tcontents: nodes second\r\t\t\t\tstopPosition: nodes last start\r\t\t\t\tisByteArray: true ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3130' ],		#self : OmReference [ '3131' ],		#time : DateAndTime [ '2017-12-12T08:01:30.270992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #byteLiteralArray,			#protocol : #grammar-literals,			#sourceCode : 'byteLiteralArray\r\t^ super byteLiteralArray\r\t\t==> [ :nodes | \r\t\t\tRBLiteralArrayNode\r\t\t\t\tstartPosition: nodes first start\r\t\t\t\tcontents: nodes second\r\t\t\t\tstopPosition: nodes last start\r\t\t\t\tisByteArray: true ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3131' ],		#self : OmReference [ '3132' ],		#time : DateAndTime [ '2017-12-12T08:01:30.272992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #cascadeExpression,			#protocol : #grammar-messages,			#sourceCode : 'cascadeExpression\r\t^ super cascadeExpression map: [ :receiverNode :messageNodes | self build: receiverNode cascade: messageNodes ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3132' ],		#self : OmReference [ '3133' ],		#time : DateAndTime [ '2017-12-12T08:01:30.274992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #charLiteral,			#protocol : #grammar-literals,			#sourceCode : 'charLiteral\r\t^ super charLiteral\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode \r\t\t\t\tvalue: token value second \r\t\t\t\tstart: token start \r\t\t\t\tstop: token stop)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3133' ],		#self : OmReference [ '3134' ],		#time : DateAndTime [ '2017-12-12T08:01:30.275992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #expression,			#protocol : #grammar,			#sourceCode : 'expression\r\t^ super expression map: [ :variableNodes :expressionNodes | self build: expressionNodes assignment: variableNodes ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3134' ],		#self : OmReference [ '3135' ],		#time : DateAndTime [ '2017-12-12T08:01:30.276992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #falseLiteral,			#protocol : #grammar-literals,			#sourceCode : 'falseLiteral\r\t^ super falseLiteral\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode \r\t\t\t\tvalue: false \r\t\t\t\tstart: token start \r\t\t\t\tstop: token stop)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3135' ],		#self : OmReference [ '3136' ],		#time : DateAndTime [ '2017-12-12T08:01:30.277992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #identifierToken,			#protocol : #token,			#sourceCode : 'identifierToken\r\t^ (super identifierToken\r\t\t==> [ :token | \r\t\t\t(RBIdentifierToken value: token value start: token start)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ])\r\t\tforbidCache;\r\t\tyourself',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3136' ],		#self : OmReference [ '3137' ],		#time : DateAndTime [ '2017-12-12T08:01:30.278992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #keywordExpression,			#protocol : #grammar-messages,			#sourceCode : 'keywordExpression\r\t^ super keywordExpression map: [ :receiveNode :messageNode | self build: receiveNode messages: (Array with: messageNode) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3137' ],		#self : OmReference [ '3138' ],		#time : DateAndTime [ '2017-12-12T08:01:30.279992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #keywordToken,			#protocol : #token,			#sourceCode : 'keywordToken\r\t^ super keywordToken\r\t\t==> [ :token | \r\t\t\t(RBKeywordToken value: token value start: token start)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3138' ],		#self : OmReference [ '3139' ],		#time : DateAndTime [ '2017-12-12T08:01:30.280992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #method,			#protocol : #grammar,			#sourceCode : 'method\r\t^ super method map: [ :methodNode :bodyNode | \r\t\tmethodNode pragmas: bodyNode first.\r\t\tmethodNode body: bodyNode second.\r\t\tself buildMethod: methodNode ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3139' ],		#self : OmReference [ '3140' ],		#time : DateAndTime [ '2017-12-12T08:01:30.282992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #methodDeclaration,			#protocol : #grammar,			#sourceCode : 'methodDeclaration\r\t^ super methodDeclaration\r\t\t==> [ :nodes | \r\t\t\tRBMethodNode\r\t\t\t\tselector: (self buildSelector: nodes first)\r\t\t\t\tkeywordsPositions: (nodes first collect: [ :each | each start ])\r\t\t\t\targuments: nodes second ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3140' ],		#self : OmReference [ '3141' ],		#time : DateAndTime [ '2017-12-12T08:01:30.285992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #methodSequence,			#protocol : #grammar,			#sourceCode : 'methodSequence\r\t^ super methodSequence map: [ :periodNodes1 :pragmaNodes1 :periodNodes2 :tempNodes :periodNodes3 :pragmaNodes2 :periodNodes4 :statementNodes |\r\t\tArray\r\t\t\twith: pragmaNodes1 , pragmaNodes2\r\t\t\twith: (self build: tempNodes sequence: periodNodes1 , periodNodes2 , periodNodes3 , periodNodes4 , statementNodes) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3141' ],		#self : OmReference [ '3142' ],		#time : DateAndTime [ '2017-12-12T08:01:30.286992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #nilLiteral,			#protocol : #grammar-literals,			#sourceCode : 'nilLiteral\r\t^ super nilLiteral\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode \r\t\t\t\tvalue: nil \r\t\t\t\tstart: token start \r\t\t\t\tstop: token stop)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3142' ],		#self : OmReference [ '3143' ],		#time : DateAndTime [ '2017-12-12T08:01:30.287992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #numberLiteral,			#protocol : #grammar-literals,			#sourceCode : 'numberLiteral\r\t^ super numberLiteral\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode\r\t\t\t\tvalue: (Number readFrom: token value)\r\t\t\t\tstart: token start\r\t\t\t\tstop: token stop\r\t\t\t\tsource: token value)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3143' ],		#self : OmReference [ '3144' ],		#time : DateAndTime [ '2017-12-12T08:01:30.288992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #parens,			#protocol : #grammar,			#sourceCode : 'parens\r\t^ super parens map: [ :openToken :expressionNode :closeToken | expressionNode addParenthesis: (openToken start to: closeToken start) ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3144' ],		#self : OmReference [ '3145' ],		#time : DateAndTime [ '2017-12-12T08:01:30.289992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #pragma,			#protocol : #grammar,			#sourceCode : 'pragma\r\t^ super pragma\r\t\t==> [ :nodes | \r\t\t\t(RBPragmaNode\r\t\t\t\tselector: (self buildSelector: nodes second first)\r\t\t\t\tkeywordsPositions: (nodes second first collect: [ :each | each start ])\r\t\t\t\targuments: nodes second second)\r\t\t\t\tpp2AddComments: nodes first comments;\r\t\t\t\tpp2AddComments: nodes last comments;\r\t\t\t\tleft: nodes first start;\r\t\t\t\tright: nodes last start;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3145' ],		#self : OmReference [ '3146' ],		#time : DateAndTime [ '2017-12-12T08:01:30.290992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #return,			#protocol : #grammar,			#sourceCode : 'return\r\t^ super return map: [ :token :expressionNode | RBReturnNode return: token start value: expressionNode ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3146' ],		#self : OmReference [ '3147' ],		#time : DateAndTime [ '2017-12-12T08:01:30.291992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #sequence,			#protocol : #grammar,			#sourceCode : 'sequence\r\t^ super sequence map: [ :tempNodes :periodNodes :statementNodes | self build: tempNodes sequence: periodNodes , statementNodes ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3147' ],		#self : OmReference [ '3148' ],		#time : DateAndTime [ '2017-12-12T08:01:30.292992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #startExpression,			#protocol : #accessing,			#sourceCode : 'startExpression\r\t"Make the sequence node has a method node as its parent and that the source is set."\r\r\t^ ([ :context | context contents ] asPParser and , super startExpression) map: [ :source :node | \r\t\t(RBMethodNode selector: #doIt body: node)\r\t\t\tsource: source.\r\t\t(node statements size = 1 and: [ node temporaries isEmpty ])\r\t\t\tifTrue: [ node statements first ]\r\t\t\tifFalse: [ node ] ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3148' ],		#self : OmReference [ '3149' ],		#time : DateAndTime [ '2017-12-12T08:01:30.296992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #startMethod,			#protocol : #accessing,			#sourceCode : 'startMethod\r\t"Make sure the method node has the source code properly set."\r\t^ ([ :context | context upToEnd ] asPParser and, super startMethod)\r\t\tmap: [ :source :node | node source: source ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3149' ],		#self : OmReference [ '3150' ],		#time : DateAndTime [ '2017-12-12T08:01:30.297992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #stringLiteral,			#protocol : #grammar-literals,			#sourceCode : 'stringLiteral\r\t^ super stringLiteral\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode \r\t\t\t\tvalue: (self buildString: token value) \r\t\t\t\tstart: token start \r\t\t\t\tstop: token stop)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3150' ],		#self : OmReference [ '3151' ],		#time : DateAndTime [ '2017-12-12T08:01:30.298992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #symbolLiteral,			#protocol : #grammar-literals,			#sourceCode : 'symbolLiteral\r\t^ super symbolLiteral\r\t\t==> [ :tokens | \r\t\t\t(RBLiteralValueNode\r\t\t\t\tvalue: (self buildString: tokens last value) asSymbol\r\t\t\t\tstart: tokens first start\r\t\t\t\tstop: tokens last stop)\r\t\t\t\tcomments: tokens last comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3151' ],		#self : OmReference [ '3152' ],		#time : DateAndTime [ '2017-12-12T08:01:30.299992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #symbolLiteralArray,			#protocol : #grammar-literals,			#sourceCode : 'symbolLiteralArray\r\t^ super symbolLiteralArray\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode \r\t\t\t\tvalue: (self buildString: token value) asSymbol \r\t\t\t\tstart: token start \r\t\t\t\tstop: token stop)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3152' ],		#self : OmReference [ '3153' ],		#time : DateAndTime [ '2017-12-12T08:01:30.300992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #trueLiteral,			#protocol : #grammar-literals,			#sourceCode : 'trueLiteral\r\t^ super trueLiteral\r\t\t==> [ :token | \r\t\t\t(RBLiteralValueNode value: true start: token start stop: token stop)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3153' ],		#self : OmReference [ '3154' ],		#time : DateAndTime [ '2017-12-12T08:01:30.301992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #unaryExpression,			#protocol : #grammar-messages,			#sourceCode : 'unaryExpression\r\t^ super unaryExpression map: [ :receiverNode :messageNodes | self build: receiverNode messages: messageNodes ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3154' ],		#self : OmReference [ '3155' ],		#time : DateAndTime [ '2017-12-12T08:01:30.302992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #unaryToken,			#protocol : #token,			#sourceCode : 'unaryToken\r\t^ super unaryToken\r\t\t==> [ :token | \r\t\t\t(RBIdentifierToken value: token value start: token start)\r\t\t\t\tcomments: token comments;\r\t\t\t\tyourself ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3155' ],		#self : OmReference [ '3156' ],		#time : DateAndTime [ '2017-12-12T08:01:30.304992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParser,				#isMetaSide : false			},			#name : #variable,			#protocol : #grammar,			#sourceCode : 'variable\r\t^ super variable ==> [ :token | RBVariableNode identifierNamed: token value  at: token start ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3156' ],		#self : OmReference [ '3157' ],		#time : DateAndTime [ '2017-12-12T08:01:30.307992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitor,				#isMetaSide : false			},			#name : #'visitSmalltalkWhitespace:',			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'visitSmalltalkWhitespace: node\r\t^ true',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3157' ],		#self : OmReference [ '3158' ],		#time : DateAndTime [ '2017-12-12T08:01:30.308992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SourcesTest,				#isMetaSide : false			},			#name : #testSmalltalkSources,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'testSmalltalkSources\r\t| s1 s2 |\r\t[\r\t\tPP2Sources reset.\r\t\ts1 := PP2Sources current smalltalkSourcesProfiling.\r\t\tPP2Sources reset.\r\t\ts2 := PP2Sources current smalltalkSourcesProfiling.\r\t\t\r\t\tself assert: s1 equals: s2.\r\t] ensure: [ \r\t\tPP2Sources current smalltalkAllUrl asFileReference ensureDelete ]\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3158' ],		#self : OmReference [ '3159' ],		#time : DateAndTime [ '2017-12-12T08:01:30.309992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2NodeVisitor,				#isMetaSide : false			},			#name : #'visitSmalltalkWhitespace:',			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'visitSmalltalkWhitespace: node\r\t^ self visitPP2Node: node',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3159' ],		#self : OmReference [ '3160' ],		#time : DateAndTime [ '2017-12-12T08:01:30.310992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2RecordingContext class',				#isMetaSide : true			},			#name : #smalltalkParserExample,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkParserExample\r\t<gtExample>\r\t<label: \'smalltalkParser profiling context\'>\r\t\r\t| inputs parser parsingContext |\r\tinputs := PP2Sources current smalltalkSourcesProfiling.\r\tparser := PP2SmalltalkParser new optimize.\r\tparsingContext := PP2RecordingContext new.\r\t\r\tinputs do: [ :input |\r\t\tparser parse: input withContext: parsingContext\r\t].\r\t^ parsingContext',			#stamp : ' 7/2/2017 13:42:21',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3160' ],		#self : OmReference [ '3161' ],		#time : DateAndTime [ '2017-12-12T08:01:30.311992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserOptimizationsValidator,				#isMetaSide : false			},			#name : #'actualForSource:',			#protocol : #validation,			#sourceCode : 'actualForSource: source\r\t| result |\r\tresult := optimizedParser parse: source.\r\t^ result isPetit2Failure ifFalse: [ \r\t\tArray with: result value\r\t] ifTrue: [ \r\t\t#failure\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3161' ],		#self : OmReference [ '3162' ],		#time : DateAndTime [ '2017-12-12T08:01:30.312992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserOptimizationsValidator,				#isMetaSide : false			},			#name : #'expectedForSource:',			#protocol : #validation,			#sourceCode : 'expectedForSource: source\r\t| result |\r\tresult := parser parse: source.\r\t\r\t^ result isPetit2Failure ifFalse: [ \r\t\tArray with: result value\r\t] ifTrue: [ \r\t\t#failure\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3162' ],		#self : OmReference [ '3163' ],		#time : DateAndTime [ '2017-12-12T08:01:30.313992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserOptimizationsValidator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tparser := PP2SmalltalkParser new.\r\toptimizedParser := PP2SmalltalkParser new optimize',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3163' ],		#self : OmReference [ '3164' ],		#time : DateAndTime [ '2017-12-12T08:01:30.314992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserOptimizationsValidator,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ \'PP2SmalltalkParser(Opt)\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3164' ],		#self : OmReference [ '3165' ],		#time : DateAndTime [ '2017-12-12T08:01:30.315992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserOptimizationsValidator,				#isMetaSide : false			},			#name : #sources,			#protocol : #accessing,			#sourceCode : 'sources\r\t^ PP2Sources current smalltalkSourcesVerification',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3165' ],		#self : OmReference [ '3166' ],		#time : DateAndTime [ '2017-12-12T08:01:30.317992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Interpret,				#isMetaSide : false			},			#name : #'visitSmalltalkWhitespace:',			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'visitSmalltalkWhitespace: node\t\r\t[ \r\t\t[ currentContext atEnd not and: [ currentContext uncheckedPeek isSeparator ]] whileTrue: [ \r\t\t\tcurrentContext shift \r\t\t].\r\t\r\t\t(currentContext atEnd not and: [ currentContext uncheckedPeek = $" ]) \r\t] whileTrue: [\r\t\tcurrentContext shift.\r\t\tcurrentContext upTo: $".\r\t].\r',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3166' ],		#self : OmReference [ '3167' ],		#time : DateAndTime [ '2017-12-12T08:01:30.320992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testSmalltalkGrammar,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'testSmalltalkGrammar\r\t| input  bench |\r\tbench := PP2Benchmark new.\r\tbench setupSmalltalkGrammar.\r\r\tself assert: (bench parser isKindOf: PP2SmalltalkGrammar).\r\tself assert: (bench parser isOptimized).\r\t\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3167' ],		#self : OmReference [ '3168' ],		#time : DateAndTime [ '2017-12-12T08:01:30.321992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testSmalltalkGrammarIM,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'testSmalltalkGrammarIM\r\t| input  bench |\r\tbench := PP2Benchmark new.\r\tbench setupSmalltalkGrammarIM.\r\r\tself assert: (bench parser isKindOf: PP2SmalltalkGrammar).\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3168' ],		#self : OmReference [ '3169' ],		#time : DateAndTime [ '2017-12-12T08:01:30.322992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testSmalltalkGrammarNoOpt,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'testSmalltalkGrammarNoOpt\r\t| input  bench |\r\tbench := PP2Benchmark new.\r\tbench setupSmalltalkGrammarNoOpt.\r\r\tself assert: (bench parser isKindOf: PP2SmalltalkGrammar).\r\tself assert: (bench parser isOptimized not).\r\t\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3169' ],		#self : OmReference [ '3170' ],		#time : DateAndTime [ '2017-12-12T08:01:30.323992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testSmalltalkParser,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'testSmalltalkParser\r\t| input  bench result rbresult |\r\tbench := PP2Benchmark new.\r\tbench setupSmalltalkParser.\r\r\tself assert: (bench parser isKindOf: PP2SmalltalkParser).\r\tself assert: (bench parser isOptimized).\r\t\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (result := bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.\r\tself assert: result isPetit2Failure not.\r\tself assert: result value isMethod.\r\t\r\t"Sanity check against RBParser"\r\trbresult := RBParser parseMethod: input first.\r\tself assert: result value equals: rbresult\r\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3170' ],		#self : OmReference [ '3171' ],		#time : DateAndTime [ '2017-12-12T08:01:30.324992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2BenchmarkTest,				#isMetaSide : false			},			#name : #testSmalltalkParserNoOpt,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'testSmalltalkParserNoOpt\r\t| input  bench result |\r\tbench := PP2Benchmark new.\r\tbench setupSmalltalkParserNoOpt.\r\r\tself assert: (bench parser isKindOf: PP2SmalltalkParser).\r\tself assert: (bench parser isOptimized not).\r\t\r\tinput := bench input.\r\tcontext := bench context.\r\tselector := bench selector.\r\r\tself assert: (result := bench parser end perform: selector withArguments: {input first . context }) isPetit2Failure not.\r\tself assert: result isPetit2Failure not.\r\tself assert: result value isMethod.\r\t',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3171' ],		#self : OmReference [ '3172' ],		#time : DateAndTime [ '2017-12-12T08:01:30.325992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Node,				#isMetaSide : false			},			#name : #smalltalkToken,			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'smalltalkToken\r\t^ (self token: PP2SmalltalkToken) trim: PP2SmalltalkWhitespaceNode instance',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3172' ],		#self : OmReference [ '3173' ],		#time : DateAndTime [ '2017-12-12T08:01:30.325992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkWhitespaceNode class',				#isMetaSide : true			},			#name : #instance,			#protocol : #'instance creation',			#sourceCode : 'instance\r\tinstance isNil ifTrue: [ \r\t\tinstance := self new\r\t].\r\t"\r\t\tI would rather not to see this as a singleton\r\t\t\r\t\tThe reason to reset is that optimizations set some strategies. And these will not get \r\t\trestored.\r\t"\r\tinstance resetStrategies.\r\t^ instance ',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3173' ],		#self : OmReference [ '3174' ],		#time : DateAndTime [ '2017-12-12T08:01:30.327992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkWhitespaceNode class',				#isMetaSide : true			},			#name : #reset,			#protocol : #'instance creation',			#sourceCode : 'reset\r\tinstance := nil',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3174' ],		#self : OmReference [ '3175' ],		#time : DateAndTime [ '2017-12-12T08:01:30.328992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceNode,				#isMetaSide : false			},			#name : #'accept:',			#protocol : #visiting,			#sourceCode : 'accept: visitor\r\t^ visitor visitSmalltalkWhitespace: self',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3175' ],		#self : OmReference [ '3176' ],		#time : DateAndTime [ '2017-12-12T08:01:30.330992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceNode,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tself resetStrategies.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3176' ],		#self : OmReference [ '3177' ],		#time : DateAndTime [ '2017-12-12T08:01:30.331992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceNode,				#isMetaSide : false			},			#name : #isFirstSetTerminal,			#protocol : #'analysis - first',			#sourceCode : 'isFirstSetTerminal\r\t^ false',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3177' ],		#self : OmReference [ '3178' ],		#time : DateAndTime [ '2017-12-12T08:01:30.333992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceNode,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ \'smalltalk_ws\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3178' ],		#self : OmReference [ '3179' ],		#time : DateAndTime [ '2017-12-12T08:01:30.334992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkWhitespaceNode,				#isMetaSide : false			},			#name : #resetStrategy,			#protocol : #initialization,			#sourceCode : 'resetStrategy\r\tstrategy := PP2SmalltalkWhitespaceStrategy on: self',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3179' ],		#self : OmReference [ '3180' ],		#time : DateAndTime [ '2017-12-12T08:01:30.335992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2ContextChangesVisitor,				#isMetaSide : false			},			#name : #'visitSmalltalkWhitespace:',			#protocol : #'*PetitParser2-Smalltalk',			#sourceCode : 'visitSmalltalkWhitespace: node\r\t^ PP2CcChange noChange ',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3180' ],		#self : OmReference [ '3181' ],		#time : DateAndTime [ '2017-12-12T08:01:30.336992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkToken,				#isMetaSide : false			},			#name : #comments,			#protocol : #accessing,			#sourceCode : 'comments\r\t^ comments ifNil: [ #() ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3181' ],		#self : OmReference [ '3182' ],		#time : DateAndTime [ '2017-12-12T08:01:30.337992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkToken,				#isMetaSide : false			},			#name : #'comments:',			#protocol : #accessing,			#sourceCode : 'comments: anArray\r\tcomments := anArray',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3182' ],		#self : OmReference [ '3183' ],		#time : DateAndTime [ '2017-12-12T08:01:30.338992+08:00' ],		#trigger : OmReference [ '2993' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkToken,				#isMetaSide : false			},			#name : #length,			#protocol : #compatiblity,			#sourceCode : 'length\r\t^ self size',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:01:30.456992+08:00' ],		#prior : OmReference [ '3183' ],		#self : OmReference [ '3184' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Smalltalk-Tests-JanKurs.2'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3184' ],		#self : OmReference [ '3185' ],		#time : DateAndTime [ '2017-12-12T08:01:30.521992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Smalltalk-Tests-Core,		#affectedPackageName : #PetitParser2-Smalltalk-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3185' ],		#self : OmReference [ '3186' ],		#time : DateAndTime [ '2017-12-12T08:01:30.524992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SmalltalkGrammarTests\r\tuses: {}\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #TPP2SmalltalkGrammarTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SmalltalkGrammarTests classTrait\r\tuses: {}'				},				#name : #'TPP2SmalltalkGrammarTests classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SmalltalkGrammarTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3186' ],		#self : OmReference [ '3187' ],		#time : DateAndTime [ '2017-12-12T08:01:30.533992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SmalltalkParserTests\r\tuses: {}\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #TPP2SmalltalkParserTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SmalltalkParserTests classTrait\r\tuses: {}'				},				#name : #'TPP2SmalltalkParserTests classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SmalltalkParserTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3187' ],		#self : OmReference [ '3188' ],		#time : DateAndTime [ '2017-12-12T08:01:30.562992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParserSmalltalkTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ManifestPetitParserSmalltalkTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParserSmalltalkTests class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParserSmalltalkTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParserSmalltalkTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3188' ],		#self : OmReference [ '3189' ],		#time : DateAndTime [ '2017-12-12T08:01:30.562992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Smalltalk-Tests,		#affectedPackageName : #PetitParser2-Smalltalk-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3189' ],		#self : OmReference [ '3190' ],		#time : DateAndTime [ '2017-12-12T08:01:30.564992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PackageManifest',				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestPetitParserSmalltalkTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests\''			},			#name : #ManifestPetitParserSmalltalkTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestPetitParserSmalltalkTests class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestPetitParserSmalltalkTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestPetitParserSmalltalkTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3190' ],		#self : OmReference [ '3191' ],		#time : DateAndTime [ '2017-12-12T08:01:30.575992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Smalltalk-Tests-Optimizations,		#affectedPackageName : #PetitParser2-Smalltalk-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3191' ],		#self : OmReference [ '3192' ],		#time : DateAndTime [ '2017-12-12T08:01:30.577992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2SmalltalkGrammarOptimizationsTest\r\tinstanceVariableNames: \'parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Optimizations\''			},			#name : #PP2SmalltalkGrammarOptimizationsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkGrammarOptimizationsTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkGrammarOptimizationsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkGrammarOptimizationsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkGrammarOptimizationsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Optimizations,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3192' ],		#self : OmReference [ '3193' ],		#time : DateAndTime [ '2017-12-12T08:01:30.581992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PP2SmalltalkParserOptimizationsTest\r\tinstanceVariableNames: \'parser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Optimizations\''			},			#name : #PP2SmalltalkParserOptimizationsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2SmalltalkParserOptimizationsTest,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkParserOptimizationsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkParserOptimizationsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkParserOptimizationsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Optimizations,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3193' ],		#self : OmReference [ '3194' ],		#time : DateAndTime [ '2017-12-12T08:01:30.586992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2SmalltalkGrammarTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #PP2SmalltalkGrammarTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkGrammarTests class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkGrammarTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkGrammarTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3194' ],		#self : OmReference [ '3195' ],		#time : DateAndTime [ '2017-12-12T08:01:30.591992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2SmalltalkGrammarTests',				#traitCompositionSource : '{}',				#definitionSource : 'PP2SmalltalkGrammarTests subclass: #PP2SmalltalkParserTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #PP2SmalltalkParserTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkParserTests class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkParserTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkParserTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3195' ],		#self : OmReference [ '3196' ],		#time : DateAndTime [ '2017-12-12T08:01:30.598992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2SmalltalkGrammarTests_InMemoryCtx\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #PP2SmalltalkGrammarTests_InMemoryCtx,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkGrammarTests_InMemoryCtx class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkGrammarTests_InMemoryCtx class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkGrammarTests_InMemoryCtx,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3196' ],		#self : OmReference [ '3197' ],		#time : DateAndTime [ '2017-12-12T08:01:30.602992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2SmalltalkGrammarTests_Optimized\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #PP2SmalltalkGrammarTests_Optimized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkGrammarTests_Optimized class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkGrammarTests_Optimized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkGrammarTests_Optimized,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3197' ],		#self : OmReference [ '3198' ],		#time : DateAndTime [ '2017-12-12T08:01:30.606992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2SmalltalkGrammarTests_Optimized',				#traitCompositionSource : '{}',				#definitionSource : 'PP2SmalltalkGrammarTests_Optimized subclass: #PP2SmalltalkParserTests_Optimized\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #PP2SmalltalkParserTests_Optimized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2SmalltalkParserTests_Optimized class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2SmalltalkParserTests_Optimized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2SmalltalkParserTests_Optimized,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3198' ],		#self : OmReference [ '3199' ],		#time : DateAndTime [ '2017-12-12T08:01:30.621992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SmalltalkGrammarTests\r\tuses: {}\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #TPP2SmalltalkGrammarTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SmalltalkGrammarTests classTrait\r\tuses: {}'				},				#name : #'TPP2SmalltalkGrammarTests classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SmalltalkGrammarTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SmalltalkGrammarTests\r\tuses: {}\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #TPP2SmalltalkGrammarTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SmalltalkGrammarTests classTrait\r\tuses: {}'				},				#name : #'TPP2SmalltalkGrammarTests classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SmalltalkGrammarTests,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3199' ],		#self : OmReference [ '3200' ],		#time : DateAndTime [ '2017-12-12T08:01:38.267992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SmalltalkParserTests\r\tuses: {}\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #TPP2SmalltalkParserTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SmalltalkParserTests classTrait\r\tuses: {}'				},				#name : #'TPP2SmalltalkParserTests classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SmalltalkParserTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TPP2SmalltalkParserTests\r\tuses: {}\r\tcategory: \'PetitParser2-Smalltalk-Tests-Core\''			},			#name : #TPP2SmalltalkParserTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2SmalltalkParserTests classTrait\r\tuses: {}'				},				#name : #'TPP2SmalltalkParserTests classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2SmalltalkParserTests,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Smalltalk-Tests-Core,			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3200' ],		#self : OmReference [ '3201' ],		#time : DateAndTime [ '2017-12-12T08:02:21.999992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2SmalltalkGrammar',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3201' ],		#self : OmReference [ '3202' ],		#time : DateAndTime [ '2017-12-12T08:02:22.002992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArgumentsBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testArgumentsBlock1\r\tself \r\t\tparse: \'[ :a | ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3202' ],		#self : OmReference [ '3203' ],		#time : DateAndTime [ '2017-12-12T08:02:22.003992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArgumentsBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testArgumentsBlock2\r\tself \r\t\tparse: \'[ :a :b | ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3203' ],		#self : OmReference [ '3204' ],		#time : DateAndTime [ '2017-12-12T08:02:22.005992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArgumentsBlock3,			#protocol : #testing-blocks,			#sourceCode : 'testArgumentsBlock3\r\tself \r\t\tparse: \'[ :a :b :c | ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3204' ],		#self : OmReference [ '3205' ],		#time : DateAndTime [ '2017-12-12T08:02:22.006992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArray1,			#protocol : #testing,			#sourceCode : 'testArray1\r\tself \r\t\tparse: \'{}\'\r\t\trule: #array',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3205' ],		#self : OmReference [ '3206' ],		#time : DateAndTime [ '2017-12-12T08:02:22.007992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArray2,			#protocol : #testing,			#sourceCode : 'testArray2\r\tself \r\t\tparse: \'{self foo}\'\r\t\trule: #array',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3206' ],		#self : OmReference [ '3207' ],		#time : DateAndTime [ '2017-12-12T08:02:22.008992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArray3,			#protocol : #testing,			#sourceCode : 'testArray3\r\tself \r\t\tparse: \'{self foo. self bar}\'\r\t\trule: #array',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3207' ],		#self : OmReference [ '3208' ],		#time : DateAndTime [ '2017-12-12T08:02:22.009992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArray4,			#protocol : #testing,			#sourceCode : 'testArray4\r\tself \r\t\tparse: \'{self foo. self bar.}\'\r\t\trule: #array',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3208' ],		#self : OmReference [ '3209' ],		#time : DateAndTime [ '2017-12-12T08:02:22.012992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral1\r\tself \r\t\tparse: \'#()\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3209' ],		#self : OmReference [ '3210' ],		#time : DateAndTime [ '2017-12-12T08:02:22.013992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral10,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral10\r\tself \r\t\tparse: \'#((1 2) #(1 2 3))\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3210' ],		#self : OmReference [ '3211' ],		#time : DateAndTime [ '2017-12-12T08:02:22.015992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral11,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral11\r\tself \r\t\tparse: \'#([1 2] #[1 2 3])\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3211' ],		#self : OmReference [ '3212' ],		#time : DateAndTime [ '2017-12-12T08:02:22.016992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral2\r\tself \r\t\tparse: \'#(1)\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3212' ],		#self : OmReference [ '3213' ],		#time : DateAndTime [ '2017-12-12T08:02:22.017992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral3\r\tself \r\t\tparse: \'#(1 2)\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3213' ],		#self : OmReference [ '3214' ],		#time : DateAndTime [ '2017-12-12T08:02:22.018992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral4\r\tself \r\t\tparse: \'#(true false nil)\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3214' ],		#self : OmReference [ '3215' ],		#time : DateAndTime [ '2017-12-12T08:02:22.020992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral5\r\tself \r\t\tparse: \'#($a)\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3215' ],		#self : OmReference [ '3216' ],		#time : DateAndTime [ '2017-12-12T08:02:22.021992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral6,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral6\r\tself \r\t\tparse: \'#(1.2)\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3216' ],		#self : OmReference [ '3217' ],		#time : DateAndTime [ '2017-12-12T08:02:22.022992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral7,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral7\r\tself \r\t\tparse: \'#(size #at: at:put: #\'\'==\'\')\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3217' ],		#self : OmReference [ '3218' ],		#time : DateAndTime [ '2017-12-12T08:02:22.025992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral8,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral8\r\tself \r\t\tparse: \'#(\'\'baz\'\')\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3218' ],		#self : OmReference [ '3219' ],		#time : DateAndTime [ '2017-12-12T08:02:22.026992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testArrayLiteral9,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral9\r\tself \r\t\tparse: \'#((1) 2)\'\r\t\trule: #arrayLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3219' ],		#self : OmReference [ '3220' ],		#time : DateAndTime [ '2017-12-12T08:02:22.027992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testAssignment1,			#protocol : #testing,			#sourceCode : 'testAssignment1\r\tself \r\t\tparse: \'1\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3220' ],		#self : OmReference [ '3221' ],		#time : DateAndTime [ '2017-12-12T08:02:22.028992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testAssignment2,			#protocol : #testing,			#sourceCode : 'testAssignment2\r\tself \r\t\tparse: \'a := 1\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3221' ],		#self : OmReference [ '3222' ],		#time : DateAndTime [ '2017-12-12T08:02:22.029992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testAssignment3,			#protocol : #testing,			#sourceCode : 'testAssignment3\r\tself \r\t\tparse: \'a := b := 1\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3222' ],		#self : OmReference [ '3223' ],		#time : DateAndTime [ '2017-12-12T08:02:22.030992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testAssignment4,			#protocol : #testing,			#sourceCode : 'testAssignment4\r\tself fail: \'a _ 1\' rule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3223' ],		#self : OmReference [ '3224' ],		#time : DateAndTime [ '2017-12-12T08:02:22.031992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testAssignment5,			#protocol : #testing,			#sourceCode : 'testAssignment5\r\tself fail: \'a _ b _ 1\' rule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3224' ],		#self : OmReference [ '3225' ],		#time : DateAndTime [ '2017-12-12T08:02:22.033992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testAssignment6,			#protocol : #testing,			#sourceCode : 'testAssignment6\r\tself \r\t\tparse: \'a := (b := c)\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3225' ],		#self : OmReference [ '3226' ],		#time : DateAndTime [ '2017-12-12T08:02:22.034992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryExpression1,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression1\r\tself \r\t\tparse: \'1 + 2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3226' ],		#self : OmReference [ '3227' ],		#time : DateAndTime [ '2017-12-12T08:02:22.037992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryExpression2,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression2\r\tself \r\t\tparse: \'1 + 2 + 3\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3227' ],		#self : OmReference [ '3228' ],		#time : DateAndTime [ '2017-12-12T08:02:22.038992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryExpression3,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression3\r\tself \r\t\tparse: \'1 // 2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3228' ],		#self : OmReference [ '3229' ],		#time : DateAndTime [ '2017-12-12T08:02:22.039992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryExpression4,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression4\r\tself \r\t\tparse: \'1 -- 2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3229' ],		#self : OmReference [ '3230' ],		#time : DateAndTime [ '2017-12-12T08:02:22.040992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryExpression5,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression5\r\tself \r\t\tparse: \'1 ==> 2\'\r\t\trule: #expression.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3230' ],		#self : OmReference [ '3231' ],		#time : DateAndTime [ '2017-12-12T08:02:22.041992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryMethod1,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod1\r\tself \r\t\tparse: \'+ a\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3231' ],		#self : OmReference [ '3232' ],		#time : DateAndTime [ '2017-12-12T08:02:22.042992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryMethod2,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod2\r\tself \r\t\tparse: \'+ a | b |\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3232' ],		#self : OmReference [ '3233' ],		#time : DateAndTime [ '2017-12-12T08:02:22.044992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryMethod3,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod3\r\tself \r\t\tparse: \'+ a b\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3233' ],		#self : OmReference [ '3234' ],		#time : DateAndTime [ '2017-12-12T08:02:22.045992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryMethod4,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod4\r\tself \r\t\tparse: \'+ a | b | c\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3234' ],		#self : OmReference [ '3235' ],		#time : DateAndTime [ '2017-12-12T08:02:22.047992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBinaryMethod5,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod5\r\tself \r\t\tparse: \'-- a\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3235' ],		#self : OmReference [ '3236' ],		#time : DateAndTime [ '2017-12-12T08:02:22.048992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testBlock1,			#protocol : #testing,			#sourceCode : 'testBlock1\r\tself \r\t\tparse: \'[]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3236' ],		#self : OmReference [ '3237' ],		#time : DateAndTime [ '2017-12-12T08:02:22.050992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testByteLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral1\r\tself \r\t\tparse: \'#[]\'\r\t\trule: #byteLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3237' ],		#self : OmReference [ '3238' ],		#time : DateAndTime [ '2017-12-12T08:02:22.051992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testByteLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral2\r\tself \r\t\tparse: \'#[0]\'\r\t\trule: #byteLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3238' ],		#self : OmReference [ '3239' ],		#time : DateAndTime [ '2017-12-12T08:02:22.052992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testByteLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral3\r\tself \r\t\tparse: \'#[255]\'\r\t\trule: #byteLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3239' ],		#self : OmReference [ '3240' ],		#time : DateAndTime [ '2017-12-12T08:02:22.053992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testByteLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral4\r\tself \r\t\tparse: \'#[ 1 2 ]\'\r\t\trule: #byteLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3240' ],		#self : OmReference [ '3241' ],		#time : DateAndTime [ '2017-12-12T08:02:22.055992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testByteLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral5\r\tself \r\t\tparse: \'#[ 2r1010 8r77 16rFF ]\'\r\t\trule: #byteLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3241' ],		#self : OmReference [ '3242' ],		#time : DateAndTime [ '2017-12-12T08:02:22.057992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCascadeExpression1,			#protocol : #testing-messages,			#sourceCode : 'testCascadeExpression1\r\tself \r\t\tparse: \'1 abs; negated\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3242' ],		#self : OmReference [ '3243' ],		#time : DateAndTime [ '2017-12-12T08:02:22.058992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCascadeExpression2,			#protocol : #testing-messages,			#sourceCode : 'testCascadeExpression2\r\tself \r\t\tparse: \'1 abs negated; raisedTo: 12; negated\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3243' ],		#self : OmReference [ '3244' ],		#time : DateAndTime [ '2017-12-12T08:02:22.062992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCascadeExpression3,			#protocol : #testing-messages,			#sourceCode : 'testCascadeExpression3\r\tself \r\t\tparse: \'1 + 2; - 3\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3244' ],		#self : OmReference [ '3245' ],		#time : DateAndTime [ '2017-12-12T08:02:22.063992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCharLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testCharLiteral1\r\tself \r\t\tparse: \'$a\'\r\t\trule: #charLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3245' ],		#self : OmReference [ '3246' ],		#time : DateAndTime [ '2017-12-12T08:02:22.065992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCharLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testCharLiteral2\r\tself \r\t\tparse: \'$ \'\r\t\trule: #charLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3246' ],		#self : OmReference [ '3247' ],		#time : DateAndTime [ '2017-12-12T08:02:22.066992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCharLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testCharLiteral3\r\tself \r\t\tparse: \'$$\'\r\t\trule: #charLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3247' ],		#self : OmReference [ '3248' ],		#time : DateAndTime [ '2017-12-12T08:02:22.068992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComment1,			#protocol : #testing,			#sourceCode : 'testComment1\r\tself \r\t\tparse: \'1"one"+2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3248' ],		#self : OmReference [ '3249' ],		#time : DateAndTime [ '2017-12-12T08:02:22.069992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComment2,			#protocol : #testing,			#sourceCode : 'testComment2\r\tself \r\t\tparse: \'1 "one" +2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3249' ],		#self : OmReference [ '3250' ],		#time : DateAndTime [ '2017-12-12T08:02:22.070992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComment3,			#protocol : #testing,			#sourceCode : 'testComment3\r\tself \r\t\tparse: \'1"one"+"two"2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3250' ],		#self : OmReference [ '3251' ],		#time : DateAndTime [ '2017-12-12T08:02:22.071992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComment4,			#protocol : #testing,			#sourceCode : 'testComment4\r\tself \r\t\tparse: \'1"one""two"+2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3251' ],		#self : OmReference [ '3252' ],		#time : DateAndTime [ '2017-12-12T08:02:22.074992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComment5,			#protocol : #testing,			#sourceCode : 'testComment5\r\tself \r\t\tparse: \'1"one"\t"two"+2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3252' ],		#self : OmReference [ '3253' ],		#time : DateAndTime [ '2017-12-12T08:02:22.075992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComplexBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testComplexBlock1\r\tself \r\t\tparse: \'[ :a | | b | c ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3253' ],		#self : OmReference [ '3254' ],		#time : DateAndTime [ '2017-12-12T08:02:22.077992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testComplexBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testComplexBlock2\r\tself \r\t\tparse: \'[:a||b|c]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3254' ],		#self : OmReference [ '3255' ],		#time : DateAndTime [ '2017-12-12T08:02:22.078992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordExpression1,			#protocol : #testing-messages,			#sourceCode : 'testKeywordExpression1\r\tself \r\t\tparse: \'1 to: 2\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3255' ],		#self : OmReference [ '3256' ],		#time : DateAndTime [ '2017-12-12T08:02:22.079992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordExpression2,			#protocol : #testing-messages,			#sourceCode : 'testKeywordExpression2\r\tself \r\t\tparse: \'1 to: 2 by: 3\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3256' ],		#self : OmReference [ '3257' ],		#time : DateAndTime [ '2017-12-12T08:02:22.080992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordExpression3,			#protocol : #testing-messages,			#sourceCode : 'testKeywordExpression3\r\tself \r\t\tparse: \'1 to: 2 by: 3 do: 4\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3257' ],		#self : OmReference [ '3258' ],		#time : DateAndTime [ '2017-12-12T08:02:22.081992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordMethod1,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod1\r\tself \r\t\tparse: \'to: a\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3258' ],		#self : OmReference [ '3259' ],		#time : DateAndTime [ '2017-12-12T08:02:22.082992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordMethod2,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod2\r\tself \r\t\tparse: \'to: a do: b | c |\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3259' ],		#self : OmReference [ '3260' ],		#time : DateAndTime [ '2017-12-12T08:02:22.083992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordMethod3,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod3\r\tself \r\t\tparse: \'to: a do: b by: c d\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3260' ],		#self : OmReference [ '3261' ],		#time : DateAndTime [ '2017-12-12T08:02:22.086992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testKeywordMethod4,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod4\r\tself \r\t\tparse: \'to: a do: b by: c | d | e\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3261' ],		#self : OmReference [ '3262' ],		#time : DateAndTime [ '2017-12-12T08:02:22.088992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testMethod1,			#protocol : #testing,			#sourceCode : 'testMethod1\r\tself \r\t\tparse: \'negated ^ 0 - self\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3262' ],		#self : OmReference [ '3263' ],		#time : DateAndTime [ '2017-12-12T08:02:22.089992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testMethod2,			#protocol : #testing,			#sourceCode : 'testMethod2\r\t"Spaces at the beginning of the method."\r\tself \r\t\tparse: \'\t  negated ^ 0 - self\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3263' ],		#self : OmReference [ '3264' ],		#time : DateAndTime [ '2017-12-12T08:02:22.090992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testMethod3,			#protocol : #testing,			#sourceCode : 'testMethod3\r\t"Spaces at the end of the method."\r\tself \r\t\tparse: \'\tnegated ^ 0 - self  \'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3264' ],		#self : OmReference [ '3265' ],		#time : DateAndTime [ '2017-12-12T08:02:22.091992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral1\r\tself \r\t\tparse: \'0\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3265' ],		#self : OmReference [ '3266' ],		#time : DateAndTime [ '2017-12-12T08:02:22.092992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral10,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral10\r\tself \r\t\tparse: \'10r10\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3266' ],		#self : OmReference [ '3267' ],		#time : DateAndTime [ '2017-12-12T08:02:22.093992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral11,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral11\r\tself \r\t\tparse: \'8r777\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3267' ],		#self : OmReference [ '3268' ],		#time : DateAndTime [ '2017-12-12T08:02:22.094992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral12,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral12\r\tself \r\t\tparse: \'16rAF\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3268' ],		#self : OmReference [ '3269' ],		#time : DateAndTime [ '2017-12-12T08:02:22.097992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral13,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral13\r\tself \r\t\tparse: \'16rCA.FE\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3269' ],		#self : OmReference [ '3270' ],		#time : DateAndTime [ '2017-12-12T08:02:22.098992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral14,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral14\r\tself \r\t\tparse: \'3r-22.2\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3270' ],		#self : OmReference [ '3271' ],		#time : DateAndTime [ '2017-12-12T08:02:22.100992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral15,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral15\r\tself \r\t\tparse: \'0.50s2\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3271' ],		#self : OmReference [ '3272' ],		#time : DateAndTime [ '2017-12-12T08:02:22.101992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral2\r\tself \r\t\tparse: \'0.1\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3272' ],		#self : OmReference [ '3273' ],		#time : DateAndTime [ '2017-12-12T08:02:22.102992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral3\r\tself \r\t\tparse: \'123\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3273' ],		#self : OmReference [ '3274' ],		#time : DateAndTime [ '2017-12-12T08:02:22.103992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral4\r\tself \r\t\tparse: \'123.456\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3274' ],		#self : OmReference [ '3275' ],		#time : DateAndTime [ '2017-12-12T08:02:22.104992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral5\r\tself \r\t\tparse: \'-0\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3275' ],		#self : OmReference [ '3276' ],		#time : DateAndTime [ '2017-12-12T08:02:22.105992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral6,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral6\r\tself \r\t\tparse: \'-0.1\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3276' ],		#self : OmReference [ '3277' ],		#time : DateAndTime [ '2017-12-12T08:02:22.107992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral7,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral7\r\tself \r\t\tparse: \'-123\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3277' ],		#self : OmReference [ '3278' ],		#time : DateAndTime [ '2017-12-12T08:02:22.109992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral8,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral8\r\tself \r\t\tparse: \'-123\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3278' ],		#self : OmReference [ '3279' ],		#time : DateAndTime [ '2017-12-12T08:02:22.111992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testNumberLiteral9,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral9\r\tself \r\t\tparse: \'-123.456\'\r\t\trule: #numberLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3279' ],		#self : OmReference [ '3280' ],		#time : DateAndTime [ '2017-12-12T08:02:22.112992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma1,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma1\r\tself \r\t\tparse: \'method <foo>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3280' ],		#self : OmReference [ '3281' ],		#time : DateAndTime [ '2017-12-12T08:02:22.113992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma10,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma10\r\tself \r\t\tparse: \'method <foo: bar>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3281' ],		#self : OmReference [ '3282' ],		#time : DateAndTime [ '2017-12-12T08:02:22.114992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma11,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma11\r\tself \r\t\tparse: \'method <foo: true>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3282' ],		#self : OmReference [ '3283' ],		#time : DateAndTime [ '2017-12-12T08:02:22.115992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma12,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma12\r\tself \r\t\tparse: \'method <foo: false>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3283' ],		#self : OmReference [ '3284' ],		#time : DateAndTime [ '2017-12-12T08:02:22.116992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma13,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma13\r\tself \r\t\tparse: \'method <foo: nil>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3284' ],		#self : OmReference [ '3285' ],		#time : DateAndTime [ '2017-12-12T08:02:22.118992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma14,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma14\r\tself \r\t\tparse: \'method <foo: ()>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3285' ],		#self : OmReference [ '3286' ],		#time : DateAndTime [ '2017-12-12T08:02:22.120992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma15,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma15\r\tself \r\t\tparse: \'method <foo: #()>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3286' ],		#self : OmReference [ '3287' ],		#time : DateAndTime [ '2017-12-12T08:02:22.122992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma16,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma16\r\tself \r\t\tparse: \'method < + 1 >\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3287' ],		#self : OmReference [ '3288' ],		#time : DateAndTime [ '2017-12-12T08:02:22.123992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma17,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma17\r\tself \r\t\tparse: \'method <foo: 1 bar: 2>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3288' ],		#self : OmReference [ '3289' ],		#time : DateAndTime [ '2017-12-12T08:02:22.124992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma18,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma18\r\tself \r\t\tparse: \'method <foo: 1 bar: 2  baz: b>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3289' ],		#self : OmReference [ '3290' ],		#time : DateAndTime [ '2017-12-12T08:02:22.125992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma2,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma2\r\tself \r\t\tparse: \'method <foo> <bar>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3290' ],		#self : OmReference [ '3291' ],		#time : DateAndTime [ '2017-12-12T08:02:22.126992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma3,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma3\r\tself \r\t\tparse: \'method | a | <foo>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3291' ],		#self : OmReference [ '3292' ],		#time : DateAndTime [ '2017-12-12T08:02:22.127992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma4,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma4\r\tself \r\t\tparse: \'method <foo> | a |\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3292' ],		#self : OmReference [ '3293' ],		#time : DateAndTime [ '2017-12-12T08:02:22.128992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma5,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma5\r\tself \r\t\tparse: \'method <foo> | a | <bar>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3293' ],		#self : OmReference [ '3294' ],		#time : DateAndTime [ '2017-12-12T08:02:22.130992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma6,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma6\r\tself \r\t\tparse: \'method <foo: 1>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3294' ],		#self : OmReference [ '3295' ],		#time : DateAndTime [ '2017-12-12T08:02:22.133992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma7,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma7\r\tself \r\t\tparse: \'method <foo: 1.2>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3295' ],		#self : OmReference [ '3296' ],		#time : DateAndTime [ '2017-12-12T08:02:22.134992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma8,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma8\r\tself \r\t\tparse: \'method <foo: \'\'bar\'\'>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3296' ],		#self : OmReference [ '3297' ],		#time : DateAndTime [ '2017-12-12T08:02:22.135992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testPragma9,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma9\r\tself \r\t\tparse: \'method <foo: #\'\'bar\'\'>\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3297' ],		#self : OmReference [ '3298' ],		#time : DateAndTime [ '2017-12-12T08:02:22.136992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSequence1,			#protocol : #testing,			#sourceCode : 'testSequence1\r\tself \r\t\tparse: \'| a | 1 . 2\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3298' ],		#self : OmReference [ '3299' ],		#time : DateAndTime [ '2017-12-12T08:02:22.137992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSimpleBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testSimpleBlock1\r\tself \r\t\tparse: \'[ ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3299' ],		#self : OmReference [ '3300' ],		#time : DateAndTime [ '2017-12-12T08:02:22.138992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSimpleBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testSimpleBlock2\r\tself \r\t\tparse: \'[ nil ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3300' ],		#self : OmReference [ '3301' ],		#time : DateAndTime [ '2017-12-12T08:02:22.140992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSimpleBlock3,			#protocol : #testing-blocks,			#sourceCode : 'testSimpleBlock3\r\tself \r\t\tparse: \'[ :a ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3301' ],		#self : OmReference [ '3302' ],		#time : DateAndTime [ '2017-12-12T08:02:22.141992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSpecialLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testSpecialLiteral1\r\tself \r\t\tparse: \'true\'\r\t\trule: #trueLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3302' ],		#self : OmReference [ '3303' ],		#time : DateAndTime [ '2017-12-12T08:02:22.143992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSpecialLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testSpecialLiteral2\r\tself \r\t\tparse: \'false\'\r\t\trule: #falseLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3303' ],		#self : OmReference [ '3304' ],		#time : DateAndTime [ '2017-12-12T08:02:22.145992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSpecialLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testSpecialLiteral3\r\tself \r\t\tparse: \'nil\'\r\t\trule: #nilLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3304' ],		#self : OmReference [ '3305' ],		#time : DateAndTime [ '2017-12-12T08:02:22.146992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatementBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testStatementBlock1\r\tself \r\t\tparse: \'[ nil ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3305' ],		#self : OmReference [ '3306' ],		#time : DateAndTime [ '2017-12-12T08:02:22.147992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatementBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testStatementBlock2\r\tself \r\t\tparse: \'[ | a | nil ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3306' ],		#self : OmReference [ '3307' ],		#time : DateAndTime [ '2017-12-12T08:02:22.148992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatementBlock3,			#protocol : #testing-blocks,			#sourceCode : 'testStatementBlock3\r\tself \r\t\tparse: \'[ | a b | nil ]\'\r\t\trule: #block',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3307' ],		#self : OmReference [ '3308' ],		#time : DateAndTime [ '2017-12-12T08:02:22.149992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements1,			#protocol : #testing,			#sourceCode : 'testStatements1\r\tself \r\t\tparse: \'1\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3308' ],		#self : OmReference [ '3309' ],		#time : DateAndTime [ '2017-12-12T08:02:22.151992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements2,			#protocol : #testing,			#sourceCode : 'testStatements2\r\tself \r\t\tparse: \'1 . 2\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3309' ],		#self : OmReference [ '3310' ],		#time : DateAndTime [ '2017-12-12T08:02:22.152992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements3,			#protocol : #testing,			#sourceCode : 'testStatements3\r\tself \r\t\tparse: \'1 . 2 . 3\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3310' ],		#self : OmReference [ '3311' ],		#time : DateAndTime [ '2017-12-12T08:02:22.153992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements4,			#protocol : #testing,			#sourceCode : 'testStatements4\r\tself \r\t\tparse: \'1 . 2 . 3 .\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3311' ],		#self : OmReference [ '3312' ],		#time : DateAndTime [ '2017-12-12T08:02:22.156992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements5,			#protocol : #testing,			#sourceCode : 'testStatements5\r\tself \r\t\tparse: \'1 . . 2\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3312' ],		#self : OmReference [ '3313' ],		#time : DateAndTime [ '2017-12-12T08:02:22.157992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements6,			#protocol : #testing,			#sourceCode : 'testStatements6\r\tself \r\t\tparse: \'1. 2\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3313' ],		#self : OmReference [ '3314' ],		#time : DateAndTime [ '2017-12-12T08:02:22.158992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements7,			#protocol : #testing,			#sourceCode : 'testStatements7\r\tself \r\t\tparse: \'. 1\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3314' ],		#self : OmReference [ '3315' ],		#time : DateAndTime [ '2017-12-12T08:02:22.159992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements8,			#protocol : #testing,			#sourceCode : 'testStatements8\r\tself \r\t\tparse: \'.1\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3315' ],		#self : OmReference [ '3316' ],		#time : DateAndTime [ '2017-12-12T08:02:22.161992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStatements9,			#protocol : #testing,			#sourceCode : 'testStatements9\r\tself \r\t\tparse: \'\'\r\t\trule: #statements',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3316' ],		#self : OmReference [ '3317' ],		#time : DateAndTime [ '2017-12-12T08:02:22.162992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStringLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testStringLiteral1\r\tself \r\t\tparse: \'\'\'\'\'\'\r\t\trule: #stringLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3317' ],		#self : OmReference [ '3318' ],		#time : DateAndTime [ '2017-12-12T08:02:22.163992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStringLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testStringLiteral2\r\tself \r\t\tparse: \'\'\'ab\'\'\'\r\t\trule: #stringLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3318' ],		#self : OmReference [ '3319' ],		#time : DateAndTime [ '2017-12-12T08:02:22.164992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testStringLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testStringLiteral3\r\tself \r\t\tparse: \'\'\'ab\'\'\'\'cd\'\'\'\r\t\trule: #stringLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3319' ],		#self : OmReference [ '3320' ],		#time : DateAndTime [ '2017-12-12T08:02:22.167992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral1\r\tself \r\t\tparse: \'#foo\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3320' ],		#self : OmReference [ '3321' ],		#time : DateAndTime [ '2017-12-12T08:02:22.168992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral2\r\tself \r\t\tparse: \'#+\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3321' ],		#self : OmReference [ '3322' ],		#time : DateAndTime [ '2017-12-12T08:02:22.169992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral3\r\tself \r\t\tparse: \'#key:\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3322' ],		#self : OmReference [ '3323' ],		#time : DateAndTime [ '2017-12-12T08:02:22.171992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral4\r\tself \r\t\tparse: \'#key:value:\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3323' ],		#self : OmReference [ '3324' ],		#time : DateAndTime [ '2017-12-12T08:02:22.172992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral5\r\tself \r\t\tparse: \'#\'\'testing-result\'\'\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3324' ],		#self : OmReference [ '3325' ],		#time : DateAndTime [ '2017-12-12T08:02:22.173992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral6,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral6\r\t\tself \r\t\t\tparse: \'#__gen__binding\'\r\t\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3325' ],		#self : OmReference [ '3326' ],		#time : DateAndTime [ '2017-12-12T08:02:22.174992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral7,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral7\r\tself \r\t\tparse: \'# fucker\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3326' ],		#self : OmReference [ '3327' ],		#time : DateAndTime [ '2017-12-12T08:02:22.175992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral8,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral8\r\tself \r\t\tparse: \'##fucker\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3327' ],		#self : OmReference [ '3328' ],		#time : DateAndTime [ '2017-12-12T08:02:22.176992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testSymbolLiteral9,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral9\r\tself \r\t\tparse: \'## fucker\'\r\t\trule: #symbolLiteral',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3328' ],		#self : OmReference [ '3329' ],		#time : DateAndTime [ '2017-12-12T08:02:22.179992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testTemporaries1,			#protocol : #testing,			#sourceCode : 'testTemporaries1\r\tself \r\t\tparse: \'| a |\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3329' ],		#self : OmReference [ '3330' ],		#time : DateAndTime [ '2017-12-12T08:02:22.181992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testTemporaries2,			#protocol : #testing,			#sourceCode : 'testTemporaries2\r\tself \r\t\tparse: \'| a b |\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3330' ],		#self : OmReference [ '3331' ],		#time : DateAndTime [ '2017-12-12T08:02:22.182992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testTemporaries3,			#protocol : #testing,			#sourceCode : 'testTemporaries3\r\tself \r\t\tparse: \'| a b c |\'\r\t\trule: #sequence',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3331' ],		#self : OmReference [ '3332' ],		#time : DateAndTime [ '2017-12-12T08:02:22.183992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryExpression1,			#protocol : #testing-messages,			#sourceCode : 'testUnaryExpression1\r\tself \r\t\tparse: \'1 abs\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3332' ],		#self : OmReference [ '3333' ],		#time : DateAndTime [ '2017-12-12T08:02:22.184992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryExpression2,			#protocol : #testing-messages,			#sourceCode : 'testUnaryExpression2\r\tself \r\t\tparse: \'1 abs negated\'\r\t\trule: #expression',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3333' ],		#self : OmReference [ '3334' ],		#time : DateAndTime [ '2017-12-12T08:02:22.185992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryMethod1,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod1\r\tself \r\t\tparse: \'abs\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3334' ],		#self : OmReference [ '3335' ],		#time : DateAndTime [ '2017-12-12T08:02:22.187992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryMethod2,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod2\r\tself \r\t\tparse: \'abs | a |\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3335' ],		#self : OmReference [ '3336' ],		#time : DateAndTime [ '2017-12-12T08:02:22.188992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryMethod3,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod3\r\tself \r\t\tparse: \'abs a\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3336' ],		#self : OmReference [ '3337' ],		#time : DateAndTime [ '2017-12-12T08:02:22.190992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryMethod4,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod4\r\tself \r\t\tparse: \'abs | a | b\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3337' ],		#self : OmReference [ '3338' ],		#time : DateAndTime [ '2017-12-12T08:02:22.192992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testUnaryMethod5,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod5\r\tself \r\t\tparse: \'abs | a |\'\r\t\trule: #method',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3338' ],		#self : OmReference [ '3339' ],		#time : DateAndTime [ '2017-12-12T08:02:22.193992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable1,			#protocol : #testing,			#sourceCode : 'testVariable1\r\tself \r\t\tparse: \'trueBinding\'\r\t\trule: #primary',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3339' ],		#self : OmReference [ '3340' ],		#time : DateAndTime [ '2017-12-12T08:02:22.194992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable2,			#protocol : #testing,			#sourceCode : 'testVariable2\r\tself \r\t\tparse: \'falseBinding\'\r\t\trule: #primary',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3340' ],		#self : OmReference [ '3341' ],		#time : DateAndTime [ '2017-12-12T08:02:22.195992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable3,			#protocol : #testing,			#sourceCode : 'testVariable3\r\tself \r\t\tparse: \'nilly\'\r\t\trule: #primary',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3341' ],		#self : OmReference [ '3342' ],		#time : DateAndTime [ '2017-12-12T08:02:22.196992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable4,			#protocol : #testing,			#sourceCode : 'testVariable4\r\tself \r\t\tparse: \'selfish\'\r\t\trule: #primary',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3342' ],		#self : OmReference [ '3343' ],		#time : DateAndTime [ '2017-12-12T08:02:22.198992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable5,			#protocol : #testing,			#sourceCode : 'testVariable5\r\tself \r\t\tparse: \'supernanny\'\r\t\trule: #primary',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3343' ],		#self : OmReference [ '3344' ],		#time : DateAndTime [ '2017-12-12T08:02:22.199992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable6,			#protocol : #testing,			#sourceCode : 'testVariable6\r\t\tself \r\t\t\tparse: \'super_nanny\'\r\t\t\trule: #primary',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3344' ],		#self : OmReference [ '3345' ],		#time : DateAndTime [ '2017-12-12T08:02:22.200992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testVariable7,			#protocol : #testing,			#sourceCode : 'testVariable7\r\t\tself \r\t\t\tparse: \'__gen_var_123__\'\r\t\t\trule: #primary ',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3345' ],		#self : OmReference [ '3346' ],		#time : DateAndTime [ '2017-12-12T08:02:22.203992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #'assert:format:',			#protocol : #private,			#sourceCode : 'assert: aNode format: aString\r\taNode isCollection\r\t\tifFalse: [ ^ self assert: (Array with: aNode) format: (Array with: aString) ].\r\tself assert: aNode size equals: aString size.\r\taNode with: aString do: [ :node :string | self assert: (BIConfigurableFormatter format: node) equals: string ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3346' ],		#self : OmReference [ '3347' ],		#time : DateAndTime [ '2017-12-12T08:02:22.204992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2SmalltalkParser',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3347' ],		#self : OmReference [ '3348' ],		#time : DateAndTime [ '2017-12-12T08:02:22.205992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArgumentsBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testArgumentsBlock1\r\tsuper testArgumentsBlock1.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3348' ],		#self : OmReference [ '3349' ],		#time : DateAndTime [ '2017-12-12T08:02:22.207992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArgumentsBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testArgumentsBlock2\r\tsuper testArgumentsBlock2.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 2.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result arguments second isVariable.\r\tself assert: self result arguments second name equals: \'b\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3349' ],		#self : OmReference [ '3350' ],		#time : DateAndTime [ '2017-12-12T08:02:22.208992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArgumentsBlock3,			#protocol : #testing-blocks,			#sourceCode : 'testArgumentsBlock3\r\tsuper testArgumentsBlock3.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 3.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result arguments second isVariable.\r\tself assert: self result arguments second name equals: \'b\'.\r\tself assert: self result arguments third isVariable.\r\tself assert: self result arguments third name equals: \'c\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3350' ],		#self : OmReference [ '3351' ],		#time : DateAndTime [ '2017-12-12T08:02:22.209992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArray1,			#protocol : #testing,			#sourceCode : 'testArray1\r\tsuper testArray1.\r\tself assert: self result statements isEmpty.\r\tself assert: self result periods isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3351' ],		#self : OmReference [ '3352' ],		#time : DateAndTime [ '2017-12-12T08:02:22.210992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArray2,			#protocol : #testing,			#sourceCode : 'testArray2\r\tsuper testArray2.\r\tself assert: self result periods isEmpty.\r\tself assert: self result statements size equals: 1.\r\tself assert: self result statements first isMessage.\r\tself assert: self result statements first selector equals: #foo',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3352' ],		#self : OmReference [ '3353' ],		#time : DateAndTime [ '2017-12-12T08:02:22.211992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArray3,			#protocol : #testing,			#sourceCode : 'testArray3\r\tsuper testArray3.\r\tself assert: self result periods size equals: 1.\r\tself assert: self result statements size equals: 2.\r\tself assert: self result statements first isMessage.\r\tself assert: self result statements first selector equals: #foo.\r\tself assert: self result statements last isMessage.\r\tself assert: self result statements last selector equals: #bar',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3353' ],		#self : OmReference [ '3354' ],		#time : DateAndTime [ '2017-12-12T08:02:22.214992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArray4,			#protocol : #testing,			#sourceCode : 'testArray4\r\tsuper testArray4.\r\tself assert: self result periods size equals: 2.\r\tself assert: self result statements size equals: 2.\r\tself assert: self result statements first isMessage.\r\tself assert: self result statements first selector equals: #foo.\r\tself assert: self result statements last isMessage.\r\tself assert: self result statements last selector equals: #bar',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3354' ],		#self : OmReference [ '3355' ],		#time : DateAndTime [ '2017-12-12T08:02:22.215992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral1\r\tsuper testArrayLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #()',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3355' ],		#self : OmReference [ '3356' ],		#time : DateAndTime [ '2017-12-12T08:02:22.216992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral10,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral10\r\tsuper testArrayLiteral10.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(#(1 2) #(1 2 3))',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3356' ],		#self : OmReference [ '3357' ],		#time : DateAndTime [ '2017-12-12T08:02:22.217992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral11,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral11\r\tsuper testArrayLiteral11.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value size equals: 2.\r\tself assert: (self result value first isKindOf: ByteArray).\r\tself assert: self result value first size equals: 2.\r\tself assert: (self result value last isKindOf: ByteArray).\r\tself assert: self result value last size equals: 3',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3357' ],		#self : OmReference [ '3358' ],		#time : DateAndTime [ '2017-12-12T08:02:22.219992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral2\r\tsuper testArrayLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(1)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3358' ],		#self : OmReference [ '3359' ],		#time : DateAndTime [ '2017-12-12T08:02:22.220992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral3\r\tsuper testArrayLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(1 2)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3359' ],		#self : OmReference [ '3360' ],		#time : DateAndTime [ '2017-12-12T08:02:22.221992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral4\r\tsuper testArrayLiteral4.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(true false nil)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3360' ],		#self : OmReference [ '3361' ],		#time : DateAndTime [ '2017-12-12T08:02:22.222992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral5\r\tsuper testArrayLiteral5.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #($a)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3361' ],		#self : OmReference [ '3362' ],		#time : DateAndTime [ '2017-12-12T08:02:22.223992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral6,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral6\r\tsuper testArrayLiteral6.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(1.2)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3362' ],		#self : OmReference [ '3363' ],		#time : DateAndTime [ '2017-12-12T08:02:22.226992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral7,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral7\r\tsuper testArrayLiteral7.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(#size #at: #at:put: #==).\r\tself result value do: [ :each | self assert: each isSymbol ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3363' ],		#self : OmReference [ '3364' ],		#time : DateAndTime [ '2017-12-12T08:02:22.227992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral8,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral8\r\tsuper testArrayLiteral8.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(\'baz\').\r\tself assert: self result value first isString.\r\tself assert: self result value first isSymbol not',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3364' ],		#self : OmReference [ '3365' ],		#time : DateAndTime [ '2017-12-12T08:02:22.228992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testArrayLiteral9,			#protocol : #testing-literals,			#sourceCode : 'testArrayLiteral9\r\tsuper testArrayLiteral9.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #(#(1) 2)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3365' ],		#self : OmReference [ '3366' ],		#time : DateAndTime [ '2017-12-12T08:02:22.229992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testAssignment1,			#protocol : #testing,			#sourceCode : 'testAssignment1\r\tsuper testAssignment1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3366' ],		#self : OmReference [ '3367' ],		#time : DateAndTime [ '2017-12-12T08:02:22.230992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testAssignment2,			#protocol : #testing,			#sourceCode : 'testAssignment2\r\tsuper testAssignment2.\r\tself assert: self result isAssignment.\r\tself assert: self result variable isVariable.\r\tself assert: self result variable name equals: \'a\'.\r\tself assert: self result value isLiteralNode.\r\tself assert: self result value value equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3367' ],		#self : OmReference [ '3368' ],		#time : DateAndTime [ '2017-12-12T08:02:22.232992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testAssignment3,			#protocol : #testing,			#sourceCode : 'testAssignment3\r\tsuper testAssignment3.\r\tself assert: self result isAssignment.\r\tself assert: self result variable isVariable.\r\tself assert: self result variable name equals: \'a\'.\r\tself assert: self result value isAssignment.\r\tself assert: self result value variable isVariable.\r\tself assert: self result value variable name equals: \'b\'.\r\tself assert: self result value value isLiteralNode.\r\tself assert: self result value value value equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3368' ],		#self : OmReference [ '3369' ],		#time : DateAndTime [ '2017-12-12T08:02:22.233992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testAssignment4,			#protocol : #testing,			#sourceCode : 'testAssignment4\r\tsuper testAssignment4.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3369' ],		#self : OmReference [ '3370' ],		#time : DateAndTime [ '2017-12-12T08:02:22.234992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testAssignment5,			#protocol : #testing,			#sourceCode : 'testAssignment5\r\tsuper testAssignment5.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3370' ],		#self : OmReference [ '3371' ],		#time : DateAndTime [ '2017-12-12T08:02:22.235992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testAssignment6,			#protocol : #testing,			#sourceCode : 'testAssignment6\r\tsuper testAssignment6.\r\tself assert: self result isAssignment.\r\tself assert: self result variable isVariable.\r\tself assert: self result variable name equals: \'a\'.\r\tself assert: self result value isAssignment.\r\tself assert: self result value variable isVariable.\r\tself assert: self result value variable name equals: \'b\'.\r\tself assert: self result value value isVariable.\r\tself assert: self result value value name equals: \'c\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3371' ],		#self : OmReference [ '3372' ],		#time : DateAndTime [ '2017-12-12T08:02:22.238992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryExpression1,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression1\r\tsuper testBinaryExpression1.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result receiver value equals: 1.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3372' ],		#self : OmReference [ '3373' ],		#time : DateAndTime [ '2017-12-12T08:02:22.239992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryExpression2,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression2\r\tsuper testBinaryExpression2.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isMessage.\r\tself assert: self result receiver receiver isLiteralNode.\r\tself assert: self result receiver receiver value equals: 1.\r\tself assert: self result receiver arguments size equals: 1.\r\tself assert: self result receiver arguments first isLiteralNode.\r\tself assert: self result receiver arguments first value equals: 2.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 3',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3373' ],		#self : OmReference [ '3374' ],		#time : DateAndTime [ '2017-12-12T08:02:22.240992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryExpression3,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression3\r\tsuper testBinaryExpression3.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result receiver value equals: 1.\r\tself assert: self result selector equals: #//.\r\tself assert: self result keywordsPositions equals: #(3) asIntegerArray.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3374' ],		#self : OmReference [ '3375' ],		#time : DateAndTime [ '2017-12-12T08:02:22.241992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryExpression4,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression4\r\tsuper testBinaryExpression4.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result receiver value equals: 1.\r\tself assert: self result selector equals: #--.\r\tself assert: self result keywordsPositions equals: #(3) asIntegerArray.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3375' ],		#self : OmReference [ '3376' ],		#time : DateAndTime [ '2017-12-12T08:02:22.243992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryExpression5,			#protocol : #testing-messages,			#sourceCode : 'testBinaryExpression5\r\tsuper testBinaryExpression5.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result receiver value equals: 1.\r\tself assert: self result selector equals: #==>.\r\tself assert: self result keywordsPositions equals: #(3) asIntegerArray.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3376' ],		#self : OmReference [ '3377' ],		#time : DateAndTime [ '2017-12-12T08:02:22.244992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryMethod1,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod1\r\tsuper testBinaryMethod1.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #+.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3377' ],		#self : OmReference [ '3378' ],		#time : DateAndTime [ '2017-12-12T08:02:22.245992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryMethod2,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod2\r\tsuper testBinaryMethod2.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #+.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3378' ],		#self : OmReference [ '3379' ],		#time : DateAndTime [ '2017-12-12T08:02:22.246992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryMethod3,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod3\r\tsuper testBinaryMethod3.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #+.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3379' ],		#self : OmReference [ '3380' ],		#time : DateAndTime [ '2017-12-12T08:02:22.249992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryMethod4,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod4\r\tsuper testBinaryMethod4.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #+.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3380' ],		#self : OmReference [ '3381' ],		#time : DateAndTime [ '2017-12-12T08:02:22.250992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBinaryMethod5,			#protocol : #testing-messages,			#sourceCode : 'testBinaryMethod5\r\tsuper testBinaryMethod5.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #--.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3381' ],		#self : OmReference [ '3382' ],		#time : DateAndTime [ '2017-12-12T08:02:22.251992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testBlock1\r\tsuper testBlock1.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 0.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3382' ],		#self : OmReference [ '3383' ],		#time : DateAndTime [ '2017-12-12T08:02:22.253992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testByteLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral1\r\tsuper testByteLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: (self result value isKindOf: ByteArray).\r\tself assert: self result value isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3383' ],		#self : OmReference [ '3384' ],		#time : DateAndTime [ '2017-12-12T08:02:22.254992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testByteLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral2\r\tsuper testByteLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: (self result value isKindOf: ByteArray).\r\tself assert: self result value size equals: 1.\r\tself assert: self result value first equals: 0',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3384' ],		#self : OmReference [ '3385' ],		#time : DateAndTime [ '2017-12-12T08:02:22.255992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testByteLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral3\r\tsuper testByteLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: (self result value isKindOf: ByteArray).\r\tself assert: self result value size equals: 1.\r\tself assert: self result value first equals: 255',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3385' ],		#self : OmReference [ '3386' ],		#time : DateAndTime [ '2017-12-12T08:02:22.256992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testByteLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral4\r\tsuper testByteLiteral4.\r\tself assert: self result isLiteralNode.\r\tself assert: (self result value isKindOf: ByteArray).\r\tself assert: self result value size equals: 2.\r\tself assert: self result value first equals: 1.\r\tself assert: self result value last equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3386' ],		#self : OmReference [ '3387' ],		#time : DateAndTime [ '2017-12-12T08:02:22.257992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testByteLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testByteLiteral5\r\tsuper testByteLiteral5.\r\tself assert: self result isLiteralNode.\r\tself assert: (self result value isKindOf: ByteArray).\r\tself assert: self result value size equals: 3.\r\tself assert: self result value first equals: 10.\r\tself assert: self result value second equals: 63.\r\tself assert: self result value last equals: 255',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3387' ],		#self : OmReference [ '3388' ],		#time : DateAndTime [ '2017-12-12T08:02:22.260992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testCascadeExpression1,			#protocol : #testing-messages,			#sourceCode : 'testCascadeExpression1\r\tsuper testCascadeExpression1.\r\tself assert: self result isCascade.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result messages size equals: 2.\r\tself assert: self result messages first receiver equals: self result receiver.\r\tself assert: self result messages first selector equals: #abs.\r\tself assert: self result messages first keywordsPositions equals: #(3) asIntegerArray.\r\tself assert: self result messages second receiver equals: self result receiver.\r\tself assert: self result messages second selector equals: #negated.\r\tself assert: self result messages second keywordsPositions equals: #(8) asIntegerArray',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3388' ],		#self : OmReference [ '3389' ],		#time : DateAndTime [ '2017-12-12T08:02:22.261992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testCascadeExpression2,			#protocol : #testing-messages,			#sourceCode : 'testCascadeExpression2\r\tsuper testCascadeExpression2.\r\tself assert: self result isCascade.\r\tself assert: self result receiver isMessage.\r\tself assert: self result receiver receiver isLiteralNode.\r\tself assert: self result receiver receiver value equals: 1.\r\tself assert: self result receiver selector equals: #abs.\r\tself assert: self result receiver keywordsPositions equals: #(3) asIntegerArray.\r\tself assert: self result messages size equals: 3.\r\tself assert: self result messages first receiver equals: self result receiver.\r\tself assert: self result messages first selector equals: #negated.\r\tself assert: self result messages first keywordsPositions equals: #(7) asIntegerArray.\r\tself assert: self result messages second receiver equals: self result receiver.\r\tself assert: self result messages second selector equals: #raisedTo:.\r\tself assert: self result messages second keywordsPositions equals: #(16) asIntegerArray.\r\tself assert: self result messages third receiver equals: self result receiver.\r\tself assert: self result messages third selector equals: #negated.\r\tself assert: self result messages third keywordsPositions equals: #(30) asIntegerArray',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3389' ],		#self : OmReference [ '3390' ],		#time : DateAndTime [ '2017-12-12T08:02:22.263992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testCascadeExpression3,			#protocol : #testing-messages,			#sourceCode : 'testCascadeExpression3\r\tsuper testCascadeExpression3.\r\tself assert: self result isCascade.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result receiver value equals: 1.\r\tself assert: self result messages size equals: 2.\r\tself assert: self result messages first receiver equals: self result receiver.\r\tself assert: self result messages first selector equals: #+.\r\tself assert: self result messages first keywordsPositions equals: #(3) asIntegerArray.\t\t\t\t\r\tself assert: self result messages first arguments size equals: 1.\r\tself assert: self result messages second receiver equals: self result receiver.\r\tself assert: self result messages second selector equals: #-.\r\tself assert: self result messages second keywordsPositions equals: #(8) asIntegerArray.\t\t\t\t\r\tself assert: self result messages second arguments size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3390' ],		#self : OmReference [ '3391' ],		#time : DateAndTime [ '2017-12-12T08:02:22.264992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testCharLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testCharLiteral1\r\tsuper testCharLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: $a',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3391' ],		#self : OmReference [ '3392' ],		#time : DateAndTime [ '2017-12-12T08:02:22.265992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testCharLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testCharLiteral2\r\tsuper testCharLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: Character space',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3392' ],		#self : OmReference [ '3393' ],		#time : DateAndTime [ '2017-12-12T08:02:22.266992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testCharLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testCharLiteral3\r\tsuper testCharLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: $$',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3393' ],		#self : OmReference [ '3394' ],		#time : DateAndTime [ '2017-12-12T08:02:22.267992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComment1,			#protocol : #testing,			#sourceCode : 'testComment1\r\tsuper testComment1.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isValue.\r\tself assert: self result selector equals: #+.\r\tself assert: self result arguments first isValue',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3394' ],		#self : OmReference [ '3395' ],		#time : DateAndTime [ '2017-12-12T08:02:22.268992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComment2,			#protocol : #testing,			#sourceCode : 'testComment2\r\tsuper testComment2.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isValue.\r\tself assert: self result selector equals: #+.\r\tself assert: self result arguments first isValue',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3395' ],		#self : OmReference [ '3396' ],		#time : DateAndTime [ '2017-12-12T08:02:22.270992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComment3,			#protocol : #testing,			#sourceCode : 'testComment3\r\tsuper testComment3.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isValue.\r\tself assert: self result selector equals: #+.\r\tself assert: self result arguments first isValue',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3396' ],		#self : OmReference [ '3397' ],		#time : DateAndTime [ '2017-12-12T08:02:22.272992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComment4,			#protocol : #testing,			#sourceCode : 'testComment4\r\tsuper testComment4.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isValue.\r\tself assert: self result selector equals: #+.\r\tself assert: self result arguments first isValue',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3397' ],		#self : OmReference [ '3398' ],		#time : DateAndTime [ '2017-12-12T08:02:22.274992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComment5,			#protocol : #testing,			#sourceCode : 'testComment5\r\tsuper testComment5.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isValue.\r\tself assert: self result selector equals: #+.\r\tself assert: self result arguments first isValue',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3398' ],		#self : OmReference [ '3399' ],		#time : DateAndTime [ '2017-12-12T08:02:22.275992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComplexBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testComplexBlock1\r\tsuper testComplexBlock1.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3399' ],		#self : OmReference [ '3400' ],		#time : DateAndTime [ '2017-12-12T08:02:22.276992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testComplexBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testComplexBlock2\r\tsuper testComplexBlock2.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3400' ],		#self : OmReference [ '3401' ],		#time : DateAndTime [ '2017-12-12T08:02:22.277992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordExpression1,			#protocol : #testing-messages,			#sourceCode : 'testKeywordExpression1\r\tsuper testKeywordExpression1.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result receiver value equals: 1.\r\tself assert: self result selector equals: #to:.\r\tself assert: self result keywordsPositions equals: #(3) asIntegerArray.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3401' ],		#self : OmReference [ '3402' ],		#time : DateAndTime [ '2017-12-12T08:02:22.278992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordExpression2,			#protocol : #testing-messages,			#sourceCode : 'testKeywordExpression2\r\tsuper testKeywordExpression2.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result selector equals: #to:by:.\r\tself assert: self result keywordsPositions equals: #(3 9) asIntegerArray.\r\tself assert: self result arguments size equals: 2.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2.\r\tself assert: self result arguments second isLiteralNode.\r\tself assert: self result arguments second value equals: 3',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3402' ],		#self : OmReference [ '3403' ],		#time : DateAndTime [ '2017-12-12T08:02:22.279992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordExpression3,			#protocol : #testing-messages,			#sourceCode : 'testKeywordExpression3\r\tsuper testKeywordExpression3.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result selector equals: #to:by:do:.\r\tself assert: self result keywordsPositions equals: #(3 9 15) asIntegerArray.\r\tself assert: self result arguments size equals: 3.\r\tself assert: self result arguments first isLiteralNode.\r\tself assert: self result arguments first value equals: 2.\r\tself assert: self result arguments second isLiteralNode.\r\tself assert: self result arguments second value equals: 3.\r\tself assert: self result arguments third isLiteralNode.\r\tself assert: self result arguments third value equals: 4',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3403' ],		#self : OmReference [ '3404' ],		#time : DateAndTime [ '2017-12-12T08:02:22.281992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordMethod1,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod1\r\tsuper testKeywordMethod1.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #to:.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\t\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3404' ],		#self : OmReference [ '3405' ],		#time : DateAndTime [ '2017-12-12T08:02:22.284992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordMethod2,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod2\r\tsuper testKeywordMethod2.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #to:do:.\r\tself assert: self result keywordsPositions equals: #(1 7) asIntegerArray.\t\t\r\tself assert: self result arguments size equals: 2.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result arguments second isVariable.\r\tself assert: self result arguments second name equals: \'b\'.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3405' ],		#self : OmReference [ '3406' ],		#time : DateAndTime [ '2017-12-12T08:02:22.285992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordMethod3,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod3\r\tsuper testKeywordMethod3.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #to:do:by:.\r\tself assert: self result keywordsPositions equals: #(1 7 13) asIntegerArray.\t\t\t\r\tself assert: self result arguments size equals: 3.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result arguments second isVariable.\r\tself assert: self result arguments second name equals: \'b\'.\r\tself assert: self result arguments third isVariable.\r\tself assert: self result arguments third name equals: \'c\'.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3406' ],		#self : OmReference [ '3407' ],		#time : DateAndTime [ '2017-12-12T08:02:22.287992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testKeywordMethod4,			#protocol : #testing-messages,			#sourceCode : 'testKeywordMethod4\r\tsuper testKeywordMethod4.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #to:do:by:.\r\tself assert: self result keywordsPositions equals: #(1 7 13) asIntegerArray.\t\t\t\r\tself assert: self result arguments size equals: 3.\r\tself assert: self result arguments first isVariable.\r\tself assert: self result arguments first name equals: \'a\'.\r\tself assert: self result arguments second isVariable.\r\tself assert: self result arguments second name equals: \'b\'.\r\tself assert: self result arguments third isVariable.\r\tself assert: self result arguments third name equals: \'c\'.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3407' ],		#self : OmReference [ '3408' ],		#time : DateAndTime [ '2017-12-12T08:02:22.288992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testMethod1,			#protocol : #testing,			#sourceCode : 'testMethod1\r\tsuper testMethod1.\r\tself assert: self result isMethod.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1.\r\tself assert: self result body statements first isReturn.\r\tself assert: self result body statements first value isMessage.\r\tself assert: self result body statements first value receiver isLiteralNode.\r\tself assert: self result body statements first value selector equals: #-.\r\tself assert: self result body statements first value arguments size equals: 1.\r\tself assert: self result body statements first value arguments first isVariable',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3408' ],		#self : OmReference [ '3409' ],		#time : DateAndTime [ '2017-12-12T08:02:22.289992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testMethod2,			#protocol : #testing,			#sourceCode : 'testMethod2\r\tsuper testMethod2.\r\tself assert: self result isMethod.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1.\r\tself assert: self result body statements first isReturn.\r\tself assert: self result body statements first value isMessage.\r\tself assert: self result body statements first value receiver isLiteralNode.\r\tself assert: self result body statements first value selector equals: #-.\r\tself assert: self result body statements first value arguments size equals: 1.\r\tself assert: self result body statements first value arguments first isVariable',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3409' ],		#self : OmReference [ '3410' ],		#time : DateAndTime [ '2017-12-12T08:02:22.290992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testMethod3,			#protocol : #testing,			#sourceCode : 'testMethod3\r\tsuper testMethod3.\r\tself assert: self result isMethod.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1.\r\tself assert: self result body statements first isReturn.\r\tself assert: self result body statements first value isMessage.\r\tself assert: self result body statements first value receiver isLiteralNode.\r\tself assert: self result body statements first value selector equals: #-.\r\tself assert: self result body statements first value arguments size equals: 1.\r\tself assert: self result body statements first value arguments first isVariable',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3410' ],		#self : OmReference [ '3411' ],		#time : DateAndTime [ '2017-12-12T08:02:22.291992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral1\r\tsuper testNumberLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 0.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3411' ],		#self : OmReference [ '3412' ],		#time : DateAndTime [ '2017-12-12T08:02:22.292992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral10,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral10\r\tsuper testNumberLiteral10.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 10.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3412' ],		#self : OmReference [ '3413' ],		#time : DateAndTime [ '2017-12-12T08:02:22.294992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral11,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral11\r\tsuper testNumberLiteral11.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 511.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3413' ],		#self : OmReference [ '3414' ],		#time : DateAndTime [ '2017-12-12T08:02:22.296992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral12,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral12\r\tsuper testNumberLiteral12.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 175.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3414' ],		#self : OmReference [ '3415' ],		#time : DateAndTime [ '2017-12-12T08:02:22.298992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral13,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral13\r\tsuper testNumberLiteral13.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 202.9921875.\r\tself assert: self result value isFloat',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3415' ],		#self : OmReference [ '3416' ],		#time : DateAndTime [ '2017-12-12T08:02:22.299992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral14,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral14\r\tsuper testNumberLiteral14.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value floor equals: -9.\r\tself assert: self result value isFloat',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3416' ],		#self : OmReference [ '3417' ],		#time : DateAndTime [ '2017-12-12T08:02:22.300992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral15,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral15\r\tsuper testNumberLiteral15.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 1 / 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3417' ],		#self : OmReference [ '3418' ],		#time : DateAndTime [ '2017-12-12T08:02:22.301992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral2\r\tsuper testNumberLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 0.1.\r\tself assert: self result value isFloat',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3418' ],		#self : OmReference [ '3419' ],		#time : DateAndTime [ '2017-12-12T08:02:22.302992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral3\r\tsuper testNumberLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 123.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3419' ],		#self : OmReference [ '3420' ],		#time : DateAndTime [ '2017-12-12T08:02:22.303992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral4\r\tsuper testNumberLiteral4.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 123.456.\r\tself assert: self result value isFloat',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3420' ],		#self : OmReference [ '3421' ],		#time : DateAndTime [ '2017-12-12T08:02:22.304992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral5\r\tsuper testNumberLiteral5.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: 0.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3421' ],		#self : OmReference [ '3422' ],		#time : DateAndTime [ '2017-12-12T08:02:22.307992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral6,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral6\r\tsuper testNumberLiteral6.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: -0.1.\r\tself assert: self result value isFloat',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3422' ],		#self : OmReference [ '3423' ],		#time : DateAndTime [ '2017-12-12T08:02:22.309992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral7,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral7\r\tsuper testNumberLiteral7.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: -123.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3423' ],		#self : OmReference [ '3424' ],		#time : DateAndTime [ '2017-12-12T08:02:22.310992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral8,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral8\r\tsuper testNumberLiteral8.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: -123.\r\tself assert: self result value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3424' ],		#self : OmReference [ '3425' ],		#time : DateAndTime [ '2017-12-12T08:02:22.311992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testNumberLiteral9,			#protocol : #testing-literals,			#sourceCode : 'testNumberLiteral9\r\tsuper testNumberLiteral9.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: -123.456.\r\tself assert: self result value isFloat',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3425' ],		#self : OmReference [ '3426' ],		#time : DateAndTime [ '2017-12-12T08:02:22.312992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma1,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma1\r\tsuper testPragma1.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3426' ],		#self : OmReference [ '3427' ],		#time : DateAndTime [ '2017-12-12T08:02:22.313992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma10,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma10\r\tsuper testPragma10.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: #bar>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3427' ],		#self : OmReference [ '3428' ],		#time : DateAndTime [ '2017-12-12T08:02:22.314992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma11,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma11\r\tsuper testPragma11.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: true>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3428' ],		#self : OmReference [ '3429' ],		#time : DateAndTime [ '2017-12-12T08:02:22.316992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma12,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma12\r\tsuper testPragma12.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: false>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3429' ],		#self : OmReference [ '3430' ],		#time : DateAndTime [ '2017-12-12T08:02:22.317992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma13,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma13\r\tsuper testPragma13.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: nil>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3430' ],		#self : OmReference [ '3431' ],		#time : DateAndTime [ '2017-12-12T08:02:22.320992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma14,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma14\r\tsuper testPragma14.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: #()>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3431' ],		#self : OmReference [ '3432' ],		#time : DateAndTime [ '2017-12-12T08:02:22.321992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma15,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma15\r\tsuper testPragma15.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: #()>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3432' ],		#self : OmReference [ '3433' ],		#time : DateAndTime [ '2017-12-12T08:02:22.322992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma16,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma16\r\tsuper testPragma16.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'< + 1>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(10) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3433' ],		#self : OmReference [ '3434' ],		#time : DateAndTime [ '2017-12-12T08:02:22.323992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma17,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma17\r\tsuper testPragma17.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: 1 bar: 2>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9 16) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3434' ],		#self : OmReference [ '3435' ],		#time : DateAndTime [ '2017-12-12T08:02:22.324992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma18,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma18\r\tsuper testPragma18.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: 1 bar: 2 baz: #b>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9 16 24) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3435' ],		#self : OmReference [ '3436' ],		#time : DateAndTime [ '2017-12-12T08:02:22.326992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma2,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma2\r\tsuper testPragma2.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo>\' \'<bar>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\r\tself assert: self result pragmas second keywordsPositions equals: #(15) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3436' ],		#self : OmReference [ '3437' ],		#time : DateAndTime [ '2017-12-12T08:02:22.327992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma3,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma3\r\tsuper testPragma3.\r\tself assert: self result pragmas format: #(\'<foo>\').\r\tself assert: self result pragmas first keywordsPositions equals: #(15) asIntegerArray.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3437' ],		#self : OmReference [ '3438' ],		#time : DateAndTime [ '2017-12-12T08:02:22.328992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma4,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma4\r\tsuper testPragma4.\r\tself assert: self result pragmas format: #(\'<foo>\').\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3438' ],		#self : OmReference [ '3439' ],		#time : DateAndTime [ '2017-12-12T08:02:22.331992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma5,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma5\r\tsuper testPragma5.\r\tself assert: self result pragmas format: #(\'<foo>\' \'<bar>\').\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\r\tself assert: self result pragmas second keywordsPositions equals: #(21) asIntegerArray.\t\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3439' ],		#self : OmReference [ '3440' ],		#time : DateAndTime [ '2017-12-12T08:02:22.332992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma6,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma6\r\tsuper testPragma6.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: 1>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3440' ],		#self : OmReference [ '3441' ],		#time : DateAndTime [ '2017-12-12T08:02:22.334992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma7,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma7\r\tsuper testPragma7.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: 1.2>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3441' ],		#self : OmReference [ '3442' ],		#time : DateAndTime [ '2017-12-12T08:02:22.335992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma8,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma8\r\tsuper testPragma8.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: \'\'bar\'\'>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3442' ],		#self : OmReference [ '3443' ],		#time : DateAndTime [ '2017-12-12T08:02:22.336992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testPragma9,			#protocol : #testing-pragmas,			#sourceCode : 'testPragma9\r\tsuper testPragma9.\r\tself \r\t\tassert: self result pragmas\r\t\tformat: #(\'<foo: #bar>\' ).\r\tself assert: self result pragmas first keywordsPositions equals: #(9) asIntegerArray.\t\t\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3443' ],		#self : OmReference [ '3444' ],		#time : DateAndTime [ '2017-12-12T08:02:22.337992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSequence1,			#protocol : #testing,			#sourceCode : 'testSequence1\r\tsuper testSequence1.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries size equals: 1.\r\tself assert: self result temporaries first isVariable.\r\tself assert: self result temporaries first name equals: \'a\'.\r\tself assert: self result statements size equals: 2.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements second isLiteralNode.\r\tself assert: self result statements second value equals: 2',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3444' ],		#self : OmReference [ '3445' ],		#time : DateAndTime [ '2017-12-12T08:02:22.338992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSimpleBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testSimpleBlock1\r\tsuper testSimpleBlock1.\r\tself assert: self result isBlock.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3445' ],		#self : OmReference [ '3446' ],		#time : DateAndTime [ '2017-12-12T08:02:22.339992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSimpleBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testSimpleBlock2\r\tsuper testSimpleBlock2.\r\tself assert: self result isBlock.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3446' ],		#self : OmReference [ '3447' ],		#time : DateAndTime [ '2017-12-12T08:02:22.340992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSimpleBlock3,			#protocol : #testing-blocks,			#sourceCode : 'testSimpleBlock3\r\tsuper testSimpleBlock3.\r\tself assert: self result isBlock.\r\tself assert: self result arguments size equals: 1.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3447' ],		#self : OmReference [ '3448' ],		#time : DateAndTime [ '2017-12-12T08:02:22.344992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSpecialLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testSpecialLiteral1\r\tsuper testSpecialLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: true',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3448' ],		#self : OmReference [ '3449' ],		#time : DateAndTime [ '2017-12-12T08:02:22.345992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSpecialLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testSpecialLiteral2\r\tsuper testSpecialLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: false',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3449' ],		#self : OmReference [ '3450' ],		#time : DateAndTime [ '2017-12-12T08:02:22.346992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSpecialLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testSpecialLiteral3\r\tsuper testSpecialLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: nil',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3450' ],		#self : OmReference [ '3451' ],		#time : DateAndTime [ '2017-12-12T08:02:22.348992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatementBlock1,			#protocol : #testing-blocks,			#sourceCode : 'testStatementBlock1\r\tsuper testStatementBlock1.\r\tself assert: self result isBlock.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3451' ],		#self : OmReference [ '3452' ],		#time : DateAndTime [ '2017-12-12T08:02:22.349992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatementBlock2,			#protocol : #testing-blocks,			#sourceCode : 'testStatementBlock2\r\tsuper testStatementBlock2.\r\tself assert: self result isBlock.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3452' ],		#self : OmReference [ '3453' ],		#time : DateAndTime [ '2017-12-12T08:02:22.350992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatementBlock3,			#protocol : #testing-blocks,			#sourceCode : 'testStatementBlock3\r\tsuper testStatementBlock3.\r\tself assert: self result isBlock.\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries size equals: 2.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3453' ],		#self : OmReference [ '3454' ],		#time : DateAndTime [ '2017-12-12T08:02:22.351992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements1,			#protocol : #testing,			#sourceCode : 'testStatements1\r\tsuper testStatements1.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 1.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3454' ],		#self : OmReference [ '3455' ],		#time : DateAndTime [ '2017-12-12T08:02:22.352992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements2,			#protocol : #testing,			#sourceCode : 'testStatements2\r\tsuper testStatements2.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 2.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger.\r\tself assert: self result statements second isLiteralNode.\r\tself assert: self result statements second value equals: 2.\r\tself assert: self result statements second value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3455' ],		#self : OmReference [ '3456' ],		#time : DateAndTime [ '2017-12-12T08:02:22.354992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements3,			#protocol : #testing,			#sourceCode : 'testStatements3\r\tsuper testStatements3.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 3.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger.\r\tself assert: self result statements second isLiteralNode.\r\tself assert: self result statements second value equals: 2.\r\tself assert: self result statements second value isInteger.\r\tself assert: self result statements third isLiteralNode.\r\tself assert: self result statements third value equals: 3.\r\tself assert: self result statements third value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3456' ],		#self : OmReference [ '3457' ],		#time : DateAndTime [ '2017-12-12T08:02:22.355992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements4,			#protocol : #testing,			#sourceCode : 'testStatements4\r\tsuper testStatements4.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 3.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger.\r\tself assert: self result statements second isLiteralNode.\r\tself assert: self result statements second value equals: 2.\r\tself assert: self result statements second value isInteger.\r\tself assert: self result statements third isLiteralNode.\r\tself assert: self result statements third value equals: 3.\r\tself assert: self result statements third value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3457' ],		#self : OmReference [ '3458' ],		#time : DateAndTime [ '2017-12-12T08:02:22.356992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements5,			#protocol : #testing,			#sourceCode : 'testStatements5\r\tsuper testStatements5.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 2.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger.\r\tself assert: self result statements second isLiteralNode.\r\tself assert: self result statements second value equals: 2.\r\tself assert: self result statements second value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3458' ],		#self : OmReference [ '3459' ],		#time : DateAndTime [ '2017-12-12T08:02:22.357992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements6,			#protocol : #testing,			#sourceCode : 'testStatements6\r\tsuper testStatements6.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 2.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger.\r\tself assert: self result statements second isLiteralNode.\r\tself assert: self result statements second value equals: 2.\r\tself assert: self result statements second value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3459' ],		#self : OmReference [ '3460' ],		#time : DateAndTime [ '2017-12-12T08:02:22.358992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements7,			#protocol : #testing,			#sourceCode : 'testStatements7\r\tsuper testStatements7.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 1.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3460' ],		#self : OmReference [ '3461' ],		#time : DateAndTime [ '2017-12-12T08:02:22.359992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements8,			#protocol : #testing,			#sourceCode : 'testStatements8\r\tsuper testStatements8.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries isEmpty.\r\tself assert: self result statements size equals: 1.\r\tself assert: self result statements first isLiteralNode.\r\tself assert: self result statements first value equals: 1.\r\tself assert: self result statements first value isInteger',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3461' ],		#self : OmReference [ '3462' ],		#time : DateAndTime [ '2017-12-12T08:02:22.361992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStatements9,			#protocol : #testing,			#sourceCode : 'testStatements9\r\tsuper testStatements9.\r\tself assert: self result isEmpty.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3462' ],		#self : OmReference [ '3463' ],		#time : DateAndTime [ '2017-12-12T08:02:22.362992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStringLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testStringLiteral1\r\tsuper testStringLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: \'\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3463' ],		#self : OmReference [ '3464' ],		#time : DateAndTime [ '2017-12-12T08:02:22.363992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStringLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testStringLiteral2\r\tsuper testStringLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: \'ab\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3464' ],		#self : OmReference [ '3465' ],		#time : DateAndTime [ '2017-12-12T08:02:22.364992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testStringLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testStringLiteral3\r\tsuper testStringLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: \'ab\'\'cd\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3465' ],		#self : OmReference [ '3466' ],		#time : DateAndTime [ '2017-12-12T08:02:22.365992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral1,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral1\r\tsuper testSymbolLiteral1.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #foo.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3466' ],		#self : OmReference [ '3467' ],		#time : DateAndTime [ '2017-12-12T08:02:22.366992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral2,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral2\r\tsuper testSymbolLiteral2.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #+.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3467' ],		#self : OmReference [ '3468' ],		#time : DateAndTime [ '2017-12-12T08:02:22.368992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral3,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral3\r\tsuper testSymbolLiteral3.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #key:.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3468' ],		#self : OmReference [ '3469' ],		#time : DateAndTime [ '2017-12-12T08:02:22.369992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral4,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral4\r\tsuper testSymbolLiteral4.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #key:value:.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3469' ],		#self : OmReference [ '3470' ],		#time : DateAndTime [ '2017-12-12T08:02:22.370992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral5,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral5\r\tsuper testSymbolLiteral5.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #\'testing-result\'.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3470' ],		#self : OmReference [ '3471' ],		#time : DateAndTime [ '2017-12-12T08:02:22.371992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral6,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral6\r\tsuper testSymbolLiteral6.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #\'__gen__binding\'.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3471' ],		#self : OmReference [ '3472' ],		#time : DateAndTime [ '2017-12-12T08:02:22.372992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral7,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral7\r\tsuper testSymbolLiteral7.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #fucker.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3472' ],		#self : OmReference [ '3473' ],		#time : DateAndTime [ '2017-12-12T08:02:22.373992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral8,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral8\r\tsuper testSymbolLiteral8.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #fucker.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3473' ],		#self : OmReference [ '3474' ],		#time : DateAndTime [ '2017-12-12T08:02:22.374992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testSymbolLiteral9,			#protocol : #testing-literals,			#sourceCode : 'testSymbolLiteral9\r\tsuper testSymbolLiteral9.\r\tself assert: self result isLiteralNode.\r\tself assert: self result value equals: #fucker.\r\tself assert: self result value isSymbol',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3474' ],		#self : OmReference [ '3475' ],		#time : DateAndTime [ '2017-12-12T08:02:22.376992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testTemporaries1,			#protocol : #testing,			#sourceCode : 'testTemporaries1\r\tsuper testTemporaries1.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries size equals: 1.\r\tself assert: self result temporaries first isVariable.\r\tself assert: self result temporaries first name equals: \'a\'.\r\tself assert: self result statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3475' ],		#self : OmReference [ '3476' ],		#time : DateAndTime [ '2017-12-12T08:02:22.377992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testTemporaries2,			#protocol : #testing,			#sourceCode : 'testTemporaries2\r\tsuper testTemporaries2.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries size equals: 2.\r\tself assert: self result temporaries first isVariable.\r\tself assert: self result temporaries first name equals: \'a\'.\r\tself assert: self result temporaries second isVariable.\r\tself assert: self result temporaries second name equals: \'b\'.\r\tself assert: self result statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3476' ],		#self : OmReference [ '3477' ],		#time : DateAndTime [ '2017-12-12T08:02:22.378992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testTemporaries3,			#protocol : #testing,			#sourceCode : 'testTemporaries3\r\tsuper testTemporaries3.\r\tself assert: self result isSequence.\r\tself assert: self result temporaries size equals: 3.\r\tself assert: self result temporaries first isVariable.\r\tself assert: self result temporaries first name equals: \'a\'.\r\tself assert: self result temporaries second isVariable.\r\tself assert: self result temporaries second name equals: \'b\'.\r\tself assert: self result temporaries third isVariable.\r\tself assert: self result temporaries third name equals: \'c\'.\r\tself assert: self result statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3477' ],		#self : OmReference [ '3478' ],		#time : DateAndTime [ '2017-12-12T08:02:22.379992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryExpression1,			#protocol : #testing-messages,			#sourceCode : 'testUnaryExpression1\r\tsuper testUnaryExpression1.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isLiteralNode.\r\tself assert: self result selector equals: #abs.\r\tself assert: self result keywordsPositions equals: #(3) asIntegerArray.\t\t\r\tself assert: self result arguments isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3478' ],		#self : OmReference [ '3479' ],		#time : DateAndTime [ '2017-12-12T08:02:22.380992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryExpression2,			#protocol : #testing-messages,			#sourceCode : 'testUnaryExpression2\r\tsuper testUnaryExpression2.\r\tself assert: self result isMessage.\r\tself assert: self result receiver isMessage.\r\tself assert: self result receiver receiver isLiteralNode.\r\tself assert: self result receiver receiver value equals: 1.\r\tself assert: self result receiver selector equals: #abs.\r\tself assert: self result receiver keywordsPositions equals: #(3) asIntegerArray.\t\t\r\tself assert: self result receiver arguments isEmpty.\r\tself assert: self result selector equals: #negated.\r\tself assert: self result keywordsPositions equals: #(7) asIntegerArray.\t\t\r\tself assert: self result arguments isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3479' ],		#self : OmReference [ '3480' ],		#time : DateAndTime [ '2017-12-12T08:02:22.382992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryMethod1,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod1\r\tsuper testUnaryMethod1.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #abs.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\t\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3480' ],		#self : OmReference [ '3481' ],		#time : DateAndTime [ '2017-12-12T08:02:22.383992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryMethod2,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod2\r\tsuper testUnaryMethod2.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #abs.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\t\t\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3481' ],		#self : OmReference [ '3482' ],		#time : DateAndTime [ '2017-12-12T08:02:22.384992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryMethod3,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod3\r\tsuper testUnaryMethod3.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #abs.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\t\t\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries isEmpty.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3482' ],		#self : OmReference [ '3483' ],		#time : DateAndTime [ '2017-12-12T08:02:22.385992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryMethod4,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod4\r\tsuper testUnaryMethod4.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #abs.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\t\t\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements size equals: 1',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3483' ],		#self : OmReference [ '3484' ],		#time : DateAndTime [ '2017-12-12T08:02:22.386992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testUnaryMethod5,			#protocol : #testing-messages,			#sourceCode : 'testUnaryMethod5\r\tsuper testUnaryMethod5.\r\tself assert: self result isMethod.\r\tself assert: self result selector equals: #abs.\r\tself assert: self result keywordsPositions equals: #(1) asIntegerArray.\t\t\r\tself assert: self result arguments isEmpty.\r\tself assert: self result body temporaries size equals: 1.\r\tself assert: self result body statements isEmpty',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3484' ],		#self : OmReference [ '3485' ],		#time : DateAndTime [ '2017-12-12T08:02:22.387992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable1,			#protocol : #testing,			#sourceCode : 'testVariable1\r\tsuper testVariable1.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'trueBinding\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3485' ],		#self : OmReference [ '3486' ],		#time : DateAndTime [ '2017-12-12T08:02:22.389992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable2,			#protocol : #testing,			#sourceCode : 'testVariable2\r\tsuper testVariable2.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'falseBinding\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3486' ],		#self : OmReference [ '3487' ],		#time : DateAndTime [ '2017-12-12T08:02:22.390992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable3,			#protocol : #testing,			#sourceCode : 'testVariable3\r\tsuper testVariable3.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'nilly\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3487' ],		#self : OmReference [ '3488' ],		#time : DateAndTime [ '2017-12-12T08:02:22.391992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable4,			#protocol : #testing,			#sourceCode : 'testVariable4\r\tsuper testVariable4.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'selfish\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3488' ],		#self : OmReference [ '3489' ],		#time : DateAndTime [ '2017-12-12T08:02:22.392992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable5,			#protocol : #testing,			#sourceCode : 'testVariable5\r\tsuper testVariable5.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'supernanny\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3489' ],		#self : OmReference [ '3490' ],		#time : DateAndTime [ '2017-12-12T08:02:22.393992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable6,			#protocol : #testing,			#sourceCode : 'testVariable6\r\tsuper testVariable6.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'super_nanny\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3490' ],		#self : OmReference [ '3491' ],		#time : DateAndTime [ '2017-12-12T08:02:22.395992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #testVariable7,			#protocol : #testing,			#sourceCode : 'testVariable7\r\tsuper testVariable7.\r\tself assert: self result isVariable.\r\tself assert: self result name equals: \'__gen_var_123__\'',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3491' ],		#self : OmReference [ '3492' ],		#time : DateAndTime [ '2017-12-12T08:02:22.396992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2FirstSetVisitorTest,				#isMetaSide : false			},			#name : #testVisitSmalltalkWhitespace,			#protocol : #'*PetitParser2-Smalltalk-Tests',			#sourceCode : 'testVisitSmalltalkWhitespace\r\tparser := PP2SmalltalkWhitespaceNode new.\r\t\r\tfirstSet := self firstSet: parser.\r\r\tself assert: firstSet size equals: 2.\r\tself assert: (firstSet anySatisfy: [:e | (e parseContext: String space) isPetit2Success ]).\r\tself assert: (firstSet anySatisfy: [:e | (e parseContext: String tab) isPetit2Success ]).\r\tself assert: (firstSet anySatisfy: [:e | (e parseContext: String crlf) isPetit2Success ]).\r\t\r\tself assert: (firstSet anySatisfy: [:e | (e parseContext: $" asString) isPetit2Success ]).',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3492' ],		#self : OmReference [ '3493' ],		#time : DateAndTime [ '2017-12-12T08:02:22.398992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2VerificationTests,				#isMetaSide : false			},			#name : #testPP2SmalltalkParserOptimizations,			#protocol : #'*PetitParser2-Smalltalk-Tests-Verification',			#sourceCode : 'testPP2SmalltalkParserOptimizations\r\t| validator |\r\tvalidator := PP2SmalltalkParserOptimizationsValidator new.\r\tvalidator validateBlocking.\r\t\r\tself assert: validator report precision equals: 1.\r\tself assert: validator report recall equals: 1.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3493' ],		#self : OmReference [ '3494' ],		#time : DateAndTime [ '2017-12-12T08:02:22.399992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestPetitParserSmalltalkTests class',				#isMetaSide : true			},			#name : #ruleRBMethodHasNoTimeStampRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBMethodHasNoTimeStampRuleV1FalsePositive\r\t^ #(#(#(#RGClassDefinition #(#PP2SmalltalkParserTests_Optimized)) #\'2016-09-06T15:00:54.597054+02:00\') )',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3494' ],		#self : OmReference [ '3495' ],		#time : DateAndTime [ '2017-12-12T08:02:22.400992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #'assert:allSatisfy:',			#protocol : #support,			#sourceCode : 'assert: collection allSatisfy: aBlock\r\tself assert: (collection allSatisfy: aBlock)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3495' ],		#self : OmReference [ '3496' ],		#time : DateAndTime [ '2017-12-12T08:02:22.401992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #'assert:anySatisfy:',			#protocol : #support,			#sourceCode : 'assert: collection anySatisfy: aBlock\r\tself assert: (collection anySatisfy: aBlock)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3496' ],		#self : OmReference [ '3497' ],		#time : DateAndTime [ '2017-12-12T08:02:22.402992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #support,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3497' ],		#self : OmReference [ '3498' ],		#time : DateAndTime [ '2017-12-12T08:02:22.403992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testCaches,			#protocol : #tests,			#sourceCode : 'testCaches\r\r\t| cached |\r\tparser := PP2SmalltalkGrammar new optimize.\r\tcached := parser allNodes select: [ :child |\r\t\tchild strategies anySatisfy: [ :s | s isKindOf:PP2Cache ]\r\t].\r\r\tself assert: cached size equals: 3.\r\r\tself assert: cached anySatisfy: [:n | n name = #identifierToken].\r\tself assert: cached anySatisfy: [:n | n name = #variable].\r\t\t\r\tself flag: \'JK: I would like to remove this case\'.\r\tself assert: cached anySatisfy: [:n | n name = #identifier].',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3498' ],		#self : OmReference [ '3499' ],		#time : DateAndTime [ '2017-12-12T08:02:22.404992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testFirstProductionSet,			#protocol : #tests,			#sourceCode : 'testFirstProductionSet\r\r\tparser := PP2SmalltalkGrammar new optimize.\r\tparser allNodesDo: [ :child |\r\t\tself assert: (child firstProductionSet allSatisfy: [ :e | e isProduction  ])\r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3499' ],		#self : OmReference [ '3500' ],		#time : DateAndTime [ '2017-12-12T08:02:22.406992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testIdentifierToken,			#protocol : #tests,			#sourceCode : 'testIdentifierToken\r\t| sequence |\r\tparser := PP2SmalltalkGrammar new identifierToken optimize.\r\t\r\tsequence := parser child child child.\r\tself assert: (sequence strategies anySatisfy: [ :s | s isKindOf: PP2SequenceOfTwoRecognizer ]).\r\tself assert: sequence firstChild strategy isKindOf: PP2PredicateObjectRecognizer.\r\tself assert: sequence secondChild strategy isKindOf: PP2StarPredicateObjectRecognizer.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3500' ],		#self : OmReference [ '3501' ],		#time : DateAndTime [ '2017-12-12T08:02:22.407992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testKeywordMessageCache,			#protocol : #tests,			#sourceCode : 'testKeywordMessageCache\r\t| message identifiers strategy |\r\tparser := PP2SmalltalkGrammar new optimize.\r\tmessage := parser allNodes detect: [ :node | node name = \'message\' ].\r\t\r\tidentifiers := message firstProductionSet select: [ :node | node name = \'identifier\' ].\r\tstrategy := identifiers anyOne strategy.\r\t\r\tidentifiers do: [ :identifier |\r\t\tself assert: identifier strategies anySatisfy: [ :s | s isKindOf: PP2Cache].\r\t].\r\tself assert: identifiers allSatisfy: [ :id | id strategy == strategy ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3501' ],		#self : OmReference [ '3502' ],		#time : DateAndTime [ '2017-12-12T08:02:22.408992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testLiteral,			#protocol : #tests,			#sourceCode : 'testLiteral\r\t| literal |\r\tparser := PP2SmalltalkGrammar new optimize.\r\tliteral := parser allNodes detect: [ :node | node name = \'literal\' ].\r\t\r\tliteral child children do: [ :c |\r\t\tself assert: c strategy isKindOf: PP2ParsingGuard \r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3502' ],		#self : OmReference [ '3503' ],		#time : DateAndTime [ '2017-12-12T08:02:22.409992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testNumberToken,			#protocol : #tests,			#sourceCode : 'testNumberToken\r\t| sequences |\r\tparser := PP2SmalltalkGrammar new numberToken optimize.\r\t\r\tsequences := parser allNodes select: [ :e | (e isKindOf: PP2SequenceNode) and: [ e children size = 2 ]  ].\r\tself assert: sequences allSatisfy: [ :e | e strategies anySatisfy: [:s | s isKindOf: PP2SequenceOfTwoRecognizer ] ].',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3503' ],		#self : OmReference [ '3504' ],		#time : DateAndTime [ '2017-12-12T08:02:22.410992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testPeriodToken,			#protocol : #tests,			#sourceCode : 'testPeriodToken\r\t| periodToken |\r\tparser := PP2SmalltalkGrammar new optimize.\r\tperiodToken := parser productionAt: #periodToken.\r\t\r\tself assert: periodToken child strategy isKindOf: PP2TrimmingLiteralObjectToken.',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3504' ],		#self : OmReference [ '3505' ],		#time : DateAndTime [ '2017-12-12T08:02:22.412992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testPeriodTokenCache,			#protocol : #tests,			#sourceCode : 'testPeriodTokenCache\r\t| identifierToken |\r\tparser := PP2SmalltalkParser new optimize.\r\tidentifierToken := parser productionAt: #periodToken.\r\tself assert: (identifierToken strategies noneSatisfy: [ :s | s isKindOf: PP2Cache ])',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3505' ],		#self : OmReference [ '3506' ],		#time : DateAndTime [ '2017-12-12T08:02:22.413992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testTrimmings,			#protocol : #tests,			#sourceCode : 'testTrimmings\r\t| trimmings |\r\tparser := PP2SmalltalkGrammar new optimize.\r\ttrimmings := parser allNodes select: [ :node | node isTrimming ].\r\t\r\ttrimmings do: [ :c |\r\t\tself assert: c trimmer strategy isKindOf: PP2TrimmingCache \r\t]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3506' ],		#self : OmReference [ '3507' ],		#time : DateAndTime [ '2017-12-12T08:02:22.414992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarOptimizationsTest,				#isMetaSide : false			},			#name : #testVariable,			#protocol : #tests,			#sourceCode : 'testVariable\r\t| variable |\r\tparser := PP2SmalltalkGrammar new optimize.\r\t\r\tvariable := parser allNodes detect: [:e | e name = \'variable\' ].\r\tself assert: (variable strategies anySatisfy: [ :s | s isKindOf: PP2Cache ])',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3507' ],		#self : OmReference [ '3508' ],		#time : DateAndTime [ '2017-12-12T08:02:22.415992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserOptimizationsTest,				#isMetaSide : false			},			#name : #testIdentifierTokenCache,			#protocol : #'as yet unclassified',			#sourceCode : 'testIdentifierTokenCache\r\t| identifierToken |\r\tparser := PP2SmalltalkParser new optimize.\r\tidentifierToken := parser productionAt: #identifierToken.\r\tself assert: (identifierToken strategies noneSatisfy: [ :s | s isKindOf: PP2Cache ])',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3508' ],		#self : OmReference [ '3509' ],		#time : DateAndTime [ '2017-12-12T08:02:22.417992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2IsNullableVisitorTest,				#isMetaSide : false			},			#name : #testSmalltalkWhitespace,			#protocol : #'*PetitParser2-Smalltalk-Tests',			#sourceCode : 'testSmalltalkWhitespace\r\tself assertIsNullable: PP2SmalltalkWhitespaceNode new ',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3509' ],		#self : OmReference [ '3510' ],		#time : DateAndTime [ '2017-12-12T08:02:22.417992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PP2SmalltalkGrammarTests class',				#isMetaSide : true			},			#name : #shouldInheritSelectors,			#protocol : #accessing,			#sourceCode : 'shouldInheritSelectors\r\t^ true',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3510' ],		#self : OmReference [ '3511' ],		#time : DateAndTime [ '2017-12-12T08:02:22.419992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #'parse:withParser:withContext:',			#protocol : #parsing,			#sourceCode : 'parse: aStream withParser: aParser withContext: aContext\r\t^ aParser parse: aStream withContext: aContext',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3511' ],		#self : OmReference [ '3512' ],		#time : DateAndTime [ '2017-12-12T08:02:22.420992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarTests,				#isMetaSide : false			},			#name : #testCompleteness,			#protocol : #testing,			#sourceCode : 'testCompleteness\r\t"This test asserts that all subclasses override all test methods."\r\t\r\t| subclasses |\r\tsubclasses := self class allSubclasses.\r\t\r\tsubclasses := (subclasses reject: [:subclass | subclass name endsWith: \'_Optimized\' ]).\r\tsubclasses := (subclasses reject: [:subclass | subclass name endsWith: \'_Direct\' ]).\r\tsubclasses := (subclasses reject: [:subclass | subclass name endsWith: \'_InMemoryCtx\' ]).\r\tsubclasses do: [ :subclass |\r\t\tself class testSelectors do: [ :selector |\r\t\t\tself \r\t\t\t\tassert: (selector = #testCompleteness or: [ subclass selectors includes: selector ])\r\t\t\t\tdescription: subclass printString , \' does not test \' , selector printString ] ]',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3512' ],		#self : OmReference [ '3513' ],		#time : DateAndTime [ '2017-12-12T08:02:22.421992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserTests,				#isMetaSide : false			},			#name : #result,			#protocol : #accessing,			#sourceCode : 'result\r\t^ result',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3513' ],		#self : OmReference [ '3514' ],		#time : DateAndTime [ '2017-12-12T08:02:22.422992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarTests_InMemoryCtx,				#isMetaSide : false			},			#name : #context,			#protocol : #context,			#sourceCode : 'context\r\t^ PP2InMemoryContext new',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3514' ],		#self : OmReference [ '3515' ],		#time : DateAndTime [ '2017-12-12T08:02:22.424992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarTests_Optimized,				#isMetaSide : false			},			#name : #context,			#protocol : #context,			#sourceCode : 'context\r\t^ PP2InMemoryContext new',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3515' ],		#self : OmReference [ '3516' ],		#time : DateAndTime [ '2017-12-12T08:02:22.425992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarTests_Optimized,				#isMetaSide : false			},			#name : #parserInstance,			#protocol : #parsing,			#sourceCode : 'parserInstance\r\t^ super parserInstance optimize;\r\t\tresetCaches;\r\t\tyourself',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3516' ],		#self : OmReference [ '3517' ],		#time : DateAndTime [ '2017-12-12T08:02:22.426992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkGrammarTests_Optimized,				#isMetaSide : false			},			#name : #testOptimized,			#protocol : #parsing,			#sourceCode : 'testOptimized\r\tself assert: self parserInstance isOptimized',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3517' ],		#self : OmReference [ '3518' ],		#time : DateAndTime [ '2017-12-12T08:02:22.428992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserTests_Optimized,				#isMetaSide : false			},			#name : #context,			#protocol : #context,			#sourceCode : 'context\r\t^ PP2InMemoryContext new',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3518' ],		#self : OmReference [ '3519' ],		#time : DateAndTime [ '2017-12-12T08:02:22.429992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserTests_Optimized,				#isMetaSide : false			},			#name : #result,			#protocol : #accessing,			#sourceCode : 'result\r\t^ result',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3519' ],		#self : OmReference [ '3520' ],		#time : DateAndTime [ '2017-12-12T08:02:22.430992+08:00' ],		#trigger : OmReference [ '3184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2SmalltalkParserTests_Optimized,				#isMetaSide : false			},			#name : #testOptimized,			#protocol : #parsing,			#sourceCode : 'testOptimized\r\tself assert: self parserInstance isOptimized',			#stamp : ' 9/3/2017 16:25:18',			#package : #PetitParser2-Smalltalk-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:02:22.578992+08:00' ],		#prior : OmReference [ '3520' ],		#self : OmReference [ '3521' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Html-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3521' ],		#self : OmReference [ '3522' ],		#time : DateAndTime [ '2017-12-12T08:02:22.646992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Html-AST,		#affectedPackageName : #PetitParser2-Html	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3522' ],		#self : OmReference [ '3523' ],		#time : DateAndTime [ '2017-12-12T08:02:22.649992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PP2WebElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-AST\''			},			#name : #PP2WebElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WebElement class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WebElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WebElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-AST,			#package : #PetitParser2-Html,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3523' ],		#self : OmReference [ '3524' ],		#time : DateAndTime [ '2017-12-12T08:02:22.656992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WebElement',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WebElement subclass: #PP2HtmlElement\r\tinstanceVariableNames: \'name children\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-AST\''			},			#name : #PP2HtmlElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlElement,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlElement,						#isMetaSide : false					},					#name : #children,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2HtmlElement class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2HtmlElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2HtmlElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-AST,			#package : #PetitParser2-Html,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3524' ],		#self : OmReference [ '3525' ],		#time : DateAndTime [ '2017-12-12T08:02:22.661992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WebElement',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WebElement subclass: #PP2HtmlText\r\tinstanceVariableNames: \'text\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-AST\''			},			#name : #PP2HtmlText,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2HtmlText,						#isMetaSide : false					},					#name : #text,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2HtmlText class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2HtmlText class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2HtmlText,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-AST,			#package : #PetitParser2-Html,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3525' ],		#self : OmReference [ '3526' ],		#time : DateAndTime [ '2017-12-12T08:02:22.667992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WebElement',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WebElement subclass: #PP2JavascriptElement\r\tinstanceVariableNames: \'code\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-AST\''			},			#name : #PP2JavascriptElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2JavascriptElement,						#isMetaSide : false					},					#name : #code,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2JavascriptElement class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2JavascriptElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2JavascriptElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-AST,			#package : #PetitParser2-Html,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3526' ],		#self : OmReference [ '3527' ],		#time : DateAndTime [ '2017-12-12T08:02:22.670992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Html-Core,		#affectedPackageName : #PetitParser2-Html	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3527' ],		#self : OmReference [ '3528' ],		#time : DateAndTime [ '2017-12-12T08:02:22.672992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #PP2WebPageGrammar\r\tinstanceVariableNames: \'javascript jsDoubleQuoteString jsContent jsWater any whitespaces elementName element elOpen elClose jsOpen jsClose elContent jsType jsTypeString rawText document elWater identifier jsString jsSingleQuoteString\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-Core\''			},			#name : #PP2WebPageGrammar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #javascript,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsDoubleQuoteString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsContent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsWater,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #any,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #whitespaces,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #elementName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #element,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #elOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #elClose,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsClose,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #elContent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsType,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsTypeString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #rawText,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #document,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #elWater,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #identifier,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammar,						#isMetaSide : false					},					#name : #jsSingleQuoteString,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WebPageGrammar class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WebPageGrammar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WebPageGrammar,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-Core,			#package : #PetitParser2-Html,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3528' ],		#self : OmReference [ '3529' ],		#time : DateAndTime [ '2017-12-12T08:02:22.676992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WebPageGrammar',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WebPageGrammar subclass: #PP2WebPageParser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-Core\''			},			#name : #PP2WebPageParser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WebPageParser class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WebPageParser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WebPageParser,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-Core,			#package : #PetitParser2-Html,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3529' ],		#self : OmReference [ '3530' ],		#time : DateAndTime [ '2017-12-12T08:02:25.802992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #htmlAllUrl,			#protocol : #'*PetitParser2-Html',			#sourceCode : 'htmlAllUrl\r\t^ \'html-src.zip\'',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3530' ],		#self : OmReference [ '3531' ],		#time : DateAndTime [ '2017-12-12T08:02:25.804992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #htmlSample,			#protocol : #'*PetitParser2-Html',			#sourceCode : 'htmlSample\r\t^ \'<!DOCTYPE html>\r<!-- saved from url=(0026)https://www.wikipedia.org/ -->\r<html lang="mul" dir="ltr" class="js-enabled">\r<head>\r\t<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\r\t<title>Wikipedia</title>\r\t<meta name="description" content="Wikipedia is a free online encyclopedia, created and edited by volunteers around the world and hosted by the Wikimedia Foundation.">\r\t<!--[if gt IE 7]-->\r\t<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)no-js(\\s|$)/, "$1js-enabled$2" );</script>\r\t<!--[endif]-->\r</head>\r<body id="www-wikipedia-org">\r\t<h1 class="central-textlogo" style="font-variant: small-caps" alt="WikipediA" title="Wikipedia">\r\t\t<img src="./Wikipedia_files/Wikipedia_wordmark.png" srcset="portal/wikipedia.org/assets/img/Wikipedia_wordmark@1.5x.png 1.5x" width="174" height="30" alt="WikipediA" title="Wikipedia">\r\t\t<strong id="js-localized-slogan" class="localized-slogan" style="visibility: visible;">The Free Encyclopedia</strong>\r\t</h1>\r\t<div id="mydiv">\r\t\tHi there!\r\t</div>\r\t<script>alert("All scripts ends with: \'\'</script>\'\'...")</script>\r\t<!-- <p>obsolete conentent</p> -->\r</body>\r</html>\'',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3531' ],		#self : OmReference [ '3532' ],		#time : DateAndTime [ '2017-12-12T08:02:25.805992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2Sources,				#isMetaSide : false			},			#name : #htmlSourcesAll,			#protocol : #'*PetitParser2-Html',			#sourceCode : 'htmlSourcesAll\r\t^ self cachedValue: #htmlSourcesAll ifAbsentPut: [ \r\t\t(self downloadUI: self htmlAllUrl) allFiles collect: [ :f | f contents ]\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3532' ],		#self : OmReference [ '3533' ],		#time : DateAndTime [ '2017-12-12T08:02:25.806992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ children',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3533' ],		#self : OmReference [ '3534' ],		#time : DateAndTime [ '2017-12-12T08:02:25.808992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #'children:',			#protocol : #accessing,			#sourceCode : 'children: anObject\r\tchildren := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3534' ],		#self : OmReference [ '3535' ],		#time : DateAndTime [ '2017-12-12T08:02:25.810992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t^ self name',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3535' ],		#self : OmReference [ '3536' ],		#time : DateAndTime [ '2017-12-12T08:02:25.811992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #firstChild,			#protocol : #accessing,			#sourceCode : 'firstChild\r\t^ self children first',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3536' ],		#self : OmReference [ '3537' ],		#time : DateAndTime [ '2017-12-12T08:02:25.812992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ name',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3537' ],		#self : OmReference [ '3538' ],		#time : DateAndTime [ '2017-12-12T08:02:25.813992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: newName\r\tname := newName\r\t',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3538' ],		#self : OmReference [ '3539' ],		#time : DateAndTime [ '2017-12-12T08:02:25.814992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlElement,				#isMetaSide : false			},			#name : #secondChild,			#protocol : #accessing,			#sourceCode : 'secondChild\r\t^ self children second',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3539' ],		#self : OmReference [ '3540' ],		#time : DateAndTime [ '2017-12-12T08:02:25.817992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlText,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t^ self text trim',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3540' ],		#self : OmReference [ '3541' ],		#time : DateAndTime [ '2017-12-12T08:02:25.819992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlText,				#isMetaSide : false			},			#name : #'gtText:',			#protocol : #gt,			#sourceCode : 'gtText: composite\r\t<gtInspectorPresentationOrder: 40>\r\t\r\tcomposite text\r\t\ttitle: \'Text\';\r\t\tdisplay: [ :context | text ]\r',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3541' ],		#self : OmReference [ '3542' ],		#time : DateAndTime [ '2017-12-12T08:02:25.819992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlText,				#isMetaSide : false			},			#name : #text,			#protocol : #accessing,			#sourceCode : 'text\r\t^ text',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3542' ],		#self : OmReference [ '3543' ],		#time : DateAndTime [ '2017-12-12T08:02:25.820992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2HtmlText,				#isMetaSide : false			},			#name : #'text:',			#protocol : #accessing,			#sourceCode : 'text: anObject\r\ttext := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3543' ],		#self : OmReference [ '3544' ],		#time : DateAndTime [ '2017-12-12T08:02:25.822992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2JavascriptElement,				#isMetaSide : false			},			#name : #code,			#protocol : #accessing,			#sourceCode : 'code\r\t^ code',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3544' ],		#self : OmReference [ '3545' ],		#time : DateAndTime [ '2017-12-12T08:02:25.822992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2JavascriptElement,				#isMetaSide : false			},			#name : #'code:',			#protocol : #accessing,			#sourceCode : 'code: anObject\r\tcode := anObject',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3545' ],		#self : OmReference [ '3546' ],		#time : DateAndTime [ '2017-12-12T08:02:25.823992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2JavascriptElement,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t^ self code',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3546' ],		#self : OmReference [ '3547' ],		#time : DateAndTime [ '2017-12-12T08:02:25.825992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2JavascriptElement,				#isMetaSide : false			},			#name : #'gtText:',			#protocol : #gt,			#sourceCode : 'gtText: composite\r\t<gtInspectorPresentationOrder: 40>\r\t\r\tcomposite text\r\t\ttitle: \'Text\';\r\t\tdisplay: [ :context | code ]\r',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3547' ],		#self : OmReference [ '3548' ],		#time : DateAndTime [ '2017-12-12T08:02:25.826992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebElement,				#isMetaSide : false			},			#name : #allElements,			#protocol : #enumerating,			#sourceCode : 'allElements\r\t| result |\r\tresult := OrderedCollection new.\r\tself allElementsDo: [ :parser | result addLast: parser ].\r\t^ result',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3548' ],		#self : OmReference [ '3549' ],		#time : DateAndTime [ '2017-12-12T08:02:25.828992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebElement,				#isMetaSide : false			},			#name : #'allElementsDo:',			#protocol : #enumerating,			#sourceCode : 'allElementsDo: aBlock\r\t^ self allElementsDo: aBlock seen: IdentitySet new',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3549' ],		#self : OmReference [ '3550' ],		#time : DateAndTime [ '2017-12-12T08:02:25.829992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebElement,				#isMetaSide : false			},			#name : #'allElementsDo:seen:',			#protocol : #enumerating,			#sourceCode : 'allElementsDo: aBlock seen: aSet\r\t"\r\t\tIterate over all the parse nodes of the receiver, do not visit the ones contained in aSet.\r\t"\r\r\t(aSet includes: self) ifTrue: [ ^ self ].\r\taSet add: self.\r\t\r\taBlock value: self.\r\tself children do: [ :each | each allElementsDo: aBlock seen: aSet ]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3550' ],		#self : OmReference [ '3551' ],		#time : DateAndTime [ '2017-12-12T08:02:25.830992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebElement,				#isMetaSide : false			},			#name : #children,			#protocol : #accessing,			#sourceCode : 'children\r\t^ #()',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3551' ],		#self : OmReference [ '3552' ],		#time : DateAndTime [ '2017-12-12T08:02:25.831992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebElement,				#isMetaSide : false			},			#name : #displayText,			#protocol : #accessing,			#sourceCode : 'displayText\r\t\'abstract element\'',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3552' ],		#self : OmReference [ '3553' ],		#time : DateAndTime [ '2017-12-12T08:02:25.832992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebElement,				#isMetaSide : false			},			#name : #'gtTreeViewIn:',			#protocol : #gui,			#sourceCode : 'gtTreeViewIn: composite\r\t<gtInspectorPresentationOrder: 40>\r\r\tcomposite tree\r\t\t\ttitle: \'Tree\';\r\t\t\tchildren: [:n | n children ];\r\t\t\tformat: [:n| n displayText printStringLimitedTo: 50 ];\r\t\t\tshouldExpandToLevel: 6',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3553' ],		#self : OmReference [ '3554' ],		#time : DateAndTime [ '2017-12-12T08:02:25.833992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #any,			#protocol : #others,			#sourceCode : 'any\r\t^ #any asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3554' ],		#self : OmReference [ '3555' ],		#time : DateAndTime [ '2017-12-12T08:02:25.834992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #document,			#protocol : #accessing,			#sourceCode : 'document\r\t^ element sea',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3555' ],		#self : OmReference [ '3556' ],		#time : DateAndTime [ '2017-12-12T08:02:25.835992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #elClose,			#protocol : #element,			#sourceCode : 'elClose\r\t^ \'</\' asPParser, elementName match pop, $> asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3556' ],		#self : OmReference [ '3557' ],		#time : DateAndTime [ '2017-12-12T08:02:25.836992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #elContent,			#protocol : #element,			#sourceCode : 'elContent\r\t^ (javascript / element / rawText nonEpsilon)  star',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3557' ],		#self : OmReference [ '3558' ],		#time : DateAndTime [ '2017-12-12T08:02:25.837992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #elOpen,			#protocol : #element,			#sourceCode : 'elOpen\r\t^ $< asPParser, elementName push, #water asPParser, $> asPParser ==> #second',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3558' ],		#self : OmReference [ '3559' ],		#time : DateAndTime [ '2017-12-12T08:02:25.839992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #elWater,			#protocol : #element,			#sourceCode : 'elWater\r\t^ identifier / whitespaces / any',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3559' ],		#self : OmReference [ '3560' ],		#time : DateAndTime [ '2017-12-12T08:02:25.840992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #element,			#protocol : #accessing,			#sourceCode : 'element\r\t^ (elOpen, elContent, elClose)\r\t\tmemoize;\r\t\tyourself\r\t',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3560' ],		#self : OmReference [ '3561' ],		#time : DateAndTime [ '2017-12-12T08:02:25.841992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #elementName,			#protocol : #element,			#sourceCode : 'elementName\r\t^ #word asPParser plus flatten',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3561' ],		#self : OmReference [ '3562' ],		#time : DateAndTime [ '2017-12-12T08:02:25.842992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #identifier,			#protocol : #others,			#sourceCode : 'identifier\r\t^ #letter asPParser, #word asPParser plus',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3562' ],		#self : OmReference [ '3563' ],		#time : DateAndTime [ '2017-12-12T08:02:25.844992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #javascript,			#protocol : #javascript,			#sourceCode : 'javascript\r\t^ (jsOpen, jsContent, jsClose)',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3563' ],		#self : OmReference [ '3564' ],		#time : DateAndTime [ '2017-12-12T08:02:25.845992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsClose,			#protocol : #javascript,			#sourceCode : 'jsClose\r\t^ \'</script>\' asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3564' ],		#self : OmReference [ '3565' ],		#time : DateAndTime [ '2017-12-12T08:02:25.846992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsContent,			#protocol : #javascript,			#sourceCode : 'jsContent\r\t^ #epsilon asPParser sea \r\t\twaterToken: jsWater;\r\t\tflatten',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3565' ],		#self : OmReference [ '3566' ],		#time : DateAndTime [ '2017-12-12T08:02:25.847992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsDoubleQuoteString,			#protocol : #javascript,			#sourceCode : 'jsDoubleQuoteString\r\t^ $" asPParser, #water asPParser, $" asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3566' ],		#self : OmReference [ '3567' ],		#time : DateAndTime [ '2017-12-12T08:02:25.849992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsOpen,			#protocol : #javascript,			#sourceCode : 'jsOpen\r\t^ (\'<script type=\' asPParser, jsTypeString, \'>\' asPParser) /\r\t  (\'<script>\' asPParser)',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3567' ],		#self : OmReference [ '3568' ],		#time : DateAndTime [ '2017-12-12T08:02:25.850992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsSingleQuoteString,			#protocol : #javascript,			#sourceCode : 'jsSingleQuoteString\r\t^ $\' asPParser, #water asPParser, $\' asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3568' ],		#self : OmReference [ '3569' ],		#time : DateAndTime [ '2017-12-12T08:02:25.851992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsString,			#protocol : #javascript,			#sourceCode : 'jsString\r\t^ jsDoubleQuoteString / jsSingleQuoteString',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3569' ],		#self : OmReference [ '3570' ],		#time : DateAndTime [ '2017-12-12T08:02:25.852992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsType,			#protocol : #javascript,			#sourceCode : 'jsType\r\t^ \'text/javascript\' asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3570' ],		#self : OmReference [ '3571' ],		#time : DateAndTime [ '2017-12-12T08:02:25.853992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsTypeString,			#protocol : #javascript,			#sourceCode : 'jsTypeString\r\t^ ($" asPParser, jsType, $" asPParser) /\r\t  ($\' asPParser, jsType, $\' asPParser)',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3571' ],		#self : OmReference [ '3572' ],		#time : DateAndTime [ '2017-12-12T08:02:25.854992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #jsWater,			#protocol : #javascript,			#sourceCode : 'jsWater\r\t^ identifier / jsString / whitespaces / any',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3572' ],		#self : OmReference [ '3573' ],		#time : DateAndTime [ '2017-12-12T08:02:25.855992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #rawText,			#protocol : #element,			#sourceCode : 'rawText\r\t^ #water asPParser',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3573' ],		#self : OmReference [ '3574' ],		#time : DateAndTime [ '2017-12-12T08:02:25.857992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start\r\t^ document',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3574' ],		#self : OmReference [ '3575' ],		#time : DateAndTime [ '2017-12-12T08:02:25.858992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammar,				#isMetaSide : false			},			#name : #whitespaces,			#protocol : #others,			#sourceCode : 'whitespaces\r\t^ #space asPParser plus',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3575' ],		#self : OmReference [ '3576' ],		#time : DateAndTime [ '2017-12-12T08:02:25.860992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParser,				#isMetaSide : false			},			#name : #document,			#protocol : #'as yet unclassified',			#sourceCode : 'document\r\t^ super document\r\t\r\tmap: [ :_bw :_document :_aw |\r\t\t| beforeWater afterWater |\r\t\tbeforeWater := PP2HtmlText new\r\t\t\ttext: _bw;\r\t\t\tyourself.\r\t\t\t\r\t\tafterWater := PP2HtmlText new\r\t\t\ttext: _aw;\r\t\t\tyourself.\r\t\t\t\r\t\tPP2HtmlElement new\r\t\t\tname: \'ROOT\';\r\t\t\tchildren: (Array with: beforeWater with: _document with: afterWater);\r\t\t\tyourself\r\t\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3576' ],		#self : OmReference [ '3577' ],		#time : DateAndTime [ '2017-12-12T08:02:25.861992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParser,				#isMetaSide : false			},			#name : #elClose,			#protocol : #element,			#sourceCode : 'elClose\r\t^ super elClose trim',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3577' ],		#self : OmReference [ '3578' ],		#time : DateAndTime [ '2017-12-12T08:02:25.862992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParser,				#isMetaSide : false			},			#name : #elOpen,			#protocol : #element,			#sourceCode : 'elOpen\r\t^ super elOpen trim',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3578' ],		#self : OmReference [ '3579' ],		#time : DateAndTime [ '2017-12-12T08:02:25.863992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParser,				#isMetaSide : false			},			#name : #element,			#protocol : #element,			#sourceCode : 'element\r\t^ super element \r\t\r\tmap: [ :_open :_content :_close | \r\t \t(PP2HtmlElement new)\r\t\t\tname: _open;\r\t\t\tchildren: _content;\r\t\t\tyourself\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3579' ],		#self : OmReference [ '3580' ],		#time : DateAndTime [ '2017-12-12T08:02:25.864992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParser,				#isMetaSide : false			},			#name : #javascript,			#protocol : #javascript,			#sourceCode : 'javascript\r\t^ super javascript \r\t\r\tmap: [ :_open :_content :_close | \r\t \t(PP2JavascriptElement new)\r\t\t\tcode: _content;\r\t\t\tyourself\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3580' ],		#self : OmReference [ '3581' ],		#time : DateAndTime [ '2017-12-12T08:02:25.865992+08:00' ],		#trigger : OmReference [ '3521' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParser,				#isMetaSide : false			},			#name : #rawText,			#protocol : #element,			#sourceCode : 'rawText\r\t^ super rawText \r\t\r\tmap: [ :_value | \r\t\tPP2HtmlText new\r\t\t\ttext: _value;\r\t\t\tyourself\t\r\t]',			#stamp : ' 12/12/2017 07:58:42',			#package : #PetitParser2-Html		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T08:02:25.973992+08:00' ],		#prior : OmReference [ '3581' ],		#self : OmReference [ '3582' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'PetitParser2-Html-Tests-JanKurs.6'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3582' ],		#self : OmReference [ '3583' ],		#time : DateAndTime [ '2017-12-12T08:02:26.034992+08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #PetitParser2-Html-Tests-Core,		#affectedPackageName : #PetitParser2-Html-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3583' ],		#self : OmReference [ '3584' ],		#time : DateAndTime [ '2017-12-12T08:02:26.037992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNodeTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNodeTest subclass: #PP2WebPageGrammarTest\r\tinstanceVariableNames: \'context input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-Tests-Core\''			},			#name : #PP2WebPageGrammarTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammarTest,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PP2WebPageGrammarTest,						#isMetaSide : false					},					#name : #input,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WebPageGrammarTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WebPageGrammarTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WebPageGrammarTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-Tests-Core,			#package : #PetitParser2-Html-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3584' ],		#self : OmReference [ '3585' ],		#time : DateAndTime [ '2017-12-12T08:02:26.096992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #assertions,			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3585' ],		#self : OmReference [ '3586' ],		#time : DateAndTime [ '2017-12-12T08:02:26.138992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #assertions,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3586' ],		#self : OmReference [ '3587' ],		#time : DateAndTime [ '2017-12-12T08:02:26.139992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #assertions,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3587' ],		#self : OmReference [ '3588' ],		#time : DateAndTime [ '2017-12-12T08:02:26.139992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #assertions,			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3588' ],		#self : OmReference [ '3589' ],		#time : DateAndTime [ '2017-12-12T08:02:26.142992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : 'TPP2TypeAssertions',				#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''			},			#name : #TPP2WebPageParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : 'TPP2TypeAssertions classTrait',					#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: TPP2TypeAssertions classTrait'				},				#name : #'TPP2WebPageParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2WebPageParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Html-Tests-Core,			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3589' ],		#self : OmReference [ '3590' ],		#time : DateAndTime [ '2017-12-12T08:02:26.153992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpTraitModification {		#oldTrait : RGMetatraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : 'TPP2TypeAssertions classTrait',				#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: TPP2TypeAssertions classTrait'			},			#name : #'TPP2WebPageParserTest classTrait',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#baseClass : RGTraitDefinition {				#annotations : IdentityDictionary {					#superclassName : #Trait,					#traitCompositionSource : 'TPP2TypeAssertions',					#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''				},				#name : #TPP2WebPageParserTest,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#metaClass : @8,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #TPP2WebPageParserTest,						#isMetaSide : false					},					#parent : @12,					#content : ''				},				#category : #PetitParser2-Html-Tests-Core,				#package : #PetitParser2-Html-Tests			}		},		#newTrait : RGMetatraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : 'TPP2TypeAssertions classTrait',				#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: TPP2TypeAssertions classTrait'			},			#name : #'TPP2WebPageParserTest classTrait',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#baseClass : RGTraitDefinition {				#annotations : IdentityDictionary {					#superclassName : #Trait,					#traitCompositionSource : 'TPP2TypeAssertions',					#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''				},				#name : #TPP2WebPageParserTest,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#metaClass : @18,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #TPP2WebPageParserTest,						#isMetaSide : false					},					#parent : @22,					#content : ''				},				#category : #PetitParser2-Html-Tests-Core,				#package : #PetitParser2-Html-Tests			}		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3590' ],		#self : OmReference [ '3591' ],		#time : DateAndTime [ '2017-12-12T08:02:27.158992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WebPageGrammarTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WebPageGrammarTest subclass: #PP2WebPageParserTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-Tests-Core\''			},			#name : #PP2WebPageParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WebPageParserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WebPageParserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WebPageParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-Tests-Core,			#package : #PetitParser2-Html-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3591' ],		#self : OmReference [ '3592' ],		#time : DateAndTime [ '2017-12-12T08:02:27.203992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #assertions,			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3592' ],		#self : OmReference [ '3593' ],		#time : DateAndTime [ '2017-12-12T08:02:27.245992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #assertions,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3593' ],		#self : OmReference [ '3594' ],		#time : DateAndTime [ '2017-12-12T08:02:27.792992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2WebPageGrammarTest',				#traitCompositionSource : '{}',				#definitionSource : 'PP2WebPageGrammarTest subclass: #PP2WebPageParserTest_Optimized\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Html-Tests-Core\''			},			#name : #PP2WebPageParserTest_Optimized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PP2WebPageParserTest_Optimized class\r\tinstanceVariableNames: \'\''				},				#name : #'PP2WebPageParserTest_Optimized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PP2WebPageParserTest_Optimized,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Html-Tests-Core,			#package : #PetitParser2-Html-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3594' ],		#self : OmReference [ '3595' ],		#time : DateAndTime [ '2017-12-12T08:02:27.878992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #'deny:isKindOf:',			#protocol : #assertions,			#sourceCode : 'deny: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass) not',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3595' ],		#self : OmReference [ '3596' ],		#time : DateAndTime [ '2017-12-12T08:02:27.928992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #'as yet unclassified',			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #'assert:isKindOf:',			#protocol : #assertions,			#sourceCode : 'assert: anObject isKindOf: aClass\r\tself assert: (anObject isKindOf: aClass)',			#stamp : '',			#package : #PetitParser2-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3596' ],		#self : OmReference [ '3597' ],		#time : DateAndTime [ '2017-12-12T08:02:28.096992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpTraitModification {		#oldTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : 'TPP2TypeAssertions',				#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''			},			#name : #TPP2WebPageParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: {}'				},				#name : #'TPP2WebPageParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2WebPageParserTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #PetitParser2-Html-Tests-Core,			#package : #PetitParser2-Html-Tests		},		#newTrait : RGTraitDefinition {			#annotations : IdentityDictionary {				#superclassName : #Trait,				#traitCompositionSource : 'TPP2TypeAssertions',				#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''			},			#name : #TPP2WebPageParserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : 'TPP2TypeAssertions classTrait',					#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: TPP2TypeAssertions classTrait'				},				#name : #'TPP2WebPageParserTest classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @18			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TPP2WebPageParserTest,					#isMetaSide : false				},				#parent : @18,				#content : ''			},			#category : #PetitParser2-Html-Tests-Core,			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3597' ],		#self : OmReference [ '3598' ],		#time : DateAndTime [ '2017-12-12T08:02:28.098992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpTraitModification {		#oldTrait : RGMetatraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : 'TPP2TypeAssertions classTrait',				#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: TPP2TypeAssertions classTrait'			},			#name : #'TPP2WebPageParserTest classTrait',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#baseClass : RGTraitDefinition {				#annotations : IdentityDictionary {					#superclassName : #Trait,					#traitCompositionSource : 'TPP2TypeAssertions',					#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''				},				#name : #TPP2WebPageParserTest,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#metaClass : @8,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #TPP2WebPageParserTest,						#isMetaSide : false					},					#parent : @12,					#content : ''				},				#category : #PetitParser2-Html-Tests-Core,				#package : #PetitParser2-Html-Tests			}		},		#newTrait : RGMetatraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : 'TPP2TypeAssertions classTrait',				#definitionSource : 'TPP2WebPageParserTest classTrait\r\tuses: TPP2TypeAssertions classTrait'			},			#name : #'TPP2WebPageParserTest classTrait',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#baseClass : RGTraitDefinition {				#annotations : IdentityDictionary {					#superclassName : #Trait,					#traitCompositionSource : 'TPP2TypeAssertions',					#definitionSource : 'Trait named: #TPP2WebPageParserTest\r\tuses: TPP2TypeAssertions\r\tcategory: \'PetitParser2-Html-Tests-Core\''				},				#name : #TPP2WebPageParserTest,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#metaClass : @18,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #TPP2WebPageParserTest,						#isMetaSide : false					},					#parent : @22,					#content : ''				},				#category : #PetitParser2-Html-Tests-Core,				#package : #PetitParser2-Html-Tests			}		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3598' ],		#self : OmReference [ '3599' ],		#time : DateAndTime [ '2017-12-12T08:02:29.048992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\tcontext isNil ifTrue: [ \r\t\tcontext := super context\r\t].\r\r\t^ context',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3599' ],		#self : OmReference [ '3600' ],		#time : DateAndTime [ '2017-12-12T08:02:29.051992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2WebPageGrammar ',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3600' ],		#self : OmReference [ '3601' ],		#time : DateAndTime [ '2017-12-12T08:02:29.054992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testDocument,			#protocol : #'tests - document',			#sourceCode : 'testDocument\r\tinput := \'<html>\r\t\t<body>\r\t\t\t<script type="text/javascript">alert("hello world")</script>\r\t\t</body>\r\t</html>\'.\r\t\r\tself parse: input rule: #document',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3601' ],		#self : OmReference [ '3602' ],		#time : DateAndTime [ '2017-12-12T08:02:29.055992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testDocument2,			#protocol : #'tests - document',			#sourceCode : 'testDocument2\r\tinput := \'\r<!DOCTYPE html>\r<!-- comment -->\r<html>\r\t<meta content="origin" name="referrer">\r\r\t<body>\r\t\t<script type="text/javascript">alert("hello world")</script>\r\t</body>\r</html>\'.\r\t\r\tself parse: input rule: #document',			#stamp : 'JanKurs 11/2/2016 14:17',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3602' ],		#self : OmReference [ '3603' ],		#time : DateAndTime [ '2017-12-12T08:02:29.056992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testDocument3,			#protocol : #'tests - document',			#sourceCode : 'testDocument3\r\tinput := \'\r<!DOCTYPE html>\r<!-- comment -->\r<html>\r\t<meta content="origin" name="referrer">\r\r\t<body>\r\t\t<div>foobar</div>\r\t\t<div>bar<span>baz</span></div>\r\t</body>\r</html>\'.\r\t\r\tself parse: input rule: #document',			#stamp : 'JanKurs 11/2/2016 14:18',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3603' ],		#self : OmReference [ '3604' ],		#time : DateAndTime [ '2017-12-12T08:02:29.058992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testDocument4,			#protocol : #'tests - document',			#sourceCode : 'testDocument4\r\tinput := \'\r<html>\r\t<head>\r\t<meta content="text/mess">\r\t<meta content="text/mess">\r\t</head>\r\t<body>\r\t</body>\r</html>\'.\r\t\r\tself parse: input rule: #document',			#stamp : 'JanKurs 11/4/2016 18:28',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3604' ],		#self : OmReference [ '3605' ],		#time : DateAndTime [ '2017-12-12T08:02:29.059992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElClose,			#protocol : #'tests - element',			#sourceCode : 'testElClose\r\tself context defaultStack push: \'foo\'.\r\tself parse: \'</foo>\' rule: #elClose',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3605' ],		#self : OmReference [ '3606' ],		#time : DateAndTime [ '2017-12-12T08:02:29.060992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElContent,			#protocol : #'tests - element',			#sourceCode : 'testElContent\r\tself parse: \'\' rule: #elContent.\r\tself parse: \'foobar\' rule: #elContent.\r\tself parse: \'<script type="text/javascript">eh</script>\' rule: #elContent.',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3606' ],		#self : OmReference [ '3607' ],		#time : DateAndTime [ '2017-12-12T08:02:29.061992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElOpen,			#protocol : #'tests - element',			#sourceCode : 'testElOpen\r\tself parse: \'<foo id="bar">\' rule: #elOpen',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3607' ],		#self : OmReference [ '3608' ],		#time : DateAndTime [ '2017-12-12T08:02:29.062992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElement,			#protocol : #tests,			#sourceCode : 'testElement\r\tself parse: \'<p>lorem ipsum</p>\' rule: #element',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3608' ],		#self : OmReference [ '3609' ],		#time : DateAndTime [ '2017-12-12T08:02:29.063992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElementEmpty,			#protocol : #'tests - element',			#sourceCode : 'testElementEmpty\r\tself parse: \'<foo></foo>\' rule: #element',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3609' ],		#self : OmReference [ '3610' ],		#time : DateAndTime [ '2017-12-12T08:02:29.065992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformed,			#protocol : #'tests - element',			#sourceCode : 'testElementMalformed\r\tself parse: \'<foo><bar>meh</baz></foo>\' rule: #element.',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3610' ],		#self : OmReference [ '3611' ],		#time : DateAndTime [ '2017-12-12T08:02:29.066992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformedExtraClose,			#protocol : #tests,			#sourceCode : 'testElementMalformedExtraClose\r\tself parse: \'<foo><bar>meh</bar></fii></foo>\' rule: #element',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3611' ],		#self : OmReference [ '3612' ],		#time : DateAndTime [ '2017-12-12T08:02:29.067992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformedSwapped,			#protocol : #tests,			#sourceCode : 'testElementMalformedSwapped\r\tself fail: \'<foo><bar>meh</foo></bar>\' rule: #element',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3612' ],		#self : OmReference [ '3613' ],		#time : DateAndTime [ '2017-12-12T08:02:29.069992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElementMalformedUnclosed,			#protocol : #'tests - element',			#sourceCode : 'testElementMalformedUnclosed\r\tself parse: \'<head><meta content="mess"></head>\' rule: #element.',			#stamp : 'JanKurs 11/8/2016 08:47',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3613' ],		#self : OmReference [ '3614' ],		#time : DateAndTime [ '2017-12-12T08:02:29.070992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testElementNested,			#protocol : #tests,			#sourceCode : 'testElementNested\r\tself parse: \'<p>lorem <i>ipsum</i></p>\' rule: #element',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3614' ],		#self : OmReference [ '3615' ],		#time : DateAndTime [ '2017-12-12T08:02:29.071992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testJavascript,			#protocol : #'tests - javascript',			#sourceCode : 'testJavascript\r\tself parse: \'<script type=\'\'text/javascript\'\'>alert(1+2)</script>\' rule: #javascript',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3615' ],		#self : OmReference [ '3616' ],		#time : DateAndTime [ '2017-12-12T08:02:29.072992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testJavascriptContentString,			#protocol : #'tests - javascript',			#sourceCode : 'testJavascriptContentString\r\tself parse: \'alert("foobar")\' rule: #jsContent.\r\tself parse: \'alert("</script>")\' rule: #jsContent\t',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3616' ],		#self : OmReference [ '3617' ],		#time : DateAndTime [ '2017-12-12T08:02:29.073992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testJavascriptShort,			#protocol : #'tests - javascript',			#sourceCode : 'testJavascriptShort\r\tself parse: \'<script>alert(1+2)</script>\' rule: #javascript',			#stamp : 'JanKurs 11/4/2016 21:02',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3617' ],		#self : OmReference [ '3618' ],		#time : DateAndTime [ '2017-12-12T08:02:29.074992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testJavascriptWithString,			#protocol : #'tests - javascript',			#sourceCode : 'testJavascriptWithString\r\tself parse: \'<script type=\'\'text/javascript\'\'>alert("</script>")</script>\' rule: #javascript',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3618' ],		#self : OmReference [ '3619' ],		#time : DateAndTime [ '2017-12-12T08:02:29.076992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testJsDoubleQuoteStringJavascript,			#protocol : #'tests - javascript',			#sourceCode : 'testJsDoubleQuoteStringJavascript\r\tself parse: \'"Hello World!"\' rule: #jsDoubleQuoteString\t.\r\tself parse: \'"</script>"\' rule: #jsDoubleQuoteString',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3619' ],		#self : OmReference [ '3620' ],		#time : DateAndTime [ '2017-12-12T08:02:29.077992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageGrammarTest,				#isMetaSide : false			},			#name : #testRawText,			#protocol : #tests,			#sourceCode : 'testRawText\r\tself parse: \'foobar\' rule: #rawText',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3620' ],		#self : OmReference [ '3621' ],		#time : DateAndTime [ '2017-12-12T08:02:29.078992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2WebPageParser ',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3621' ],		#self : OmReference [ '3622' ],		#time : DateAndTime [ '2017-12-12T08:02:29.080992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #result,			#protocol : #accessing,			#sourceCode : 'result\r\t^ result',			#stamp : 'JanKurs 11/2/2016 15:17',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3622' ],		#self : OmReference [ '3623' ],		#time : DateAndTime [ '2017-12-12T08:02:29.081992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #'scripts:',			#protocol : #accessing,			#sourceCode : 'scripts: rootElement\r\t^ rootElement allElements select: [ :e | e isKindOf: PP2JavascriptElement  ]',			#stamp : 'JanKurs 11/8/2016 08:53',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3623' ],		#self : OmReference [ '3624' ],		#time : DateAndTime [ '2017-12-12T08:02:29.082992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testElement,			#protocol : #tests,			#sourceCode : 'testElement\r\tsuper testElement.\r\t\r\tself assert: result name equals: \'p\'.\r\tself assert: result firstChild text equals: \'lorem ipsum\'',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3624' ],		#self : OmReference [ '3625' ],		#time : DateAndTime [ '2017-12-12T08:02:29.083992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testElementEmpty,			#protocol : #tests,			#sourceCode : 'testElementEmpty\r\tsuper testElementEmpty.\r\t\r\tself assert: result name equals: \'foo\'.',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3625' ],		#self : OmReference [ '3626' ],		#time : DateAndTime [ '2017-12-12T08:02:29.084992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testElementMalformed,			#protocol : #tests,			#sourceCode : 'testElementMalformed\r\tsuper testElementMalformed.\r\t\r\tself assert: result name equals: \'foo\'.\r\tself assert: result firstChild text equals: \'<bar>meh</baz>\'',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3626' ],		#self : OmReference [ '3627' ],		#time : DateAndTime [ '2017-12-12T08:02:29.086992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testElementMalformedExtraClose,			#protocol : #tests,			#sourceCode : 'testElementMalformedExtraClose\r\tsuper testElementMalformedExtraClose.\r\t\r\tself assert: result name equals: \'foo\'.\r\tself assert: result secondChild text equals: \'</fii>\'',			#stamp : ' 10/31/2016 15:27:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3627' ],		#self : OmReference [ '3628' ],		#time : DateAndTime [ '2017-12-12T08:02:29.087992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testElementMalformedUnclosed,			#protocol : #tests,			#sourceCode : 'testElementMalformedUnclosed\r\tsuper testElementMalformedUnclosed.\r\t\r\tself assert: result name equals: \'head\'.\r\tself assert: result firstChild text trim equals: \'<meta content="mess">\'',			#stamp : 'JanKurs 11/8/2016 08:48',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3628' ],		#self : OmReference [ '3629' ],		#time : DateAndTime [ '2017-12-12T08:02:29.088992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testElementNested,			#protocol : #tests,			#sourceCode : 'testElementNested\r\tsuper testElementNested.\r\t\r\tself assert: result name equals: \'p\'.\r\tself assert: result firstChild text trim equals: \'lorem\'.\r\tself assert: result secondChild name equals: \'i\'.\r\tself assert: result secondChild firstChild text equals: \'ipsum\'',			#stamp : 'JanKurs 11/2/2016 11:59',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3629' ],		#self : OmReference [ '3630' ],		#time : DateAndTime [ '2017-12-12T08:02:29.090992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testJavascript,			#protocol : #tests,			#sourceCode : 'testJavascript\r\tsuper testJavascript.\r\t\r\tself assert: result isKindOf: PP2JavascriptElement.\r\tself assert: result code equals: \'alert(1+2)\'',			#stamp : 'JanKurs 11/8/2016 08:53',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3630' ],		#self : OmReference [ '3631' ],		#time : DateAndTime [ '2017-12-12T08:02:29.091992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testJavascriptWithString,			#protocol : #tests,			#sourceCode : 'testJavascriptWithString\r\tsuper testJavascriptWithString.\r\t\r\tself assert: result isKindOf: PP2JavascriptElement.\r\tself assert: result code equals: \'alert("</script>")\'',			#stamp : 'JanKurs 11/8/2016 08:53',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3631' ],		#self : OmReference [ '3632' ],		#time : DateAndTime [ '2017-12-12T08:02:29.092992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest,				#isMetaSide : false			},			#name : #testRawText,			#protocol : #tests,			#sourceCode : 'testRawText\r\tsuper testRawText.\r\t\r\tself assert: result isKindOf: PP2HtmlText.\r\tself assert: result text equals: \'foobar\'.',			#stamp : 'JanKurs 11/8/2016 08:53',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3632' ],		#self : OmReference [ '3633' ],		#time : DateAndTime [ '2017-12-12T08:02:29.093992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass\r\t^ PP2WebPageParser ',			#stamp : 'JanKurs 11/2/2016 15:19',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3633' ],		#self : OmReference [ '3634' ],		#time : DateAndTime [ '2017-12-12T08:02:29.094992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #'parserInstanceFor:',			#protocol : #accessing,			#sourceCode : 'parserInstanceFor: aSymbol\r\t^ (super parserInstanceFor: aSymbol) optimize;\r\t\tresetCaches;\r\t\tyourself',			#stamp : 'JanKurs 11/2/2016 16:09',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3634' ],		#self : OmReference [ '3635' ],		#time : DateAndTime [ '2017-12-12T08:02:29.095992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #result,			#protocol : #accessing,			#sourceCode : 'result\r\t^ result',			#stamp : 'JanKurs 11/2/2016 15:18',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3635' ],		#self : OmReference [ '3636' ],		#time : DateAndTime [ '2017-12-12T08:02:29.097992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PP2WebPageParserTest_Optimized,				#isMetaSide : false			},			#name : #'scripts:',			#protocol : #accessing,			#sourceCode : 'scripts: rootElement\r\t^ rootElement allElements select: [ :e | e isKindOf: PP2JavascriptElement  ]',			#stamp : 'JanKurs 11/8/2016 08:53',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3636' ],		#self : OmReference [ '3637' ],		#time : DateAndTime [ '2017-12-12T08:02:29.101992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #result,			#protocol : #accessing,			#sourceCode : 'result\r\tself explicitRequirement',			#stamp : 'JanKurs 11/2/2016 15:17',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3637' ],		#self : OmReference [ '3638' ],		#time : DateAndTime [ '2017-12-12T08:02:29.102992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #'scripts:',			#protocol : #accessing,			#sourceCode : 'scripts: rootElement\r\t^ rootElement allElements select: [ :e | e isKindOf: JavascriptElement  ]',			#stamp : 'JanKurs 11/2/2016 15:16',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3638' ],		#self : OmReference [ '3639' ],		#time : DateAndTime [ '2017-12-12T08:02:29.103992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #testDocument,			#protocol : #'tests - document',			#sourceCode : 'testDocument\r\t| scripts |\r\tsuper testDocument.\r\t\r\tscripts := self scripts: self result.\r\tself assert: scripts size equals: 1.\r\tself assert: scripts first code equals: \'alert("hello world")\'',			#stamp : 'JanKurs 11/2/2016 15:17',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3639' ],		#self : OmReference [ '3640' ],		#time : DateAndTime [ '2017-12-12T08:02:29.104992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #testDocument2,			#protocol : #'tests - document',			#sourceCode : 'testDocument2\r\t| scripts htmlElement |\r\tsuper testDocument2.\r\t\r\tscripts := self scripts: self result.\r\tself assert: scripts size equals: 1.\r\tself assert: scripts first code equals: \'alert("hello world")\'.\r\t\r\thtmlElement := self result secondChild.\r\tself assert: htmlElement name equals: \'html\'.\r\tself assert: htmlElement children size equals: 2.\r\tself assert: htmlElement firstChild isKindOf: PP2HtmlText.\r\tself assert: htmlElement secondChild name equals: \'body\'.',			#stamp : 'JanKurs 9/3/2017 16:37',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3640' ],		#self : OmReference [ '3641' ],		#time : DateAndTime [ '2017-12-12T08:02:29.105992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #testDocument3,			#protocol : #'tests - document',			#sourceCode : 'testDocument3\r\t| htmlElement bodyElement |\r\tsuper testDocument3.\r\t\r\thtmlElement := self result secondChild.\r\tself assert: htmlElement name equals: \'html\'.\r\tself assert: htmlElement children size equals: 2.\r\tself assert: htmlElement secondChild name equals: \'body\'.\r\t\r\tbodyElement := htmlElement secondChild.\r\tself assert: bodyElement children size equals: 2.\r\tself assert: bodyElement secondChild secondChild name equals: \'span\'.',			#stamp : 'JanKurs 11/2/2016 15:17',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3641' ],		#self : OmReference [ '3642' ],		#time : DateAndTime [ '2017-12-12T08:02:29.106992+08:00' ],		#trigger : OmReference [ '3582' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TPP2WebPageParserTest,				#isMetaSide : false			},			#name : #testDocument4,			#protocol : #'tests - document',			#sourceCode : 'testDocument4\r\t| htmlElement |\r\tsuper testDocument4.\r\t\r\thtmlElement := self result secondChild.\r\tself assert: htmlElement name equals: \'html\'.\r\tself assert: htmlElement firstChild name equals: \'head\'.',			#stamp : 'JanKurs 11/4/2016 18:25',			#package : #PetitParser2-Html-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-12-12T10:32:26.718992+08:00' ],		#prior : OmReference [ '3642' ],		#self : OmReference [ '3643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PP2CompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'PP2CompositeNode subclass: #WebGrammars\r\tinstanceVariableNames: \'document javascript elOpen elContent elClose elementName element text jsOpen jsContent jsClose jsString structuredDocument comment any\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser2-Tutorial\''			},			#name : #WebGrammars,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #document,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #javascript,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #elOpen,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #elContent,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #elClose,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #elementName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #element,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #text,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #jsOpen,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #jsContent,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #jsClose,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #jsString,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #structuredDocument,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #comment,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WebGrammars,						#isMetaSide : false					},					#name : #any,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebGrammars class\r\tinstanceVariableNames: \'\''				},				#name : #'WebGrammars class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebGrammars,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser2-Tutorial,			#package : #PetitParser2-Tutorial,			#sharedPools : OrderedCollection [ ]		}	}}